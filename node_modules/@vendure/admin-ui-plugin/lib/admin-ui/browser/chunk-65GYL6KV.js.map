{
  "version": 3,
  "sources": ["src/lib/login/src/components/login/login.component.ts", "src/lib/login/src/components/login/login.component.html", "src/lib/login/src/providers/login.guard.ts", "src/lib/login/src/login.routes.ts", "src/lib/login/src/login.module.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    ADMIN_UI_VERSION,\n    AuthService,\n    AUTH_REDIRECT_PARAM,\n    getAppConfig,\n    LocalizationDirectionType,\n    LocalizationService,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n    standalone: false,\n})\nexport class LoginComponent implements OnInit {\n    direction$: LocalizationDirectionType;\n\n    username = '';\n    password = '';\n    rememberMe = false;\n    version = ADMIN_UI_VERSION;\n    errorMessage: string | undefined;\n    brand = getAppConfig().brand;\n    hideVendureBranding = getAppConfig().hideVendureBranding;\n    customImageUrl = getAppConfig().loginImageUrl;\n    imageUrl = '';\n    imageUnsplashUrl = '';\n    imageLocation = '';\n    imageCreator = '';\n    imageCreatorUrl = '';\n\n    constructor(\n        private authService: AuthService,\n        private router: Router,\n        private httpClient: HttpClient,\n        private localizationService: LocalizationService,\n    ) {\n        if (this.customImageUrl) {\n            this.imageUrl = this.customImageUrl;\n        } else {\n            this.loadImage();\n        }\n    }\n    ngOnInit(): void {\n        this.direction$ = this.localizationService.direction$;\n    }\n\n    logIn(): void {\n        this.errorMessage = undefined;\n        this.authService.logIn(this.username, this.password, this.rememberMe).subscribe(result => {\n            switch (result.__typename) {\n                case 'CurrentUser':\n                    const redirect = this.getRedirectRoute();\n                    this.router.navigateByUrl(redirect ? redirect : '/');\n                    break;\n                case 'InvalidCredentialsError':\n                case 'NativeAuthStrategyError':\n                    this.errorMessage = result.message;\n                    break;\n            }\n        });\n    }\n\n    loadImage() {\n        this.httpClient\n            .get('https://login-image.vendure.io')\n            .toPromise()\n            .then(res => {\n                this.updateImage(res);\n            });\n    }\n\n    updateImage(res: any) {\n        const user: any = (res as any).user;\n        const location: any = (res as any).location;\n\n        this.imageUrl = res.urls.regular + '?utm_source=Vendure+Login+Image&utm_medium=referral';\n        this.imageCreator = user.name;\n        this.imageLocation = location.name;\n        this.imageCreatorUrl = user.links.html + '?utm_source=Vendure+Login+Image&utm_medium=referral';\n        this.imageUnsplashUrl = res.links.html;\n    }\n\n    /**\n     * Attempts to read a redirect param from the current url and parse it into a\n     * route from which the user was redirected after a 401 error.\n     */\n    private getRedirectRoute(): string | undefined {\n        let redirectTo: string | undefined;\n        const re = new RegExp(`${AUTH_REDIRECT_PARAM}=(.*)`);\n        try {\n            const redirectToParam = window.location.search.match(re);\n            if (redirectToParam && 1 < redirectToParam.length) {\n                redirectTo = atob(decodeURIComponent(redirectToParam[1]));\n            }\n        } catch (e: any) {\n            // ignore\n        }\n        return redirectTo;\n    }\n}\n", "<div class=\"login-wrapper\" [dir]=\"direction$ | async\">\n    <div class=\"login-wrapper-inner\">\n        <div class=\"login-wrapper-image\">\n            <div class=\"login-wrapper-image-content\">\n                <div class=\"login-wrapper-image-title\">\n                    {{ 'common.login-image-title' | translate }}\n                </div>\n                <div class=\"login-wrapper-image-copyright\">\n                    <p *ngIf=\"imageCreator\" class=\"creator\">\n                        Photo by <a [href]=\"imageCreatorUrl\" target=\"_blank\">{{ imageCreator }}</a> on\n                        <a [href]=\"imageUnsplashUrl\" target=\"_blank\">Unsplash</a>\n                    </p>\n                    <p *ngIf=\"imageLocation\" class=\"location\">{{ imageLocation }}</p>\n                </div>\n            </div>\n            <img *ngIf=\"imageUrl\" [src]=\"imageUrl\" [alt]=\"imageUrl\" />\n        </div>\n        <div class=\"login-wrapper-form\">\n            <p class=\"login-title\">\n                {{ 'common.login-title' | translate : { brand: hideVendureBranding ? brand : 'Vendure' } }}\n            </p>\n            <form class=\"login-form\">\n                <div class=\"login-group\">\n                    <input\n                        class=\"username\"\n                        type=\"text\"\n                        name=\"username\"\n                        id=\"login_username\"\n                        [(ngModel)]=\"username\"\n                        [placeholder]=\"'common.username' | translate\"\n                    />\n                    <input\n                        class=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        id=\"login_password\"\n                        [(ngModel)]=\"password\"\n                        [placeholder]=\"'common.password' | translate\"\n                    />\n                    <clr-alert\n                        [clrAlertType]=\"'danger'\"\n                        [clrAlertClosable]=\"false\"\n                        [class.visible]=\"errorMessage\"\n                        class=\"login-error\"\n                    >\n                        <clr-alert-item>\n                            <span class=\"alert-text\">\n                                {{ errorMessage }}\n                            </span>\n                        </clr-alert-item>\n                    </clr-alert>\n                    <clr-checkbox-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrCheckbox\n                            id=\"rememberme\"\n                            name=\"rememberme\"\n                            [(ngModel)]=\"rememberMe\"\n                        />\n                        <label>{{ 'common.remember-me' | translate }}</label>\n                    </clr-checkbox-wrapper>\n                    <div>\n                        <button\n                            type=\"submit\"\n                            class=\"button primary login-button\"\n                            (click)=\"logIn()\"\n                            [disabled]=\"!username || !password\"\n                        >\n                            {{ 'common.login' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n        <img class=\"login-wrapper-logo\" src=\"assets/logo-login.webp\" *ngIf=\"!hideVendureBranding\" />\n    </div>\n</div>\n", "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\nimport { AuthService } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * This guard prevents loggen-in users from navigating to the login screen.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class LoginGuard  {\n    constructor(private router: Router, private authService: AuthService) {}\n\n    canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n        return this.authService.checkAuthenticatedStatus().pipe(\n            map(authenticated => {\n                if (authenticated) {\n                    this.router.navigate(['/']);\n                }\n                return !authenticated;\n            }),\n        );\n    }\n}\n", "import { Routes } from '@angular/router';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { LoginGuard } from './providers/login.guard';\n\nexport const loginRoutes: Routes = [\n    {\n        path: '',\n        component: LoginComponent,\n        pathMatch: 'full',\n        canActivate: [LoginGuard],\n    },\n];\n", "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { loginRoutes } from './login.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(loginRoutes)],\n    exports: [],\n    declarations: [LoginComponent],\n})\nexport class LoginModule {}\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "imageCreatorUrl", "\u0275\u0275sanitizeUrl", "\u0275\u0275textInterpolate", "imageCreator", "imageUnsplashUrl", "imageLocation", "\u0275\u0275element", "imageUrl", "LoginComponent", "constructor", "authService", "router", "httpClient", "localizationService", "username", "password", "rememberMe", "version", "ADMIN_UI_VERSION", "brand", "getAppConfig", "hideVendureBranding", "customImageUrl", "loginImageUrl", "loadImage", "ngOnInit", "direction$", "logIn", "errorMessage", "undefined", "subscribe", "result", "__typename", "redirect", "getRedirectRoute", "navigateByUrl", "message", "get", "toPromise", "then", "res", "updateImage", "user", "location", "urls", "regular", "name", "links", "html", "redirectTo", "re", "RegExp", "AUTH_REDIRECT_PARAM", "redirectToParam", "window", "search", "match", "length", "atob", "decodeURIComponent", "\u0275\u0275directiveInject", "AuthService", "Router", "HttpClient", "LocalizationService", "selectors", "standalone", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "LoginComponent_p_9_Template", "LoginComponent_p_10_Template", "LoginComponent_img_11_Template", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275listener", "LoginComponent_img_35_Template", "\u0275\u0275pipeBind1", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275twoWayProperty", "\u0275\u0275classProp", "LoginGuard", "constructor", "router", "authService", "canActivate", "route", "checkAuthenticatedStatus", "pipe", "map", "authenticated", "navigate", "\u0275\u0275inject", "Router", "AuthService", "factory", "\u0275fac", "providedIn", "loginRoutes", "path", "component", "LoginComponent", "pathMatch", "canActivate", "LoginGuard", "LoginModule", "SharedModule", "RouterModule", "forChild", "loginRoutes"]
}
