{
  "version": 3,
  "sources": ["src/lib/marketing/src/components/promotion-detail/promotion-detail.component.ts", "src/lib/marketing/src/components/promotion-detail/promotion-detail.component.html", "src/lib/marketing/src/components/promotion-list/promotion-list-bulk-actions.ts", "src/lib/marketing/src/components/promotion-list/promotion-list.component.ts", "src/lib/marketing/src/components/promotion-list/promotion-list.component.html", "src/lib/marketing/src/marketing.routes.ts", "src/lib/marketing/src/marketing.module.ts"],
  "sourcesContent": ["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, UntypedFormArray, UntypedFormGroup, Validators } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    ConfigurableOperationInput,\n    CreatePromotionInput,\n    createUpdatedTranslatable,\n    DataService,\n    encodeConfigArgValue,\n    findTranslation,\n    getConfigArgValue,\n    getCustomFieldsDefaults,\n    getDefaultConfigArgValue,\n    GetPromotionDetailDocument,\n    LanguageCode,\n    NotificationService,\n    PROMOTION_FRAGMENT,\n    PromotionFragment,\n    TypedBaseDetailComponent,\n    UpdatePromotionInput,\n} from '@vendure/admin-ui/core';\nimport { gql } from 'apollo-angular';\nimport { combineLatest } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nexport const GET_PROMOTION_DETAIL = gql`\n    query GetPromotionDetail($id: ID!) {\n        promotion(id: $id) {\n            ...Promotion\n        }\n    }\n    ${PROMOTION_FRAGMENT}\n`;\n\n@Component({\n    selector: 'vdr-promotion-detail',\n    templateUrl: './promotion-detail.component.html',\n    styleUrls: ['./promotion-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: false,\n})\nexport class PromotionDetailComponent\n    extends TypedBaseDetailComponent<typeof GetPromotionDetailDocument, 'promotion'>\n    implements OnInit, OnDestroy\n{\n    customFields = this.getCustomFieldConfig('Promotion');\n    detailForm = this.formBuilder.group({\n        name: ['', Validators.required],\n        description: '',\n        enabled: true,\n        couponCode: null as string | null,\n        perCustomerUsageLimit: null as number | null,\n        usageLimit: null as number | null,\n        startsAt: null,\n        endsAt: null,\n        conditions: this.formBuilder.array([]),\n        actions: this.formBuilder.array([]),\n        customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\n    });\n    conditions: ConfigurableOperation[] = [];\n    actions: ConfigurableOperation[] = [];\n\n    private allConditions: ConfigurableOperationDefinition[] = [];\n    private allActions: ConfigurableOperationDefinition[] = [];\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super();\n        this.customFields = this.getCustomFieldConfig('Promotion');\n    }\n\n    ngOnInit() {\n        this.init();\n        this.dataService.promotion.getPromotionActionsAndConditions().single$.subscribe(data => {\n            this.allActions = data.promotionActions;\n            this.allConditions = data.promotionConditions;\n            this.changeDetector.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    getAvailableConditions(): ConfigurableOperationDefinition[] {\n        return this.allConditions.filter(o => !this.conditions.find(c => c.code === o.code));\n    }\n\n    getConditionDefinition(condition: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allConditions.find(c => c.code === condition.code);\n    }\n\n    getAvailableActions(): ConfigurableOperationDefinition[] {\n        return this.allActions.filter(o => !this.actions.find(a => a.code === o.code));\n    }\n\n    getActionDefinition(action: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allActions.find(c => c.code === action.code);\n    }\n\n    saveButtonEnabled(): boolean {\n        return !!(\n            this.detailForm.dirty &&\n            this.detailForm.valid &&\n            (this.conditions.length !== 0 || this.detailForm.value.couponCode) &&\n            this.actions.length !== 0\n        );\n    }\n\n    addCondition(condition: ConfigurableOperation) {\n        this.addOperation('conditions', condition);\n        this.detailForm.markAsDirty();\n    }\n\n    addAction(action: ConfigurableOperation) {\n        this.addOperation('actions', action);\n        this.detailForm.markAsDirty();\n    }\n\n    removeCondition(condition: ConfigurableOperation) {\n        this.removeOperation('conditions', condition);\n        this.detailForm.markAsDirty();\n    }\n\n    removeAction(action: ConfigurableOperation) {\n        this.removeOperation('actions', action);\n        this.detailForm.markAsDirty();\n    }\n\n    formArrayOf(key: 'conditions' | 'actions'): UntypedFormArray {\n        return this.detailForm.get(key) as UntypedFormArray;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n\n        const input = this.getUpdatedPromotion(\n            {\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                startsAt: '',\n                endsAt: '',\n                name: '',\n                description: '',\n                couponCode: null,\n                perCustomerUsageLimit: null,\n                usageLimit: null,\n                enabled: false,\n                conditions: [],\n                actions: [],\n                translations: [],\n            },\n            this.detailForm,\n            this.languageCode,\n        ) as CreatePromotionInput;\n        this.dataService.promotion.createPromotion(input).subscribe(\n            ({ createPromotion }) => {\n                switch (createPromotion.__typename) {\n                    case 'Promotion':\n                        this.notificationService.success(_('common.notify-create-success'), {\n                            entity: 'Promotion',\n                        });\n                        this.detailForm.markAsPristine();\n                        this.changeDetector.markForCheck();\n                        this.router.navigate(['../', createPromotion.id], { relativeTo: this.route });\n                        break;\n                    case 'MissingConditionsError':\n                        this.notificationService.error(createPromotion.message);\n                        break;\n                }\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Promotion',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([paymentMethod, languageCode]) => {\n                    const input = this.getUpdatedPromotion(\n                        paymentMethod,\n                        this.detailForm,\n                        languageCode,\n                    ) as UpdatePromotionInput;\n                    return this.dataService.promotion.updatePromotion(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Promotion',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Promotion',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Given a PaymentMethod and the value of the detailForm, this method creates an updated copy of it which\n     * can then be persisted to the API.\n     */\n    private getUpdatedPromotion(\n        promotion: PromotionFragment,\n        formGroup: UntypedFormGroup,\n        languageCode: LanguageCode,\n    ): UpdatePromotionInput | CreatePromotionInput {\n        const formValue = formGroup.value;\n        const input = createUpdatedTranslatable({\n            translatable: promotion,\n            updatedFields: formValue,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: promotion.name || '',\n                description: promotion.description || '',\n            },\n        });\n\n        return {\n            ...input,\n            conditions: this.mapOperationsToInputs(this.conditions, formValue.conditions),\n            actions: this.mapOperationsToInputs(this.actions, formValue.actions),\n        };\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: PromotionFragment, languageCode: LanguageCode): void {\n        const currentTranslation = findTranslation(entity, languageCode);\n        this.detailForm.patchValue({\n            name: currentTranslation?.name,\n            description: currentTranslation?.description,\n            enabled: entity.enabled,\n            couponCode: entity.couponCode,\n            perCustomerUsageLimit: entity.perCustomerUsageLimit,\n            usageLimit: entity.usageLimit,\n            startsAt: entity.startsAt,\n            endsAt: entity.endsAt,\n        });\n        entity.conditions.forEach(o => {\n            this.addOperation('conditions', o);\n        });\n        entity.actions.forEach(o => this.addOperation('actions', o));\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(\n                this.customFields,\n                this.detailForm.get('customFields'),\n                entity,\n                currentTranslation,\n            );\n        }\n    }\n\n    /**\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\n     */\n    private mapOperationsToInputs(\n        operations: ConfigurableOperation[],\n        formValueOperations: any,\n    ): ConfigurableOperationInput[] {\n        return operations.map((o, i) => ({\n            code: o.code,\n            arguments: Object.values<any>(formValueOperations[i].args).map((value, j) => ({\n                name: o.args[j].name,\n                value: encodeConfigArgValue(value),\n            })),\n        }));\n    }\n\n    /**\n     * Adds a new condition or action to the promotion.\n     */\n    private addOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\n        const operationsArray = this.formArrayOf(key);\n        const collection = key === 'conditions' ? this.conditions : this.actions;\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\n        if (index === -1) {\n            const argsHash = operation.args.reduce(\n                (output, arg) => ({\n                    ...output,\n                    [arg.name]:\n                        getConfigArgValue(arg.value) ?? this.getDefaultArgValue(key, operation, arg.name),\n                }),\n                {},\n            );\n            operationsArray.push(\n                this.formBuilder.control({\n                    code: operation.code,\n                    args: argsHash,\n                }),\n            );\n            collection.push({\n                code: operation.code,\n                args: operation.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\n            });\n        }\n    }\n\n    private getDefaultArgValue(\n        key: 'conditions' | 'actions',\n        operation: ConfigurableOperation,\n        argName: string,\n    ) {\n        const def =\n            key === 'conditions'\n                ? this.allConditions.find(c => c.code === operation.code)\n                : this.allActions.find(a => a.code === operation.code);\n        if (def) {\n            const argDef = def.args.find(a => a.name === argName);\n            if (argDef) {\n                return getDefaultConfigArgValue(argDef);\n            }\n        }\n        throw new Error(`Could not determine default value for \"argName\"`);\n    }\n\n    /**\n     * Removes a condition or action from the promotion.\n     */\n    private removeOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\n        const operationsArray = this.formArrayOf(key);\n        const collection = key === 'conditions' ? this.conditions : this.actions;\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\n        if (index !== -1) {\n            operationsArray.removeAt(index);\n            collection.splice(index, 1);\n        }\n    }\n}\n", "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <div class=\"flex clr-align-items-center\">\n                <vdr-language-selector\n                    [disabled]=\"isNew$ | async\"\n                    [availableLanguageCodes]=\"availableLanguages$ | async\"\n                    [currentLanguageCode]=\"languageCode$ | async\"\n                    (languageCodeChange)=\"setLanguage($event)\"\n                ></vdr-language-selector>\n            </div>\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"promotion-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"'UpdatePromotion'\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"promotion-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *vdrIfPermissions=\"'UpdatePromotion'\">\n                <clr-toggle-wrapper>\n                    <input type=\"checkbox\" clrToggle name=\"enabled\" formControlName=\"enabled\" />\n                    <label>{{ 'common.enabled' | translate }}</label>\n                </clr-toggle-wrapper>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                        />\n                    </vdr-form-field>\n                    <vdr-rich-text-editor\n                        class=\"form-grid-span\"\n                        formControlName=\"description\"\n                        [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                        [label]=\"'common.description' | translate\"\n                    ></vdr-rich-text-editor>\n                    <vdr-form-field [label]=\"'marketing.starts-at' | translate\" for=\"startsAt\">\n                        <vdr-datetime-picker formControlName=\"startsAt\"></vdr-datetime-picker>\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'marketing.ends-at' | translate\" for=\"endsAt\">\n                        <vdr-datetime-picker formControlName=\"endsAt\"></vdr-datetime-picker>\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'marketing.coupon-code' | translate\" for=\"couponCode\">\n                        <input\n                            id=\"couponCode\"\n                            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                            type=\"text\"\n                            formControlName=\"couponCode\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'marketing.per-customer-limit' | translate\"\n                        [tooltip]=\"'marketing.per-customer-limit-tooltip' | translate\"\n                        for=\"perCustomerUsageLimit\"\n                    >\n                        <input\n                            id=\"perCustomerUsageLimit\"\n                            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"999\"\n                            formControlName=\"perCustomerUsageLimit\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'marketing.usage-limit' | translate\"\n                        [tooltip]=\"'marketing.usage-limit-tooltip' | translate\"\n                        for=\"usageLimit\"\n                    >\n                        <input\n                            id=\"usageLimit\"\n                            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"9999999\"\n                            formControlName=\"usageLimit\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                [title]=\"'common.custom-fields' | translate\"\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Promotion\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                    [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n\n            <vdr-custom-detail-component-host\n                locationId=\"promotion-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n\n            <vdr-card [title]=\"'marketing.conditions' | translate\" formArrayName=\"conditions\">\n                <div *ngFor=\"let condition of conditions; index as i\">\n                    <vdr-configurable-input\n                        (remove)=\"removeCondition($event)\"\n                        [position]=\"i\"\n                        [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                        [operation]=\"condition\"\n                        [operationDefinition]=\"getConditionDefinition(condition)\"\n                        [formControlName]=\"i\"\n                    ></vdr-configurable-input>\n                </div>\n                <div>\n                    <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'marketing.add-condition' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let condition of getAvailableConditions()\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                class=\"item-wrap\"\n                                (click)=\"addCondition(condition)\"\n                            >\n                                {{ condition.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'marketing.actions' | translate\" formArrayName=\"actions\">\n                <div *ngFor=\"let action of actions; index as i\">\n                    <vdr-configurable-input\n                        (remove)=\"removeAction($event)\"\n                        [position]=\"i\"\n                        [operation]=\"action\"\n                        [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                        [operationDefinition]=\"getActionDefinition(action)\"\n                        [formControlName]=\"i\"\n                    ></vdr-configurable-input>\n                </div>\n                <div>\n                    <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'marketing.add-action' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let action of getAvailableActions()\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                class=\"item-wrap\"\n                                (click)=\"addAction(action)\"\n                            >\n                                {{ action.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", "import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    AssignPromotionsToChannelDocument,\n    BulkAction,\n    createBulkAssignToChannelAction,\n    createBulkDeleteAction,\n    createBulkRemoveFromChannelAction,\n    DuplicateEntityDialogComponent,\n    GetPromotionListQuery,\n    ItemOf,\n    ModalService,\n    Permission,\n    RemovePromotionsFromChannelDocument,\n} from '@vendure/admin-ui/core';\nimport { gql } from 'apollo-angular';\nimport { map } from 'rxjs/operators';\nimport { PromotionListComponent } from './promotion-list.component';\n\nconst ASSIGN_PROMOTIONS_TO_CHANNEL = gql`\n    mutation AssignPromotionsToChannel($input: AssignPromotionsToChannelInput!) {\n        assignPromotionsToChannel(input: $input) {\n            id\n            name\n        }\n    }\n`;\n\nconst REMOVE_PROMOTIONS_FROM_CHANNEL = gql`\n    mutation RemovePromotionsFromChannel($input: RemovePromotionsFromChannelInput!) {\n        removePromotionsFromChannel(input: $input) {\n            id\n            name\n        }\n    }\n`;\n\nexport const deletePromotionsBulkAction = createBulkDeleteAction<ItemOf<GetPromotionListQuery, 'promotions'>>(\n    {\n        location: 'promotion-list',\n        requiresPermission: Permission.DeletePromotion,\n        getItemName: item => item.name,\n        bulkDelete: (dataService, ids) =>\n            dataService.promotion.deletePromotions(ids).pipe(map(res => res.deletePromotions)),\n    },\n);\n\nexport const assignPromotionsToChannelBulkAction = createBulkAssignToChannelAction<\n    ItemOf<GetPromotionListQuery, 'promotions'>\n>({\n    location: 'promotion-list',\n    requiresPermission: Permission.UpdatePromotion,\n    getItemName: item => item.name,\n    bulkAssignToChannel: (dataService, promotionIds, channelIds) => {\n        return channelIds.map(channelId =>\n            dataService\n                .mutate(AssignPromotionsToChannelDocument, {\n                    input: {\n                        channelId,\n                        promotionIds,\n                    },\n                })\n                .pipe(map(res => res.assignPromotionsToChannel)),\n        );\n    },\n});\n\nexport const removePromotionsFromChannelBulkAction = createBulkRemoveFromChannelAction<\n    ItemOf<GetPromotionListQuery, 'promotions'>\n>({\n    location: 'promotion-list',\n    requiresPermission: Permission.DeleteCatalog,\n    getItemName: item => item.name,\n    bulkRemoveFromChannel: (dataService, promotionIds, channelId) =>\n        dataService\n            .mutate(RemovePromotionsFromChannelDocument, {\n                input: {\n                    channelId,\n                    promotionIds,\n                },\n            })\n            .pipe(map(res => res.removePromotionsFromChannel)),\n});\n\nexport const duplicatePromotionsBulkAction: BulkAction<\n    ItemOf<GetPromotionListQuery, 'promotions'>,\n    PromotionListComponent\n> = {\n    location: 'promotion-list',\n    label: _('common.duplicate'),\n    icon: 'copy',\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\n        const modalService = injector.get(ModalService);\n        modalService\n            .fromComponent(DuplicateEntityDialogComponent<ItemOf<GetPromotionListQuery, 'promotions'>>, {\n                locals: {\n                    entities: selection,\n                    entityName: 'Promotion',\n                    title: _('marketing.duplicate-promotions'),\n                    getEntityName: entity => entity.name,\n                },\n            })\n            .subscribe(result => {\n                if (result) {\n                    clearSelection();\n                    hostComponent.refresh();\n                }\n            });\n    },\n};\n", "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    GetPromotionListDocument,\n    LogicalOperator,\n    PROMOTION_FRAGMENT,\n    PromotionListOptions,\n    PromotionSortParameter,\n    TypedBaseListComponent,\n} from '@vendure/admin-ui/core';\nimport { gql } from 'apollo-angular';\n\nexport const GET_PROMOTION_LIST = gql`\n    query GetPromotionList($options: PromotionListOptions) {\n        promotions(options: $options) {\n            items {\n                ...Promotion\n            }\n            totalItems\n        }\n    }\n    ${PROMOTION_FRAGMENT}\n`;\n\n@Component({\n    selector: 'vdr-promotion-list',\n    templateUrl: './promotion-list.component.html',\n    styleUrls: ['./promotion-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: false,\n})\nexport class PromotionListComponent\n    extends TypedBaseListComponent<typeof GetPromotionListDocument, 'promotions'>\n    implements OnInit\n{\n    dataTableListId = 'promotion-list';\n    readonly customFields = this.getCustomFieldConfig('Promotion');\n    readonly filters = this.createFilterCollection()\n        .addIdFilter()\n        .addDateFilters()\n        .addFilters([\n            {\n                name: 'startsAt',\n                type: { kind: 'dateRange' },\n                label: _('marketing.starts-at'),\n                filterField: 'startsAt',\n            },\n            {\n                name: 'endsAt',\n                type: { kind: 'dateRange' },\n                label: _('marketing.ends-at'),\n                filterField: 'endsAt',\n            },\n            {\n                name: 'enabled',\n                type: { kind: 'boolean' },\n                label: _('common.enabled'),\n                filterField: 'enabled',\n            },\n            {\n                name: 'name',\n                type: { kind: 'text' },\n                label: _('common.name'),\n                filterField: 'name',\n            },\n            {\n                name: 'couponCode',\n                type: { kind: 'text' },\n                label: _('marketing.coupon-code'),\n                filterField: 'couponCode',\n            },\n            {\n                name: 'desc',\n                type: { kind: 'text' },\n                label: _('common.description'),\n                filterField: 'description',\n            },\n            {\n                name: 'perCustomerUsageLimit',\n                type: { kind: 'number' },\n                label: _('marketing.per-customer-limit'),\n                filterField: 'perCustomerUsageLimit',\n            },\n            {\n                name: 'usageLimit',\n                type: { kind: 'number' },\n                label: _('marketing.usage-limit'),\n                filterField: 'usageLimit',\n            },\n        ])\n        .addCustomFieldFilters(this.customFields)\n        .connectToRoute(this.route);\n\n    readonly sorts = this.createSortCollection()\n        .defaultSort('createdAt', 'DESC')\n        .addSorts([\n            { name: 'createdAt' },\n            { name: 'updatedAt' },\n            { name: 'startsAt' },\n            { name: 'endsAt' },\n            { name: 'name' },\n            { name: 'couponCode' },\n            { name: 'perCustomerUsageLimit' },\n            { name: 'usageLimit' },\n        ])\n        .addCustomFieldSorts(this.customFields)\n        .connectToRoute(this.route);\n\n    constructor() {\n        super();\n        super.configure({\n            document: GetPromotionListDocument,\n            getItems: data => data.promotions,\n            setVariables: (skip, take) => this.createQueryOptions(skip, take, this.searchTermControl.value),\n            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],\n        });\n    }\n\n    private createQueryOptions(\n        skip: number,\n        take: number,\n        searchTerm: string | null,\n    ): { options: PromotionListOptions } {\n        const filter = this.filters.createFilterInput();\n        const sort = this.sorts.createSortInput();\n        let filterOperator = LogicalOperator.AND;\n        if (searchTerm) {\n            filter.couponCode = { contains: searchTerm };\n            filter.name = { contains: searchTerm };\n            filterOperator = LogicalOperator.OR;\n        }\n\n        return {\n            options: {\n                skip,\n                take,\n                filter,\n                filterOperator,\n                sort,\n            },\n        };\n    }\n}\n", "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"promotion-list\" />\n            <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreatePromotion'\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'marketing.create-new-promotion' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"promotion-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"promotion-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'marketing.search-by-name-or-coupon-code' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-promotion=\"item\">{{ promotion.id }}</ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\"\n        id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-promotion=\"item\">\n            {{ promotion.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\"\n        id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-promotion=\"item\">\n            {{ promotion.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.name' | translate\"\n        id=\"name\"\n        [optional]=\"false\"\n        [sort]=\"sorts.get('name')\"\n    >\n        <ng-template let-promotion=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', promotion.id]\"\n                ><span> {{ promotion.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-promotion=\"item\">\n            <vdr-chip *ngIf=\"promotion.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!promotion.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'marketing.coupon-code' | translate\"\n        id=\"coupon-code\"\n        [sort]=\"sorts.get('couponCode')\"\n    >\n        <ng-template let-promotion=\"item\">\n            {{ promotion.couponCode }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'marketing.starts-at' | translate\"\n        id=\"starts-at\"\n        [sort]=\"sorts.get('startsAt')\"\n    >\n        <ng-template let-promotion=\"item\">\n            {{ promotion.startsAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'marketing.ends-at' | translate\" id=\"ends-at\" [sort]=\"sorts.get('endsAt')\">\n        <ng-template let-promotion=\"item\">\n            {{ promotion.endsAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'marketing.per-customer-limit' | translate\"\n        id=\"per-customer-limit\"\n        [sort]=\"sorts.get('perCustomerUsageLimit')\"\n        [hiddenByDefault]=\"true\"\n    >\n        <ng-template let-promotion=\"item\">\n            {{ promotion.perCustomerUsageLimit }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'marketing.usage-limit' | translate\"\n        id=\"usage-limit\"\n        [sort]=\"sorts.get('usageLimit')\"\n        [hiddenByDefault]=\"true\"\n    >\n        <ng-template let-promotion=\"item\">\n            {{ promotion.usageLimit }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n", "import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { detailBreadcrumb, PageComponent, PageService, PromotionFragment } from '@vendure/admin-ui/core';\n\nexport const createRoutes = (pageService: PageService): Route[] => [\n    {\n        path: 'promotions',\n        component: PageComponent,\n        data: {\n            locationId: 'promotion-list',\n            breadcrumb: _('breadcrumb.promotions'),\n        },\n        children: pageService.getPageTabRoutes('promotion-list'),\n    },\n    {\n        path: 'promotions/:id',\n        component: PageComponent,\n        data: {\n            locationId: 'promotion-detail',\n            breadcrumb: { label: _('breadcrumb.promotions'), link: ['../', 'promotions'] },\n        },\n        children: pageService.getPageTabRoutes('promotion-detail'),\n    },\n];\n\nexport function promotionBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<PromotionFragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.promotions',\n        getName: promotion => promotion.name,\n        route: 'promotions',\n    });\n}\n", "import { AsyncPipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, ROUTES } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BulkActionRegistryService,\n    detailComponentWithResolver,\n    GetPromotionDetailDocument,\n    PageService,\n    SharedModule,\n} from '@vendure/admin-ui/core';\n\nimport { PromotionDetailComponent } from './components/promotion-detail/promotion-detail.component';\nimport {\n    assignPromotionsToChannelBulkAction,\n    deletePromotionsBulkAction,\n    duplicatePromotionsBulkAction,\n    removePromotionsFromChannelBulkAction,\n} from './components/promotion-list/promotion-list-bulk-actions';\nimport { PromotionListComponent } from './components/promotion-list/promotion-list.component';\nimport { createRoutes } from './marketing.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild([]), SharedModule, AsyncPipe, SharedModule],\n    providers: [\n        {\n            provide: ROUTES,\n            useFactory: (pageService: PageService) => createRoutes(pageService),\n            multi: true,\n            deps: [PageService],\n        },\n    ],\n    declarations: [PromotionListComponent, PromotionDetailComponent],\n})\nexport class MarketingModule {\n    private static hasRegisteredTabsAndBulkActions = false;\n\n    constructor(bulkActionRegistryService: BulkActionRegistryService, pageService: PageService) {\n        if (MarketingModule.hasRegisteredTabsAndBulkActions) {\n            return;\n        }\n        bulkActionRegistryService.registerBulkAction(assignPromotionsToChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(duplicatePromotionsBulkAction);\n        bulkActionRegistryService.registerBulkAction(removePromotionsFromChannelBulkAction);\n        bulkActionRegistryService.registerBulkAction(deletePromotionsBulkAction);\n\n        pageService.registerPageTab({\n            priority: 0,\n            location: 'promotion-list',\n            tab: _('breadcrumb.promotions'),\n            route: '',\n            component: PromotionListComponent,\n        });\n        pageService.registerPageTab({\n            priority: 0,\n            location: 'promotion-detail',\n            tab: _('marketing.promotion'),\n            route: '',\n            component: detailComponentWithResolver({\n                component: PromotionDetailComponent,\n                query: GetPromotionDetailDocument,\n                entityKey: 'promotion',\n                getBreadcrumbs: entity => [\n                    {\n                        label: entity ? entity.name : _('marketing.create-new-promotion'),\n                        link: [entity?.id],\n                    },\n                ],\n            }),\n        });\n        MarketingModule.hasRegisteredTabsAndBulkActions = true;\n    }\n}\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "create", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "saveButtonEnabled", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "_r4", "save", "\u0275\u0275template", "PromotionDetailComponent_ng_template_12_button_0_Template", "\u0275\u0275element", "\u0275\u0275textInterpolate", "entity_r5", "customFields", "detailForm", "get", "$event", "_r6", "removeCondition", "i_r8", "condition_r7", "getConditionDefinition", "condition_r10", "_r9", "$implicit", "addCondition", "description", "PromotionDetailComponent_vdr_dropdown_57_button_6_Template", "getAvailableConditions", "_r11", "removeAction", "i_r13", "action_r12", "getActionDefinition", "action_r15", "_r14", "addAction", "PromotionDetailComponent_vdr_dropdown_62_button_6_Template", "getAvailableActions", "GET_PROMOTION_DETAIL", "gql", "PROMOTION_FRAGMENT", "PromotionDetailComponent", "TypedBaseDetailComponent", "constructor", "changeDetector", "dataService", "formBuilder", "notificationService", "getCustomFieldConfig", "group", "name", "Validators", "required", "enabled", "couponCode", "perCustomerUsageLimit", "usageLimit", "startsAt", "endsAt", "conditions", "array", "actions", "getCustomFieldsDefaults", "allConditions", "allActions", "ngOnInit", "init", "promotion", "getPromotionActionsAndConditions", "single$", "subscribe", "data", "promotionActions", "promotionConditions", "markForCheck", "ngOnDestroy", "destroy", "filter", "o", "find", "c", "code", "condition", "a", "action", "dirty", "valid", "length", "value", "addOperation", "markAsDirty", "removeOperation", "formArrayOf", "key", "input", "getUpdatedPromotion", "id", "createdAt", "updatedAt", "translations", "languageCode", "createPromotion", "__typename", "success", "entity", "markAsPristine", "router", "navigate", "relativeTo", "route", "error", "message", "err", "combineLatest", "entity$", "languageCode$", "pipe", "take", "mergeMap", "paymentMethod", "updatePromotion", "formGroup", "formValue", "createUpdatedTranslatable", "translatable", "updatedFields", "customFieldConfig", "defaultTranslation", "__spreadProps", "__spreadValues", "mapOperationsToInputs", "setFormValues", "currentTranslation", "findTranslation", "patchValue", "forEach", "setCustomFieldFormValues", "operations", "formValueOperations", "map", "i", "arguments", "Object", "values", "args", "j", "encodeConfigArgValue", "operation", "operationsArray", "collection", "findIndex", "argsHash", "reduce", "output", "arg", "getConfigArgValue", "getDefaultArgValue", "push", "control", "argName", "def", "argDef", "getDefaultConfigArgValue", "Error", "index", "removeAt", "splice", "\u0275\u0275directiveInject", "ChangeDetectorRef", "DataService", "FormBuilder", "NotificationService", "selectors", "standalone", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "i0", "_r1", "setLanguage", "PromotionDetailComponent_button_10_Template", "PromotionDetailComponent_ng_template_12_Template", "\u0275\u0275templateRefExtractor", "PromotionDetailComponent_vdr_card_18_Template", "PromotionDetailComponent_vdr_card_19_Template", "PromotionDetailComponent_vdr_card_51_Template", "PromotionDetailComponent_div_55_Template", "PromotionDetailComponent_vdr_dropdown_57_Template", "PromotionDetailComponent_div_60_Template", "PromotionDetailComponent_vdr_dropdown_62_Template", "isNew$", "availableLanguages$", "updateButton_r16", "ASSIGN_PROMOTIONS_TO_CHANNEL", "gql", "REMOVE_PROMOTIONS_FROM_CHANNEL", "deletePromotionsBulkAction", "createBulkDeleteAction", "location", "requiresPermission", "Permission", "DeletePromotion", "getItemName", "item", "name", "bulkDelete", "dataService", "ids", "promotion", "deletePromotions", "pipe", "map", "res", "assignPromotionsToChannelBulkAction", "createBulkAssignToChannelAction", "UpdatePromotion", "bulkAssignToChannel", "promotionIds", "channelIds", "channelId", "mutate", "AssignPromotionsToChannelDocument", "input", "assignPromotionsToChannel", "removePromotionsFromChannelBulkAction", "createBulkRemoveFromChannelAction", "DeleteCatalog", "bulkRemoveFromChannel", "RemovePromotionsFromChannelDocument", "removePromotionsFromChannel", "duplicatePromotionsBulkAction", "label", "icon", "onClick", "injector", "selection", "hostComponent", "clearSelection", "get", "ModalService", "fromComponent", "DuplicateEntityDialogComponent", "locals", "entities", "entityName", "title", "getEntityName", "entity", "subscribe", "result", "refresh", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275textInterpolate", "promotion_r1", "id", "\u0275\u0275pipeBind2", "promotion_r2", "createdAt", "promotion_r3", "updatedAt", "\u0275\u0275pureFunction1", "_c1", "promotion_r4", "name", "\u0275\u0275template", "PromotionListComponent_ng_template_32_vdr_chip_0_Template", "PromotionListComponent_ng_template_32_vdr_chip_1_Template", "promotion_r5", "enabled", "promotion_r6", "couponCode", "promotion_r7", "startsAt", "promotion_r8", "endsAt", "promotion_r9", "perCustomerUsageLimit", "promotion_r10", "usageLimit", "customField_r11", "ctx_r11", "sorts", "GET_PROMOTION_LIST", "gql", "PROMOTION_FRAGMENT", "PromotionListComponent", "TypedBaseListComponent", "constructor", "dataTableListId", "customFields", "getCustomFieldConfig", "filters", "createFilterCollection", "addIdFilter", "addDateFilters", "addFilters", "type", "kind", "label", "filterField", "addCustomFieldFilters", "connectToRoute", "route", "createSortCollection", "defaultSort", "addSorts", "addCustomFieldSorts", "configure", "document", "GetPromotionListDocument", "getItems", "data", "promotions", "setVariables", "skip", "take", "createQueryOptions", "searchTermControl", "value", "refreshListOnChanges", "valueChanges", "searchTerm", "filter", "createFilterInput", "sort", "createSortInput", "filterOperator", "LogicalOperator", "AND", "contains", "OR", "options", "selectors", "standalone", "features", "\u0275\u0275InheritDefinitionFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "$event", "setLanguage", "PromotionListComponent_a_8_Template", "setPageNumber", "setItemsPerPage", "setVisibleColumns", "PromotionListComponent_ng_template_20_Template", "PromotionListComponent_ng_template_23_Template", "PromotionListComponent_ng_template_26_Template", "PromotionListComponent_ng_template_29_Template", "PromotionListComponent_ng_template_32_Template", "PromotionListComponent_ng_template_35_Template", "PromotionListComponent_ng_template_38_Template", "PromotionListComponent_ng_template_41_Template", "PromotionListComponent_ng_template_44_Template", "PromotionListComponent_ng_template_47_Template", "PromotionListComponent_vdr_dt2_custom_field_column_48_Template", "availableLanguages$", "contentLanguage$", "items$", "itemsPerPage$", "totalItems$", "currentPage$", "selectionManager", "get", "createRoutes", "pageService", "path", "component", "PageComponent", "data", "locationId", "breadcrumb", "children", "getPageTabRoutes", "label", "link", "promotionBreadcrumb", "params", "detailBreadcrumb", "entity", "id", "breadcrumbKey", "getName", "promotion", "name", "route", "MarketingModule", "hasRegisteredTabsAndBulkActions", "constructor", "bulkActionRegistryService", "pageService", "registerBulkAction", "assignPromotionsToChannelBulkAction", "duplicatePromotionsBulkAction", "removePromotionsFromChannelBulkAction", "deletePromotionsBulkAction", "registerPageTab", "priority", "location", "tab", "route", "component", "PromotionListComponent", "detailComponentWithResolver", "PromotionDetailComponent", "query", "GetPromotionDetailDocument", "entityKey", "getBreadcrumbs", "entity", "label", "name", "link", "id", "\u0275\u0275inject", "BulkActionRegistryService", "PageService", "provide", "ROUTES", "useFactory", "createRoutes", "multi", "deps", "imports", "SharedModule", "RouterModule", "forChild"]
}
