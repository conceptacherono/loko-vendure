import * as i0 from '@angular/core';
import { Input, ChangeDetectionStrategy, Component, EventEmitter, Output, ViewContainerRef, ViewChild, NgModule } from '@angular/core';
import { BehaviorSubject, Subject, combineLatest, forkJoin, from, EMPTY, of } from 'rxjs';
import { map, startWith, distinctUntilChanged, debounceTime, tap, takeUntil, switchMap, filter, take, shareReplay, merge, mergeMap, concatMap, mapTo } from 'rxjs/operators';
import * as i1 from '@vendure/admin-ui/core';
import { SelectionManager, HistoryEntryType, CUSTOMER_FRAGMENT, TypedBaseDetailComponent, getCustomFieldsDefaults, SortOrder, EditNoteDialogComponent, CustomerDetailQueryDocument, createBulkDeleteAction, Permission, CUSTOMER_GROUP_FRAGMENT, TypedBaseListComponent, GetCustomerGroupListDocument, ModalService, DataService, NotificationService, LogicalOperator, CustomerListQueryDocument, PageComponent, detailBreadcrumb, detailComponentWithResolver, GetCustomerGroupDetailDocument, SharedModule, PageService } from '@vendure/admin-ui/core';
import * as i1$1 from '@angular/forms';
import { FormControl, UntypedFormArray, Validators } from '@angular/forms';
import * as i2 from '@angular/router';
import { RouterModule, ROUTES } from '@angular/router';
import * as i3 from '@clr/angular';
import * as i3$1 from '@angular/common';
import * as i4 from '@ngx-translate/core';
import { marker } from '@biesbjerg/ngx-translate-extract-marker';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { gql } from 'apollo-angular';
import * as i3$2 from '@ng-select/ng-select';

class CustomerStatusLabelComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerStatusLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CustomerStatusLabelComponent, isStandalone: false, selector: "vdr-customer-status-label", inputs: { customer: "customer" }, ngImport: i0, template: "<vdr-chip *ngIf=\"customer.user?.id\">\n    <ng-container *ngIf=\"customer.user?.verified\">\n        <clr-icon shape=\"check-circle\" class=\"verified-user-icon\"></clr-icon>\n        {{ 'customer.verified' | translate }}\n    </ng-container>\n    <ng-container *ngIf=\"!customer.user?.verified\">\n        <clr-icon shape=\"check-circle\" class=\"registered-user-icon\"></clr-icon>\n        {{ 'customer.registered' | translate }}\n    </ng-container>\n</vdr-chip>\n<vdr-chip *ngIf=\"!customer.user?.id\">{{ 'customer.guest' | translate }}</vdr-chip>\n", styles: [".registered-user-icon{color:var(--color-grey-300)}.verified-user-icon{color:var(--color-success-500)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerStatusLabelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-customer-status-label', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-chip *ngIf=\"customer.user?.id\">\n    <ng-container *ngIf=\"customer.user?.verified\">\n        <clr-icon shape=\"check-circle\" class=\"verified-user-icon\"></clr-icon>\n        {{ 'customer.verified' | translate }}\n    </ng-container>\n    <ng-container *ngIf=\"!customer.user?.verified\">\n        <clr-icon shape=\"check-circle\" class=\"registered-user-icon\"></clr-icon>\n        {{ 'customer.registered' | translate }}\n    </ng-container>\n</vdr-chip>\n<vdr-chip *ngIf=\"!customer.user?.id\">{{ 'customer.guest' | translate }}</vdr-chip>\n", styles: [".registered-user-icon{color:var(--color-grey-300)}.verified-user-icon{color:var(--color-success-500)}\n"] }]
        }], propDecorators: { customer: [{
                type: Input
            }] } });

class CustomerGroupMemberListComponent {
    constructor(router, dataService) {
        this.router = router;
        this.dataService = dataService;
        this.selectedMemberIds = [];
        this.selectionChange = new EventEmitter();
        this.fetchParamsChange = new EventEmitter();
        this.filterTermControl = new FormControl('');
        this.selectionManager = new SelectionManager({
            multiSelect: true,
            itemsAreEqual: (a, b) => a.id === b.id,
            additiveMode: true,
        });
        this.refresh$ = new BehaviorSubject(true);
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.membersCurrentPage$ = this.route.paramMap.pipe(map(qpm => qpm.get('membersPage')), map(page => (!page ? 1 : +page)), startWith(1), distinctUntilChanged());
        this.membersItemsPerPage$ = this.route.paramMap.pipe(map(qpm => qpm.get('membersPerPage')), map(perPage => (!perPage ? 10 : +perPage)), startWith(10), distinctUntilChanged());
        const filterTerm$ = this.filterTermControl.valueChanges.pipe(debounceTime(250), tap(() => this.setContentsPageNumber(1)), startWith(''));
        combineLatest(this.membersCurrentPage$, this.membersItemsPerPage$, filterTerm$, this.refresh$)
            .pipe(takeUntil(this.destroy$))
            .subscribe(([currentPage, itemsPerPage, filterTerm]) => {
            const take = itemsPerPage;
            const skip = (currentPage - 1) * itemsPerPage;
            this.fetchParamsChange.emit({
                filterTerm: filterTerm ?? '',
                skip,
                take,
            });
        });
        this.selectionManager.setCurrentItems(this.members?.filter(m => this.selectedMemberIds.includes(m.id)) ?? []);
        this.selectionManager.selectionChanges$.pipe(takeUntil(this.destroy$)).subscribe(selection => {
            this.selectionChange.emit(selection.map(s => s.id));
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    setContentsPageNumber(page) {
        this.setParam('membersPage', page);
    }
    setContentsItemsPerPage(perPage) {
        this.setParam('membersPerPage', perPage);
    }
    refresh() {
        this.refresh$.next(true);
    }
    setParam(key, value) {
        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {
            relativeTo: this.route,
            queryParamsHandling: 'merge',
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerGroupMemberListComponent, deps: [{ token: i2.Router }, { token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CustomerGroupMemberListComponent, isStandalone: false, selector: "vdr-customer-group-member-list", inputs: { locationId: "locationId", members: "members", totalItems: "totalItems", route: "route", selectedMemberIds: "selectedMemberIds", activeGroup: "activeGroup" }, outputs: { selectionChange: "selectionChange", fetchParamsChange: "fetchParamsChange" }, ngImport: i0, template: "<vdr-data-table-2\n    [id]=\"locationId\"\n    [items]=\"members\"\n    [itemsPerPage]=\"membersItemsPerPage$ | async\"\n    [totalItems]=\"totalItems\"\n    [currentPage]=\"membersCurrentPage$ | async\"\n    (pageChange)=\"setContentsPageNumber($event)\"\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\n>\n    <vdr-bulk-action-menu\n        [locationId]=\"locationId\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"filterTermControl\"\n        [searchTermPlaceholder]=\"'customer.search-customers-by-email' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-customerGroup=\"item\">\n            {{ customerGroup.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n        <ng-template let-customer=\"item\">\n            {{ customer.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n        <ng-template let-customer=\"item\">\n            {{ customer.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.name' | translate\" id=\"name\" [optional]=\"false\">\n        <ng-template let-customer=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['/customer/customers', customer.id]\"\n                ><span> {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }} </span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.status' | translate\" id=\"status\" [hiddenByDefault]=\"true\">\n        <ng-template let-customer=\"item\">\n            <vdr-customer-status-label [customer]=\"customer\" />\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.email-address' | translate\" id=\"email-address\">\n        <ng-template let-customer=\"item\">\n            {{ customer.emailAddress }}\n        </ng-template>\n    </vdr-dt2-column>\n</vdr-data-table-2>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: CustomerStatusLabelComponent, selector: "vdr-customer-status-label", inputs: ["customer"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerGroupMemberListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-customer-group-member-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-data-table-2\n    [id]=\"locationId\"\n    [items]=\"members\"\n    [itemsPerPage]=\"membersItemsPerPage$ | async\"\n    [totalItems]=\"totalItems\"\n    [currentPage]=\"membersCurrentPage$ | async\"\n    (pageChange)=\"setContentsPageNumber($event)\"\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\n>\n    <vdr-bulk-action-menu\n        [locationId]=\"locationId\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"filterTermControl\"\n        [searchTermPlaceholder]=\"'customer.search-customers-by-email' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-customerGroup=\"item\">\n            {{ customerGroup.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n        <ng-template let-customer=\"item\">\n            {{ customer.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n        <ng-template let-customer=\"item\">\n            {{ customer.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.name' | translate\" id=\"name\" [optional]=\"false\">\n        <ng-template let-customer=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['/customer/customers', customer.id]\"\n                ><span> {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }} </span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.status' | translate\" id=\"status\" [hiddenByDefault]=\"true\">\n        <ng-template let-customer=\"item\">\n            <vdr-customer-status-label [customer]=\"customer\" />\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.email-address' | translate\" id=\"email-address\">\n        <ng-template let-customer=\"item\">\n            {{ customer.emailAddress }}\n        </ng-template>\n    </vdr-dt2-column>\n</vdr-data-table-2>\n" }]
        }], ctorParameters: () => [{ type: i2.Router }, { type: i1.DataService }], propDecorators: { locationId: [{
                type: Input
            }], members: [{
                type: Input
            }], totalItems: [{
                type: Input
            }], route: [{
                type: Input
            }], selectedMemberIds: [{
                type: Input
            }], activeGroup: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }], fetchParamsChange: [{
                type: Output
            }] } });

class AddCustomerToGroupDialogComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.selectedCustomerIds = [];
        this.fetchGroupMembers$ = new BehaviorSubject({
            skip: 0,
            take: 10,
            filterTerm: '',
        });
    }
    ngOnInit() {
        const customerResult$ = this.fetchGroupMembers$.pipe(switchMap(({ skip, take, filterTerm }) => this.dataService.customer
            .getCustomerList(take, skip, filterTerm)
            .mapStream(res => res.customers)));
        this.customers$ = customerResult$.pipe(map(res => res.items));
        this.customersTotal$ = customerResult$.pipe(map(res => res.totalItems));
    }
    cancel() {
        this.resolveWith();
    }
    add() {
        this.resolveWith(this.selectedCustomerIds);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AddCustomerToGroupDialogComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: AddCustomerToGroupDialogComponent, isStandalone: false, selector: "vdr-add-customer-to-group-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    {{ 'customer.add-customers-to-group-with-name' | translate: {groupName: group.name} }}\n</ng-template>\n\n<vdr-customer-group-member-list\n    locationId=\"customer-group-members-picker-list\"\n    [members]=\"customers$ | async\"\n    [totalItems]=\"customersTotal$ | async\"\n    [route]=\"route\"\n    [selectedMemberIds]=\"selectedCustomerIds\"\n    (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\n    (selectionChange)=\"selectedCustomerIds = $event\"\n/>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedCustomerIds.length\" class=\"btn btn-primary\">\n        {{ 'customer.add-customers-to-group-with-count' | translate: {count: selectedCustomerIds.length} }}\n    </button>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: CustomerGroupMemberListComponent, selector: "vdr-customer-group-member-list", inputs: ["locationId", "members", "totalItems", "route", "selectedMemberIds", "activeGroup"], outputs: ["selectionChange", "fetchParamsChange"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AddCustomerToGroupDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-add-customer-to-group-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    {{ 'customer.add-customers-to-group-with-name' | translate: {groupName: group.name} }}\n</ng-template>\n\n<vdr-customer-group-member-list\n    locationId=\"customer-group-members-picker-list\"\n    [members]=\"customers$ | async\"\n    [totalItems]=\"customersTotal$ | async\"\n    [route]=\"route\"\n    [selectedMemberIds]=\"selectedCustomerIds\"\n    (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\n    (selectionChange)=\"selectedCustomerIds = $event\"\n/>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedCustomerIds.length\" class=\"btn btn-primary\">\n        {{ 'customer.add-customers-to-group-with-count' | translate: {count: selectedCustomerIds.length} }}\n    </button>\n</ng-template>\n" }]
        }], ctorParameters: () => [{ type: i1.DataService }] });

class AddressDetailDialogComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.availableCountries = [];
    }
    ngOnInit() {
        this.addressForm.valueChanges.subscribe(() => this.changeDetector.markForCheck());
    }
    cancel() {
        this.resolveWith();
    }
    save() {
        this.resolveWith(this.addressForm);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AddressDetailDialogComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: AddressDetailDialogComponent, isStandalone: false, selector: "vdr-address-detail-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    <span *ngIf=\"addressForm.get('streetLine1')?.value as streetLine1\">{{ streetLine1 }},</span>\n    <span *ngIf=\"addressForm.get('countryCode')?.value as countryCode\"> {{ countryCode }}</span>\n</ng-template>\n\n<vdr-address-form\n    [formGroup]=\"addressForm\"\n    [availableCountries]=\"availableCountries\"\n    [customFields]=\"customFields\"\n></vdr-address-form>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"save()\"\n        [disabled]=\"!addressForm.valid || !addressForm.touched\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.update' | translate }}\n    </button>\n</ng-template>\n", styles: ["clr-input-container{margin-bottom:12px}\n"], dependencies: [{ kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.AddressFormComponent, selector: "vdr-address-form", inputs: ["customFields", "formGroup", "availableCountries"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AddressDetailDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-address-detail-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    <span *ngIf=\"addressForm.get('streetLine1')?.value as streetLine1\">{{ streetLine1 }},</span>\n    <span *ngIf=\"addressForm.get('countryCode')?.value as countryCode\"> {{ countryCode }}</span>\n</ng-template>\n\n<vdr-address-form\n    [formGroup]=\"addressForm\"\n    [availableCountries]=\"availableCountries\"\n    [customFields]=\"customFields\"\n></vdr-address-form>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"save()\"\n        [disabled]=\"!addressForm.valid || !addressForm.touched\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.update' | translate }}\n    </button>\n</ng-template>\n", styles: ["clr-input-container{margin-bottom:12px}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }] });

class AddressCardComponent {
    constructor(modalService, changeDetector) {
        this.modalService = modalService;
        this.changeDetector = changeDetector;
        this.availableCountries = [];
        this.editable = true;
        this.setAsDefaultShipping = new EventEmitter();
        this.setAsDefaultBilling = new EventEmitter();
        this.deleteAddress = new EventEmitter();
        this.dataDependenciesPopulated = new BehaviorSubject(false);
    }
    ngOnInit() {
        const streetLine1 = this.addressForm.get('streetLine1');
        // Make the address dialog display automatically if there is no address line
        // as is the case when adding a new address.
        if (!streetLine1.value) {
            this.dataDependenciesPopulated
                .pipe(filter(value => value), take(1))
                .subscribe(() => {
                this.editAddress();
            });
        }
    }
    ngOnChanges(changes) {
        if (this.customFields != null && this.availableCountries != null) {
            this.dataDependenciesPopulated.next(true);
        }
    }
    getCountryName(countryCode) {
        if (!this.availableCountries) {
            return '';
        }
        const match = this.availableCountries.find(c => c.code === countryCode);
        return match ? match.name : '';
    }
    setAsDefaultBillingAddress() {
        this.setAsDefaultBilling.emit(this.addressForm.value.id);
        this.addressForm.markAsDirty();
    }
    setAsDefaultShippingAddress() {
        this.setAsDefaultShipping.emit(this.addressForm.value.id);
        this.addressForm.markAsDirty();
    }
    delete() {
        this.deleteAddress.emit(this.addressForm.value.id);
        this.addressForm.markAsDirty();
    }
    editAddress() {
        this.modalService
            .fromComponent(AddressDetailDialogComponent, {
            locals: {
                addressForm: this.addressForm,
                customFields: this.customFields,
                availableCountries: this.availableCountries,
            },
            size: 'md',
            closable: true,
        })
            .subscribe(() => {
            this.changeDetector.markForCheck();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AddressCardComponent, deps: [{ token: i1.ModalService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: AddressCardComponent, isStandalone: false, selector: "vdr-address-card", inputs: { addressForm: "addressForm", customFields: "customFields", availableCountries: "availableCountries", isDefaultBilling: "isDefaultBilling", isDefaultShipping: "isDefaultShipping", editable: "editable" }, outputs: { setAsDefaultShipping: "setAsDefaultShipping", setAsDefaultBilling: "setAsDefaultBilling", deleteAddress: "deleteAddress" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"card\" *ngIf=\"addressForm.value as address\">\n    <div class=\"card-header\">\n        <div class=\"address-title\">\n            <span class=\"street-line\" *ngIf=\"address.streetLine1\">{{ address.streetLine1 }},</span>\n            {{ address.countryCode }}\n        </div>\n        <div class=\"default-controls\">\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultShipping\">\n                <clr-icon shape=\"truck\"></clr-icon>\n                {{ 'customer.default-shipping-address' | translate }}\n            </vdr-chip>\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultBilling\">\n                <clr-icon shape=\"credit-card\"></clr-icon>\n                {{ 'customer.default-billing-address' | translate }}\n            </vdr-chip>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <div class=\"card-text\">\n            <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <div class=\"address-actions\">\n            <vdr-entity-info [entity]=\"address\"></vdr-entity-info>\n            <ng-container *ngIf=\"editable\">\n                <button class=\"button-small\" (click)=\"editAddress()\">\n                    {{ 'common.edit' | translate }}\n                </button>\n                <vdr-dropdown>\n                    <button type=\"button\" class=\"button-small\" vdrDropdownTrigger>\n                        {{ 'common.more' | translate }}\n                        <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\n                    </button>\n                    <vdr-dropdown-menu>\n                        <button\n                            vdrDropdownItem\n                            [disabled]=\"isDefaultShipping\"\n                            (click)=\"setAsDefaultShippingAddress()\"\n                        >\n                            {{ 'customer.set-as-default-shipping-address' | translate }}\n                        </button>\n                        <button\n                            vdrDropdownItem\n                            [disabled]=\"isDefaultBilling\"\n                            (click)=\"setAsDefaultBillingAddress()\"\n                        >\n                            {{ 'customer.set-as-default-billing-address' | translate }}\n                        </button>\n                        <div class=\"dropdown-divider\"></div>\n                        <button type=\"button\" (click)=\"delete()\" vdrDropdownItem>\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                            {{ 'common.delete' | translate }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </ng-container>\n        </div>\n    </div>\n</div>\n", styles: [":host{display:block;max-width:360px}clr-input-container{margin-bottom:12px}.defaul-controls{display:flex}.is-default{margin:0;color:var(--color-success-500)}.address-actions{display:flex;align-items:center;gap:var(--space-unit)}.address-actions vdr-entity-info{margin-top:1px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: i1.FormattedAddressComponent, selector: "vdr-formatted-address", inputs: ["address"] }, { kind: "component", type: i1.EntityInfoComponent, selector: "vdr-entity-info", inputs: ["small", "entity"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AddressCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-address-card', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<div class=\"card\" *ngIf=\"addressForm.value as address\">\n    <div class=\"card-header\">\n        <div class=\"address-title\">\n            <span class=\"street-line\" *ngIf=\"address.streetLine1\">{{ address.streetLine1 }},</span>\n            {{ address.countryCode }}\n        </div>\n        <div class=\"default-controls\">\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultShipping\">\n                <clr-icon shape=\"truck\"></clr-icon>\n                {{ 'customer.default-shipping-address' | translate }}\n            </vdr-chip>\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultBilling\">\n                <clr-icon shape=\"credit-card\"></clr-icon>\n                {{ 'customer.default-billing-address' | translate }}\n            </vdr-chip>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <div class=\"card-text\">\n            <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <div class=\"address-actions\">\n            <vdr-entity-info [entity]=\"address\"></vdr-entity-info>\n            <ng-container *ngIf=\"editable\">\n                <button class=\"button-small\" (click)=\"editAddress()\">\n                    {{ 'common.edit' | translate }}\n                </button>\n                <vdr-dropdown>\n                    <button type=\"button\" class=\"button-small\" vdrDropdownTrigger>\n                        {{ 'common.more' | translate }}\n                        <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\n                    </button>\n                    <vdr-dropdown-menu>\n                        <button\n                            vdrDropdownItem\n                            [disabled]=\"isDefaultShipping\"\n                            (click)=\"setAsDefaultShippingAddress()\"\n                        >\n                            {{ 'customer.set-as-default-shipping-address' | translate }}\n                        </button>\n                        <button\n                            vdrDropdownItem\n                            [disabled]=\"isDefaultBilling\"\n                            (click)=\"setAsDefaultBillingAddress()\"\n                        >\n                            {{ 'customer.set-as-default-billing-address' | translate }}\n                        </button>\n                        <div class=\"dropdown-divider\"></div>\n                        <button type=\"button\" (click)=\"delete()\" vdrDropdownItem>\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                            {{ 'common.delete' | translate }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </ng-container>\n        </div>\n    </div>\n</div>\n", styles: [":host{display:block;max-width:360px}clr-input-container{margin-bottom:12px}.defaul-controls{display:flex}.is-default{margin:0;color:var(--color-success-500)}.address-actions{display:flex;align-items:center;gap:var(--space-unit)}.address-actions vdr-entity-info{margin-top:1px}\n"] }]
        }], ctorParameters: () => [{ type: i1.ModalService }, { type: i0.ChangeDetectorRef }], propDecorators: { addressForm: [{
                type: Input
            }], customFields: [{
                type: Input
            }], availableCountries: [{
                type: Input
            }], isDefaultBilling: [{
                type: Input
            }], isDefaultShipping: [{
                type: Input
            }], editable: [{
                type: Input
            }], setAsDefaultShipping: [{
                type: Output
            }], setAsDefaultBilling: [{
                type: Output
            }], deleteAddress: [{
                type: Output
            }] } });

class SelectCustomerGroupDialogComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.selectedGroupIds = [];
    }
    ngOnInit() {
        this.groups$ = this.dataService.customer
            .getCustomerGroupList()
            .mapStream(res => res.customerGroups.items);
    }
    cancel() {
        this.resolveWith();
    }
    add() {
        this.resolveWith(this.selectedGroupIds);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: SelectCustomerGroupDialogComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: SelectCustomerGroupDialogComponent, isStandalone: false, selector: "vdr-select-customer-group-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    {{ 'customer.add-customer-to-group' | translate }}\n</ng-template>\n\n<ng-select\n    [items]=\"groups$ | async\"\n    appendTo=\"body\"\n    [addTag]=\"false\"\n    [multiple]=\"true\"\n    bindValue=\"id\"\n    [(ngModel)]=\"selectedGroupIds\"\n    [clearable]=\"true\"\n    [searchable]=\"false\"\n>\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n        <span aria-hidden=\"true\" class=\"ng-value-icon left\" (click)=\"clear(item)\"> \u00D7 </span>\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\n    </ng-template>\n    <ng-template ng-option-tmp let-item=\"item\">\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\n    </ng-template>\n</ng-select>\n\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedGroupIds.length\" class=\"btn btn-primary\">\n        {{ 'customer.add-customer-to-groups-with-count' | translate: {count: selectedGroupIds.length} }}\n    </button>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3$2.NgSelectComponent, selector: "ng-select", inputs: ["ariaLabelDropdown", "bindLabel", "bindValue", "ariaLabel", "markFirst", "placeholder", "fixedPlaceholder", "notFoundText", "typeToSearchText", "preventToggleOnRightClick", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "ngClass", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick", "keyDownFn"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i3$2.NgOptionTemplateDirective, selector: "[ng-option-tmp]" }, { kind: "directive", type: i3$2.NgLabelTemplateDirective, selector: "[ng-label-tmp]" }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: SelectCustomerGroupDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-select-customer-group-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    {{ 'customer.add-customer-to-group' | translate }}\n</ng-template>\n\n<ng-select\n    [items]=\"groups$ | async\"\n    appendTo=\"body\"\n    [addTag]=\"false\"\n    [multiple]=\"true\"\n    bindValue=\"id\"\n    [(ngModel)]=\"selectedGroupIds\"\n    [clearable]=\"true\"\n    [searchable]=\"false\"\n>\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n        <span aria-hidden=\"true\" class=\"ng-value-icon left\" (click)=\"clear(item)\"> \u00D7 </span>\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\n    </ng-template>\n    <ng-template ng-option-tmp let-item=\"item\">\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\n    </ng-template>\n</ng-select>\n\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedGroupIds.length\" class=\"btn btn-primary\">\n        {{ 'customer.add-customer-to-groups-with-count' | translate: {count: selectedGroupIds.length} }}\n    </button>\n</ng-template>\n" }]
        }], ctorParameters: () => [{ type: i1.DataService }] });

class CustomerHistoryEntryHostComponent {
    constructor(historyEntryComponentService) {
        this.historyEntryComponentService = historyEntryComponentService;
        this.expandClick = new EventEmitter();
    }
    ngOnInit() {
        const componentType = this.historyEntryComponentService.getComponent(this.entry.type);
        const componentRef = this.portalRef.createComponent(componentType);
        componentRef.instance.entry = this.entry;
        componentRef.instance.customer = this.customer;
        this.instance = componentRef.instance;
        this.componentRef = componentRef;
    }
    ngOnDestroy() {
        this.componentRef?.destroy();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerHistoryEntryHostComponent, deps: [{ token: i1.HistoryEntryComponentService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CustomerHistoryEntryHostComponent, isStandalone: false, selector: "vdr-customer-history-entry-host", inputs: { entry: "entry", customer: "customer", expanded: "expanded" }, outputs: { expandClick: "expandClick" }, viewQueries: [{ propertyName: "portalRef", first: true, predicate: ["portal"], descendants: true, read: ViewContainerRef, static: true }], exportAs: ["historyEntry"], ngImport: i0, template: `
        <vdr-timeline-entry
            [displayType]="instance.getDisplayType(entry)"
            [iconShape]="instance.getIconShape && instance.getIconShape(entry)"
            [createdAt]="entry.createdAt"
            [name]="instance.getName && instance.getName(entry)"
            [featured]="instance.isFeatured(entry)"
            [collapsed]="!expanded && !instance.isFeatured(entry)"
            (expandClick)="expandClick.emit()"
        >
            <div #portal></div>
        </vdr-timeline-entry>
    `, isInline: true, dependencies: [{ kind: "component", type: i1.TimelineEntryComponent, selector: "vdr-timeline-entry", inputs: ["displayType", "createdAt", "name", "featured", "iconShape", "isFirst", "isLast", "collapsed"], outputs: ["expandClick"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerHistoryEntryHostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'vdr-customer-history-entry-host',
                    template: `
        <vdr-timeline-entry
            [displayType]="instance.getDisplayType(entry)"
            [iconShape]="instance.getIconShape && instance.getIconShape(entry)"
            [createdAt]="entry.createdAt"
            [name]="instance.getName && instance.getName(entry)"
            [featured]="instance.isFeatured(entry)"
            [collapsed]="!expanded && !instance.isFeatured(entry)"
            (expandClick)="expandClick.emit()"
        >
            <div #portal></div>
        </vdr-timeline-entry>
    `,
                    exportAs: 'historyEntry',
                    standalone: false,
                }]
        }], ctorParameters: () => [{ type: i1.HistoryEntryComponentService }], propDecorators: { entry: [{
                type: Input
            }], customer: [{
                type: Input
            }], expanded: [{
                type: Input
            }], expandClick: [{
                type: Output
            }], portalRef: [{
                type: ViewChild,
                args: ['portal', { static: true, read: ViewContainerRef }]
            }] } });

class CustomerHistoryComponent {
    constructor(historyEntryComponentService) {
        this.historyEntryComponentService = historyEntryComponentService;
        this.addNote = new EventEmitter();
        this.updateNote = new EventEmitter();
        this.deleteNote = new EventEmitter();
        this.note = '';
        this.expanded = false;
        this.type = HistoryEntryType;
    }
    hasCustomComponent(type) {
        return !!this.historyEntryComponentService.getComponent(type);
    }
    getDisplayType(entry) {
        switch (entry.type) {
            case HistoryEntryType.CUSTOMER_VERIFIED:
            case HistoryEntryType.CUSTOMER_EMAIL_UPDATE_VERIFIED:
            case HistoryEntryType.CUSTOMER_PASSWORD_RESET_VERIFIED:
                return 'success';
            case HistoryEntryType.CUSTOMER_REGISTERED:
                return 'muted';
            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:
                return 'error';
            default:
                return 'default';
        }
    }
    getTimelineIcon(entry) {
        switch (entry.type) {
            case HistoryEntryType.CUSTOMER_REGISTERED:
                return 'user';
            case HistoryEntryType.CUSTOMER_VERIFIED:
                return ['assign-user', 'is-solid'];
            case HistoryEntryType.CUSTOMER_NOTE:
                return 'note';
            case HistoryEntryType.CUSTOMER_ADDED_TO_GROUP:
            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:
                return 'users';
        }
    }
    isFeatured(entry) {
        switch (entry.type) {
            case HistoryEntryType.CUSTOMER_REGISTERED:
            case HistoryEntryType.CUSTOMER_VERIFIED:
                return true;
            default:
                return false;
        }
    }
    getName(entry) {
        const { administrator } = entry;
        if (administrator) {
            return `${administrator.firstName} ${administrator.lastName}`;
        }
        else {
            return `${this.customer.firstName} ${this.customer.lastName}`;
        }
    }
    addNoteToCustomer() {
        this.addNote.emit({ note: this.note });
        this.note = '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerHistoryComponent, deps: [{ token: i1.HistoryEntryComponentService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CustomerHistoryComponent, isStandalone: false, selector: "vdr-customer-history", inputs: { customer: "customer", history: "history" }, outputs: { addNote: "addNote", updateNote: "updateNote", deleteNote: "deleteNote" }, ngImport: i0, template: "<div class=\"entry-list\">\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\" *vdrIfPermissions=\"'UpdateCustomer'\"\n                        [isFirst]=\"true\">\n        <div class=\"note-entry\">\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToCustomer()\">\n                {{ 'order.add-note' | translate }}\n            </button>\n        </div>\n    </vdr-timeline-entry>\n    <ng-container *ngFor=\"let entry of history\">\n        <vdr-customer-history-entry-host\n            *ngIf=\"hasCustomComponent(entry.type); else defaultComponents\"\n            [customer]=\"customer\"\n            [entry]=\"entry\"\n            [expanded]=\"expanded\"\n            (expandClick)=\"expanded = !expanded\"\n        ></vdr-customer-history-entry-host>\n        <ng-template #defaultComponents>\n            <vdr-timeline-entry\n                [displayType]=\"getDisplayType(entry)\"\n                [iconShape]=\"getTimelineIcon(entry)\"\n                [createdAt]=\"entry.createdAt\"\n                [name]=\"getName(entry)\"\n                [featured]=\"isFeatured(entry)\"\n            >\n                <ng-container [ngSwitch]=\"entry.type\">\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_REGISTERED\">\n                        <div class=\"title\">\n                            {{ 'customer.history-customer-registered' | translate }}\n                        </div>\n                        <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\n                            {{ 'customer.history-using-native-auth-strategy' | translate }}\n                        </ng-container>\n                        <ng-template #namedStrategy>\n                            {{\n                                'customer.history-using-external-auth-strategy'\n                                    | translate: { strategy: entry.data.strategy }\n                            }}\n                        </ng-template>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_VERIFIED\">\n                        <div class=\"title\">\n                            {{ 'customer.history-customer-verified' | translate }}\n                        </div>\n                        <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\n                            {{ 'customer.history-using-native-auth-strategy' | translate }}\n                        </ng-container>\n                        <ng-template #namedStrategy>\n                            {{\n                                'customer.history-using-external-auth-strategy'\n                                    | translate: { strategy: entry.data.strategy }\n                            }}\n                        </ng-template>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_DETAIL_UPDATED\">\n                        <div class=\"flex\">\n                            {{ 'customer.history-customer-detail-updated' | translate }}\n                            <vdr-history-entry-detail>\n                                <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\n                            </vdr-history-entry-detail>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDED_TO_GROUP\">\n                        {{\n                            'customer.history-customer-added-to-group'\n                                | translate: { groupName: entry.data.groupName }\n                        }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_REMOVED_FROM_GROUP\">\n                        {{\n                            'customer.history-customer-removed-from-group'\n                                | translate: { groupName: entry.data.groupName }\n                        }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_CREATED\">\n                        {{ 'customer.history-customer-address-created' | translate }}\n                        <div class=\"flex\">\n                            <div class=\"address-string\">{{ entry.data.address }}</div>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_UPDATED\">\n                        {{ 'customer.history-customer-address-updated' | translate }}\n                        <div class=\"flex\">\n                            <div class=\"address-string\">{{ entry.data.address }}</div>\n                            <vdr-history-entry-detail>\n                                <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\n                            </vdr-history-entry-detail>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_DELETED\">\n                        {{ 'customer.history-customer-address-deleted' | translate }}\n                        <div class=\"address-string\">{{ entry.data.address }}</div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_UPDATED\">\n                        {{ 'customer.history-customer-password-updated' | translate }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_REQUESTED\">\n                        {{ 'customer.history-customer-password-reset-requested' | translate }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_VERIFIED\">\n                        {{ 'customer.history-customer-password-reset-verified' | translate }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_REQUESTED\">\n                        <div class=\"flex\">\n                            {{ 'customer.history-customer-email-update-requested' | translate }}\n                            <vdr-history-entry-detail>\n                                <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\n                                        entry.data.oldEmailAddress\n                                    }}\n                                </vdr-labeled-data>\n                                <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\n                                        entry.data.newEmailAddress\n                                    }}\n                                </vdr-labeled-data>\n                            </vdr-history-entry-detail>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_VERIFIED\">\n                        <div class=\"flex\">\n                            {{ 'customer.history-customer-email-update-verified' | translate }}\n                            <vdr-history-entry-detail>\n                                <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\n                                        entry.data.oldEmailAddress\n                                    }}\n                                </vdr-labeled-data>\n                                <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\n                                        entry.data.newEmailAddress\n                                    }}\n                                </vdr-labeled-data>\n                            </vdr-history-entry-detail>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_NOTE\">\n                        <div class=\"flex\">\n                            <div class=\"note-text\">\n                                {{ entry.data.note }}\n                            </div>\n                            <div class=\"flex-spacer\"></div>\n                            <vdr-dropdown>\n                                <button class=\"button-small ml-1\" vdrDropdownTrigger>\n                                    <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\n                                </button>\n                                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                    <button\n                                        vdrDropdownItem\n                                        (click)=\"updateNote.emit(entry)\"\n                                        [disabled]=\"!('UpdateCustomer' | hasPermission)\"\n                                    >\n                                        <clr-icon shape=\"edit\"></clr-icon>\n                                        {{ 'common.edit' | translate }}\n                                    </button>\n                                    <div class=\"dropdown-divider\"></div>\n                                    <button\n                                        vdrDropdownItem\n                                        (click)=\"deleteNote.emit(entry)\"\n                                        [disabled]=\"!('UpdateCustomer' | hasPermission)\"\n                                    >\n                                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                        {{ 'common.delete' | translate }}\n                                    </button>\n                                </vdr-dropdown-menu>\n                            </vdr-dropdown>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchDefault>\n                        <div class=\"title\">\n                            {{ entry.type | translate }}\n                        </div>\n                        <vdr-history-entry-detail *ngIf=\"entry.data\">\n                            <vdr-object-tree [value]=\"entry.data\"></vdr-object-tree>\n                        </vdr-history-entry-detail>\n                    </ng-container>\n                </ng-container>\n            </vdr-timeline-entry>\n        </ng-template>\n    </ng-container>\n    <vdr-timeline-entry [isLast]=\"true\"></vdr-timeline-entry>\n</div>\n", styles: [".entry-list{margin:24px 12px 24px 24px}.note-entry{display:flex;align-items:center}.note-entry .note{flex:1}.note-entry button{margin:0}textarea.note{flex:1;height:36px;border-radius:3px;margin-inline-end:6px}.note-text{color:var(--color-text-100);white-space:pre-wrap}.address-string{font-size:smaller;color:var(--color-text-200)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.ObjectTreeComponent, selector: "vdr-object-tree", inputs: ["value", "isArrayItem"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.TimelineEntryComponent, selector: "vdr-timeline-entry", inputs: ["displayType", "createdAt", "name", "featured", "iconShape", "isFirst", "isLast", "collapsed"], outputs: ["expandClick"] }, { kind: "component", type: i1.HistoryEntryDetailComponent, selector: "vdr-history-entry-detail" }, { kind: "component", type: CustomerHistoryEntryHostComponent, selector: "vdr-customer-history-entry-host", inputs: ["entry", "customer", "expanded"], outputs: ["expandClick"], exportAs: ["historyEntry"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerHistoryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-customer-history', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<div class=\"entry-list\">\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\" *vdrIfPermissions=\"'UpdateCustomer'\"\n                        [isFirst]=\"true\">\n        <div class=\"note-entry\">\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToCustomer()\">\n                {{ 'order.add-note' | translate }}\n            </button>\n        </div>\n    </vdr-timeline-entry>\n    <ng-container *ngFor=\"let entry of history\">\n        <vdr-customer-history-entry-host\n            *ngIf=\"hasCustomComponent(entry.type); else defaultComponents\"\n            [customer]=\"customer\"\n            [entry]=\"entry\"\n            [expanded]=\"expanded\"\n            (expandClick)=\"expanded = !expanded\"\n        ></vdr-customer-history-entry-host>\n        <ng-template #defaultComponents>\n            <vdr-timeline-entry\n                [displayType]=\"getDisplayType(entry)\"\n                [iconShape]=\"getTimelineIcon(entry)\"\n                [createdAt]=\"entry.createdAt\"\n                [name]=\"getName(entry)\"\n                [featured]=\"isFeatured(entry)\"\n            >\n                <ng-container [ngSwitch]=\"entry.type\">\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_REGISTERED\">\n                        <div class=\"title\">\n                            {{ 'customer.history-customer-registered' | translate }}\n                        </div>\n                        <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\n                            {{ 'customer.history-using-native-auth-strategy' | translate }}\n                        </ng-container>\n                        <ng-template #namedStrategy>\n                            {{\n                                'customer.history-using-external-auth-strategy'\n                                    | translate: { strategy: entry.data.strategy }\n                            }}\n                        </ng-template>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_VERIFIED\">\n                        <div class=\"title\">\n                            {{ 'customer.history-customer-verified' | translate }}\n                        </div>\n                        <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\n                            {{ 'customer.history-using-native-auth-strategy' | translate }}\n                        </ng-container>\n                        <ng-template #namedStrategy>\n                            {{\n                                'customer.history-using-external-auth-strategy'\n                                    | translate: { strategy: entry.data.strategy }\n                            }}\n                        </ng-template>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_DETAIL_UPDATED\">\n                        <div class=\"flex\">\n                            {{ 'customer.history-customer-detail-updated' | translate }}\n                            <vdr-history-entry-detail>\n                                <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\n                            </vdr-history-entry-detail>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDED_TO_GROUP\">\n                        {{\n                            'customer.history-customer-added-to-group'\n                                | translate: { groupName: entry.data.groupName }\n                        }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_REMOVED_FROM_GROUP\">\n                        {{\n                            'customer.history-customer-removed-from-group'\n                                | translate: { groupName: entry.data.groupName }\n                        }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_CREATED\">\n                        {{ 'customer.history-customer-address-created' | translate }}\n                        <div class=\"flex\">\n                            <div class=\"address-string\">{{ entry.data.address }}</div>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_UPDATED\">\n                        {{ 'customer.history-customer-address-updated' | translate }}\n                        <div class=\"flex\">\n                            <div class=\"address-string\">{{ entry.data.address }}</div>\n                            <vdr-history-entry-detail>\n                                <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\n                            </vdr-history-entry-detail>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_DELETED\">\n                        {{ 'customer.history-customer-address-deleted' | translate }}\n                        <div class=\"address-string\">{{ entry.data.address }}</div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_UPDATED\">\n                        {{ 'customer.history-customer-password-updated' | translate }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_REQUESTED\">\n                        {{ 'customer.history-customer-password-reset-requested' | translate }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_VERIFIED\">\n                        {{ 'customer.history-customer-password-reset-verified' | translate }}\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_REQUESTED\">\n                        <div class=\"flex\">\n                            {{ 'customer.history-customer-email-update-requested' | translate }}\n                            <vdr-history-entry-detail>\n                                <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\n                                        entry.data.oldEmailAddress\n                                    }}\n                                </vdr-labeled-data>\n                                <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\n                                        entry.data.newEmailAddress\n                                    }}\n                                </vdr-labeled-data>\n                            </vdr-history-entry-detail>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_VERIFIED\">\n                        <div class=\"flex\">\n                            {{ 'customer.history-customer-email-update-verified' | translate }}\n                            <vdr-history-entry-detail>\n                                <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\n                                        entry.data.oldEmailAddress\n                                    }}\n                                </vdr-labeled-data>\n                                <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\n                                        entry.data.newEmailAddress\n                                    }}\n                                </vdr-labeled-data>\n                            </vdr-history-entry-detail>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"type.CUSTOMER_NOTE\">\n                        <div class=\"flex\">\n                            <div class=\"note-text\">\n                                {{ entry.data.note }}\n                            </div>\n                            <div class=\"flex-spacer\"></div>\n                            <vdr-dropdown>\n                                <button class=\"button-small ml-1\" vdrDropdownTrigger>\n                                    <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\n                                </button>\n                                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                    <button\n                                        vdrDropdownItem\n                                        (click)=\"updateNote.emit(entry)\"\n                                        [disabled]=\"!('UpdateCustomer' | hasPermission)\"\n                                    >\n                                        <clr-icon shape=\"edit\"></clr-icon>\n                                        {{ 'common.edit' | translate }}\n                                    </button>\n                                    <div class=\"dropdown-divider\"></div>\n                                    <button\n                                        vdrDropdownItem\n                                        (click)=\"deleteNote.emit(entry)\"\n                                        [disabled]=\"!('UpdateCustomer' | hasPermission)\"\n                                    >\n                                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                        {{ 'common.delete' | translate }}\n                                    </button>\n                                </vdr-dropdown-menu>\n                            </vdr-dropdown>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchDefault>\n                        <div class=\"title\">\n                            {{ entry.type | translate }}\n                        </div>\n                        <vdr-history-entry-detail *ngIf=\"entry.data\">\n                            <vdr-object-tree [value]=\"entry.data\"></vdr-object-tree>\n                        </vdr-history-entry-detail>\n                    </ng-container>\n                </ng-container>\n            </vdr-timeline-entry>\n        </ng-template>\n    </ng-container>\n    <vdr-timeline-entry [isLast]=\"true\"></vdr-timeline-entry>\n</div>\n", styles: [".entry-list{margin:24px 12px 24px 24px}.note-entry{display:flex;align-items:center}.note-entry .note{flex:1}.note-entry button{margin:0}textarea.note{flex:1;height:36px;border-radius:3px;margin-inline-end:6px}.note-text{color:var(--color-text-100);white-space:pre-wrap}.address-string{font-size:smaller;color:var(--color-text-200)}\n"] }]
        }], ctorParameters: () => [{ type: i1.HistoryEntryComponentService }], propDecorators: { customer: [{
                type: Input
            }], history: [{
                type: Input
            }], addNote: [{
                type: Output
            }], updateNote: [{
                type: Output
            }], deleteNote: [{
                type: Output
            }] } });

const CUSTOMER_DETAIL_QUERY = gql `
    query CustomerDetailQuery($id: ID!, $orderListOptions: OrderListOptions) {
        customer(id: $id) {
            ...Customer
            groups {
                id
                name
            }
            orders(options: $orderListOptions) {
                items {
                    id
                    code
                    type
                    state
                    total
                    totalWithTax
                    currencyCode
                    createdAt
                    updatedAt
                    orderPlacedAt
                }
                totalItems
            }
        }
    }
    ${CUSTOMER_FRAGMENT}
`;
class CustomerDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, formBuilder, dataService, modalService, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.formBuilder = formBuilder;
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('Customer');
        this.addressCustomFields = this.getCustomFieldConfig('Address');
        this.detailForm = this.formBuilder.group({
            customer: this.formBuilder.group({
                title: '',
                firstName: ['', Validators.required],
                lastName: ['', Validators.required],
                phoneNumber: '',
                emailAddress: ['', [Validators.required, Validators.email]],
                password: '',
                customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
            }),
            addresses: new UntypedFormArray([]),
        });
        this.fetchHistory = new Subject();
        this.addressesToDeleteIds = new Set();
        this.addressDefaultsUpdated = false;
        this.ordersPerPage = 10;
        this.currentOrdersPage = 1;
        this.orderListUpdates$ = new Subject();
    }
    ngOnInit() {
        this.init();
        this.availableCountries$ = this.dataService.settings
            .getAvailableCountries()
            .mapSingle(result => result.countries.items)
            .pipe(shareReplay(1));
        const customerWithUpdates$ = this.entity$.pipe(merge(this.orderListUpdates$));
        this.orders$ = customerWithUpdates$.pipe(map(customer => customer.orders.items));
        this.ordersCount$ = this.entity$.pipe(map(customer => customer.orders.totalItems));
        this.history$ = this.fetchHistory.pipe(startWith(null), switchMap(() => this.dataService.customer
            .getCustomerHistory(this.id, {
            sort: {
                createdAt: SortOrder.DESC,
            },
        })
            .mapStream(data => data.customer?.history.items)));
    }
    ngOnDestroy() {
        this.destroy();
        this.orderListUpdates$.complete();
    }
    getAddressFormControls() {
        const formArray = this.detailForm.get(['addresses']);
        return formArray.controls;
    }
    setDefaultBillingAddressId(id) {
        this.defaultBillingAddressId = id;
        this.addressDefaultsUpdated = true;
    }
    setDefaultShippingAddressId(id) {
        this.defaultShippingAddressId = id;
        this.addressDefaultsUpdated = true;
    }
    toggleDeleteAddress(id) {
        if (this.addressesToDeleteIds.has(id)) {
            this.addressesToDeleteIds.delete(id);
        }
        else {
            this.addressesToDeleteIds.add(id);
        }
    }
    addAddress() {
        const addressFormArray = this.detailForm.get('addresses');
        const newAddress = this.formBuilder.group({
            fullName: '',
            company: '',
            streetLine1: ['', Validators.required],
            streetLine2: '',
            city: '',
            province: '',
            postalCode: '',
            countryCode: ['', Validators.required],
            phoneNumber: '',
            defaultShippingAddress: false,
            defaultBillingAddress: false,
            customFields: this.formBuilder.group(this.addressCustomFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {})),
        });
        addressFormArray.push(newAddress);
    }
    setOrderItemsPerPage(itemsPerPage) {
        this.ordersPerPage = +itemsPerPage;
        this.fetchOrdersList();
    }
    setOrderCurrentPage(page) {
        this.currentOrdersPage = +page;
        this.fetchOrdersList();
    }
    create() {
        const customerForm = this.detailForm.get('customer');
        if (!customerForm) {
            return;
        }
        const { title, emailAddress, firstName, lastName, phoneNumber, password } = customerForm.value;
        const customFields = customerForm.get('customFields')?.value;
        if (!emailAddress || !firstName || !lastName) {
            return;
        }
        const customer = {
            title,
            emailAddress,
            firstName,
            lastName,
            phoneNumber,
            customFields,
        };
        this.dataService.customer.createCustomer(customer, password).subscribe(({ createCustomer }) => {
            switch (createCustomer.__typename) {
                case 'Customer':
                    this.notificationService.success(marker('common.notify-create-success'), {
                        entity: 'Customer',
                    });
                    if (createCustomer.emailAddress && !password) {
                        this.notificationService.notify({
                            message: marker('customer.email-verification-sent'),
                            translationVars: { emailAddress },
                            type: 'info',
                            duration: 10000,
                        });
                    }
                    this.detailForm.markAsPristine();
                    this.addressDefaultsUpdated = false;
                    this.changeDetector.markForCheck();
                    this.router.navigate(['../', createCustomer.id], { relativeTo: this.route });
                    break;
                case 'EmailAddressConflictError':
                    this.notificationService.error(createCustomer.message);
            }
        });
    }
    save() {
        this.entity$
            .pipe(take(1), mergeMap(({ id }) => {
            const saveOperations = [];
            const customerForm = this.detailForm.get('customer');
            if (customerForm && customerForm.dirty) {
                const formValue = customerForm.value;
                const customFields = customerForm.get('customFields')?.value;
                const customer = {
                    id,
                    title: formValue.title,
                    emailAddress: formValue.emailAddress,
                    firstName: formValue.firstName,
                    lastName: formValue.lastName,
                    phoneNumber: formValue.phoneNumber,
                    customFields,
                };
                saveOperations.push(this.dataService.customer
                    .updateCustomer(customer)
                    .pipe(map(res => res.updateCustomer)));
            }
            const addressFormArray = this.detailForm.get('addresses');
            if ((addressFormArray && addressFormArray.dirty) || this.addressDefaultsUpdated) {
                for (const addressControl of addressFormArray.controls) {
                    if (addressControl.dirty || this.addressDefaultsUpdated) {
                        const address = addressControl.value;
                        const input = {
                            fullName: address.fullName,
                            company: address.company,
                            streetLine1: address.streetLine1,
                            streetLine2: address.streetLine2,
                            city: address.city,
                            province: address.province,
                            postalCode: address.postalCode,
                            countryCode: address.countryCode,
                            phoneNumber: address.phoneNumber,
                            defaultShippingAddress: this.defaultShippingAddressId === address.id,
                            defaultBillingAddress: this.defaultBillingAddressId === address.id,
                            customFields: address.customFields,
                        };
                        if (!address.id) {
                            saveOperations.push(this.dataService.customer
                                .createCustomerAddress(id, input)
                                .pipe(map(res => res.createCustomerAddress)));
                        }
                        else {
                            if (this.addressesToDeleteIds.has(address.id)) {
                                saveOperations.push(this.dataService.customer
                                    .deleteCustomerAddress(address.id)
                                    .pipe(map(res => res.deleteCustomerAddress)));
                            }
                            else {
                                saveOperations.push(this.dataService.customer
                                    .updateCustomerAddress({
                                    ...input,
                                    id: address.id,
                                })
                                    .pipe(map(res => res.updateCustomerAddress)));
                            }
                        }
                    }
                }
            }
            return forkJoin(saveOperations);
        }))
            .subscribe(data => {
            let notified = false;
            for (const result of data) {
                switch (result.__typename) {
                    case 'Customer':
                    case 'Address':
                    case 'Success':
                        if (!notified) {
                            this.notificationService.success(marker('common.notify-update-success'), {
                                entity: 'Customer',
                            });
                            notified = true;
                            this.detailForm.markAsPristine();
                            this.addressDefaultsUpdated = false;
                            this.changeDetector.markForCheck();
                            this.fetchHistory.next();
                            this.refreshCustomer().subscribe();
                        }
                        break;
                    case 'EmailAddressConflictError':
                        this.notificationService.error(result.message);
                        break;
                }
            }
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Customer',
            });
        });
    }
    addToGroup() {
        this.modalService
            .fromComponent(SelectCustomerGroupDialogComponent, {
            size: 'md',
        })
            .pipe(switchMap(groupIds => (groupIds ? from(groupIds) : EMPTY)), concatMap(groupId => this.dataService.customer.addCustomersToGroup(groupId, [this.id])))
            .subscribe({
            next: res => {
                this.notificationService.success(marker(`customer.add-customers-to-group-success`), {
                    customerCount: 1,
                    groupName: res.addCustomersToGroup.name,
                });
            },
            complete: () => {
                this.refreshCustomer().subscribe();
                this.fetchHistory.next();
            },
        });
    }
    removeFromGroup(group) {
        this.modalService
            .dialog({
            title: marker('customer.confirm-remove-customer-from-group'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response
            ? this.dataService.customer.removeCustomersFromGroup(group.id, [this.id])
            : EMPTY), switchMap(() => this.refreshCustomer()))
            .subscribe(result => {
            this.notificationService.success(marker(`customer.remove-customers-from-group-success`), {
                customerCount: 1,
                groupName: group.name,
            });
            this.fetchHistory.next();
        });
    }
    addNoteToCustomer({ note }) {
        this.dataService.customer.addNoteToCustomer(this.id, note).subscribe(() => {
            this.fetchHistory.next();
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Note',
            });
        });
    }
    updateNote(entry) {
        this.modalService
            .fromComponent(EditNoteDialogComponent, {
            closable: true,
            locals: {
                displayPrivacyControls: false,
                note: entry.data.note,
            },
        })
            .pipe(switchMap(result => {
            if (result) {
                return this.dataService.customer.updateCustomerNote({
                    noteId: entry.id,
                    note: result.note,
                });
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(result => {
            this.fetchHistory.next();
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Note',
            });
        });
    }
    deleteNote(entry) {
        return this.modalService
            .dialog({
            title: marker('common.confirm-delete-note'),
            body: entry.data.note,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomerNote(entry.id) : EMPTY)))
            .subscribe(() => {
            this.fetchHistory.next();
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'Note',
            });
        });
    }
    setFormValues(entity) {
        const customerGroup = this.detailForm.get('customer');
        if (customerGroup) {
            customerGroup.patchValue({
                title: entity.title ?? null,
                firstName: entity.firstName,
                lastName: entity.lastName,
                phoneNumber: entity.phoneNumber ?? null,
                emailAddress: entity.emailAddress,
                password: '',
                customFields: {},
            });
        }
        if (entity.addresses) {
            const addressesArray = new UntypedFormArray([]);
            for (const address of entity.addresses) {
                const { customFields, ...rest } = address;
                const addressGroup = this.formBuilder.group({
                    ...rest,
                    countryCode: address.country.code,
                    customFields: this.formBuilder.group(this.addressCustomFields.reduce((hash, field) => ({
                        ...hash,
                        [field.name]: address['customFields'][field.name],
                    }), {})),
                });
                addressesArray.push(addressGroup);
                if (address.defaultShippingAddress) {
                    this.defaultShippingAddressId = address.id;
                }
                if (address.defaultBillingAddress) {
                    this.defaultBillingAddressId = address.id;
                }
            }
            this.detailForm.setControl('addresses', addressesArray);
        }
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customer', 'customFields']), entity);
        }
        this.changeDetector.markForCheck();
    }
    /**
     * Refetch the customer with the current order list settings.
     */
    fetchOrdersList() {
        this.dataService
            .query(CustomerDetailQueryDocument, {
            id: this.id,
            orderListOptions: {
                take: this.ordersPerPage,
                skip: (this.currentOrdersPage - 1) * this.ordersPerPage,
                sort: { orderPlacedAt: SortOrder.DESC },
            },
        })
            .single$.pipe(map(data => data.customer), filter(notNullOrUndefined))
            .subscribe(result => this.orderListUpdates$.next(result));
    }
    refreshCustomer() {
        return this.dataService.query(CustomerDetailQueryDocument, {
            id: this.id,
            orderListOptions: { take: 0 },
        }).single$;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$1.FormBuilder }, { token: i1.DataService }, { token: i1.ModalService }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CustomerDetailComponent, isStandalone: false, selector: "vdr-customer-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"customer-detail\"></vdr-action-bar-items>\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"'UpdateCustomer'\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"customer-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-page-detail-layout>\n    <vdr-page-detail-sidebar>\n        <vdr-card *ngIf=\"entity$ | async as customer\">\n            <vdr-customer-status-label [customer]=\"customer\"></vdr-customer-status-label>\n            <vdr-labeled-data\n                class=\"last-login\"\n                *ngIf=\"customer.user?.lastLogin as lastLogin\"\n                [label]=\"'customer.last-login' | translate\"\n            >\n                <time [dateTime]=\"lastLogin\">{{ lastLogin | timeAgo }}</time>\n            </vdr-labeled-data>\n        </vdr-card>\n        <vdr-card\n            [title]=\"'customer.customer-groups' | translate\"\n            *ngIf=\"(entity$ | async)?.groups as groups\"\n        >\n            <div *ngIf=\"groups.length; else noGroups\">\n                <vdr-chip\n                    *ngFor=\"let group of groups\"\n                    [colorFrom]=\"group.id\"\n                    icon=\"times\"\n                    (iconClick)=\"removeFromGroup(group)\"\n                    >{{ group.name }}</vdr-chip\n                >\n            </div>\n            <ng-template #noGroups>\n                <span class=\"color-weight-400\">\n                    {{ 'customer.not-a-member-of-any-groups' | translate }}\n                </span>\n            </ng-template>\n            <div>\n                <button\n                    class=\"button-small mt-1\"\n                    (click)=\"addToGroup()\"\n                    *vdrIfPermissions=\"'UpdateCustomerGroup'\"\n                >\n                    <clr-icon shape=\"plus\"></clr-icon>\n                    {{ 'customer.add-customer-to-group' | translate }}\n                </button>\n            </div>\n        </vdr-card>\n        <vdr-card>\n            <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\n        </vdr-card>\n    </vdr-page-detail-sidebar>\n    <vdr-page-block>\n        <form class=\"form\" [formGroup]=\"detailForm.get('customer')\">\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field\n                        [label]=\"'customer.title' | translate\"\n                        for=\"title\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"title\" type=\"text\" formControlName=\"title\" />\n                    </vdr-form-field>\n                    <div><!-- spacer --></div>\n                    <vdr-form-field\n                        [label]=\"'customer.first-name' | translate\"\n                        for=\"firstName\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'customer.last-name' | translate\"\n                        for=\"lastName\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'customer.email-address' | translate\"\n                        for=\"emailAddress\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'customer.phone-number' | translate\"\n                        for=\"phoneNumber\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'customer.password' | translate\"\n                        for=\"password\"\n                        *ngIf=\"isNew$ | async\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Customer\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customer.customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n        </form>\n        <vdr-custom-detail-component-host\n            locationId=\"customer-detail\"\n            [entity$]=\"entity$\"\n            [detailForm]=\"detailForm\"\n        ></vdr-custom-detail-component-host>\n        <ng-container *ngIf=\"!(isNew$ | async)\">\n            <vdr-card [title]=\"'customer.addresses' | translate\">\n                <div class=\"form-grid\">\n                    <vdr-address-card\n                        *ngFor=\"let addressForm of getAddressFormControls()\"\n                        [class.to-delete]=\"addressesToDeleteIds.has(addressForm.value.id)\"\n                        [availableCountries]=\"availableCountries$ | async\"\n                        [isDefaultBilling]=\"defaultBillingAddressId === addressForm.value.id\"\n                        [isDefaultShipping]=\"defaultShippingAddressId === addressForm.value.id\"\n                        [addressForm]=\"addressForm\"\n                        [customFields]=\"addressCustomFields\"\n                        [editable]=\"\n                            (['UpdateCustomer'] | hasPermission) &&\n                            !addressesToDeleteIds.has(addressForm.value.id)\n                        \"\n                        (setAsDefaultBilling)=\"setDefaultBillingAddressId($event)\"\n                        (setAsDefaultShipping)=\"setDefaultShippingAddressId($event)\"\n                        (deleteAddress)=\"toggleDeleteAddress($event)\"\n                    ></vdr-address-card>\n                </div>\n                <button\n                    class=\"btn btn-secondary mt-2\"\n                    (click)=\"addAddress()\"\n                    *vdrIfPermissions=\"'UpdateCustomer'\"\n                >\n                    <clr-icon shape=\"plus\"></clr-icon>\n                    {{ 'customer.create-new-address' | translate }}\n                </button>\n            </vdr-card>\n            <vdr-card [title]=\"'customer.orders' | translate\" [paddingX]=\"false\">\n                <vdr-data-table-2\n                    id=\"customer-order-list\"\n                    [items]=\"orders$ | async\"\n                    [itemsPerPage]=\"ordersPerPage\"\n                    [totalItems]=\"ordersCount$ | async\"\n                    [currentPage]=\"currentOrdersPage\"\n                    [emptyStateLabel]=\"'customer.no-orders-placed' | translate\"\n                    (itemsPerPageChange)=\"setOrderItemsPerPage($event)\"\n                    (pageChange)=\"setOrderCurrentPage($event)\"\n                >\n                    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                        <ng-template let-order=\"item\">\n                            {{ order.id }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column\n                        [heading]=\"'common.created-at' | translate\"\n                        id=\"created-at\"\n                        [hiddenByDefault]=\"true\"\n                    >\n                        <ng-template let-order=\"item\">\n                            {{ order.createdAt | localeDate : 'short' }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\">\n                        <ng-template let-order=\"item\">\n                            <a class=\"button-ghost\" [routerLink]=\"['/orders', order.id]\"\n                                ><span>{{ order.code }}</span>\n                                <clr-icon shape=\"arrow right\"></clr-icon>\n                            </a>\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column\n                        [heading]=\"'order.order-type' | translate\"\n                        id=\"order-type\"\n                        [hiddenByDefault]=\"true\"\n                    >\n                        <ng-template let-order=\"item\">\n                            <vdr-chip>{{ order.type }}</vdr-chip>\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'order.state' | translate\" id=\"state\">\n                        <ng-template let-order=\"item\">\n                            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'order.total' | translate\" id=\"total\">\n                        <ng-template let-order=\"item\">\n                            {{ order.totalWithTax | localeCurrency : order.currencyCode }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\">\n                        <ng-template let-order=\"item\">\n                            {{ order.updatedAt | timeAgo }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'order.placed-at' | translate\" id=\"placed-at\">\n                        <ng-template let-order=\"item\">\n                            {{ order.orderPlacedAt | localeDate : 'short' }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-custom-field-column\n                        *ngFor=\"let customField of customFields\"\n                        [customField]=\"customField\"\n                    />\n                </vdr-data-table-2>\n            </vdr-card>\n            <vdr-card [title]=\"'customer.customer-history' | translate\">\n                <vdr-customer-history\n                    [customer]=\"entity$ | async\"\n                    [history]=\"history$ | async\"\n                    (addNote)=\"addNoteToCustomer($event)\"\n                    (updateNote)=\"updateNote($event)\"\n                    (deleteNote)=\"deleteNote($event)\"\n                ></vdr-customer-history>\n            </vdr-card>\n        </ng-container>\n    </vdr-page-block>\n</vdr-page-detail-layout>\n", styles: [".last-login{margin-inline-start:6px;color:var(--color-grey-500)}.to-delete{opacity:.5}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i2.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.OrderStateLabelComponent, selector: "vdr-order-state-label", inputs: ["state"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: CustomerStatusLabelComponent, selector: "vdr-customer-status-label", inputs: ["customer"] }, { kind: "component", type: AddressCardComponent, selector: "vdr-address-card", inputs: ["addressForm", "customFields", "availableCountries", "isDefaultBilling", "isDefaultShipping", "editable"], outputs: ["setAsDefaultShipping", "setAsDefaultBilling", "deleteAddress"] }, { kind: "component", type: CustomerHistoryComponent, selector: "vdr-customer-history", inputs: ["customer", "history"], outputs: ["addNote", "updateNote", "deleteNote"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.TimeAgoPipe, name: "timeAgo" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-customer-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"customer-detail\"></vdr-action-bar-items>\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"'UpdateCustomer'\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"customer-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-page-detail-layout>\n    <vdr-page-detail-sidebar>\n        <vdr-card *ngIf=\"entity$ | async as customer\">\n            <vdr-customer-status-label [customer]=\"customer\"></vdr-customer-status-label>\n            <vdr-labeled-data\n                class=\"last-login\"\n                *ngIf=\"customer.user?.lastLogin as lastLogin\"\n                [label]=\"'customer.last-login' | translate\"\n            >\n                <time [dateTime]=\"lastLogin\">{{ lastLogin | timeAgo }}</time>\n            </vdr-labeled-data>\n        </vdr-card>\n        <vdr-card\n            [title]=\"'customer.customer-groups' | translate\"\n            *ngIf=\"(entity$ | async)?.groups as groups\"\n        >\n            <div *ngIf=\"groups.length; else noGroups\">\n                <vdr-chip\n                    *ngFor=\"let group of groups\"\n                    [colorFrom]=\"group.id\"\n                    icon=\"times\"\n                    (iconClick)=\"removeFromGroup(group)\"\n                    >{{ group.name }}</vdr-chip\n                >\n            </div>\n            <ng-template #noGroups>\n                <span class=\"color-weight-400\">\n                    {{ 'customer.not-a-member-of-any-groups' | translate }}\n                </span>\n            </ng-template>\n            <div>\n                <button\n                    class=\"button-small mt-1\"\n                    (click)=\"addToGroup()\"\n                    *vdrIfPermissions=\"'UpdateCustomerGroup'\"\n                >\n                    <clr-icon shape=\"plus\"></clr-icon>\n                    {{ 'customer.add-customer-to-group' | translate }}\n                </button>\n            </div>\n        </vdr-card>\n        <vdr-card>\n            <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\n        </vdr-card>\n    </vdr-page-detail-sidebar>\n    <vdr-page-block>\n        <form class=\"form\" [formGroup]=\"detailForm.get('customer')\">\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field\n                        [label]=\"'customer.title' | translate\"\n                        for=\"title\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"title\" type=\"text\" formControlName=\"title\" />\n                    </vdr-form-field>\n                    <div><!-- spacer --></div>\n                    <vdr-form-field\n                        [label]=\"'customer.first-name' | translate\"\n                        for=\"firstName\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'customer.last-name' | translate\"\n                        for=\"lastName\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'customer.email-address' | translate\"\n                        for=\"emailAddress\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'customer.phone-number' | translate\"\n                        for=\"phoneNumber\"\n                        [readOnlyToggle]=\"!(isNew$ | async)\"\n                    >\n                        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'customer.password' | translate\"\n                        for=\"password\"\n                        *ngIf=\"isNew$ | async\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Customer\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customer.customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n        </form>\n        <vdr-custom-detail-component-host\n            locationId=\"customer-detail\"\n            [entity$]=\"entity$\"\n            [detailForm]=\"detailForm\"\n        ></vdr-custom-detail-component-host>\n        <ng-container *ngIf=\"!(isNew$ | async)\">\n            <vdr-card [title]=\"'customer.addresses' | translate\">\n                <div class=\"form-grid\">\n                    <vdr-address-card\n                        *ngFor=\"let addressForm of getAddressFormControls()\"\n                        [class.to-delete]=\"addressesToDeleteIds.has(addressForm.value.id)\"\n                        [availableCountries]=\"availableCountries$ | async\"\n                        [isDefaultBilling]=\"defaultBillingAddressId === addressForm.value.id\"\n                        [isDefaultShipping]=\"defaultShippingAddressId === addressForm.value.id\"\n                        [addressForm]=\"addressForm\"\n                        [customFields]=\"addressCustomFields\"\n                        [editable]=\"\n                            (['UpdateCustomer'] | hasPermission) &&\n                            !addressesToDeleteIds.has(addressForm.value.id)\n                        \"\n                        (setAsDefaultBilling)=\"setDefaultBillingAddressId($event)\"\n                        (setAsDefaultShipping)=\"setDefaultShippingAddressId($event)\"\n                        (deleteAddress)=\"toggleDeleteAddress($event)\"\n                    ></vdr-address-card>\n                </div>\n                <button\n                    class=\"btn btn-secondary mt-2\"\n                    (click)=\"addAddress()\"\n                    *vdrIfPermissions=\"'UpdateCustomer'\"\n                >\n                    <clr-icon shape=\"plus\"></clr-icon>\n                    {{ 'customer.create-new-address' | translate }}\n                </button>\n            </vdr-card>\n            <vdr-card [title]=\"'customer.orders' | translate\" [paddingX]=\"false\">\n                <vdr-data-table-2\n                    id=\"customer-order-list\"\n                    [items]=\"orders$ | async\"\n                    [itemsPerPage]=\"ordersPerPage\"\n                    [totalItems]=\"ordersCount$ | async\"\n                    [currentPage]=\"currentOrdersPage\"\n                    [emptyStateLabel]=\"'customer.no-orders-placed' | translate\"\n                    (itemsPerPageChange)=\"setOrderItemsPerPage($event)\"\n                    (pageChange)=\"setOrderCurrentPage($event)\"\n                >\n                    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                        <ng-template let-order=\"item\">\n                            {{ order.id }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column\n                        [heading]=\"'common.created-at' | translate\"\n                        id=\"created-at\"\n                        [hiddenByDefault]=\"true\"\n                    >\n                        <ng-template let-order=\"item\">\n                            {{ order.createdAt | localeDate : 'short' }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\">\n                        <ng-template let-order=\"item\">\n                            <a class=\"button-ghost\" [routerLink]=\"['/orders', order.id]\"\n                                ><span>{{ order.code }}</span>\n                                <clr-icon shape=\"arrow right\"></clr-icon>\n                            </a>\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column\n                        [heading]=\"'order.order-type' | translate\"\n                        id=\"order-type\"\n                        [hiddenByDefault]=\"true\"\n                    >\n                        <ng-template let-order=\"item\">\n                            <vdr-chip>{{ order.type }}</vdr-chip>\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'order.state' | translate\" id=\"state\">\n                        <ng-template let-order=\"item\">\n                            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'order.total' | translate\" id=\"total\">\n                        <ng-template let-order=\"item\">\n                            {{ order.totalWithTax | localeCurrency : order.currencyCode }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\">\n                        <ng-template let-order=\"item\">\n                            {{ order.updatedAt | timeAgo }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-column [heading]=\"'order.placed-at' | translate\" id=\"placed-at\">\n                        <ng-template let-order=\"item\">\n                            {{ order.orderPlacedAt | localeDate : 'short' }}\n                        </ng-template>\n                    </vdr-dt2-column>\n                    <vdr-dt2-custom-field-column\n                        *ngFor=\"let customField of customFields\"\n                        [customField]=\"customField\"\n                    />\n                </vdr-data-table-2>\n            </vdr-card>\n            <vdr-card [title]=\"'customer.customer-history' | translate\">\n                <vdr-customer-history\n                    [customer]=\"entity$ | async\"\n                    [history]=\"history$ | async\"\n                    (addNote)=\"addNoteToCustomer($event)\"\n                    (updateNote)=\"updateNote($event)\"\n                    (deleteNote)=\"deleteNote($event)\"\n                ></vdr-customer-history>\n            </vdr-card>\n        </ng-container>\n    </vdr-page-block>\n</vdr-page-detail-layout>\n", styles: [".last-login{margin-inline-start:6px;color:var(--color-grey-500)}.to-delete{opacity:.5}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1$1.FormBuilder }, { type: i1.DataService }, { type: i1.ModalService }, { type: i1.NotificationService }] });

const CUSTOMER_GROUP_DETAIL_QUERY = gql `
    query GetCustomerGroupDetail($id: ID!) {
        customerGroup(id: $id) {
            ...CustomerGroupDetail
        }
    }
    fragment CustomerGroupDetail on CustomerGroup {
        id
        createdAt
        updatedAt
        name
    }
`;
class CustomerGroupDetailComponent extends TypedBaseDetailComponent {
    constructor(formBuilder, dataService, modalService, notificationService) {
        super();
        this.formBuilder = formBuilder;
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('CustomerGroup');
        this.detailForm = this.formBuilder.group({
            name: '',
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
    }
    ngOnInit() {
        super.init();
    }
    create() {
        const formvalue = this.detailForm.value;
        if (formvalue.name) {
            this.dataService.customer
                .createCustomerGroup({
                name: formvalue.name,
                customFields: formvalue.customFields,
                customerIds: [],
            })
                .subscribe(({ createCustomerGroup }) => {
                this.notificationService.success(marker('common.notify-create-success'), {
                    entity: 'CustomerGroup',
                });
                this.detailForm.markAsPristine();
                this.router.navigate(['../', createCustomerGroup.id], { relativeTo: this.route });
            }, err => {
                this.notificationService.error(marker('common.notify-create-error'), {
                    entity: 'CustomerGroup',
                });
            });
        }
    }
    save() {
        const formValue = this.detailForm.value;
        this.dataService.customer.updateCustomerGroup({ id: this.id, ...formValue }).subscribe(() => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'CustomerGroup',
            });
            this.detailForm.markAsPristine();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'CustomerGroup',
            });
        });
    }
    setFormValues(entity) {
        this.detailForm.patchValue({
            name: entity.name,
        });
        if (this.customFields.length) {
            const customFieldsGroup = this.detailForm.get(['customFields']);
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerGroupDetailComponent, deps: [{ token: i1$1.FormBuilder }, { token: i1.DataService }, { token: i1.ModalService }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CustomerGroupDetailComponent, isStandalone: false, selector: "vdr-customer-group-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"customer-group-detail\"></vdr-action-bar-items>\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!(detailForm.valid && detailForm.dirty)\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"'UpdateCustomer'\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!(detailForm.valid && detailForm.dirty)\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"customer-group-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input id=\"name\" type=\"text\" formControlName=\"name\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"CustomerGroup\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"customer-group-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerGroupDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-customer-group-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"customer-group-detail\"></vdr-action-bar-items>\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!(detailForm.valid && detailForm.dirty)\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"'UpdateCustomer'\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!(detailForm.valid && detailForm.dirty)\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"customer-group-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input id=\"name\" type=\"text\" formControlName=\"name\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"CustomerGroup\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"customer-group-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormBuilder }, { type: i1.DataService }, { type: i1.ModalService }, { type: i1.NotificationService }] });

class CustomerGroupDetailDialogComponent {
    constructor(serverConfigService, formBuilder) {
        this.serverConfigService = serverConfigService;
        this.formBuilder = formBuilder;
        this.customFields = this.serverConfigService.getCustomFieldsFor('CustomerGroup');
    }
    ngOnInit() {
        this.form = this.formBuilder.group({
            name: [this.group.name, Validators.required],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        if (this.customFields.length) {
            const customFieldsGroup = this.form.get('customFields');
            for (const fieldDef of this.customFields) {
                const key = fieldDef.name;
                const value = this.group.customFields?.[key];
                const control = customFieldsGroup.get(key);
                if (control) {
                    control.patchValue(value);
                }
            }
        }
    }
    cancel() {
        this.resolveWith();
    }
    save() {
        this.resolveWith(this.form.value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerGroupDetailDialogComponent, deps: [{ token: i1.ServerConfigService }, { token: i1$1.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CustomerGroupDetailDialogComponent, isStandalone: false, selector: "vdr-customer-group-detail-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\n    <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\n</ng-template>\n<form [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(['CreateCustomerGroup', 'UpdateCustomerGroup'] | hasPermission)\"\n        />\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"CustomerGroup\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"form.get('customFields')\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n</form>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"!form.valid\" class=\"btn btn-primary\">\n        <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\n        <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\n    </button>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerGroupDetailDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-customer-group-detail-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\n    <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\n</ng-template>\n<form [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(['CreateCustomerGroup', 'UpdateCustomerGroup'] | hasPermission)\"\n        />\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <vdr-tabbed-custom-fields\n            entityName=\"CustomerGroup\"\n            [customFields]=\"customFields\"\n            [customFieldsFormGroup]=\"form.get('customFields')\"\n        ></vdr-tabbed-custom-fields>\n    </section>\n</form>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"!form.valid\" class=\"btn btn-primary\">\n        <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\n        <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\n    </button>\n</ng-template>\n" }]
        }], ctorParameters: () => [{ type: i1.ServerConfigService }, { type: i1$1.UntypedFormBuilder }] });

const deleteCustomerGroupsBulkAction = createBulkDeleteAction({
    location: 'customer-group-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteCustomerGroup),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.customer.deleteCustomerGroups(ids).pipe(map(res => res.deleteCustomerGroups)),
});

const GET_CUSTOMER_GROUP_LIST = gql `
    query GetCustomerGroupList($options: CustomerGroupListOptions) {
        customerGroups(options: $options) {
            items {
                ...CustomerGroup
            }
            totalItems
        }
    }
    ${CUSTOMER_GROUP_FRAGMENT}
`;
class CustomerGroupListComponent extends TypedBaseListComponent {
    constructor(dataService, notificationService, modalService, route, router) {
        super();
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.route = route;
        this.router = router;
        this.dataTableListId = 'customer-group-list';
        this.customFields = this.getCustomFieldConfig('CustomerGroup');
        this.fetchGroupMembers$ = new BehaviorSubject({
            skip: 0,
            take: 0,
            filterTerm: '',
        });
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'name',
            type: { kind: 'text' },
            label: marker('common.name'),
            filterField: 'name',
        })
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .connectToRoute(this.route);
        this.refreshActiveGroupMembers$ = new BehaviorSubject(undefined);
        super.configure({
            document: GetCustomerGroupListDocument,
            getItems: data => data.customerGroups,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: { contains: this.searchTermControl.value },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    ngOnInit() {
        super.ngOnInit();
        const activeGroupId$ = this.route.paramMap.pipe(map(pm => pm.get('contents')), distinctUntilChanged());
        this.listIsEmpty$ = this.items$.pipe(map(groups => groups.length === 0));
        this.activeGroup$ = combineLatest(this.items$, activeGroupId$).pipe(map(([groups, activeGroupId]) => {
            if (activeGroupId) {
                return groups.find(g => g.id === activeGroupId);
            }
        }));
        this.activeIndex$ = combineLatest(this.items$, activeGroupId$).pipe(map(([groups, activeGroupId]) => {
            if (activeGroupId) {
                return groups.findIndex(g => g.id === activeGroupId);
            }
            else {
                return -1;
            }
        }));
        const membersResult$ = combineLatest(this.activeGroup$, this.fetchGroupMembers$, this.refreshActiveGroupMembers$).pipe(switchMap(([activeGroup, { skip, take, filterTerm }]) => {
            if (activeGroup) {
                return this.dataService.customer
                    .getCustomerGroupWithCustomers(activeGroup.id, {
                    skip,
                    take,
                    filter: {
                        emailAddress: {
                            contains: filterTerm,
                        },
                    },
                })
                    .mapStream(res => res.customerGroup?.customers);
            }
            else {
                return of(undefined);
            }
        }));
        this.members$ = membersResult$.pipe(map(res => res?.items ?? []));
        this.membersTotal$ = membersResult$.pipe(map(res => res?.totalItems ?? 0));
    }
    closeMembers() {
        const params = { ...this.route.snapshot.params };
        delete params.contents;
        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });
    }
    addToGroup(group) {
        this.modalService
            .fromComponent(AddCustomerToGroupDialogComponent, {
            locals: {
                group,
                route: this.route,
            },
            size: 'md',
            verticalAlign: 'top',
        })
            .pipe(switchMap(customerIds => customerIds
            ? this.dataService.customer
                .addCustomersToGroup(group.id, customerIds)
                .pipe(mapTo(customerIds))
            : EMPTY))
            .subscribe({
            next: result => {
                this.notificationService.success(marker(`customer.add-customers-to-group-success`), {
                    customerCount: result.length,
                    groupName: group.name,
                });
                this.refreshActiveGroupMembers$.next();
            },
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerGroupListComponent, deps: [{ token: i1.DataService }, { token: i1.NotificationService }, { token: i1.ModalService }, { token: i2.ActivatedRoute }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CustomerGroupListComponent, isStandalone: false, selector: "vdr-customer-group-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"customer-group-list\"></vdr-action-bar-items>\n            <a class=\"btn btn-primary\" *vdrIfPermissions=\"'CreateCustomerGroup'\" [routerLink]=\"['./', 'create']\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'customer.create-new-customer-group' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"customer-group-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-split-view [rightPanelOpen]=\"activeGroup$ | async\" (closeClicked)=\"closeMembers()\">\n    <ng-template vdrSplitViewLeft>\n        <vdr-data-table-2\n            class=\"mt-2\"\n            [id]=\"dataTableListId\"\n            [items]=\"items$ | async\"\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            [totalItems]=\"totalItems$ | async\"\n            [currentPage]=\"currentPage$ | async\"\n            [filters]=\"filters\"\n            [activeIndex]=\"activeIndex$ | async\"\n            (pageChange)=\"setPageNumber($event)\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n            (visibleColumnsChange)=\"setVisibleColumns($event)\"\n        >\n            <vdr-bulk-action-menu\n                locationId=\"customer-group-list\"\n                [hostComponent]=\"this\"\n                [selectionManager]=\"selectionManager\"\n            ></vdr-bulk-action-menu>\n            <vdr-dt2-search\n                [searchTermControl]=\"searchTermControl\"\n                [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n            ></vdr-dt2-search>\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.id }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('createdAt')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.createdAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('updatedAt')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.updatedAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.name' | translate\" id=\"name\"\n                [optional]=\"false\"\n                [sort]=\"sorts.get('name')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    <a class=\"button-ghost\" [routerLink]=\"['./', customerGroup.id]\"\n                        ><span>{{ customerGroup.name }}</span>\n                        <clr-icon shape=\"arrow right\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-custom-field-column *ngFor=\"let field of customFields\" [customField]=\"field\" [sorts]=\"sorts\" />\n            <vdr-dt2-column\n                [heading]=\"'common.view-contents' | translate\" id=\"view-contents\"\n                [optional]=\"false\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    <a\n                        class=\"button-small bg-weight-150\"\n                        [routerLink]=\"['./', { contents: customerGroup.id }]\"\n                        queryParamsHandling=\"preserve\"\n                    >\n                        <span>{{ 'customer.view-group-members' | translate }}</span>\n                        <clr-icon shape=\"file-group\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n        </vdr-data-table-2>\n    </ng-template>\n    <ng-template vdrSplitViewRight [splitViewTitle]=\"(activeGroup$ | async)?.name\">\n        <ng-container *ngIf=\"activeGroup$ | async as activeGroup\">\n            <button class=\"button-ghost ml-4\" (click)=\"addToGroup(activeGroup)\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                <span>{{\n                    'customer.add-customers-to-group' | translate : { groupName: activeGroup.name }\n                }}</span>\n            </button>\n            <vdr-customer-group-member-list\n                locationId=\"customer-group-members-list\"\n                [members]=\"members$ | async\"\n                [route]=\"route\"\n                [totalItems]=\"membersTotal$ | async\"\n                [activeGroup]=\"activeGroup$ | async\"\n                (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\n            />\n        </ng-container>\n    </ng-template>\n</vdr-split-view>\n", styles: ["vdr-empty-placeholder{flex:1}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.SplitViewComponent, selector: "vdr-split-view", inputs: ["rightPanelOpen"], outputs: ["closeClicked"] }, { kind: "directive", type: i1.SplitViewLeftDirective, selector: "[vdrSplitViewLeft]" }, { kind: "directive", type: i1.SplitViewRightDirective, selector: "[vdrSplitViewRight]", inputs: ["splitViewTitle"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: CustomerGroupMemberListComponent, selector: "vdr-customer-group-member-list", inputs: ["locationId", "members", "totalItems", "route", "selectedMemberIds", "activeGroup"], outputs: ["selectionChange", "fetchParamsChange"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerGroupListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-customer-group-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"customer-group-list\"></vdr-action-bar-items>\n            <a class=\"btn btn-primary\" *vdrIfPermissions=\"'CreateCustomerGroup'\" [routerLink]=\"['./', 'create']\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'customer.create-new-customer-group' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"customer-group-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-split-view [rightPanelOpen]=\"activeGroup$ | async\" (closeClicked)=\"closeMembers()\">\n    <ng-template vdrSplitViewLeft>\n        <vdr-data-table-2\n            class=\"mt-2\"\n            [id]=\"dataTableListId\"\n            [items]=\"items$ | async\"\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            [totalItems]=\"totalItems$ | async\"\n            [currentPage]=\"currentPage$ | async\"\n            [filters]=\"filters\"\n            [activeIndex]=\"activeIndex$ | async\"\n            (pageChange)=\"setPageNumber($event)\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n            (visibleColumnsChange)=\"setVisibleColumns($event)\"\n        >\n            <vdr-bulk-action-menu\n                locationId=\"customer-group-list\"\n                [hostComponent]=\"this\"\n                [selectionManager]=\"selectionManager\"\n            ></vdr-bulk-action-menu>\n            <vdr-dt2-search\n                [searchTermControl]=\"searchTermControl\"\n                [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n            ></vdr-dt2-search>\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.id }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('createdAt')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.createdAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('updatedAt')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.updatedAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.name' | translate\" id=\"name\"\n                [optional]=\"false\"\n                [sort]=\"sorts.get('name')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    <a class=\"button-ghost\" [routerLink]=\"['./', customerGroup.id]\"\n                        ><span>{{ customerGroup.name }}</span>\n                        <clr-icon shape=\"arrow right\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-custom-field-column *ngFor=\"let field of customFields\" [customField]=\"field\" [sorts]=\"sorts\" />\n            <vdr-dt2-column\n                [heading]=\"'common.view-contents' | translate\" id=\"view-contents\"\n                [optional]=\"false\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    <a\n                        class=\"button-small bg-weight-150\"\n                        [routerLink]=\"['./', { contents: customerGroup.id }]\"\n                        queryParamsHandling=\"preserve\"\n                    >\n                        <span>{{ 'customer.view-group-members' | translate }}</span>\n                        <clr-icon shape=\"file-group\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n        </vdr-data-table-2>\n    </ng-template>\n    <ng-template vdrSplitViewRight [splitViewTitle]=\"(activeGroup$ | async)?.name\">\n        <ng-container *ngIf=\"activeGroup$ | async as activeGroup\">\n            <button class=\"button-ghost ml-4\" (click)=\"addToGroup(activeGroup)\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                <span>{{\n                    'customer.add-customers-to-group' | translate : { groupName: activeGroup.name }\n                }}</span>\n            </button>\n            <vdr-customer-group-member-list\n                locationId=\"customer-group-members-list\"\n                [members]=\"members$ | async\"\n                [route]=\"route\"\n                [totalItems]=\"membersTotal$ | async\"\n                [activeGroup]=\"activeGroup$ | async\"\n                (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\n            />\n        </ng-container>\n    </ng-template>\n</vdr-split-view>\n", styles: ["vdr-empty-placeholder{flex:1}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1.NotificationService }, { type: i1.ModalService }, { type: i2.ActivatedRoute }, { type: i2.Router }] });

const removeCustomerGroupMembersBulkAction = {
    location: 'customer-group-members-list',
    label: marker('customer.remove-from-group'),
    icon: 'trash',
    iconClass: 'is-danger',
    requiresPermission: Permission.UpdateCustomerGroup,
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const modalService = injector.get(ModalService);
        const dataService = injector.get(DataService);
        const notificationService = injector.get(NotificationService);
        const group = hostComponent.activeGroup;
        const customerIds = selection.map(s => s.id);
        dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({
            complete: () => {
                notificationService.success(marker(`customer.remove-customers-from-group-success`), {
                    customerCount: customerIds.length,
                    groupName: group.name,
                });
                clearSelection();
                hostComponent.refresh();
            },
        });
    },
};

const deleteCustomersBulkAction = createBulkDeleteAction({
    location: 'customer-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteCustomer),
    getItemName: item => item.firstName + ' ' + item.lastName,
    bulkDelete: (dataService, ids) => dataService.customer.deleteCustomers(ids).pipe(map(res => res.deleteCustomers)),
});

const CUSTOMER_LIST_QUERY = gql `
    query CustomerListQuery($options: CustomerListOptions) {
        customers(options: $options) {
            items {
                ...CustomerListItem
            }
            totalItems
        }
    }

    fragment CustomerListItem on Customer {
        id
        createdAt
        updatedAt
        title
        firstName
        lastName
        emailAddress
        user {
            id
            verified
        }
    }
`;
class CustomerListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'customer-list';
        this.customFields = this.getCustomFieldConfig('Customer');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'firstName',
            type: { kind: 'text' },
            label: marker('customer.first-name'),
            filterField: 'firstName',
        })
            .addFilter({
            name: 'lastName',
            type: { kind: 'text' },
            label: marker('customer.last-name'),
            filterField: 'lastName',
        })
            .addFilter({
            name: 'emailAddress',
            type: { kind: 'text' },
            label: marker('customer.email-address'),
            filterField: 'emailAddress',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'lastName' })
            .addSort({ name: 'emailAddress' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        this.configure({
            document: CustomerListQueryDocument,
            getItems: data => data.customers,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        ...(this.searchTermControl.value
                            ? {
                                emailAddress: {
                                    contains: this.searchTermControl.value,
                                },
                                lastName: {
                                    contains: this.searchTermControl.value,
                                },
                                postalCode: {
                                    contains: this.searchTermControl.value,
                                },
                            }
                            : {}),
                        ...this.filters.createFilterInput(),
                    },
                    filterOperator: this.searchTermControl.value ? LogicalOperator.OR : LogicalOperator.AND,
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.sorts.valueChanges, this.filters.valueChanges],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CustomerListComponent, isStandalone: false, selector: "vdr-customer-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"customer-list\"></vdr-action-bar-items>\n            <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateCustomer'\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'customer.create-new-customer' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"customer-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"customer-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'customer.search-customers-by-email-last-name-postal-code' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-customer=\"item\">\n            {{ customer.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-customer=\"item\">\n            {{ customer.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-customer=\"item\">\n            {{ customer.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('lastName')\">\n        <ng-template let-customer=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', customer.id]\"\n                ><span> {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }} </span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.status' | translate\" id=\"status\">\n        <ng-template let-customer=\"item\">\n            <vdr-customer-status-label [customer]=\"customer\" />\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.email-address' | translate\" id=\"email-address\" [sort]=\"sorts.get('emailAddress')\">\n        <ng-template let-customer=\"item\">\n            {{ customer.emailAddress }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let field of customFields\" [customField]=\"field\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [".search-input{margin-top:6px;min-width:300px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: CustomerStatusLabelComponent, selector: "vdr-customer-status-label", inputs: ["customer"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-customer-list', standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"customer-list\"></vdr-action-bar-items>\n            <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateCustomer'\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'customer.create-new-customer' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"customer-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"customer-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'customer.search-customers-by-email-last-name-postal-code' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-customer=\"item\">\n            {{ customer.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-customer=\"item\">\n            {{ customer.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-customer=\"item\">\n            {{ customer.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('lastName')\">\n        <ng-template let-customer=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', customer.id]\"\n                ><span> {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }} </span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.status' | translate\" id=\"status\">\n        <ng-template let-customer=\"item\">\n            <vdr-customer-status-label [customer]=\"customer\" />\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.email-address' | translate\" id=\"email-address\" [sort]=\"sorts.get('emailAddress')\">\n        <ng-template let-customer=\"item\">\n            {{ customer.emailAddress }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let field of customFields\" [customField]=\"field\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [".search-input{margin-top:6px;min-width:300px}\n"] }]
        }], ctorParameters: () => [] });

const createRoutes = (pageService) => [
    {
        path: 'customers',
        component: PageComponent,
        data: {
            locationId: 'customer-list',
            breadcrumb: marker('breadcrumb.customers'),
        },
        children: pageService.getPageTabRoutes('customer-list'),
    },
    {
        path: 'customers/:id',
        component: PageComponent,
        data: {
            locationId: 'customer-detail',
            breadcrumb: { label: marker('breadcrumb.customers'), link: ['../', 'customers'] },
        },
        children: pageService.getPageTabRoutes('customer-detail'),
    },
    {
        path: 'groups',
        component: PageComponent,
        data: {
            locationId: 'customer-group-list',
            breadcrumb: marker('breadcrumb.customer-groups'),
        },
        children: pageService.getPageTabRoutes('customer-group-list'),
    },
    {
        path: 'groups/:id',
        component: PageComponent,
        data: {
            locationId: 'customer-group-detail',
            breadcrumb: { label: marker('breadcrumb.customer-groups'), link: ['../', 'groups'] },
        },
        children: pageService.getPageTabRoutes('customer-group-detail'),
    },
];
function customerBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.customers',
        getName: customer => `${customer.firstName} ${customer.lastName}`,
        route: 'customers',
    });
}

class CustomerModule {
    static { this.hasRegisteredTabsAndBulkActions = false; }
    constructor(bulkActionRegistryService, pageService) {
        if (CustomerModule.hasRegisteredTabsAndBulkActions) {
            return;
        }
        bulkActionRegistryService.registerBulkAction(deleteCustomersBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteCustomerGroupsBulkAction);
        bulkActionRegistryService.registerBulkAction(removeCustomerGroupMembersBulkAction);
        pageService.registerPageTab({
            priority: 0,
            location: 'customer-list',
            tab: marker('customer.customers'),
            route: '',
            component: CustomerListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'customer-detail',
            tab: marker('customer.customer'),
            route: '',
            component: detailComponentWithResolver({
                component: CustomerDetailComponent,
                query: CustomerDetailQueryDocument,
                entityKey: 'customer',
                variables: {
                    orderListOptions: {
                        sort: {
                            orderPlacedAt: SortOrder.DESC,
                        },
                    },
                },
                getBreadcrumbs: entity => [
                    {
                        label: entity
                            ? `${entity?.firstName} ${entity?.lastName}`
                            : marker('customer.create-new-customer'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'customer-group-list',
            tab: marker('customer.customer-groups'),
            route: '',
            component: CustomerGroupListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'customer-group-detail',
            tab: marker('customer.customer-group'),
            route: '',
            component: detailComponentWithResolver({
                component: CustomerGroupDetailComponent,
                query: GetCustomerGroupDetailDocument,
                entityKey: 'customerGroup',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('customer.create-new-customer-group'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        CustomerModule.hasRegisteredTabsAndBulkActions = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerModule, deps: [{ token: i1.BulkActionRegistryService }, { token: i1.PageService }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.4", ngImport: i0, type: CustomerModule, declarations: [CustomerListComponent,
            CustomerDetailComponent,
            CustomerStatusLabelComponent,
            AddressCardComponent,
            CustomerGroupListComponent,
            CustomerGroupDetailDialogComponent,
            AddCustomerToGroupDialogComponent,
            CustomerGroupMemberListComponent,
            SelectCustomerGroupDialogComponent,
            CustomerHistoryComponent,
            AddressDetailDialogComponent,
            CustomerHistoryEntryHostComponent,
            CustomerGroupDetailComponent], imports: [SharedModule, i2.RouterModule], exports: [AddressCardComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerModule, providers: [
            {
                provide: ROUTES,
                useFactory: (pageService) => createRoutes(pageService),
                multi: true,
                deps: [PageService],
            },
        ], imports: [SharedModule, RouterModule.forChild([])] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CustomerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [SharedModule, RouterModule.forChild([])],
                    providers: [
                        {
                            provide: ROUTES,
                            useFactory: (pageService) => createRoutes(pageService),
                            multi: true,
                            deps: [PageService],
                        },
                    ],
                    declarations: [
                        CustomerListComponent,
                        CustomerDetailComponent,
                        CustomerStatusLabelComponent,
                        AddressCardComponent,
                        CustomerGroupListComponent,
                        CustomerGroupDetailDialogComponent,
                        AddCustomerToGroupDialogComponent,
                        CustomerGroupMemberListComponent,
                        SelectCustomerGroupDialogComponent,
                        CustomerHistoryComponent,
                        AddressDetailDialogComponent,
                        CustomerHistoryEntryHostComponent,
                        CustomerGroupDetailComponent,
                    ],
                    exports: [AddressCardComponent],
                }]
        }], ctorParameters: () => [{ type: i1.BulkActionRegistryService }, { type: i1.PageService }] });

// This file was generated by the build-public-api.ts script

/**
 * Generated bundle index. Do not edit.
 */

export { AddCustomerToGroupDialogComponent, AddressCardComponent, AddressDetailDialogComponent, CUSTOMER_DETAIL_QUERY, CUSTOMER_GROUP_DETAIL_QUERY, CUSTOMER_LIST_QUERY, CustomerDetailComponent, CustomerGroupDetailComponent, CustomerGroupDetailDialogComponent, CustomerGroupListComponent, CustomerGroupMemberListComponent, CustomerHistoryComponent, CustomerHistoryEntryHostComponent, CustomerListComponent, CustomerModule, CustomerStatusLabelComponent, GET_CUSTOMER_GROUP_LIST, SelectCustomerGroupDialogComponent, createRoutes, customerBreadcrumb, deleteCustomerGroupsBulkAction, deleteCustomersBulkAction, removeCustomerGroupMembersBulkAction };
//# sourceMappingURL=vendure-admin-ui-customer.mjs.map
