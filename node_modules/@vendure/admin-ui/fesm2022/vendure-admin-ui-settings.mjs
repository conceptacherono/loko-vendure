import * as i0 from '@angular/core';
import { Directive, EventEmitter, ContentChild, Output, Input, ChangeDetectionStrategy, Component, ViewChild, Injectable, inject, NgModule } from '@angular/core';
import * as i1 from '@vendure/admin-ui/core';
import { SelectionManager, GetZoneMembersDocument, GetCountryListDocument, ADMINISTRATOR_FRAGMENT, TypedBaseDetailComponent, getCustomFieldsDefaults, Permission, createBulkDeleteAction, TypedBaseListComponent, GetAdministratorListDocument, LogicalOperator, CHANNEL_FRAGMENT, GetChannelListDocument, COUNTRY_FRAGMENT, createUpdatedTranslatable, findTranslation, LanguageCode, PAYMENT_METHOD_FRAGMENT, configurableDefinitionToInstance, toConfigurableOperationInput, getConfigArgValue, createBulkAssignToChannelAction, AssignPaymentMethodsToChannelDocument, createBulkRemoveFromChannelAction, RemovePaymentMethodsFromChannelDocument, GetPaymentMethodListDocument, ROLE_FRAGMENT, GetRoleListDocument, GetSellerListDocument, SHIPPING_METHOD_FRAGMENT, AssignShippingMethodsToChannelDocument, RemoveShippingMethodsFromChannelDocument, GetShippingMethodListDocument, CreateStockLocationDocument, UpdateStockLocationDocument, DeletionResult, DeleteStockLocationsDocument, AssignStockLocationsToChannelDocument, RemoveStockLocationsFromChannelDocument, GetStockLocationListDocument, TAX_CATEGORY_FRAGMENT, GetTaxCategoryListDocument, TAX_RATE_FRAGMENT, GetTaxRateListDocument, GetZoneListDocument, DataService, NotificationService, BaseEntityResolver, PageComponent, GetProfileDetailDocument, GetGlobalSettingsDetailDocument, detailComponentWithResolver, GetSellerDetailDocument, GetChannelDetailDocument, GetAdministratorDetailDocument, GetRoleDetailDocument, GetShippingMethodDetailDocument, GetPaymentMethodDetailDocument, GetTaxCategoryDetailDocument, GetTaxRateDetailDocument, GetCountryDetailDocument, GetZoneDetailDocument, GetStockLocationDetailDocument, SharedModule, PageService } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import { take, takeUntil, startWith, map, withLatestFrom, mergeMap, tap, switchMap as switchMap$1, distinctUntilChanged, mapTo } from 'rxjs/operators';
import * as i2$1 from '@angular/forms';
import { FormControl, Validators } from '@angular/forms';
import { Subject, BehaviorSubject, merge, switchMap, of, combineLatest, EMPTY } from 'rxjs';
import * as i3 from '@clr/angular';
import * as i2 from '@angular/common';
import * as i3$1 from '@angular/router';
import { RouterModule, ROUTES } from '@angular/router';
import * as i5 from '@ngx-translate/core';
import { marker } from '@biesbjerg/ngx-translate-extract-marker';
import { CUSTOMER_ROLE_CODE, DEFAULT_CHANNEL_CODE, SUPER_ADMIN_ROLE_CODE } from '@vendure/common/lib/shared-constants';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import * as i4 from '@ng-select/ng-select';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { unique } from '@vendure/common/lib/unique';
import * as i5$1 from '@angular/cdk/overlay';

class ZoneMemberControlsDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneMemberControlsDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.2.4", type: ZoneMemberControlsDirective, isStandalone: false, selector: "[vdrZoneMemberControls]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneMemberControlsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[vdrZoneMemberControls]',
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });

class ZoneMemberListHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneMemberListHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.2.4", type: ZoneMemberListHeaderDirective, isStandalone: false, selector: "[vdrZoneMemberListHeader]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneMemberListHeaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[vdrZoneMemberListHeader]',
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });

class ZoneMemberListComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.selectedMemberIds = [];
        this.selectionChange = new EventEmitter();
        this.filterTermControl = new FormControl('');
        this.currentPage = 1;
        this.itemsPerPage = 10;
        this.selectionManager = new SelectionManager({
            multiSelect: true,
            itemsAreEqual: (a, b) => a.id === b.id,
            additiveMode: true,
        });
        this.membersInput$ = new Subject();
        this.activeZoneInput$ = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
        this.refresh$ = new Subject();
    }
    ngOnInit() {
        const activeZoneMembers$ = merge(this.activeZoneInput$, this.refresh$).pipe(switchMap(activeZone => this.activeZone
            ? this.dataService
                .query(GetZoneMembersDocument, { zoneId: this.activeZone.id })
                .mapSingle(({ zone }) => zone?.members ?? [])
            : of([])));
        this.members$ = merge(activeZoneMembers$, this.membersInput$);
        this.members$.pipe(take(1)).subscribe(members => {
            this.selectionManager.setCurrentItems(members?.filter(m => this.selectedMemberIds.includes(m.id)) ?? []);
        });
        this.selectionManager.selectionChanges$.pipe(takeUntil(this.destroy$)).subscribe(selection => {
            this.selectionChange.emit(selection.map(s => s.id));
        });
        this.filteredMembers$ = combineLatest(this.members$, this.filterTermControl.valueChanges.pipe(startWith(''))).pipe(map(([members, filterTerm]) => {
            if (filterTerm) {
                const term = filterTerm?.toLocaleLowerCase() ?? '';
                return members.filter(m => m.name.toLocaleLowerCase().includes(term) ||
                    m.code.toLocaleLowerCase().includes(term));
            }
            else {
                return members;
            }
        }));
        this.totalItems$ = this.filteredMembers$.pipe(map(members => members.length));
    }
    ngOnChanges(changes) {
        if ('members' in changes) {
            this.membersInput$.next(this.members ?? []);
        }
        if ('activeZone' in changes) {
            this.activeZoneInput$.next(this.activeZone);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    refresh() {
        this.refresh$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneMemberListComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ZoneMemberListComponent, isStandalone: false, selector: "vdr-zone-member-list", inputs: { locationId: "locationId", members: "members", selectedMemberIds: "selectedMemberIds", activeZone: "activeZone" }, outputs: { selectionChange: "selectionChange" }, queries: [{ propertyName: "headerTemplate", first: true, predicate: ZoneMemberListHeaderDirective, descendants: true }, { propertyName: "controlsTemplate", first: true, predicate: ZoneMemberControlsDirective, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<vdr-data-table-2\n    [id]=\"locationId\"\n    [items]=\"filteredMembers$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [itemsPerPage]=\"itemsPerPage\"\n    [currentPage]=\"currentPage\"\n    (itemsPerPageChange)=\"itemsPerPage = $event\"\n    (pageChange)=\"currentPage = $event\"\n>\n    <vdr-bulk-action-menu\n        [locationId]=\"locationId\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"filterTermControl\"\n        [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-member=\"item\">\n            {{ member.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n        <ng-template let-member=\"item\">\n            {{ member.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n        <ng-template let-member=\"item\">\n            {{ member.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\n        <ng-template let-member=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['/settings/countries', member.id]\"\n                ><span> {{ member.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\">\n        <ng-template let-member=\"item\">\n            {{ member.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-member=\"item\">\n            <vdr-chip  *ngIf=\"member.enabled\" colorType=\"success\">{{ 'common.enabled' | translate }}</vdr-chip>\n            <vdr-chip  *ngIf=\"!member.enabled\" colorType=\"warning\">{{ 'common.disabled' | translate }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n</vdr-data-table-2>\n", styles: [".members-header{background-color:var(--color-component-bg-100);position:sticky;top:0;padding:6px;z-index:5;border-bottom:1px solid var(--color-component-border-200)}.members-header .header-title-row{display:flex;justify-content:space-between;align-items:center}.members-header .clr-input{width:100%}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneMemberListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-zone-member-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-data-table-2\n    [id]=\"locationId\"\n    [items]=\"filteredMembers$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [itemsPerPage]=\"itemsPerPage\"\n    [currentPage]=\"currentPage\"\n    (itemsPerPageChange)=\"itemsPerPage = $event\"\n    (pageChange)=\"currentPage = $event\"\n>\n    <vdr-bulk-action-menu\n        [locationId]=\"locationId\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"filterTermControl\"\n        [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-member=\"item\">\n            {{ member.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n        <ng-template let-member=\"item\">\n            {{ member.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n        <ng-template let-member=\"item\">\n            {{ member.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\n        <ng-template let-member=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['/settings/countries', member.id]\"\n                ><span> {{ member.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\">\n        <ng-template let-member=\"item\">\n            {{ member.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-member=\"item\">\n            <vdr-chip  *ngIf=\"member.enabled\" colorType=\"success\">{{ 'common.enabled' | translate }}</vdr-chip>\n            <vdr-chip  *ngIf=\"!member.enabled\" colorType=\"warning\">{{ 'common.disabled' | translate }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n</vdr-data-table-2>\n", styles: [".members-header{background-color:var(--color-component-bg-100);position:sticky;top:0;padding:6px;z-index:5;border-bottom:1px solid var(--color-component-border-200)}.members-header .header-title-row{display:flex;justify-content:space-between;align-items:center}.members-header .clr-input{width:100%}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }], propDecorators: { locationId: [{
                type: Input
            }], members: [{
                type: Input
            }], selectedMemberIds: [{
                type: Input
            }], activeZone: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }], headerTemplate: [{
                type: ContentChild,
                args: [ZoneMemberListHeaderDirective]
            }], controlsTemplate: [{
                type: ContentChild,
                args: [ZoneMemberControlsDirective]
            }] } });

const GET_ZONE_MEMBERS = gql `
    query GetZoneMembers($zoneId: ID!) {
        zone(id: $zoneId) {
            id
            createdAt
            updatedAt
            name
            members {
                createdAt
                updatedAt
                id
                name
                code
                enabled
            }
        }
    }
`;
class AddCountryToZoneDialogComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.selectedMemberIds = [];
    }
    ngOnInit() {
        this.currentMembers$ = this.dataService
            .query(GetZoneMembersDocument, { zoneId: this.zoneId })
            .mapSingle(({ zone }) => zone?.members ?? []);
        this.availableCountries$ = this.dataService
            .query(GetCountryListDocument, {
            options: { take: 999 },
        })
            .mapStream(data => data.countries.items)
            .pipe(withLatestFrom(this.currentMembers$), map(([countries, currentMembers]) => countries.filter(c => !currentMembers.find(cm => cm.id === c.id))));
    }
    cancel() {
        this.resolveWith();
    }
    add() {
        this.resolveWith(this.selectedMemberIds);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AddCountryToZoneDialogComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: AddCountryToZoneDialogComponent, isStandalone: false, selector: "vdr-add-country-to-zone-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\n\n<vdr-zone-member-list\n    locationId=\"zone-members-list\"\n    [members]=\"availableCountries$ | async\"\n    [selectedMemberIds]=\"selectedMemberIds\"\n    (selectionChange)=\"selectedMemberIds = $event\"\n>\n</vdr-zone-member-list>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\n    </button>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: ZoneMemberListComponent, selector: "vdr-zone-member-list", inputs: ["locationId", "members", "selectedMemberIds", "activeZone"], outputs: ["selectionChange"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AddCountryToZoneDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-add-country-to-zone-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\n\n<vdr-zone-member-list\n    locationId=\"zone-members-list\"\n    [members]=\"availableCountries$ | async\"\n    [selectedMemberIds]=\"selectedMemberIds\"\n    (selectionChange)=\"selectedMemberIds = $event\"\n>\n</vdr-zone-member-list>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\n    </button>\n</ng-template>\n" }]
        }], ctorParameters: () => [{ type: i1.DataService }] });

/**
 * A table showing and allowing the setting of all possible CRUD permissions.
 */
class PermissionGridComponent {
    constructor() {
        this.readonly = false;
        this.permissionChange = new EventEmitter();
    }
    ngOnInit() {
        this.buildGrid();
    }
    setPermission(permission, value) {
        if (!this.readonly) {
            this.permissionChange.emit({ permission, value });
        }
    }
    toggleAll(defs) {
        const value = defs.some(d => !this.activePermissions.includes(d.name));
        for (const def of defs) {
            this.permissionChange.emit({ permission: def.name, value });
        }
    }
    buildGrid() {
        const crudGroups = new Map();
        const nonCrud = [];
        const crudRe = /^(Create|Read|Update|Delete)([a-zA-Z]+)$/;
        for (const def of this.permissionDefinitions) {
            const isCrud = crudRe.test(def.name);
            if (isCrud) {
                const groupName = def.name.match(crudRe)?.[2];
                if (groupName) {
                    const existing = crudGroups.get(groupName);
                    if (existing) {
                        existing.push(def);
                    }
                    else {
                        crudGroups.set(groupName, [def]);
                    }
                }
            }
            else if (def.assignable) {
                nonCrud.push(def);
            }
        }
        this.gridData = [
            ...nonCrud.map(d => ({
                label: d.name,
                description: d.description,
                permissions: [d],
            })),
            ...Array.from(crudGroups.entries()).map(([label, defs]) => ({
                label,
                description: this.extractCrudDescription(defs[0]),
                permissions: defs,
            })),
        ];
    }
    extractCrudDescription(def) {
        return def.description.replace(/Grants permission to [\w]+/, 'Grants permissions on');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: PermissionGridComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: PermissionGridComponent, isStandalone: false, selector: "vdr-permission-grid", inputs: { permissionDefinitions: "permissionDefinitions", activePermissions: "activePermissions", readonly: "readonly" }, outputs: { permissionChange: "permissionChange" }, ngImport: i0, template: "<table class=\"table\">\n    <tbody>\n        <tr *ngFor=\"let section of gridData\">\n            <td class=\"permission-group left\">\n                <div><strong>{{ section.label | translate }}</strong></div>\n                <small>{{ section.description | translate }}</small><br>\n                <button *ngIf=\"1 < section.permissions.length && !readonly\" class=\"button-small\" (click)=\"toggleAll(section.permissions)\">\n                    {{ 'common.toggle-all' | translate }}\n                </button>\n            </td>\n            <td *ngFor=\"let permission of section.permissions\" [attr.colspan]=\"section.permissions.length === 1 ? 4 : 1\">\n                <vdr-select-toggle\n                    size=\"small\"\n                    [title]=\"permission.description\"\n                    [label]=\"permission.name\"\n                    [disabled]=\"readonly\"\n                    [selected]=\"activePermissions?.includes(permission.name)\"\n                    (selectedChange)=\"setPermission(permission.name, $event)\"\n                ></vdr-select-toggle>\n            </td>\n        </tr>\n    </tbody>\n</table>\n", styles: [":host{display:block}td.permission-group{max-width:300px;background-color:var(--color-component-bg-200)}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.SelectToggleComponent, selector: "vdr-select-toggle", inputs: ["size", "selected", "hiddenWhenOff", "disabled", "label"], outputs: ["selectedChange"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: PermissionGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-permission-grid', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<table class=\"table\">\n    <tbody>\n        <tr *ngFor=\"let section of gridData\">\n            <td class=\"permission-group left\">\n                <div><strong>{{ section.label | translate }}</strong></div>\n                <small>{{ section.description | translate }}</small><br>\n                <button *ngIf=\"1 < section.permissions.length && !readonly\" class=\"button-small\" (click)=\"toggleAll(section.permissions)\">\n                    {{ 'common.toggle-all' | translate }}\n                </button>\n            </td>\n            <td *ngFor=\"let permission of section.permissions\" [attr.colspan]=\"section.permissions.length === 1 ? 4 : 1\">\n                <vdr-select-toggle\n                    size=\"small\"\n                    [title]=\"permission.description\"\n                    [label]=\"permission.name\"\n                    [disabled]=\"readonly\"\n                    [selected]=\"activePermissions?.includes(permission.name)\"\n                    (selectedChange)=\"setPermission(permission.name, $event)\"\n                ></vdr-select-toggle>\n            </td>\n        </tr>\n    </tbody>\n</table>\n", styles: [":host{display:block}td.permission-group{max-width:300px;background-color:var(--color-component-bg-200)}\n"] }]
        }], propDecorators: { permissionDefinitions: [{
                type: Input
            }], activePermissions: [{
                type: Input
            }], readonly: [{
                type: Input
            }], permissionChange: [{
                type: Output
            }] } });

const GET_ADMINISTRATOR_DETAIL = gql `
    query GetAdministratorDetail($id: ID!) {
        administrator(id: $id) {
            ...Administrator
        }
    }
    ${ADMINISTRATOR_FRAGMENT}
`;
class AdminDetailComponent extends TypedBaseDetailComponent {
    getAvailableChannels() {
        return Object.values(this.selectedRolePermissions);
    }
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('Administrator');
        this.detailForm = this.formBuilder.group({
            emailAddress: ['', Validators.required],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            password: [''],
            roles: [
                [],
            ],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.selectedRoles = [];
        this.selectedRolePermissions = {};
        this.selectedChannelId = null;
    }
    ngOnInit() {
        this.init();
        this.allRoles$ = this.dataService.administrator
            .getRoles(999)
            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));
        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {
            if (!userStatus.permissions.includes(Permission.CreateAdministrator) &&
                !userStatus.permissions.includes(Permission.UpdateAdministrator)) {
                const rolesSelect = this.detailForm.get('roles');
                if (rolesSelect) {
                    rolesSelect.disable();
                }
            }
        });
        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();
    }
    ngOnDestroy() {
        this.destroy();
    }
    rolesChanged(roles) {
        this.buildPermissionsMap();
    }
    getPermissionsForSelectedChannel() {
        function getActivePermissions(input) {
            return Object.entries(input)
                .filter(([permission, active]) => active)
                .map(([permission, active]) => permission);
        }
        if (this.selectedChannelId) {
            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];
            if (selectedChannel) {
                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;
                return getActivePermissions(permissionMap);
            }
        }
        const channels = Object.values(this.selectedRolePermissions);
        if (0 < channels.length) {
            this.selectedChannelId = channels[0].channelId;
            return getActivePermissions(channels[0].permissions);
        }
        return [];
    }
    create() {
        const { emailAddress, firstName, lastName, password, customFields, roles } = this.detailForm.value;
        if (!emailAddress || !firstName || !lastName || !password) {
            return;
        }
        const administrator = {
            emailAddress,
            firstName,
            lastName,
            password,
            customFields,
            roleIds: roles?.map(role => role.id).filter(notNullOrUndefined) ?? [],
        };
        this.dataService.administrator.createAdministrator(administrator).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Administrator',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Administrator',
            });
        });
    }
    save() {
        this.entity$
            .pipe(take(1), mergeMap(({ id }) => {
            const formValue = this.detailForm.value;
            const administrator = {
                id,
                emailAddress: formValue.emailAddress,
                firstName: formValue.firstName,
                lastName: formValue.lastName,
                password: formValue.password,
                customFields: formValue.customFields,
                roleIds: formValue.roles?.map(role => role.id),
            };
            return this.dataService.administrator.updateAdministrator(administrator);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Administrator',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Administrator',
            });
        });
    }
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            emailAddress: entity.emailAddress,
            firstName: entity.firstName,
            lastName: entity.lastName,
            roles: entity.user.roles,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);
        }
        const passwordControl = this.detailForm.get('password');
        if (passwordControl) {
            if (!entity.id) {
                passwordControl.setValidators([Validators.required]);
            }
            else {
                passwordControl.setValidators([]);
            }
        }
        this.buildPermissionsMap();
    }
    buildPermissionsMap() {
        const permissionsControl = this.detailForm.get('roles');
        if (permissionsControl) {
            const roles = permissionsControl.value;
            const channelIdPermissionsMap = new Map();
            const channelIdCodeMap = new Map();
            for (const role of roles ?? []) {
                for (const channel of role.channels) {
                    const channelPermissions = channelIdPermissionsMap.get(channel.id);
                    const permissionSet = channelPermissions || new Set();
                    role.permissions.forEach(p => permissionSet.add(p));
                    channelIdPermissionsMap.set(channel.id, permissionSet);
                    channelIdCodeMap.set(channel.id, channel.code);
                }
            }
            this.selectedRolePermissions = {};
            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                const permissionSet = channelIdPermissionsMap.get(channelId);
                const permissionsHash = {};
                for (const def of this.serverConfigService.getPermissionDefinitions()) {
                    permissionsHash[def.name] = permissionSet.has(def.name);
                }
                this.selectedRolePermissions[channelId] = {
                    /* eslint-disable @typescript-eslint/no-non-null-assertion */
                    channelId,
                    channelCode: channelIdCodeMap.get(channelId),
                    permissions: permissionsHash,
                    /* eslint-enable @typescript-eslint/no-non-null-assertion */
                };
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AdminDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: AdminDetailComponent, isStandalone: false, selector: "vdr-admin-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"administrator-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"'UpdateAdministrator'\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"administrator-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field\n                        [label]=\"'settings.email-address-or-identifier' | translate\"\n                        for=\"emailAddress\"\n                        class=\"form-grid-span\"\n                    >\n                        <input\n                            id=\"emailAddress\"\n                            type=\"text\"\n                            formControlName=\"emailAddress\"\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\n                        <input\n                            id=\"firstName\"\n                            type=\"text\"\n                            formControlName=\"firstName\"\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\n                        <input\n                            id=\"lastName\"\n                            type=\"text\"\n                            formControlName=\"lastName\"\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        *ngIf=\"isNew$ | async\"\n                        [label]=\"'settings.password' | translate\"\n                        for=\"password\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        *ngIf=\"\n                            !(isNew$ | async) &&\n                            (['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\n                        \"\n                        [label]=\"'settings.password' | translate\"\n                        for=\"password\"\n                        [readOnlyToggle]=\"true\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Administrator\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"administrator-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n    <vdr-page-block>\n        <vdr-card [title]=\"'settings.roles' | translate\">\n            <ng-select\n                [items]=\"allRoles$ | async\"\n                [multiple]=\"true\"\n                [hideSelected]=\"true\"\n                formControlName=\"roles\"\n                (change)=\"rolesChanged($event)\"\n                bindLabel=\"description\"\n            ></ng-select>\n\n            <ul class=\"nav mt-2\" role=\"tablist\">\n                <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\n                    <button\n                        [id]=\"channel.channelId\"\n                        (click)=\"selectedChannelId = channel.channelId\"\n                        class=\"btn btn-link nav-link\"\n                        [class.active]=\"selectedChannelId === channel.channelId\"\n                        [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\n                        type=\"button\"\n                    >\n                        {{ channel.channelCode | channelCodeToLabel | translate }}\n                    </button>\n                </li>\n            </ul>\n            <vdr-permission-grid\n                [activePermissions]=\"getPermissionsForSelectedChannel()\"\n                [permissionDefinitions]=\"permissionDefinitions\"\n                [readonly]=\"true\"\n            ></vdr-permission-grid>\n        </vdr-card>\n    </vdr-page-block>\n</form>\n", styles: ["ul.nav{overflow-x:auto;overflow-y:hidden}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i4.NgSelectComponent, selector: "ng-select", inputs: ["ariaLabelDropdown", "bindLabel", "bindValue", "ariaLabel", "markFirst", "placeholder", "fixedPlaceholder", "notFoundText", "typeToSearchText", "preventToggleOnRightClick", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "ngClass", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick", "keyDownFn"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: PermissionGridComponent, selector: "vdr-permission-grid", inputs: ["permissionDefinitions", "activePermissions", "readonly"], outputs: ["permissionChange"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.ChannelLabelPipe, name: "channelCodeToLabel" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AdminDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-admin-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"administrator-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"'UpdateAdministrator'\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"administrator-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field\n                        [label]=\"'settings.email-address-or-identifier' | translate\"\n                        for=\"emailAddress\"\n                        class=\"form-grid-span\"\n                    >\n                        <input\n                            id=\"emailAddress\"\n                            type=\"text\"\n                            formControlName=\"emailAddress\"\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\n                        <input\n                            id=\"firstName\"\n                            type=\"text\"\n                            formControlName=\"firstName\"\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\n                        <input\n                            id=\"lastName\"\n                            type=\"text\"\n                            formControlName=\"lastName\"\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        *ngIf=\"isNew$ | async\"\n                        [label]=\"'settings.password' | translate\"\n                        for=\"password\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        *ngIf=\"\n                            !(isNew$ | async) &&\n                            (['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\n                        \"\n                        [label]=\"'settings.password' | translate\"\n                        for=\"password\"\n                        [readOnlyToggle]=\"true\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Administrator\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"administrator-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n    <vdr-page-block>\n        <vdr-card [title]=\"'settings.roles' | translate\">\n            <ng-select\n                [items]=\"allRoles$ | async\"\n                [multiple]=\"true\"\n                [hideSelected]=\"true\"\n                formControlName=\"roles\"\n                (change)=\"rolesChanged($event)\"\n                bindLabel=\"description\"\n            ></ng-select>\n\n            <ul class=\"nav mt-2\" role=\"tablist\">\n                <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\n                    <button\n                        [id]=\"channel.channelId\"\n                        (click)=\"selectedChannelId = channel.channelId\"\n                        class=\"btn btn-link nav-link\"\n                        [class.active]=\"selectedChannelId === channel.channelId\"\n                        [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\n                        type=\"button\"\n                    >\n                        {{ channel.channelCode | channelCodeToLabel | translate }}\n                    </button>\n                </li>\n            </ul>\n            <vdr-permission-grid\n                [activePermissions]=\"getPermissionsForSelectedChannel()\"\n                [permissionDefinitions]=\"permissionDefinitions\"\n                [readonly]=\"true\"\n            ></vdr-permission-grid>\n        </vdr-card>\n    </vdr-page-block>\n</form>\n", styles: ["ul.nav{overflow-x:auto;overflow-y:hidden}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deleteAdministratorsBulkAction = createBulkDeleteAction({
    location: 'administrator-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteAdministrator),
    getItemName: item => item.firstName + ' ' + item.lastName,
    bulkDelete: (dataService, ids) => dataService.administrator.deleteAdministrators(ids).pipe(map(res => res.deleteAdministrators)),
});

const GET_ADMINISTRATOR_LIST = gql `
    query GetAdministratorList($options: AdministratorListOptions) {
        administrators(options: $options) {
            items {
                ...AdministratorListItem
            }
            totalItems
        }
    }
    fragment AdministratorListItem on Administrator {
        id
        createdAt
        updatedAt
        firstName
        lastName
        emailAddress
        user {
            id
            identifier
            lastLogin
            roles {
                id
                createdAt
                updatedAt
                code
                description
            }
        }
    }
`;
class AdministratorListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'administrator-list';
        this.customFields = this.getCustomFieldConfig('Administrator');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'firstName',
            type: { kind: 'text' },
            label: marker('settings.first-name'),
            filterField: 'firstName',
        })
            .addFilter({
            name: 'lastName',
            type: { kind: 'text' },
            label: marker('settings.last-name'),
            filterField: 'lastName',
        })
            .addFilter({
            name: 'emailAddress',
            type: { kind: 'text' },
            label: marker('settings.email-address'),
            filterField: 'emailAddress',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'lastName' })
            .addSort({ name: 'emailAddress' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetAdministratorListDocument,
            getItems: data => data.administrators,
            setVariables: (skip, take) => this.createSearchQuery(skip, take, this.searchTermControl.value),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    createSearchQuery(skip, take, searchTerm) {
        let _filter = {};
        let filterOperator = LogicalOperator.AND;
        if (searchTerm) {
            _filter = {
                emailAddress: {
                    contains: searchTerm,
                },
                firstName: {
                    contains: searchTerm,
                },
                lastName: {
                    contains: searchTerm,
                },
            };
            filterOperator = LogicalOperator.OR;
        }
        return {
            options: {
                skip,
                take,
                filter: {
                    ...(_filter ?? {}),
                    ...this.filters.createFilterInput(),
                },
                sort: this.sorts.createSortInput(),
                filterOperator,
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AdministratorListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: AdministratorListComponent, isStandalone: false, selector: "vdr-administrator-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"administrator-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateAdministrator']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'admin.create-new-administrator' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"administrator-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"administrator-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-administrator=\"item\">\n            {{ administrator.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-administrator=\"item\">\n            {{ administrator.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-administrator=\"item\">\n            {{ administrator.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('lastName')\">\n        <ng-template let-administrator=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', administrator.id]\"\n                ><span>{{ administrator.firstName }} {{ administrator.lastName }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.email-address' | translate\" id=\"email-address\" [sort]=\"sorts.get('emailAddress')\">\n        <ng-template let-administrator=\"item\">\n            {{ administrator.emailAddress }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.roles' | translate\" id=\"roles\">\n        <ng-template let-administrator=\"item\">\n            <vdr-chip *ngFor=\"let role of administrator.user.roles\">{{ role.description }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n", styles: [".search-input{min-width:300px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AdministratorListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-administrator-list', standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"administrator-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateAdministrator']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'admin.create-new-administrator' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"administrator-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"administrator-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-administrator=\"item\">\n            {{ administrator.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-administrator=\"item\">\n            {{ administrator.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-administrator=\"item\">\n            {{ administrator.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('lastName')\">\n        <ng-template let-administrator=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', administrator.id]\"\n                ><span>{{ administrator.firstName }} {{ administrator.lastName }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.email-address' | translate\" id=\"email-address\" [sort]=\"sorts.get('emailAddress')\">\n        <ng-template let-administrator=\"item\">\n            {{ administrator.emailAddress }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.roles' | translate\" id=\"roles\">\n        <ng-template let-administrator=\"item\">\n            <vdr-chip *ngFor=\"let role of administrator.user.roles\">{{ role.description }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n", styles: [".search-input{min-width:300px}\n"] }]
        }], ctorParameters: () => [] });

const GET_CHANNEL_DETAIL = gql `
    query GetChannelDetail($id: ID!) {
        channel(id: $id) {
            ...Channel
        }
    }
    ${CHANNEL_FRAGMENT}
`;
class ChannelDetailComponent extends TypedBaseDetailComponent {
    constructor(serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.serverConfigService = serverConfigService;
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.DEFAULT_CHANNEL_CODE = DEFAULT_CHANNEL_CODE;
        this.customFields = this.getCustomFieldConfig('Channel');
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            token: ['', Validators.required],
            pricesIncludeTax: [false],
            availableLanguageCodes: [[]],
            availableCurrencyCodes: [[]],
            defaultCurrencyCode: ['', Validators.required],
            defaultShippingZoneId: ['', Validators.required],
            defaultLanguageCode: [undefined, Validators.required],
            defaultTaxZoneId: ['', Validators.required],
            sellerId: ['', Validators.required],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.updatePermission = [Permission.SuperAdmin, Permission.UpdateChannel, Permission.CreateChannel];
    }
    ngOnInit() {
        this.init();
        // TODO: make this lazy-loaded autocomplete
        this.sellers$ = this.dataService.settings.getSellerList().mapSingle(data => data.sellers.items);
        this.availableLanguageCodes$ = this.serverConfigService.getAvailableLanguages();
        this.detailForm.controls.availableCurrencyCodes.valueChanges
            .pipe(takeUntil(this.destroy$))
            .subscribe(value => {
            if (value) {
                const defaultCurrencyCode = this.detailForm.controls.defaultCurrencyCode.value;
                if (defaultCurrencyCode && !value.includes(defaultCurrencyCode)) {
                    this.detailForm.controls.defaultCurrencyCode.setValue(value[0]);
                }
            }
        });
        this.detailForm.controls.availableLanguageCodes.valueChanges
            .pipe(takeUntil(this.destroy$))
            .subscribe(value => {
            if (value) {
                const defaultLanguageCode = this.detailForm.controls.defaultLanguageCode.value;
                if (defaultLanguageCode && !value.includes(defaultLanguageCode)) {
                    this.detailForm.controls.defaultLanguageCode.setValue(value[0]);
                }
            }
        });
    }
    ngOnDestroy() {
        this.destroy();
    }
    saveButtonEnabled() {
        return this.detailForm.dirty && this.detailForm.valid;
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const { code, token, defaultLanguageCode, pricesIncludeTax, defaultCurrencyCode, defaultShippingZoneId, defaultTaxZoneId, customFields, sellerId, } = this.detailForm.value;
        if (!code ||
            !token ||
            !defaultLanguageCode ||
            !defaultCurrencyCode ||
            !defaultShippingZoneId ||
            !defaultTaxZoneId) {
            return;
        }
        const input = {
            code,
            token,
            defaultLanguageCode,
            pricesIncludeTax: !!pricesIncludeTax,
            defaultCurrencyCode,
            defaultShippingZoneId,
            defaultTaxZoneId,
            customFields,
            sellerId,
        };
        this.dataService.settings
            .createChannel(input)
            .pipe(mergeMap(({ createChannel }) => this.dataService.auth.currentUser().single$.pipe(map(({ me }) => ({
            me,
            createChannel,
        })))), mergeMap(({ me, createChannel }) => 
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.dataService.client.updateUserChannels(me.channels).pipe(map(() => createChannel))))
            .subscribe(data => {
            switch (data.__typename) {
                case 'Channel':
                    this.notificationService.success(marker('common.notify-create-success'), {
                        entity: 'Channel',
                    });
                    this.detailForm.markAsPristine();
                    this.changeDetector.markForCheck();
                    this.router.navigate(['../', data.id], { relativeTo: this.route });
                    break;
                case 'LanguageNotAvailableError':
                    this.notificationService.error(data.message);
                    break;
            }
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        this.entity$
            .pipe(take(1), mergeMap(channel => {
            const input = {
                id: channel.id,
                code: formValue.code,
                token: formValue.token,
                pricesIncludeTax: formValue.pricesIncludeTax,
                availableLanguageCodes: formValue.availableLanguageCodes,
                availableCurrencyCodes: formValue.availableCurrencyCodes,
                defaultCurrencyCode: formValue.defaultCurrencyCode,
                defaultShippingZoneId: formValue.defaultShippingZoneId,
                defaultLanguageCode: formValue.defaultLanguageCode,
                defaultTaxZoneId: formValue.defaultTaxZoneId,
                customFields: formValue.customFields,
                sellerId: formValue.sellerId,
            };
            return this.dataService.settings.updateChannel(input);
        }))
            .subscribe(({ updateChannel }) => {
            switch (updateChannel.__typename) {
                case 'Channel':
                    this.notificationService.success(marker('common.notify-update-success'), {
                        entity: 'Channel',
                    });
                    this.detailForm.markAsPristine();
                    this.changeDetector.markForCheck();
                    break;
                case 'LanguageNotAvailableError':
                    this.notificationService.error(updateChannel.message);
            }
        });
    }
    /**
     * Update the form values when the entity changes.
     */
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            code: entity.code,
            token: entity.token || this.generateToken(),
            pricesIncludeTax: entity.pricesIncludeTax,
            availableLanguageCodes: entity.availableLanguageCodes,
            availableCurrencyCodes: entity.availableCurrencyCodes,
            defaultCurrencyCode: entity.defaultCurrencyCode,
            defaultShippingZoneId: entity.defaultShippingZone?.id ?? '',
            defaultLanguageCode: entity.defaultLanguageCode,
            defaultTaxZoneId: entity.defaultTaxZone?.id ?? '',
            sellerId: entity.seller?.id ?? '',
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);
        }
        if (entity.code === DEFAULT_CHANNEL_CODE) {
            const codeControl = this.detailForm.get('code');
            if (codeControl) {
                codeControl.disable();
            }
        }
    }
    generateToken() {
        return Array.from(crypto.getRandomValues(new Uint8Array(10)))
            .map(b => b.toString(16).padStart(2, '0'))
            .join('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ChannelDetailComponent, deps: [{ token: i1.ServerConfigService }, { token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ChannelDetailComponent, isStandalone: false, selector: "vdr-channel-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"channel-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"['SuperAdmin', 'UpdateChannel']\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"channel-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field\n                        class=\"form-grid-span\"\n                        *ngIf=\"entity?.code !== DEFAULT_CHANNEL_CODE\"\n                        [label]=\"'common.code' | translate\"\n                        for=\"code\"\n                    >\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"code\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-item\n                        class=\"form-grid-span\"\n                        *ngIf=\"entity?.code === DEFAULT_CHANNEL_CODE\"\n                        [label]=\"'common.code' | translate\"\n                    >\n                        {{ entity?.code | channelCodeToLabel | translate }}\n                    </vdr-form-item>\n                    <vdr-form-field [label]=\"'settings.channel-token' | translate\" for=\"token\">\n                        <input\n                            id=\"token\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"token\"\n                        />\n                    </vdr-form-field>\n\n                    <vdr-form-field [label]=\"'common.seller' | translate\" for=\"sellerId\">\n                        <select\n                            name=\"sellerId\"\n                            formControlName=\"sellerId\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option selected value style=\"display: none\"></option>\n                            <option *ngFor=\"let seller of sellers$ | async\" [value]=\"seller.id\">\n                                {{ seller.name }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.available-languages' | translate\"\n                        for=\"availableLanguageCodes\"\n                    >\n                        <vdr-language-code-selector\n                            formControlName=\"availableLanguageCodes\"\n                            [languageCodes]=\"availableLanguageCodes$ | async\"\n                        ></vdr-language-code-selector>\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.available-currencies' | translate\"\n                        for=\"availableCurrencyCodes\"\n                    >\n                        <vdr-currency-code-selector\n                            formControlName=\"availableCurrencyCodes\"\n                        ></vdr-currency-code-selector>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'settings.defaults' | translate\">\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.default-language' | translate\" for=\"defaultLanguage\">\n                        <select\n                            name=\"defaultLanguageCode\"\n                            formControlName=\"defaultLanguageCode\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option\n                                *ngFor=\"let languageCode of detailForm.value.availableLanguageCodes\"\n                                [value]=\"languageCode\"\n                            >\n                                {{ languageCode | localeLanguageName }} ({{ languageCode | uppercase }})\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.default-currency' | translate\" for=\"defaultCurrency\">\n                        <select\n                            name=\"defaultCurrencyCode\"\n                            formControlName=\"defaultCurrencyCode\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option\n                                *ngFor=\"let code of detailForm.value.availableCurrencyCodes\"\n                                [value]=\"code\"\n                            >\n                                {{ code | localeCurrencyName }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                    <div>\n                        <vdr-form-field\n                            [label]=\"'settings.default-tax-zone' | translate\"\n                            for=\"defaultTaxZoneId\"\n                        >\n                            <vdr-zone-selector\n                                formControlName=\"defaultTaxZoneId\"\n                                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            ></vdr-zone-selector>\n                        </vdr-form-field>\n                        <clr-alert\n                            *ngIf=\"detailForm.value.code && !detailForm.value.defaultTaxZoneId\"\n                            clrAlertType=\"danger\"\n                            [clrAlertClosable]=\"false\"\n                        >\n                            <clr-alert-item>\n                                <span class=\"alert-text\">\n                                    {{ 'error.no-default-tax-zone-set' | translate }}\n                                </span>\n                            </clr-alert-item>\n                        </clr-alert>\n                    </div>\n\n                    <div>\n                        <vdr-form-field\n                            [label]=\"'settings.default-shipping-zone' | translate\"\n                            for=\"defaultShippingZoneId\"\n                        >\n                            <vdr-zone-selector\n                                name=\"defaultShippingZoneId\"\n                                formControlName=\"defaultShippingZoneId\"\n                                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            ></vdr-zone-selector>\n                        </vdr-form-field>\n                        <clr-alert\n                            *ngIf=\"detailForm.value.code && !detailForm.value.defaultShippingZoneId\"\n                            clrAlertType=\"danger\"\n                            [clrAlertClosable]=\"false\"\n                        >\n                            <clr-alert-item>\n                                <span class=\"alert-text\">\n                                    {{ 'error.no-default-shipping-zone-set' | translate }}\n                                </span>\n                            </clr-alert-item>\n                        </clr-alert>\n                    </div>\n                    <vdr-form-field\n                        [label]=\"'settings.prices-include-tax' | translate\"\n                        for=\"pricesIncludeTax\"\n                    >\n                        <clr-toggle-wrapper>\n                            <input\n                                type=\"checkbox\"\n                                clrToggle\n                                id=\"pricesIncludeTax\"\n                                formControlName=\"pricesIncludeTax\"\n                                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            />\n                        </clr-toggle-wrapper>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Channel\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"channel-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: ["clr-alert{max-width:30rem;margin-bottom:12px}\n"], dependencies: [{ kind: "component", type: i3.ClrAlert, selector: "clr-alert", inputs: ["clrAlertSizeSmall", "clrAlertClosable", "clrAlertAppLevel", "clrCloseButtonAriaLabel", "clrAlertLightweight", "clrAlertType", "clrAlertIcon", "clrAlertClosed"], outputs: ["clrAlertClosedChange"] }, { kind: "component", type: i3.ClrAlertItem, selector: "clr-alert-item" }, { kind: "directive", type: i3.ClrAlertText, selector: ".alert-text" }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2$1.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.FormItemComponent, selector: "vdr-form-item", inputs: ["label", "tooltip"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: i1.ZoneSelectorComponent, selector: "vdr-zone-selector", inputs: ["readonly", "transformControlValueAccessorValue"], outputs: ["selectedValuesChange"] }, { kind: "component", type: i1.CurrencyCodeSelectorComponent, selector: "vdr-currency-code-selector" }, { kind: "component", type: i1.LanguageCodeSelectorComponent, selector: "vdr-language-code-selector", inputs: ["languageCodes"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.UpperCasePipe, name: "uppercase" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyNamePipe, name: "localeCurrencyName" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.ChannelLabelPipe, name: "channelCodeToLabel" }, { kind: "pipe", type: i1.LocaleLanguageNamePipe, name: "localeLanguageName" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ChannelDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-channel-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"channel-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"['SuperAdmin', 'UpdateChannel']\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"channel-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field\n                        class=\"form-grid-span\"\n                        *ngIf=\"entity?.code !== DEFAULT_CHANNEL_CODE\"\n                        [label]=\"'common.code' | translate\"\n                        for=\"code\"\n                    >\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"code\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-item\n                        class=\"form-grid-span\"\n                        *ngIf=\"entity?.code === DEFAULT_CHANNEL_CODE\"\n                        [label]=\"'common.code' | translate\"\n                    >\n                        {{ entity?.code | channelCodeToLabel | translate }}\n                    </vdr-form-item>\n                    <vdr-form-field [label]=\"'settings.channel-token' | translate\" for=\"token\">\n                        <input\n                            id=\"token\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"token\"\n                        />\n                    </vdr-form-field>\n\n                    <vdr-form-field [label]=\"'common.seller' | translate\" for=\"sellerId\">\n                        <select\n                            name=\"sellerId\"\n                            formControlName=\"sellerId\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option selected value style=\"display: none\"></option>\n                            <option *ngFor=\"let seller of sellers$ | async\" [value]=\"seller.id\">\n                                {{ seller.name }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.available-languages' | translate\"\n                        for=\"availableLanguageCodes\"\n                    >\n                        <vdr-language-code-selector\n                            formControlName=\"availableLanguageCodes\"\n                            [languageCodes]=\"availableLanguageCodes$ | async\"\n                        ></vdr-language-code-selector>\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.available-currencies' | translate\"\n                        for=\"availableCurrencyCodes\"\n                    >\n                        <vdr-currency-code-selector\n                            formControlName=\"availableCurrencyCodes\"\n                        ></vdr-currency-code-selector>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'settings.defaults' | translate\">\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.default-language' | translate\" for=\"defaultLanguage\">\n                        <select\n                            name=\"defaultLanguageCode\"\n                            formControlName=\"defaultLanguageCode\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option\n                                *ngFor=\"let languageCode of detailForm.value.availableLanguageCodes\"\n                                [value]=\"languageCode\"\n                            >\n                                {{ languageCode | localeLanguageName }} ({{ languageCode | uppercase }})\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.default-currency' | translate\" for=\"defaultCurrency\">\n                        <select\n                            name=\"defaultCurrencyCode\"\n                            formControlName=\"defaultCurrencyCode\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option\n                                *ngFor=\"let code of detailForm.value.availableCurrencyCodes\"\n                                [value]=\"code\"\n                            >\n                                {{ code | localeCurrencyName }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                    <div>\n                        <vdr-form-field\n                            [label]=\"'settings.default-tax-zone' | translate\"\n                            for=\"defaultTaxZoneId\"\n                        >\n                            <vdr-zone-selector\n                                formControlName=\"defaultTaxZoneId\"\n                                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            ></vdr-zone-selector>\n                        </vdr-form-field>\n                        <clr-alert\n                            *ngIf=\"detailForm.value.code && !detailForm.value.defaultTaxZoneId\"\n                            clrAlertType=\"danger\"\n                            [clrAlertClosable]=\"false\"\n                        >\n                            <clr-alert-item>\n                                <span class=\"alert-text\">\n                                    {{ 'error.no-default-tax-zone-set' | translate }}\n                                </span>\n                            </clr-alert-item>\n                        </clr-alert>\n                    </div>\n\n                    <div>\n                        <vdr-form-field\n                            [label]=\"'settings.default-shipping-zone' | translate\"\n                            for=\"defaultShippingZoneId\"\n                        >\n                            <vdr-zone-selector\n                                name=\"defaultShippingZoneId\"\n                                formControlName=\"defaultShippingZoneId\"\n                                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            ></vdr-zone-selector>\n                        </vdr-form-field>\n                        <clr-alert\n                            *ngIf=\"detailForm.value.code && !detailForm.value.defaultShippingZoneId\"\n                            clrAlertType=\"danger\"\n                            [clrAlertClosable]=\"false\"\n                        >\n                            <clr-alert-item>\n                                <span class=\"alert-text\">\n                                    {{ 'error.no-default-shipping-zone-set' | translate }}\n                                </span>\n                            </clr-alert-item>\n                        </clr-alert>\n                    </div>\n                    <vdr-form-field\n                        [label]=\"'settings.prices-include-tax' | translate\"\n                        for=\"pricesIncludeTax\"\n                    >\n                        <clr-toggle-wrapper>\n                            <input\n                                type=\"checkbox\"\n                                clrToggle\n                                id=\"pricesIncludeTax\"\n                                formControlName=\"pricesIncludeTax\"\n                                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            />\n                        </clr-toggle-wrapper>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Channel\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"channel-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: ["clr-alert{max-width:30rem;margin-bottom:12px}\n"] }]
        }], ctorParameters: () => [{ type: i1.ServerConfigService }, { type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deleteChannelsBulkAction = createBulkDeleteAction({
    location: 'channel-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.SuperAdmin) || userPermissions.includes(Permission.DeleteChannel),
    getItemName: item => item.code,
    bulkDelete: (dataService, ids) => {
        return dataService.settings.deleteChannels(ids).pipe(mergeMap(({ deleteChannels }) => dataService.auth.currentUser().single$.pipe(map(({ me }) => ({
            me,
            deleteChannels,
        })))), mergeMap(({ me, deleteChannels }) => 
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        dataService.client.updateUserChannels(me.channels).pipe(map(() => deleteChannels))));
    },
});

const GET_CHANNEL_LIST = gql `
    query GetChannelList($options: ChannelListOptions) {
        channels(options: $options) {
            items {
                ...Channel
            }
            totalItems
        }
    }
    ${CHANNEL_FRAGMENT}
`;
class ChannelListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'channel-list';
        this.customFields = this.getCustomFieldConfig('Channel');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'code',
            type: { kind: 'text' },
            label: marker('common.code'),
            filterField: 'code',
        })
            .addFilter({
            name: 'token',
            type: { kind: 'text' },
            label: marker('settings.channel-token'),
            filterField: 'token',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'code' })
            .addSort({ name: 'token' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetChannelListDocument,
            getItems: data => data.channels,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        code: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    isDefaultChannel(channelCode) {
        return channelCode === DEFAULT_CHANNEL_CODE;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ChannelListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ChannelListComponent, isStandalone: false, selector: "vdr-channel-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"channel-list\" />\n            <a class=\"btn btn-primary\" *vdrIfPermissions=\"['SuperAdmin', 'CreateChannel']\" [routerLink]=\"['./', 'create']\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-channel' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"channel-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"channel-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-channel=\"item\">\n            {{ channel.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-channel=\"item\">\n            {{ channel.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-channel=\"item\">\n            {{ channel.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\" [sort]=\"sorts.get('code')\">\n        <ng-template let-channel=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', channel.id]\"\n                ><span>{{ channel.code | channelCodeToLabel | translate }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.channel-token' | translate\" id=\"channel-token\" [sort]=\"sorts.get('token')\">\n        <ng-template let-channel=\"item\">\n            {{ channel.token }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.ChannelLabelPipe, name: "channelCodeToLabel" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ChannelListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-channel-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"channel-list\" />\n            <a class=\"btn btn-primary\" *vdrIfPermissions=\"['SuperAdmin', 'CreateChannel']\" [routerLink]=\"['./', 'create']\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-channel' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"channel-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"channel-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-channel=\"item\">\n            {{ channel.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-channel=\"item\">\n            {{ channel.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-channel=\"item\">\n            {{ channel.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\" [sort]=\"sorts.get('code')\">\n        <ng-template let-channel=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', channel.id]\"\n                ><span>{{ channel.code | channelCodeToLabel | translate }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.channel-token' | translate\" id=\"channel-token\" [sort]=\"sorts.get('token')\">\n        <ng-template let-channel=\"item\">\n            {{ channel.token }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n" }]
        }], ctorParameters: () => [] });

const GET_COUNTRY_DETAIL = gql `
    query GetCountryDetail($id: ID!) {
        country(id: $id) {
            ...Country
        }
    }
    ${COUNTRY_FRAGMENT}
`;
class CountryDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('Region');
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            name: ['', Validators.required],
            enabled: [true],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateCountry];
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        const input = createUpdatedTranslatable({
            translatable: {
                id: '',
                createdAt: '',
                updatedAt: '',
                code: '',
                name: '',
                enabled: false,
                translations: [],
            },
            updatedFields: formValue,
            languageCode: this.languageCode,
            customFieldConfig: this.customFields,
            defaultTranslation: {
                name: formValue.name ?? '',
                languageCode: this.languageCode,
            },
        });
        this.dataService.settings.createCountry(input).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Country',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createCountry.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Country',
            });
        });
    }
    save() {
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1), mergeMap(([country, languageCode]) => {
            const formValue = this.detailForm.value;
            const input = createUpdatedTranslatable({
                translatable: country,
                updatedFields: formValue,
                customFieldConfig: this.customFields,
                languageCode,
                defaultTranslation: {
                    name: formValue.name ?? '',
                    languageCode,
                },
            });
            return this.dataService.settings.updateCountry(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Country',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Country',
            });
        });
    }
    setFormValues(country, languageCode) {
        const currentTranslation = findTranslation(country, languageCode);
        this.detailForm.patchValue({
            code: country.code,
            name: currentTranslation ? currentTranslation.name : '',
            enabled: country.enabled,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), country, currentTranslation);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CountryDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CountryDetailComponent, isStandalone: false, selector: "vdr-country-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block\n    ><vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"country-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    *vdrIfPermissions=\"updatePermission\"\n                    (click)=\"save()\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"country-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            id=\"enabled\"\n                            formControlName=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            formControlName=\"code\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Region\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"country-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CountryDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-country-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block\n    ><vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"country-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    *vdrIfPermissions=\"updatePermission\"\n                    (click)=\"save()\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"country-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            id=\"enabled\"\n                            formControlName=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            formControlName=\"code\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Region\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"country-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deleteCountriesBulkAction = createBulkDeleteAction({
    location: 'country-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteSettings) ||
        userPermissions.includes(Permission.DeleteCountry),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.settings.deleteCountries(ids).pipe(map(res => res.deleteCountries)),
});

const GET_COUNTRY_LIST = gql `
    query GetCountryList($options: CountryListOptions) {
        countries(options: $options) {
            items {
                ...CountryListItem
            }
            totalItems
        }
    }
    fragment CountryListItem on Country {
        id
        createdAt
        updatedAt
        code
        name
        type
        enabled
    }
`;
class CountryListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'country-list';
        this.customFields = this.getCustomFieldConfig('Region');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'name',
            type: { kind: 'text' },
            label: marker('common.name'),
            filterField: 'name',
        })
            .addFilter({
            name: 'code',
            type: { kind: 'text' },
            label: marker('common.code'),
            filterField: 'code',
        })
            .addFilter({
            name: 'enabled',
            type: { kind: 'boolean' },
            label: marker('common.enabled'),
            filterField: 'enabled',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('name', 'ASC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .addSort({ name: 'code' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetCountryListDocument,
            getItems: data => data.countries,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CountryListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CountryListComponent, isStandalone: false, selector: "vdr-country-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"country-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateCountry']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-country' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"country-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"country-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-country=\"item\">\n            {{ country.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\"\n        id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-country=\"item\">\n            {{ country.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\"\n        id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-country=\"item\">\n            {{ country.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.name' | translate\"\n        id=\"name\"\n        [optional]=\"false\"\n        [sort]=\"sorts.get('name')\"\n    >\n        <ng-template let-country=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', country.id]\"\n                ><span>{{ country.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [sort]=\"sorts.get('code')\">\n        <ng-template let-country=\"item\">\n            {{ country.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-country=\"item\">\n            <vdr-chip *ngIf=\"country.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!country.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n", styles: [".search-input{margin-top:6px;min-width:300px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CountryListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-country-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"country-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateCountry']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-country' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"country-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"country-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-country=\"item\">\n            {{ country.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\"\n        id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-country=\"item\">\n            {{ country.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\"\n        id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-country=\"item\">\n            {{ country.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.name' | translate\"\n        id=\"name\"\n        [optional]=\"false\"\n        [sort]=\"sorts.get('name')\"\n    >\n        <ng-template let-country=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', country.id]\"\n                ><span>{{ country.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [sort]=\"sorts.get('code')\">\n        <ng-template let-country=\"item\">\n            {{ country.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-country=\"item\">\n            <vdr-chip *ngIf=\"country.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!country.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n", styles: [".search-input{margin-top:6px;min-width:300px}\n"] }]
        }], ctorParameters: () => [] });

const GET_GLOBAL_SETTINGS_DETAIL = gql `
    query GetGlobalSettingsDetail {
        globalSettings {
            ...GlobalSettingsDetail
        }
    }
    fragment GlobalSettingsDetail on GlobalSettings {
        id
        createdAt
        updatedAt
        availableLanguages
        trackInventory
        outOfStockThreshold
    }
`;
class GlobalSettingsComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('GlobalSettings');
        this.detailForm = this.formBuilder.group({
            availableLanguages: [[]],
            trackInventory: false,
            outOfStockThreshold: [0, Validators.required],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.languageCodes = Object.values(LanguageCode);
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];
    }
    ngOnInit() {
        this.init();
        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {
            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {
                const languagesSelect = this.detailForm.get('availableLanguages');
                if (languagesSelect) {
                    languagesSelect.disable();
                }
            }
        });
    }
    ngOnDestroy() {
        this.destroy();
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        this.dataService.settings
            .updateGlobalSettings(this.detailForm.value)
            .pipe(tap(({ updateGlobalSettings }) => {
            switch (updateGlobalSettings.__typename) {
                case 'GlobalSettings':
                    this.detailForm.markAsPristine();
                    this.changeDetector.markForCheck();
                    this.notificationService.success(marker('common.notify-update-success'), {
                        entity: 'Settings',
                    });
                    break;
                case 'ChannelDefaultLanguageError':
                    this.notificationService.error(updateGlobalSettings.message);
            }
        }), switchMap$1(() => this.serverConfigService.refreshGlobalSettings()), withLatestFrom(this.dataService.client.uiState().single$))
            .subscribe(([{ globalSettings }, { uiState }]) => {
            const availableLangs = globalSettings.availableLanguages;
            if (availableLangs.length && !availableLangs.includes(uiState.contentLanguage)) {
                this.dataService.client.setContentLanguage(availableLangs[0]).subscribe();
            }
        });
    }
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            availableLanguages: entity.availableLanguages,
            trackInventory: entity.trackInventory,
            outOfStockThreshold: entity.outOfStockThreshold,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: GlobalSettingsComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: GlobalSettingsComponent, isStandalone: false, selector: "vdr-global-settings", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"global-setting-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"updatePermission\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n            <vdr-action-bar-dropdown-menu locationId=\"global-setting-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-block>\n        <vdr-card>\n            <div class=\"form-grid\">\n                <vdr-form-field\n                    [label]=\"'common.available-languages' | translate\"\n                    for=\"availableLanguages\"\n                    [tooltip]=\"'settings.global-available-languages-tooltip' | translate\"\n                >\n                    <vdr-language-code-selector\n                        formControlName=\"availableLanguages\"\n                        [languageCodes]=\"languageCodes\"\n                    ></vdr-language-code-selector>\n                </vdr-form-field>\n                <vdr-form-field\n                    [label]=\"'settings.global-out-of-stock-threshold' | translate\"\n                    for=\"outOfStockThreshold\"\n                    [tooltip]=\"'settings.global-out-of-stock-threshold-tooltip' | translate\"\n                >\n                    <input\n                        id=\"outOfStockThreshold\"\n                        type=\"number\"\n                        formControlName=\"outOfStockThreshold\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                    />\n                </vdr-form-field>\n                <vdr-form-field\n                    [label]=\"'settings.track-inventory-default' | translate\"\n                    for=\"enabled\"\n                    [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\n                >\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            formControlName=\"trackInventory\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </div>\n        </vdr-card>\n        <vdr-card\n            formGroupName=\"customFields\"\n            *ngIf=\"customFields.length\"\n            [title]=\"'common.custom-fields' | translate\"\n        >\n            <vdr-tabbed-custom-fields\n                entityName=\"GlobalSettings\"\n                [customFields]=\"customFields\"\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n            ></vdr-tabbed-custom-fields>\n        </vdr-card>\n\n        <vdr-custom-detail-component-host\n            locationId=\"global-settings-detail\"\n            [entity$]=\"entity$\"\n            [detailForm]=\"detailForm\"\n        ></vdr-custom-detail-component-host>\n    </vdr-page-block>\n</form>\n", styles: ["::ng-deep ng-select .ng-value>span{margin:0!important}::ng-deep ng-select .ng-arrow-wrapper .ng-arrow{margin:0!important}::ng-deep ng-select .ng-select-container>span{margin:0!important}\n"], dependencies: [{ kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2$1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: i1.LanguageCodeSelectorComponent, selector: "vdr-language-code-selector", inputs: ["languageCodes"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: GlobalSettingsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-global-settings', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"global-setting-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"updatePermission\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n            <vdr-action-bar-dropdown-menu locationId=\"global-setting-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-block>\n        <vdr-card>\n            <div class=\"form-grid\">\n                <vdr-form-field\n                    [label]=\"'common.available-languages' | translate\"\n                    for=\"availableLanguages\"\n                    [tooltip]=\"'settings.global-available-languages-tooltip' | translate\"\n                >\n                    <vdr-language-code-selector\n                        formControlName=\"availableLanguages\"\n                        [languageCodes]=\"languageCodes\"\n                    ></vdr-language-code-selector>\n                </vdr-form-field>\n                <vdr-form-field\n                    [label]=\"'settings.global-out-of-stock-threshold' | translate\"\n                    for=\"outOfStockThreshold\"\n                    [tooltip]=\"'settings.global-out-of-stock-threshold-tooltip' | translate\"\n                >\n                    <input\n                        id=\"outOfStockThreshold\"\n                        type=\"number\"\n                        formControlName=\"outOfStockThreshold\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                    />\n                </vdr-form-field>\n                <vdr-form-field\n                    [label]=\"'settings.track-inventory-default' | translate\"\n                    for=\"enabled\"\n                    [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\n                >\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            formControlName=\"trackInventory\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </div>\n        </vdr-card>\n        <vdr-card\n            formGroupName=\"customFields\"\n            *ngIf=\"customFields.length\"\n            [title]=\"'common.custom-fields' | translate\"\n        >\n            <vdr-tabbed-custom-fields\n                entityName=\"GlobalSettings\"\n                [customFields]=\"customFields\"\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n            ></vdr-tabbed-custom-fields>\n        </vdr-card>\n\n        <vdr-custom-detail-component-host\n            locationId=\"global-settings-detail\"\n            [entity$]=\"entity$\"\n            [detailForm]=\"detailForm\"\n        ></vdr-custom-detail-component-host>\n    </vdr-page-block>\n</form>\n", styles: ["::ng-deep ng-select .ng-value>span{margin:0!important}::ng-deep ng-select .ng-arrow-wrapper .ng-arrow{margin:0!important}::ng-deep ng-select .ng-select-container>span{margin:0!important}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const GET_PAYMENT_METHOD_DETAIL = gql `
    query GetPaymentMethodDetail($id: ID!) {
        paymentMethod(id: $id) {
            ...PaymentMethod
        }
    }
    ${PAYMENT_METHOD_FRAGMENT}
`;
class PaymentMethodDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('PaymentMethod');
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            name: ['', Validators.required],
            description: '',
            enabled: [true, Validators.required],
            checker: {},
            handler: {},
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.checkers = [];
        this.handlers = [];
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdatePaymentMethod];
    }
    ngOnInit() {
        this.init();
        this.dataService.settings.getPaymentMethodOperations().single$.subscribe(data => {
            this.checkers = data.paymentMethodEligibilityCheckers;
            this.handlers = data.paymentMethodHandlers;
            this.changeDetector.markForCheck();
            this.selectedCheckerDefinition = data.paymentMethodEligibilityCheckers.find(c => c.code === this.entity?.checker?.code);
            this.selectedHandlerDefinition = data.paymentMethodHandlers.find(c => c.code === this.entity?.handler?.code);
        });
    }
    ngOnDestroy() {
        this.destroy();
    }
    updateCode(currentCode, nameValue) {
        if (!currentCode) {
            const codeControl = this.detailForm.get('code');
            if (codeControl && codeControl.pristine) {
                codeControl.setValue(normalizeString(nameValue, '-'));
            }
        }
    }
    selectChecker(checker) {
        this.selectedCheckerDefinition = checker;
        this.selectedChecker = configurableDefinitionToInstance(checker);
        const formControl = this.detailForm.get('checker');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedChecker);
        }
        this.detailForm.markAsDirty();
    }
    selectHandler(handler) {
        this.selectedHandlerDefinition = handler;
        this.selectedHandler = configurableDefinitionToInstance(handler);
        const formControl = this.detailForm.get('handler');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedHandler);
        }
        this.detailForm.markAsDirty();
    }
    removeChecker() {
        this.selectedChecker = null;
        this.detailForm.markAsDirty();
    }
    removeHandler() {
        this.selectedHandler = null;
        this.detailForm.markAsDirty();
    }
    create() {
        const selectedChecker = this.selectedChecker;
        const selectedHandler = this.selectedHandler;
        if (!selectedHandler) {
            return;
        }
        const input = this.getUpdatedPaymentMethod({
            id: '',
            createdAt: '',
            updatedAt: '',
            name: '',
            code: '',
            description: '',
            enabled: true,
            checker: undefined,
            handler: undefined,
            translations: [],
        }, this.detailForm, this.languageCode, selectedHandler, selectedChecker);
        this.dataService.settings.createPaymentMethod(input).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'PaymentMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createPaymentMethod.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'PaymentMethod',
            });
        });
    }
    save() {
        const selectedChecker = this.selectedChecker;
        const selectedHandler = this.selectedHandler;
        if (!selectedHandler) {
            return;
        }
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1), mergeMap(([paymentMethod, languageCode]) => {
            const input = this.getUpdatedPaymentMethod(paymentMethod, this.detailForm, languageCode, selectedHandler, selectedChecker);
            return this.dataService.settings.updatePaymentMethod(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'PaymentMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'PaymentMethod',
            });
        });
    }
    /**
     * Given a PaymentMethod and the value of the detailForm, this method creates an updated copy of it which
     * can then be persisted to the API.
     */
    getUpdatedPaymentMethod(paymentMethod, formGroup, languageCode, selectedHandler, selectedChecker) {
        const input = createUpdatedTranslatable({
            translatable: paymentMethod,
            updatedFields: formGroup.value,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: paymentMethod.name || '',
                description: paymentMethod.description || '',
            },
        });
        return {
            ...input,
            checker: selectedChecker
                ? toConfigurableOperationInput(selectedChecker, formGroup.value.checker)
                : null,
            handler: toConfigurableOperationInput(selectedHandler, formGroup.value.handler),
        };
    }
    setFormValues(paymentMethod, languageCode) {
        const currentTranslation = findTranslation(paymentMethod, languageCode);
        this.detailForm.patchValue({
            name: currentTranslation?.name,
            code: paymentMethod.code,
            description: currentTranslation?.description,
            enabled: paymentMethod.enabled,
            checker: paymentMethod.checker || {},
            handler: paymentMethod.handler || {},
        });
        if (!this.selectedChecker) {
            this.selectedChecker = paymentMethod.checker && {
                code: paymentMethod.checker.code,
                args: paymentMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),
            };
        }
        if (!this.selectedHandler) {
            this.selectedHandler = paymentMethod.handler && {
                code: paymentMethod.handler.code,
                args: paymentMethod.handler.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),
            };
        }
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), paymentMethod, currentTranslation);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: PaymentMethodDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: PaymentMethodDetailComponent, isStandalone: false, selector: "vdr-payment-method-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block\n    ><vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"payment-method-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\n                (click)=\"create()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"updatePermission\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"payment-method-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"description\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            id=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"enabled\"\n                        />\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.code' | translate\"\n                        for=\"code\"\n                        [readOnlyToggle]=\"updatePermission | hasPermission\"\n                    >\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            formControlName=\"code\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-rich-text-editor\n                        class=\"form-grid-span\"\n                        formControlName=\"description\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                        [label]=\"'common.description' | translate\"\n                    ></vdr-rich-text-editor>\n                </div>\n            </vdr-card>\n\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"PaymentMethod\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n\n            <vdr-custom-detail-component-host\n                locationId=\"payment-method-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n\n            <vdr-card [title]=\"'settings.payment-eligibility-checker' | translate\">\n                <vdr-configurable-input\n                    *ngIf=\"selectedChecker && selectedCheckerDefinition\"\n                    [operation]=\"selectedChecker\"\n                    [operationDefinition]=\"selectedCheckerDefinition\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (remove)=\"removeChecker()\"\n                    formControlName=\"checker\"\n                ></vdr-configurable-input>\n                <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'common.select' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let checker of checkers\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"selectChecker(checker)\"\n                            >\n                                {{ checker.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'settings.payment-handler' | translate\">\n                <vdr-configurable-input\n                    *ngIf=\"selectedHandler && selectedHandlerDefinition\"\n                    [operation]=\"selectedHandler\"\n                    [operationDefinition]=\"selectedHandlerDefinition\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (remove)=\"removeHandler()\"\n                    formControlName=\"handler\"\n                ></vdr-configurable-input>\n                <div *ngIf=\"!selectedHandler || !selectedHandlerDefinition\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'common.select' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let handler of handlers\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"selectHandler(handler)\"\n                            >\n                                {{ handler.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ConfigurableInputComponent, selector: "vdr-configurable-input", inputs: ["operation", "operationDefinition", "readonly", "removable", "position", "hideDescription"], outputs: ["remove"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i1.RichTextEditorComponent, selector: "vdr-rich-text-editor", inputs: ["label", "readonly"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: PaymentMethodDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-payment-method-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block\n    ><vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"payment-method-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\n                (click)=\"create()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"updatePermission\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"payment-method-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"description\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            id=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"enabled\"\n                        />\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.code' | translate\"\n                        for=\"code\"\n                        [readOnlyToggle]=\"updatePermission | hasPermission\"\n                    >\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            formControlName=\"code\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-rich-text-editor\n                        class=\"form-grid-span\"\n                        formControlName=\"description\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                        [label]=\"'common.description' | translate\"\n                    ></vdr-rich-text-editor>\n                </div>\n            </vdr-card>\n\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"PaymentMethod\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n\n            <vdr-custom-detail-component-host\n                locationId=\"payment-method-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n\n            <vdr-card [title]=\"'settings.payment-eligibility-checker' | translate\">\n                <vdr-configurable-input\n                    *ngIf=\"selectedChecker && selectedCheckerDefinition\"\n                    [operation]=\"selectedChecker\"\n                    [operationDefinition]=\"selectedCheckerDefinition\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (remove)=\"removeChecker()\"\n                    formControlName=\"checker\"\n                ></vdr-configurable-input>\n                <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'common.select' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let checker of checkers\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"selectChecker(checker)\"\n                            >\n                                {{ checker.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'settings.payment-handler' | translate\">\n                <vdr-configurable-input\n                    *ngIf=\"selectedHandler && selectedHandlerDefinition\"\n                    [operation]=\"selectedHandler\"\n                    [operationDefinition]=\"selectedHandlerDefinition\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (remove)=\"removeHandler()\"\n                    formControlName=\"handler\"\n                ></vdr-configurable-input>\n                <div *ngIf=\"!selectedHandler || !selectedHandlerDefinition\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'common.select' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let handler of handlers\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"selectHandler(handler)\"\n                            >\n                                {{ handler.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deletePaymentMethodsBulkAction = createBulkDeleteAction({
    location: 'payment-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeletePaymentMethod) ||
        userPermissions.includes(Permission.DeleteSettings),
    getItemName: item => item.name,
    shouldRetryItem: (response, item) => !!response.message,
    bulkDelete: (dataService, ids, retrying) => dataService.settings.deletePaymentMethods(ids, retrying).pipe(map(res => res.deletePaymentMethods)),
});
const ASSIGN_PAYMENT_METHODS_TO_CHANNEL = gql `
    mutation AssignPaymentMethodsToChannel($input: AssignPaymentMethodsToChannelInput!) {
        assignPaymentMethodsToChannel(input: $input) {
            id
            name
        }
    }
`;
const REMOVE_PAYMENT_METHODS_FROM_CHANNEL = gql `
    mutation RemovePaymentMethodsFromChannel($input: RemovePaymentMethodsFromChannelInput!) {
        removePaymentMethodsFromChannel(input: $input) {
            id
            name
        }
    }
`;
const assignPaymentMethodsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'payment-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdatePaymentMethod) ||
        userPermissions.includes(Permission.UpdateSettings),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, paymentMethodIds, channelIds) => channelIds.map(channelId => dataService
        .mutate(AssignPaymentMethodsToChannelDocument, {
        input: {
            channelId,
            paymentMethodIds,
        },
    })
        .pipe(map(res => res.assignPaymentMethodsToChannel))),
});
const removePaymentMethodsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'payment-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeletePaymentMethod) ||
        userPermissions.includes(Permission.DeleteSettings),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, paymentMethodIds, channelId) => dataService
        .mutate(RemovePaymentMethodsFromChannelDocument, {
        input: {
            channelId,
            paymentMethodIds,
        },
    })
        .pipe(map(res => res.removePaymentMethodsFromChannel)),
});

const GET_PAYMENT_METHOD_LIST = gql `
    query GetPaymentMethodList($options: PaymentMethodListOptions!) {
        paymentMethods(options: $options) {
            items {
                ...PaymentMethodListItem
            }
            totalItems
        }
    }
    fragment PaymentMethodListItem on PaymentMethod {
        id
        createdAt
        updatedAt
        name
        description
        code
        enabled
    }
`;
class PaymentMethodListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'payment-method-list';
        this.customFields = this.getCustomFieldConfig('PaymentMethod');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'name',
            type: { kind: 'text' },
            label: marker('common.name'),
            filterField: 'name',
        })
            .addFilter({
            name: 'code',
            type: { kind: 'text' },
            label: marker('common.code'),
            filterField: 'code',
        })
            .addFilter({
            name: 'enabled',
            type: { kind: 'boolean' },
            label: marker('common.enabled'),
            filterField: 'enabled',
        })
            .addFilter({
            name: 'description',
            type: { kind: 'text' },
            label: marker('common.description'),
            filterField: 'description',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'id' })
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .addSort({ name: 'code' })
            .addSort({ name: 'description' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetPaymentMethodListDocument,
            getItems: data => data.paymentMethods,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: PaymentMethodListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: PaymentMethodListComponent, isStandalone: false, selector: "vdr-payment-method-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"payment-method-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreatePaymentMethod']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-payment-method' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"payment-method-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"payment-method-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column\n        [heading]=\"'common.id' | translate\"\n        id=\"id\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('id')\"\n    >\n        <ng-template let-paymentMethod=\"item\">\n            {{ paymentMethod.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\"\n        id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-paymentMethod=\"item\">\n            {{ paymentMethod.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\"\n        id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-paymentMethod=\"item\">\n            {{ paymentMethod.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.name' | translate\"\n        id=\"name\"\n        [optional]=\"false\"\n        [sort]=\"sorts.get('name')\"\n    >\n        <ng-template let-paymentMethod=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', paymentMethod.id]\"\n                ><span>{{ paymentMethod.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [sort]=\"sorts.get('code')\">\n        <ng-template let-paymentMethod=\"item\">\n            {{ paymentMethod.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-paymentMethod=\"item\">\n            <vdr-chip *ngIf=\"paymentMethod.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!paymentMethod.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: PaymentMethodListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-payment-method-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"payment-method-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreatePaymentMethod']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-payment-method' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"payment-method-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"payment-method-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column\n        [heading]=\"'common.id' | translate\"\n        id=\"id\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('id')\"\n    >\n        <ng-template let-paymentMethod=\"item\">\n            {{ paymentMethod.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\"\n        id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-paymentMethod=\"item\">\n            {{ paymentMethod.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\"\n        id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-paymentMethod=\"item\">\n            {{ paymentMethod.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.name' | translate\"\n        id=\"name\"\n        [optional]=\"false\"\n        [sort]=\"sorts.get('name')\"\n    >\n        <ng-template let-paymentMethod=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', paymentMethod.id]\"\n                ><span>{{ paymentMethod.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [sort]=\"sorts.get('code')\">\n        <ng-template let-paymentMethod=\"item\">\n            {{ paymentMethod.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-paymentMethod=\"item\">\n            <vdr-chip *ngIf=\"paymentMethod.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!paymentMethod.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n" }]
        }], ctorParameters: () => [] });

const GET_PROFILE_DETAIL = gql `
    query GetProfileDetail {
        activeAdministrator {
            ...ProfileDetail
        }
    }
    fragment ProfileDetail on Administrator {
        id
        createdAt
        updatedAt
        firstName
        lastName
        emailAddress
        user {
            id
            lastLogin
            verified
        }
    }
`;
class ProfileComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('Administrator');
        this.detailForm = this.formBuilder.group({
            emailAddress: ['', Validators.required],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            password: [''],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    save() {
        this.entity$
            .pipe(take(1), mergeMap(({ id }) => {
            const formValue = this.detailForm.value;
            const administrator = {
                emailAddress: formValue.emailAddress,
                firstName: formValue.firstName,
                lastName: formValue.lastName,
                password: formValue.password,
                customFields: formValue.customFields,
            };
            return this.dataService.administrator.updateActiveAdministrator(administrator);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Administrator',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Administrator',
            });
        });
    }
    setFormValues(administrator, languageCode) {
        this.detailForm.patchValue({
            emailAddress: administrator.emailAddress,
            firstName: administrator.firstName,
            lastName: administrator.lastName,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), administrator);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProfileComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ProfileComponent, isStandalone: false, selector: "vdr-profile", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"profile\"></vdr-action-bar-items>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\n                        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\n                        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\n                        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        *ngIf=\"isNew$ | async\"\n                        [label]=\"'settings.password' | translate\"\n                        for=\"password\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'settings.password' | translate\"\n                        for=\"password\"\n                        [readOnlyToggle]=\"true\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Administrator\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"administrator-profile\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProfileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-profile', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"profile\"></vdr-action-bar-items>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\n                        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\n                        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\n                        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        *ngIf=\"isNew$ | async\"\n                        [label]=\"'settings.password' | translate\"\n                        for=\"password\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'settings.password' | translate\"\n                        for=\"password\"\n                        [readOnlyToggle]=\"true\"\n                    >\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Administrator\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"administrator-profile\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const GET_ROLE_DETAIL = gql `
    query GetRoleDetail($id: ID!) {
        role(id: $id) {
            ...Role
        }
    }
    ${ROLE_FRAGMENT}
`;
class RoleDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            description: ['', Validators.required],
            channelIds: [[]],
            permissions: [[]],
        });
        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    updateCode(nameValue) {
        const codeControl = this.detailForm.get(['code']);
        if (codeControl && codeControl.pristine) {
            codeControl.setValue(normalizeString(nameValue, '-'));
        }
    }
    setPermission(change) {
        const permissionsControl = this.detailForm.get('permissions');
        if (permissionsControl) {
            const currentPermissions = permissionsControl.value;
            const newValue = (change.value === true
                ? unique([...currentPermissions, change.permission])
                : currentPermissions.filter(p => p !== change.permission));
            permissionsControl.setValue(newValue);
            permissionsControl.markAsDirty();
        }
    }
    create() {
        const { code, description, permissions, channelIds } = this.detailForm.value;
        if (!code || !description) {
            return;
        }
        const role = {
            code,
            description,
            permissions: permissions ?? [],
            channelIds,
        };
        this.dataService.administrator.createRole(role).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), { entity: 'Role' });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createRole.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Role',
            });
        });
    }
    save() {
        this.entity$
            .pipe(take(1), mergeMap(({ id }) => {
            const formValue = this.detailForm.value;
            const role = { id, ...formValue };
            return this.dataService.administrator.updateRole(role);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), { entity: 'Role' });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Role',
            });
        });
    }
    setFormValues(role, languageCode) {
        this.detailForm.patchValue({
            description: role.description,
            code: role.code,
            channelIds: role.channels.map(c => c.id),
            permissions: role.permissions,
        });
        // This was required to get the channel selector component to
        // correctly display its contents. A while spent debugging the root
        // cause did not yield a solution, therefore this next line.
        this.changeDetector.detectChanges();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: RoleDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: RoleDetailComponent, isStandalone: false, selector: "vdr-role-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"role-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"'UpdateAdministrator'\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"role-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\">\n                        <input\n                            id=\"description\"\n                            type=\"text\"\n                            formControlName=\"description\"\n                            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n                            (input)=\"updateCode($event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.code' | translate\"\n                        for=\"code\"\n                        [readOnlyToggle]=\"'UpdateAdministrator' | hasPermission\"\n                    >\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            formControlName=\"code\"\n                            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n    <vdr-page-block class=\"mt-2\">\n        <vdr-card [title]=\"'settings.permissions' | translate\">\n            <vdr-form-field [label]=\"'settings.channel' | translate\">\n                <vdr-channel-assignment-control\n                    formControlName=\"channelIds\"\n                    [vdrDisabled]=\"!('UpdateAdministrator' | hasPermission)\"\n                ></vdr-channel-assignment-control>\n            </vdr-form-field>\n            <vdr-permission-grid\n                class=\"mt-2\"\n                [permissionDefinitions]=\"permissionDefinitions\"\n                [activePermissions]=\"detailForm.get('permissions')?.value\"\n                (permissionChange)=\"setPermission($event)\"\n                [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n            ></vdr-permission-grid>\n        </vdr-card>\n    </vdr-page-block>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.ChannelAssignmentControlComponent, selector: "vdr-channel-assignment-control", inputs: ["multiple", "includeDefaultChannel", "disableChannelIds"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: PermissionGridComponent, selector: "vdr-permission-grid", inputs: ["permissionDefinitions", "activePermissions", "readonly"], outputs: ["permissionChange"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: RoleDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-role-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"role-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"'UpdateAdministrator'\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"role-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\">\n                        <input\n                            id=\"description\"\n                            type=\"text\"\n                            formControlName=\"description\"\n                            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n                            (input)=\"updateCode($event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.code' | translate\"\n                        for=\"code\"\n                        [readOnlyToggle]=\"'UpdateAdministrator' | hasPermission\"\n                    >\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            formControlName=\"code\"\n                            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n    <vdr-page-block class=\"mt-2\">\n        <vdr-card [title]=\"'settings.permissions' | translate\">\n            <vdr-form-field [label]=\"'settings.channel' | translate\">\n                <vdr-channel-assignment-control\n                    formControlName=\"channelIds\"\n                    [vdrDisabled]=\"!('UpdateAdministrator' | hasPermission)\"\n                ></vdr-channel-assignment-control>\n            </vdr-form-field>\n            <vdr-permission-grid\n                class=\"mt-2\"\n                [permissionDefinitions]=\"permissionDefinitions\"\n                [activePermissions]=\"detailForm.get('permissions')?.value\"\n                (permissionChange)=\"setPermission($event)\"\n                [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n            ></vdr-permission-grid>\n        </vdr-card>\n    </vdr-page-block>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deleteRolesBulkAction = createBulkDeleteAction({
    location: 'role-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteAdministrator),
    getItemName: item => item.description,
    bulkDelete: (dataService, ids) => dataService.administrator.deleteRoles(ids).pipe(map(res => res.deleteRoles)),
});

const GET_ROLE_LIST = gql `
    query GetRoleList($options: RoleListOptions) {
        roles(options: $options) {
            items {
                ...Role
            }
            totalItems
        }
    }
    ${ROLE_FRAGMENT}
`;
class RoleListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'role-list';
        this.initialLimit = 3;
        this.displayLimit = {};
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'code',
            type: { kind: 'text' },
            label: marker('common.code'),
            filterField: 'code',
        })
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'code' })
            .addSort({ name: 'description' })
            .connectToRoute(this.route);
        super.configure({
            document: GetRoleListDocument,
            getItems: data => data.roles,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        code: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    toggleDisplayLimit(role) {
        if (this.displayLimit[role.id] === role.permissions.length) {
            this.displayLimit[role.id] = this.initialLimit;
        }
        else {
            this.displayLimit[role.id] = role.permissions.length;
        }
    }
    isDefaultRole(role) {
        return role.code === SUPER_ADMIN_ROLE_CODE || role.code === CUSTOMER_ROLE_CODE;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: RoleListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: RoleListComponent, isStandalone: false, selector: "vdr-role-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"role-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateAdministrator']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-role' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"role-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"role-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-role=\"item\">\n            {{ role.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-role=\"item\">\n            {{ role.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-role=\"item\">\n            {{ role.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.description' | translate\" id=\"description\"\n        [optional]=\"false\"\n        [sort]=\"sorts.get('description')\"\n    >\n        <ng-template let-role=\"item\">\n            <a\n                *ngIf=\"!isDefaultRole(role); else defaultRole\"\n                class=\"button-ghost\"\n                [routerLink]=\"['./', role.id]\"\n                ><span>{{ role.description }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n            <ng-template #defaultRole>\n                {{ role.description }}\n            </ng-template>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [sort]=\"sorts.get('code')\">\n        <ng-template let-role=\"item\">\n            <span *ngIf=\"!isDefaultRole(role)\">{{ role.code }}</span>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.channel' | translate\" id=\"channel\">\n        <ng-template let-role=\"item\">\n            <ng-container *ngIf=\"!isDefaultRole(role)\">\n                <vdr-chip *ngFor=\"let channel of role.channels\">\n                    <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n                    <div class=\"ml-1\">{{ channel.code | channelCodeToLabel | translate }}</div>\n                </vdr-chip>\n            </ng-container>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.permissions' | translate\" id=\"permissions\">\n        <ng-template let-role=\"item\">\n            <ng-container *ngIf=\"!isDefaultRole(role); else defaultRole\">\n                <div class=\"permissions-list\">\n                    <vdr-chip\n                        *ngFor=\"let permission of role.permissions | slice : 0 : displayLimit[role.id] || 3\"\n                        >{{ permission }}</vdr-chip\n                    >\n                    <button\n                        class=\"button-small\"\n                        *ngIf=\"role.permissions.length > initialLimit\"\n                        (click)=\"toggleDisplayLimit(role)\"\n                    >\n                        <ng-container\n                            *ngIf=\"(displayLimit[role.id] || 0) < role.permissions.length; else collapse\"\n                        >\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ role.permissions.length - initialLimit }}\n                        </ng-container>\n                        <ng-template #collapse>\n                            <clr-icon shape=\"minus\"></clr-icon>\n                        </ng-template>\n                    </button>\n                </div>\n            </ng-container>\n            <ng-template #defaultRole>\n                <span class=\"default-role-label\">{{ 'settings.default-role-label' | translate }}</span>\n            </ng-template>\n        </ng-template>\n    </vdr-dt2-column>\n</vdr-data-table-2>\n", styles: [".default-role-label{color:var(--color-grey-400)}.permissions-list{max-width:500px;display:flex;flex-wrap:wrap;align-items:center;gap:4px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.ChannelBadgeComponent, selector: "vdr-channel-badge", inputs: ["channelCode"] }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.SlicePipe, name: "slice" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.ChannelLabelPipe, name: "channelCodeToLabel" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: RoleListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-role-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"role-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateAdministrator']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-role' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"role-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"role-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-role=\"item\">\n            {{ role.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-role=\"item\">\n            {{ role.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-role=\"item\">\n            {{ role.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.description' | translate\" id=\"description\"\n        [optional]=\"false\"\n        [sort]=\"sorts.get('description')\"\n    >\n        <ng-template let-role=\"item\">\n            <a\n                *ngIf=\"!isDefaultRole(role); else defaultRole\"\n                class=\"button-ghost\"\n                [routerLink]=\"['./', role.id]\"\n                ><span>{{ role.description }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n            <ng-template #defaultRole>\n                {{ role.description }}\n            </ng-template>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [sort]=\"sorts.get('code')\">\n        <ng-template let-role=\"item\">\n            <span *ngIf=\"!isDefaultRole(role)\">{{ role.code }}</span>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.channel' | translate\" id=\"channel\">\n        <ng-template let-role=\"item\">\n            <ng-container *ngIf=\"!isDefaultRole(role)\">\n                <vdr-chip *ngFor=\"let channel of role.channels\">\n                    <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n                    <div class=\"ml-1\">{{ channel.code | channelCodeToLabel | translate }}</div>\n                </vdr-chip>\n            </ng-container>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.permissions' | translate\" id=\"permissions\">\n        <ng-template let-role=\"item\">\n            <ng-container *ngIf=\"!isDefaultRole(role); else defaultRole\">\n                <div class=\"permissions-list\">\n                    <vdr-chip\n                        *ngFor=\"let permission of role.permissions | slice : 0 : displayLimit[role.id] || 3\"\n                        >{{ permission }}</vdr-chip\n                    >\n                    <button\n                        class=\"button-small\"\n                        *ngIf=\"role.permissions.length > initialLimit\"\n                        (click)=\"toggleDisplayLimit(role)\"\n                    >\n                        <ng-container\n                            *ngIf=\"(displayLimit[role.id] || 0) < role.permissions.length; else collapse\"\n                        >\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ role.permissions.length - initialLimit }}\n                        </ng-container>\n                        <ng-template #collapse>\n                            <clr-icon shape=\"minus\"></clr-icon>\n                        </ng-template>\n                    </button>\n                </div>\n            </ng-container>\n            <ng-template #defaultRole>\n                <span class=\"default-role-label\">{{ 'settings.default-role-label' | translate }}</span>\n            </ng-template>\n        </ng-template>\n    </vdr-dt2-column>\n</vdr-data-table-2>\n", styles: [".default-role-label{color:var(--color-grey-400)}.permissions-list{max-width:500px;display:flex;flex-wrap:wrap;align-items:center;gap:4px}\n"] }]
        }], ctorParameters: () => [] });

const GET_SELLER_DETAIL = gql `
    query GetSellerDetail($id: ID!) {
        seller(id: $id) {
            ...SellerDetail
        }
    }
    fragment SellerDetail on Seller {
        id
        createdAt
        updatedAt
        name
    }
`;
class SellerDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('Seller');
        this.detailForm = this.formBuilder.group({
            name: ['', Validators.required],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.updatePermission = [Permission.SuperAdmin, Permission.UpdateSeller, Permission.CreateSeller];
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    saveButtonEnabled() {
        return this.detailForm.dirty && this.detailForm.valid;
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        if (!formValue.name) {
            return;
        }
        const input = {
            name: formValue.name,
            customFields: formValue.customFields,
        };
        this.dataService.settings.createSeller(input).subscribe(data => {
            switch (data.createSeller.__typename) {
                case 'Seller':
                    this.notificationService.success(marker('common.notify-create-success'), {
                        entity: 'Seller',
                    });
                    this.detailForm.markAsPristine();
                    this.changeDetector.markForCheck();
                    this.router.navigate(['../', data.createSeller.id], { relativeTo: this.route });
                    break;
            }
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        this.entity$
            .pipe(take(1), mergeMap(seller => {
            const input = {
                id: seller.id,
                name: formValue.name,
                customFields: formValue.customFields,
            };
            return this.dataService.settings.updateSeller(input);
        }))
            .subscribe(({ updateSeller }) => {
            switch (updateSeller.__typename) {
                case 'Seller':
                    this.notificationService.success(marker('common.notify-update-success'), {
                        entity: 'Seller',
                    });
                    this.detailForm.markAsPristine();
                    this.changeDetector.markForCheck();
                    break;
                // case 'LanguageNotAvailableError':
                //     this.notificationService.error(updateSeller.message);
            }
        });
    }
    /**
     * Update the form values when the entity changes.
     */
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            name: entity.name,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: SellerDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: SellerDetailComponent, isStandalone: false, selector: "vdr-seller-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"seller-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"['SuperAdmin', 'UpdateSeller']\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"seller-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"name\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Seller\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"seller-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: ["clr-alert{max-width:30rem;margin-bottom:12px}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: SellerDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-seller-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"seller-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"['SuperAdmin', 'UpdateSeller']\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"seller-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"name\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Seller\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"seller-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: ["clr-alert{max-width:30rem;margin-bottom:12px}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deleteSellersBulkAction = createBulkDeleteAction({
    location: 'seller-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteSeller),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.settings.deleteSellers(ids).pipe(map(res => res.deleteSellers)),
});

const GET_SELLER_LIST = gql `
    query GetSellerList($options: SellerListOptions) {
        sellers(options: $options) {
            items {
                ...SellerListItem
            }
            totalItems
        }
    }
    fragment SellerListItem on Seller {
        id
        createdAt
        updatedAt
        name
    }
`;
class SellerListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'seller-list';
        this.customFields = this.getCustomFieldConfig('Seller');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'name',
            type: { kind: 'text' },
            label: marker('common.name'),
            filterField: 'name',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetSellerListDocument,
            getItems: data => data.sellers,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: SellerListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: SellerListComponent, isStandalone: false, selector: "vdr-seller-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"seller-list\" />\n            <a class=\"btn btn-primary\" *vdrIfPermissions=\"['SuperAdmin', 'CreateSeller']\" [routerLink]=\"['./', 'create']\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-seller' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"seller-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"seller-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-seller=\"item\">{{ seller.id }}</ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-seller=\"item\">\n            {{ seller.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-seller=\"item\">\n            {{ seller.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-seller=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', seller.id]\"\n                ><span>{{ seller.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: SellerListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-seller-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"seller-list\" />\n            <a class=\"btn btn-primary\" *vdrIfPermissions=\"['SuperAdmin', 'CreateSeller']\" [routerLink]=\"['./', 'create']\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-seller' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"seller-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"seller-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-seller=\"item\">{{ seller.id }}</ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-seller=\"item\">\n            {{ seller.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-seller=\"item\">\n            {{ seller.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-seller=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', seller.id]\"\n                ><span>{{ seller.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n" }]
        }], ctorParameters: () => [] });

class ShippingEligibilityTestResultComponent {
    constructor() {
        this.okToRun = false;
        this.testDataUpdated = false;
        this.runTest = new EventEmitter();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ShippingEligibilityTestResultComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ShippingEligibilityTestResultComponent, isStandalone: false, selector: "vdr-shipping-eligibility-test-result", inputs: { testResult: "testResult", okToRun: "okToRun", testDataUpdated: "testDataUpdated", currencyCode: "currencyCode" }, outputs: { runTest: "runTest" }, ngImport: i0, template: "<vdr-card class=\"test-result\" [title]=\"'settings.test-result' | translate\">\n    <div class=\"card-span\" *ngFor=\"let quote of testResult\">\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\n                {{ quote.name }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\n                    {{ quote.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\n        </div>\n    </div>\n    <div class=\"card-span\" *ngIf=\"testResult?.length === 0\">\n        <clr-icon shape=\"ban\" class=\"is-solid error\"></clr-icon>\n        {{ 'settings.no-eligible-shipping-methods' | translate }}\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\n            {{ 'settings.test-shipping-methods' | translate }}\n        </button>\n    </div>\n</vdr-card>\n", styles: [":host{display:block}.result-details{transition:opacity .2s}.result-details.stale{opacity:.5}.price-row{display:flex}.price-row>*:not(:first-child){margin-inline-start:24px}clr-icon.error{color:var(--color-error-500)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.ObjectTreeComponent, selector: "vdr-object-tree", inputs: ["value", "isArrayItem"] }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ShippingEligibilityTestResultComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-shipping-eligibility-test-result', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-card class=\"test-result\" [title]=\"'settings.test-result' | translate\">\n    <div class=\"card-span\" *ngFor=\"let quote of testResult\">\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\n                {{ quote.name }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\n                    {{ quote.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\n        </div>\n    </div>\n    <div class=\"card-span\" *ngIf=\"testResult?.length === 0\">\n        <clr-icon shape=\"ban\" class=\"is-solid error\"></clr-icon>\n        {{ 'settings.no-eligible-shipping-methods' | translate }}\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\n            {{ 'settings.test-shipping-methods' | translate }}\n        </button>\n    </div>\n</vdr-card>\n", styles: [":host{display:block}.result-details{transition:opacity .2s}.result-details.stale{opacity:.5}.price-row{display:flex}.price-row>*:not(:first-child){margin-inline-start:24px}clr-icon.error{color:var(--color-error-500)}\n"] }]
        }], propDecorators: { testResult: [{
                type: Input
            }], okToRun: [{
                type: Input
            }], testDataUpdated: [{
                type: Input
            }], currencyCode: [{
                type: Input
            }], runTest: [{
                type: Output
            }] } });

class TestOrderBuilderComponent {
    get subTotal() {
        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);
    }
    constructor(dataService, localStorageService) {
        this.dataService = dataService;
        this.localStorageService = localStorageService;
        this.orderLinesChange = new EventEmitter();
        this.lines = [];
    }
    ngOnInit() {
        this.lines = this.loadFromLocalStorage();
        if (this.lines) {
            this.orderLinesChange.emit(this.lines);
        }
        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {
            this.currencyCode = result.activeChannel.defaultCurrencyCode;
        });
    }
    selectResult(result) {
        if (result) {
            this.addToLines(result);
        }
    }
    addToLines(result) {
        if (!this.lines.find(l => l.id === result.productVariantId)) {
            this.lines.push({
                id: result.productVariantId,
                name: result.productVariantName,
                preview: result.productAsset?.preview ?? '',
                quantity: 1,
                sku: result.sku,
                unitPriceWithTax: (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,
            });
            this.persistToLocalStorage();
            this.orderLinesChange.emit(this.lines);
        }
    }
    updateQuantity() {
        this.persistToLocalStorage();
        this.orderLinesChange.emit(this.lines);
    }
    removeLine(line) {
        this.lines = this.lines.filter(l => l.id !== line.id);
        this.persistToLocalStorage();
        this.orderLinesChange.emit(this.lines);
    }
    persistToLocalStorage() {
        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);
    }
    loadFromLocalStorage() {
        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TestOrderBuilderComponent, deps: [{ token: i1.DataService }, { token: i1.LocalStorageService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: TestOrderBuilderComponent, isStandalone: false, selector: "vdr-test-order-builder", outputs: { orderLinesChange: "orderLinesChange" }, ngImport: i0, template: "<table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ 'order.product-name' | translate }}</th>\n            <th>{{ 'order.product-sku' | translate }}</th>\n            <th>{{ 'order.unit-price' | translate }}</th>\n            <th>{{ 'order.quantity' | translate }}</th>\n            <th>{{ 'order.total' | translate }}</th>\n        </tr>\n    </thead>\n    <tr *ngFor=\"let line of lines\" class=\"order-line\">\n        <td class=\"align-middle thumb\">\n            <img [src]=\"line.preview + '?preset=tiny'\" />\n        </td>\n        <td class=\"align-middle name\">{{ line.name }}</td>\n        <td class=\"align-middle sku\">{{ line.sku }}</td>\n        <td class=\"align-middle unit-price\">\n            {{ line.unitPriceWithTax | localeCurrency : currencyCode }}\n        </td>\n        <td class=\"align-middle quantity\">\n            <input [(ngModel)]=\"line.quantity\" (change)=\"updateQuantity()\" type=\"number\" max=\"9999\" min=\"1\" />\n            <button class=\"icon-button\" (click)=\"removeLine(line)\">\n                <clr-icon shape=\"trash\"></clr-icon>\n            </button>\n        </td>\n        <td class=\"align-middle total\">\n            {{ line.unitPriceWithTax * line.quantity | localeCurrency : currencyCode }}\n        </td>\n    </tr>\n    <tr class=\"sub-total\">\n        <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>{{ subTotal | localeCurrency : currencyCode }}</td>\n    </tr>\n</table>\n\n<ng-template #emptyPlaceholder>\n    <div class=\"card-block empty-placeholder card-span\">\n        <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\n        <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\n    </div>\n</ng-template>\n<div class=\"card-block\">\n    <vdr-product-variant-selector (productSelected)=\"selectResult($event)\"> </vdr-product-variant-selector>\n</div>\n", styles: [".empty-placeholder{color:var(--color-grey-400);text-align:center}.empty-text{font-size:22px}.thumb{max-width:50px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2$1.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i2$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i5$1.ɵɵDir, selector: "[dir]", inputs: ["dir"], outputs: ["dirChange"], exportAs: ["dir"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.ProductVariantSelectorComponent, selector: "vdr-product-variant-selector", outputs: ["productSelected"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TestOrderBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-test-order-builder', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ 'order.product-name' | translate }}</th>\n            <th>{{ 'order.product-sku' | translate }}</th>\n            <th>{{ 'order.unit-price' | translate }}</th>\n            <th>{{ 'order.quantity' | translate }}</th>\n            <th>{{ 'order.total' | translate }}</th>\n        </tr>\n    </thead>\n    <tr *ngFor=\"let line of lines\" class=\"order-line\">\n        <td class=\"align-middle thumb\">\n            <img [src]=\"line.preview + '?preset=tiny'\" />\n        </td>\n        <td class=\"align-middle name\">{{ line.name }}</td>\n        <td class=\"align-middle sku\">{{ line.sku }}</td>\n        <td class=\"align-middle unit-price\">\n            {{ line.unitPriceWithTax | localeCurrency : currencyCode }}\n        </td>\n        <td class=\"align-middle quantity\">\n            <input [(ngModel)]=\"line.quantity\" (change)=\"updateQuantity()\" type=\"number\" max=\"9999\" min=\"1\" />\n            <button class=\"icon-button\" (click)=\"removeLine(line)\">\n                <clr-icon shape=\"trash\"></clr-icon>\n            </button>\n        </td>\n        <td class=\"align-middle total\">\n            {{ line.unitPriceWithTax * line.quantity | localeCurrency : currencyCode }}\n        </td>\n    </tr>\n    <tr class=\"sub-total\">\n        <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>{{ subTotal | localeCurrency : currencyCode }}</td>\n    </tr>\n</table>\n\n<ng-template #emptyPlaceholder>\n    <div class=\"card-block empty-placeholder card-span\">\n        <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\n        <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\n    </div>\n</ng-template>\n<div class=\"card-block\">\n    <vdr-product-variant-selector (productSelected)=\"selectResult($event)\"> </vdr-product-variant-selector>\n</div>\n", styles: [".empty-placeholder{color:var(--color-grey-400);text-align:center}.empty-text{font-size:22px}.thumb{max-width:50px}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1.LocalStorageService }], propDecorators: { orderLinesChange: [{
                type: Output
            }] } });

class TestAddressFormComponent {
    constructor(formBuilder, dataService, localStorageService) {
        this.formBuilder = formBuilder;
        this.dataService = dataService;
        this.localStorageService = localStorageService;
        this.addressChange = new EventEmitter();
    }
    ngOnInit() {
        this.availableCountries$ = this.dataService.settings
            .getAvailableCountries()
            .mapSingle(result => result.countries.items);
        const storedValue = this.localStorageService.getForCurrentLocation('shippingTestAddress');
        const initialValue = storedValue
            ? storedValue
            : {
                city: '',
                countryCode: '',
                postalCode: '',
                province: '',
            };
        this.addressChange.emit(initialValue);
        this.form = this.formBuilder.group(initialValue);
        this.subscription = this.form.valueChanges.subscribe(value => {
            this.localStorageService.setForCurrentLocation('shippingTestAddress', value);
            this.addressChange.emit(value);
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TestAddressFormComponent, deps: [{ token: i2$1.UntypedFormBuilder }, { token: i1.DataService }, { token: i1.LocalStorageService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: TestAddressFormComponent, isStandalone: false, selector: "vdr-test-address-form", outputs: { addressChange: "addressChange" }, ngImport: i0, template: "<div class=\"card\">\n    <div class=\"card-header\">\n        {{ 'settings.test-address' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <form [formGroup]=\"form\" class=\"form-grid\">\n            <vdr-form-field [label]=\"'customer.city' | translate\">\n                <input formControlName=\"city\" type=\"text\"  />\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'customer.province' | translate\">\n                <input formControlName=\"province\" type=\"text\"  />\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'customer.postal-code' | translate\">\n                <input formControlName=\"postalCode\" type=\"text\"  />\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'customer.country' | translate\">\n                <select name=\"countryCode\" formControlName=\"countryCode\" >\n                    <option *ngFor=\"let country of availableCountries$ | async\" [value]=\"country.code\">\n                        {{ country.name }}\n                    </option>\n                </select>\n            </vdr-form-field>\n        </form>\n    </div>\n</div>\n", styles: [":host{display:block}clr-input-container{margin-bottom:12px}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TestAddressFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-test-address-form', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<div class=\"card\">\n    <div class=\"card-header\">\n        {{ 'settings.test-address' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <form [formGroup]=\"form\" class=\"form-grid\">\n            <vdr-form-field [label]=\"'customer.city' | translate\">\n                <input formControlName=\"city\" type=\"text\"  />\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'customer.province' | translate\">\n                <input formControlName=\"province\" type=\"text\"  />\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'customer.postal-code' | translate\">\n                <input formControlName=\"postalCode\" type=\"text\"  />\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'customer.country' | translate\">\n                <select name=\"countryCode\" formControlName=\"countryCode\" >\n                    <option *ngFor=\"let country of availableCountries$ | async\" [value]=\"country.code\">\n                        {{ country.name }}\n                    </option>\n                </select>\n            </vdr-form-field>\n        </form>\n    </div>\n</div>\n", styles: [":host{display:block}clr-input-container{margin-bottom:12px}\n"] }]
        }], ctorParameters: () => [{ type: i2$1.UntypedFormBuilder }, { type: i1.DataService }, { type: i1.LocalStorageService }], propDecorators: { addressChange: [{
                type: Output
            }] } });

class ShippingMethodTestResultComponent {
    constructor() {
        this.okToRun = false;
        this.testDataUpdated = false;
        this.runTest = new EventEmitter();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ShippingMethodTestResultComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ShippingMethodTestResultComponent, isStandalone: false, selector: "vdr-shipping-method-test-result", inputs: { testResult: "testResult", okToRun: "okToRun", testDataUpdated: "testDataUpdated", currencyCode: "currencyCode" }, outputs: { runTest: "runTest" }, ngImport: i0, template: "<div\n    class=\"test-result card\"\n    [ngClass]=\"{\n        success: testResult?.eligible === true,\n        error: testResult?.eligible === false,\n        unknown: !testResult\n    }\"\n>\n    <div class=\"card-header\">\n        {{ 'settings.test-result' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\n            <vdr-labeled-data [label]=\"'settings.eligible' | translate\">\n                <div class=\"eligible-icon\">\n                    <clr-icon\n                        shape=\"success-standard\"\n                        class=\"is-solid success\"\n                        *ngIf=\"testResult?.eligible\"\n                    ></clr-icon>\n                    <clr-icon\n                        shape=\"ban\"\n                        class=\"is-solid error\"\n                        *ngIf=\"testResult?.eligible === false\"\n                    ></clr-icon>\n                    <clr-icon shape=\"unknown-status\" *ngIf=\"!testResult\"></clr-icon>\n                </div>\n                {{ testResult?.eligible }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data\n                    [label]=\"'common.price' | translate\"\n                    *ngIf=\"testResult?.quote?.price != null\"\n                >\n                    {{ testResult.quote?.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data\n                    [label]=\"'common.price-with-tax' | translate\"\n                    *ngIf=\"testResult?.quote?.priceWithTax != null\"\n                >\n                    {{ testResult.quote?.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree\n                *ngIf=\"testResult?.quote?.metadata\"\n                [value]=\"testResult?.quote?.metadata\"\n            ></vdr-object-tree>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\n            {{ 'settings.test-shipping-method' | translate }}\n        </button>\n    </div>\n</div>\n", styles: [":host{display:block}.test-result.success .card-block{background-color:var(--color-success-100)}.test-result.error .card-block{background-color:var(--color-error-100)}.test-result.unknown .card-block{background-color:var(--color-component-bg-100)}.result-details{transition:opacity .2s}.result-details.stale{opacity:.5}.eligible-icon{display:inline-block}.eligible-icon .success{color:var(--color-success-500)}.eligible-icon .error{color:var(--color-error-500)}.price-row{display:flex}.price-row>*:not(:first-child){margin-inline-start:24px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.ObjectTreeComponent, selector: "vdr-object-tree", inputs: ["value", "isArrayItem"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ShippingMethodTestResultComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-shipping-method-test-result', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<div\n    class=\"test-result card\"\n    [ngClass]=\"{\n        success: testResult?.eligible === true,\n        error: testResult?.eligible === false,\n        unknown: !testResult\n    }\"\n>\n    <div class=\"card-header\">\n        {{ 'settings.test-result' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\n            <vdr-labeled-data [label]=\"'settings.eligible' | translate\">\n                <div class=\"eligible-icon\">\n                    <clr-icon\n                        shape=\"success-standard\"\n                        class=\"is-solid success\"\n                        *ngIf=\"testResult?.eligible\"\n                    ></clr-icon>\n                    <clr-icon\n                        shape=\"ban\"\n                        class=\"is-solid error\"\n                        *ngIf=\"testResult?.eligible === false\"\n                    ></clr-icon>\n                    <clr-icon shape=\"unknown-status\" *ngIf=\"!testResult\"></clr-icon>\n                </div>\n                {{ testResult?.eligible }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data\n                    [label]=\"'common.price' | translate\"\n                    *ngIf=\"testResult?.quote?.price != null\"\n                >\n                    {{ testResult.quote?.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data\n                    [label]=\"'common.price-with-tax' | translate\"\n                    *ngIf=\"testResult?.quote?.priceWithTax != null\"\n                >\n                    {{ testResult.quote?.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree\n                *ngIf=\"testResult?.quote?.metadata\"\n                [value]=\"testResult?.quote?.metadata\"\n            ></vdr-object-tree>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\n            {{ 'settings.test-shipping-method' | translate }}\n        </button>\n    </div>\n</div>\n", styles: [":host{display:block}.test-result.success .card-block{background-color:var(--color-success-100)}.test-result.error .card-block{background-color:var(--color-error-100)}.test-result.unknown .card-block{background-color:var(--color-component-bg-100)}.result-details{transition:opacity .2s}.result-details.stale{opacity:.5}.eligible-icon{display:inline-block}.eligible-icon .success{color:var(--color-success-500)}.eligible-icon .error{color:var(--color-error-500)}.price-row{display:flex}.price-row>*:not(:first-child){margin-inline-start:24px}\n"] }]
        }], propDecorators: { testResult: [{
                type: Input
            }], okToRun: [{
                type: Input
            }], testDataUpdated: [{
                type: Input
            }], currencyCode: [{
                type: Input
            }], runTest: [{
                type: Output
            }] } });

const GET_SHIPPING_METHOD_DETAIL = gql `
    query GetShippingMethodDetail($id: ID!) {
        shippingMethod(id: $id) {
            ...ShippingMethod
        }
    }
    ${SHIPPING_METHOD_FRAGMENT}
`;
class ShippingMethodDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('ShippingMethod');
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            name: ['', Validators.required],
            description: '',
            fulfillmentHandler: ['', Validators.required],
            checker: {},
            calculator: {},
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.checkers = [];
        this.calculators = [];
        this.fulfillmentHandlers = [];
        this.testDataUpdated = false;
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];
        this.fetchTestResult$ = new Subject();
    }
    ngOnInit() {
        this.init();
        this.dataService.shippingMethod.getShippingMethodOperations().single$.subscribe(data => {
            this.checkers = data.shippingEligibilityCheckers;
            this.calculators = data.shippingCalculators;
            this.fulfillmentHandlers = data.fulfillmentHandlers;
            this.changeDetector.markForCheck();
            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(c => c.code === this.entity?.checker?.code);
            this.selectedCalculatorDefinition = data.shippingCalculators.find(c => c.code === this.entity?.calculator?.code);
        });
        this.activeChannel$ = this.dataService.settings
            .getActiveChannel()
            .mapStream(data => data.activeChannel);
        this.testResult$ = this.fetchTestResult$.pipe(switchMap$1(([address, lines]) => {
            const { checker, calculator } = this.detailForm.value;
            if (!this.selectedChecker || !this.selectedCalculator || !checker || !calculator) {
                return of(undefined);
            }
            const input = {
                shippingAddress: { ...address, streetLine1: 'test' },
                lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),
                checker: toConfigurableOperationInput(this.selectedChecker, checker),
                calculator: toConfigurableOperationInput(this.selectedCalculator, calculator),
            };
            return this.dataService.shippingMethod
                .testShippingMethod(input)
                .mapSingle(result => result.testShippingMethod);
        }));
        /* eslint-disable @typescript-eslint/no-non-null-assertion */
        merge(this.detailForm.get(['checker']).valueChanges, this.detailForm.get(['calculator']).valueChanges)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => (this.testDataUpdated = true));
        /* eslint-enable @typescript-eslint/no-non-null-assertion */
    }
    ngOnDestroy() {
        this.destroy();
    }
    updateCode(currentCode, nameValue) {
        if (!currentCode) {
            const codeControl = this.detailForm.get(['code']);
            if (codeControl && codeControl.pristine) {
                codeControl.setValue(normalizeString(nameValue, '-'));
            }
        }
    }
    selectChecker(checker) {
        this.selectedCheckerDefinition = checker;
        this.selectedChecker = configurableDefinitionToInstance(checker);
        const formControl = this.detailForm.get('checker');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedChecker);
        }
        this.detailForm.markAsDirty();
    }
    selectCalculator(calculator) {
        this.selectedCalculatorDefinition = calculator;
        this.selectedCalculator = configurableDefinitionToInstance(calculator);
        const formControl = this.detailForm.get('calculator');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedCalculator);
        }
        this.detailForm.markAsDirty();
    }
    create() {
        const selectedChecker = this.selectedChecker;
        const selectedCalculator = this.selectedCalculator;
        const { checker, calculator } = this.detailForm.value;
        if (!selectedChecker || !selectedCalculator || !checker || !calculator) {
            return;
        }
        const formValue = this.detailForm.value;
        const input = {
            ...this.getUpdatedShippingMethod({
                createdAt: '',
                updatedAt: '',
                id: '',
                code: '',
                name: '',
                description: '',
                fulfillmentHandlerCode: '',
                checker: undefined,
                calculator: undefined,
                translations: [],
            }, this.detailForm, this.languageCode),
            checker: toConfigurableOperationInput(selectedChecker, checker),
            calculator: toConfigurableOperationInput(selectedCalculator, calculator),
        };
        this.dataService.shippingMethod.createShippingMethod(input).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'ShippingMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'ShippingMethod',
            });
        });
    }
    save() {
        const selectedChecker = this.selectedChecker;
        const selectedCalculator = this.selectedCalculator;
        const { checker, calculator } = this.detailForm.value;
        if (!selectedChecker || !selectedCalculator || !checker || !calculator) {
            return;
        }
        combineLatest([this.entity$, this.languageCode$])
            .pipe(take(1), mergeMap(([shippingMethod, languageCode]) => {
            const formValue = this.detailForm.value;
            const input = {
                ...this.getUpdatedShippingMethod(shippingMethod, this.detailForm, languageCode),
                checker: toConfigurableOperationInput(selectedChecker, checker),
                calculator: toConfigurableOperationInput(selectedCalculator, calculator),
            };
            return this.dataService.shippingMethod.updateShippingMethod(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'ShippingMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            // eslint-disable-next-line no-console
            console.error(err);
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'ShippingMethod',
            });
        });
    }
    setTestOrderLines(event) {
        this.testOrderLines = event;
        this.testDataUpdated = true;
    }
    setTestAddress(event) {
        this.testAddress = event;
        this.testDataUpdated = true;
    }
    allTestDataPresent() {
        return !!(this.testAddress &&
            this.testOrderLines &&
            this.testOrderLines.length &&
            this.selectedChecker &&
            this.selectedCalculator);
    }
    runTest() {
        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);
        this.testDataUpdated = false;
    }
    /**
     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which
     * can then be persisted to the API.
     */
    getUpdatedShippingMethod(shippingMethod, formGroup, languageCode) {
        const formValue = formGroup.value;
        const input = createUpdatedTranslatable({
            translatable: shippingMethod,
            updatedFields: formValue,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: shippingMethod.name || '',
                description: shippingMethod.description || '',
            },
        });
        return { ...input, fulfillmentHandler: formValue.fulfillmentHandler };
    }
    setFormValues(shippingMethod, languageCode) {
        const currentTranslation = findTranslation(shippingMethod, languageCode);
        this.detailForm.patchValue({
            name: currentTranslation?.name ?? '',
            description: currentTranslation?.description ?? '',
            code: shippingMethod.code,
            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,
            checker: shippingMethod.checker || {},
            calculator: shippingMethod.calculator || {},
        });
        if (!this.selectedChecker) {
            this.selectedChecker = shippingMethod.checker && {
                code: shippingMethod.checker.code,
                args: shippingMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),
            };
        }
        if (!this.selectedCalculator) {
            this.selectedCalculator = shippingMethod.calculator && {
                code: shippingMethod.calculator?.code,
                args: shippingMethod.calculator?.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),
            };
        }
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), shippingMethod, currentTranslation);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ShippingMethodDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ShippingMethodDetailComponent, isStandalone: false, selector: "vdr-shipping-method-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"shipping-method-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\n                \"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"updatePermission\"\n                    [disabled]=\"\n                        detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\n                    \"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"shipping-method-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.code' | translate\"\n                        for=\"code\"\n                        [readOnlyToggle]=\"updatePermission | hasPermission\"\n                    >\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            formControlName=\"code\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-rich-text-editor\n                        class=\"form-grid-span\"\n                        formControlName=\"description\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                        [label]=\"'common.description' | translate\"\n                    ></vdr-rich-text-editor>\n                    <vdr-form-field\n                        [label]=\"'settings.fulfillment-handler' | translate\"\n                        for=\"fulfillmentHandler\"\n                    >\n                        <select\n                            name=\"fulfillmentHandler\"\n                            formControlName=\"fulfillmentHandler\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\n                                {{ handler.code }}: {{ handler.description }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"ShippingMethod\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n\n            <vdr-custom-detail-component-host\n                locationId=\"shipping-method-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n\n            <vdr-card [title]=\"'settings.shipping-eligibility-checker' | translate\">\n                <vdr-configurable-input\n                    class=\"card-span\"\n                    *ngIf=\"selectedChecker && selectedCheckerDefinition\"\n                    [operation]=\"selectedChecker\"\n                    [operationDefinition]=\"selectedCheckerDefinition\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (remove)=\"selectedChecker = null\"\n                    formControlName=\"checker\"\n                ></vdr-configurable-input>\n                <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\" class=\"card-span\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'common.select' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let checker of checkers\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"selectChecker(checker)\"\n                            >\n                                {{ checker.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'settings.shipping-calculator' | translate\">\n                <vdr-configurable-input\n                    class=\"card-span\"\n                    *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\n                    [operation]=\"selectedCalculator\"\n                    [operationDefinition]=\"selectedCalculatorDefinition\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (remove)=\"selectedCalculator = null\"\n                    formControlName=\"calculator\"\n                ></vdr-configurable-input>\n                <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\" class=\"card-span\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'common.select' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let calculator of calculators\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"selectCalculator(calculator)\"\n                            >\n                                {{ calculator.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'settings.test-shipping-method' | translate\">\n                <vdr-test-order-builder\n                    class=\"card-span\"\n                    (orderLinesChange)=\"setTestOrderLines($event)\"\n                ></vdr-test-order-builder>\n                <vdr-test-address-form\n                    (addressChange)=\"setTestAddress($event)\"\n                    class=\"mt-2\"\n                ></vdr-test-address-form>\n                <vdr-shipping-method-test-result\n                    class=\"mt-2\"\n                    [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\n                    [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\n                    [testDataUpdated]=\"testDataUpdated\"\n                    [testResult]=\"testResult$ | async\"\n                    (runTest)=\"runTest()\"\n                ></vdr-shipping-method-test-result>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ConfigurableInputComponent, selector: "vdr-configurable-input", inputs: ["operation", "operationDefinition", "readonly", "removable", "position", "hideDescription"], outputs: ["remove"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i1.RichTextEditorComponent, selector: "vdr-rich-text-editor", inputs: ["label", "readonly"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: TestOrderBuilderComponent, selector: "vdr-test-order-builder", outputs: ["orderLinesChange"] }, { kind: "component", type: TestAddressFormComponent, selector: "vdr-test-address-form", outputs: ["addressChange"] }, { kind: "component", type: ShippingMethodTestResultComponent, selector: "vdr-shipping-method-test-result", inputs: ["testResult", "okToRun", "testDataUpdated", "currencyCode"], outputs: ["runTest"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ShippingMethodDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-shipping-method-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"shipping-method-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\n                \"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    *vdrIfPermissions=\"updatePermission\"\n                    [disabled]=\"\n                        detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\n                    \"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"shipping-method-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'common.code' | translate\"\n                        for=\"code\"\n                        [readOnlyToggle]=\"updatePermission | hasPermission\"\n                    >\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            formControlName=\"code\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-rich-text-editor\n                        class=\"form-grid-span\"\n                        formControlName=\"description\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                        [label]=\"'common.description' | translate\"\n                    ></vdr-rich-text-editor>\n                    <vdr-form-field\n                        [label]=\"'settings.fulfillment-handler' | translate\"\n                        for=\"fulfillmentHandler\"\n                    >\n                        <select\n                            name=\"fulfillmentHandler\"\n                            formControlName=\"fulfillmentHandler\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\n                                {{ handler.code }}: {{ handler.description }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"ShippingMethod\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n\n            <vdr-custom-detail-component-host\n                locationId=\"shipping-method-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n\n            <vdr-card [title]=\"'settings.shipping-eligibility-checker' | translate\">\n                <vdr-configurable-input\n                    class=\"card-span\"\n                    *ngIf=\"selectedChecker && selectedCheckerDefinition\"\n                    [operation]=\"selectedChecker\"\n                    [operationDefinition]=\"selectedCheckerDefinition\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (remove)=\"selectedChecker = null\"\n                    formControlName=\"checker\"\n                ></vdr-configurable-input>\n                <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\" class=\"card-span\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'common.select' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let checker of checkers\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"selectChecker(checker)\"\n                            >\n                                {{ checker.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'settings.shipping-calculator' | translate\">\n                <vdr-configurable-input\n                    class=\"card-span\"\n                    *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\n                    [operation]=\"selectedCalculator\"\n                    [operationDefinition]=\"selectedCalculatorDefinition\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (remove)=\"selectedCalculator = null\"\n                    formControlName=\"calculator\"\n                ></vdr-configurable-input>\n                <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\" class=\"card-span\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'common.select' | translate }}\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let calculator of calculators\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"selectCalculator(calculator)\"\n                            >\n                                {{ calculator.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'settings.test-shipping-method' | translate\">\n                <vdr-test-order-builder\n                    class=\"card-span\"\n                    (orderLinesChange)=\"setTestOrderLines($event)\"\n                ></vdr-test-order-builder>\n                <vdr-test-address-form\n                    (addressChange)=\"setTestAddress($event)\"\n                    class=\"mt-2\"\n                ></vdr-test-address-form>\n                <vdr-shipping-method-test-result\n                    class=\"mt-2\"\n                    [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\n                    [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\n                    [testDataUpdated]=\"testDataUpdated\"\n                    [testResult]=\"testResult$ | async\"\n                    (runTest)=\"runTest()\"\n                ></vdr-shipping-method-test-result>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deleteShippingMethodsBulkAction = createBulkDeleteAction({
    location: 'shipping-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteShippingMethod),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.shippingMethod.deleteShippingMethods(ids).pipe(map(res => res.deleteShippingMethods)),
});
const ASSIGN_SHIPPING_METHODS_TO_CHANNEL = gql `
    mutation AssignShippingMethodsToChannel($input: AssignShippingMethodsToChannelInput!) {
        assignShippingMethodsToChannel(input: $input) {
            id
            name
        }
    }
`;
const REMOVE_SHIPPING_METHODS_FROM_CHANNEL = gql `
    mutation RemoveShippingMethodsFromChannel($input: RemoveShippingMethodsFromChannelInput!) {
        removeShippingMethodsFromChannel(input: $input) {
            id
            name
        }
    }
`;
const assignShippingMethodsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'shipping-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateShippingMethod) ||
        userPermissions.includes(Permission.UpdateSettings),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, shippingMethodIds, channelIds) => channelIds.map(channelId => dataService
        .mutate(AssignShippingMethodsToChannelDocument, {
        input: {
            channelId,
            shippingMethodIds,
        },
    })
        .pipe(map(res => res.assignShippingMethodsToChannel))),
});
const removeShippingMethodsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'shipping-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteShippingMethod) ||
        userPermissions.includes(Permission.DeleteSettings),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, shippingMethodIds, channelId) => dataService
        .mutate(RemoveShippingMethodsFromChannelDocument, {
        input: {
            channelId,
            shippingMethodIds,
        },
    })
        .pipe(map(res => res.removeShippingMethodsFromChannel)),
});

const GET_SHIPPING_METHOD_LIST = gql `
    query GetShippingMethodList($options: ShippingMethodListOptions) {
        shippingMethods(options: $options) {
            items {
                ...ShippingMethodListItem
            }
            totalItems
        }
    }
    fragment ShippingMethodListItem on ShippingMethod {
        id
        createdAt
        updatedAt
        code
        name
        description
        fulfillmentHandlerCode
    }
`;
class ShippingMethodListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'shipping-method-list';
        this.customFields = this.getCustomFieldConfig('ShippingMethod');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'name',
            type: { kind: 'text' },
            label: marker('common.name'),
            filterField: 'name',
        })
            .addFilter({
            name: 'code',
            type: { kind: 'text' },
            label: marker('common.code'),
            filterField: 'code',
        })
            .addFilter({
            name: 'description',
            type: { kind: 'text' },
            label: marker('common.description'),
            filterField: 'description',
        })
            .addFilter({
            name: 'fulfillmentHandler',
            type: { kind: 'text' },
            label: marker('settings.fulfillment-handler'),
            filterField: 'fulfillmentHandlerCode',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .addSort({ name: 'code' })
            .addSort({ name: 'description' })
            .addSort({ name: 'fulfillmentHandlerCode' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetShippingMethodListDocument,
            getItems: data => data.shippingMethods,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ShippingMethodListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ShippingMethodListComponent, isStandalone: false, selector: "vdr-shipping-method-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"shipping-method-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateShippingMethod']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-shipping-method' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"shipping-method-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"shipping-method-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-shippingMethod=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', shippingMethod.id]\"\n                ><span>{{ shippingMethod.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [sort]=\"sorts.get('code')\">\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.description' | translate\" id=\"description\"\n        [sort]=\"sorts.get('description')\"\n        [hiddenByDefault]=\"true\"\n    >\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.description }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.fulfillment-handler' | translate\" id=\"fulfillment-handler\" [sort]=\"sorts.get('fulfillmentHandlerCode')\">\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.fulfillmentHandlerCode }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ShippingMethodListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-shipping-method-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"shipping-method-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateShippingMethod']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-shipping-method' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"shipping-method-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"shipping-method-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-shippingMethod=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', shippingMethod.id]\"\n                ><span>{{ shippingMethod.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [sort]=\"sorts.get('code')\">\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.description' | translate\" id=\"description\"\n        [sort]=\"sorts.get('description')\"\n        [hiddenByDefault]=\"true\"\n    >\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.description }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.fulfillment-handler' | translate\" id=\"fulfillment-handler\" [sort]=\"sorts.get('fulfillmentHandlerCode')\">\n        <ng-template let-shippingMethod=\"item\">\n            {{ shippingMethod.fulfillmentHandlerCode }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n" }]
        }], ctorParameters: () => [] });

const STOCK_LOCATION_DETAIL_FRAGMENT = gql `
    fragment StockLocationDetail on StockLocation {
        id
        createdAt
        updatedAt
        name
        description
    }
`;
const GET_STOCK_LOCATION_DETAIL = gql `
    query GetStockLocationDetail($id: ID!) {
        stockLocation(id: $id) {
            ...StockLocationDetail
        }
    }
    ${STOCK_LOCATION_DETAIL_FRAGMENT}
`;
const CREATE_STOCK_LOCATION = gql `
    mutation CreateStockLocation($input: CreateStockLocationInput!) {
        createStockLocation(input: $input) {
            ...StockLocationDetail
        }
    }
    ${STOCK_LOCATION_DETAIL_FRAGMENT}
`;
const UPDATE_STOCK_LOCATION = gql `
    mutation UpdateStockLocation($input: UpdateStockLocationInput!) {
        updateStockLocation(input: $input) {
            ...StockLocationDetail
        }
    }
    ${STOCK_LOCATION_DETAIL_FRAGMENT}
`;
class StockLocationDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('StockLocation');
        this.detailForm = this.formBuilder.group({
            name: ['', Validators.required],
            description: [''],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const { name, description, customFields } = this.detailForm.value;
        if (!name) {
            return;
        }
        const input = {
            name,
            description,
            customFields,
        };
        this.dataService.mutate(CreateStockLocationDocument, { input }).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'StockLocation',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createStockLocation.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'StockLocation',
            });
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        this.entity$
            .pipe(take(1), mergeMap(taxRate => {
            const input = {
                id: taxRate.id,
                name: formValue.name,
                description: formValue.description,
                customFields: formValue.customFields,
            };
            return this.dataService.mutate(UpdateStockLocationDocument, { input });
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'StockLocation',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'StockLocation',
            });
        });
    }
    /**
     * Update the form values when the entity changes.
     */
    setFormValues(entity) {
        this.detailForm.patchValue({
            name: entity.name,
            description: entity.description,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: StockLocationDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: StockLocationDetailComponent, isStandalone: false, selector: "vdr-stock-location-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"stock-location-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                    *vdrIfPermissions=\"'UpdateStockLocation'\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"stock-location-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!('UpdateStockLocation' | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        class=\"form-grid-span\"\n                        [label]=\"'common.description' | translate\"\n                        for=\"slug\"\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\n                    >\n                        <vdr-rich-text-editor\n                            formControlName=\"description\"\n                            [readonly]=\"!('UpdateStockLocation' | hasPermission)\"\n                        ></vdr-rich-text-editor>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"StockLocation\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"stock-location-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.RichTextEditorComponent, selector: "vdr-rich-text-editor", inputs: ["label", "readonly"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: StockLocationDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-stock-location-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"stock-location-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                    *vdrIfPermissions=\"'UpdateStockLocation'\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"stock-location-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!('UpdateStockLocation' | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        class=\"form-grid-span\"\n                        [label]=\"'common.description' | translate\"\n                        for=\"slug\"\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\n                    >\n                        <vdr-rich-text-editor\n                            formControlName=\"description\"\n                            [readonly]=\"!('UpdateStockLocation' | hasPermission)\"\n                        ></vdr-rich-text-editor>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"StockLocation\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"stock-location-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const DELETE_STOCK_LOCATIONS = gql `
    mutation DeleteStockLocations($input: [DeleteStockLocationInput!]!) {
        deleteStockLocations(input: $input) {
            result
            message
        }
    }
`;
const ASSIGN_STOCK_LOCATIONS_TO_CHANNEL = gql `
    mutation AssignStockLocationsToChannel($input: AssignStockLocationsToChannelInput!) {
        assignStockLocationsToChannel(input: $input) {
            id
            name
        }
    }
`;
const REMOVE_STOCK_LOCATIONS_FROM_CHANNEL = gql `
    mutation RemoveStockLocationsFromChannel($input: RemoveStockLocationsFromChannelInput!) {
        removeStockLocationsFromChannel(input: $input) {
            id
            name
        }
    }
`;
const deleteStockLocationsBulkAction = createBulkDeleteAction({
    location: 'stock-location-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteStockLocation) ||
        userPermissions.includes(Permission.DeleteCatalog),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService
        .mutate(DeleteStockLocationsDocument, {
        input: ids.map(id => ({ id })),
    })
        .pipe(map(res => res.deleteStockLocations)),
    shouldRetryItem: response => response.result === DeletionResult.NOT_DELETED,
});
const assignStockLocationsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'stock-location-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateStockLocation),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, stockLocationIds, channelIds) => channelIds.map(channelId => dataService
        .mutate(AssignStockLocationsToChannelDocument, {
        input: {
            channelId,
            stockLocationIds,
        },
    })
        .pipe(map(res => res.assignStockLocationsToChannel))),
});
const removeStockLocationsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'stock-location-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteCatalog) ||
        userPermissions.includes(Permission.DeleteStockLocation),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, stockLocationIds, channelId) => dataService
        .mutate(RemoveStockLocationsFromChannelDocument, {
        input: {
            channelId,
            stockLocationIds,
        },
    })
        .pipe(map(res => res.removeStockLocationsFromChannel)),
});

const GET_STOCK_LOCATION_LIST = gql `
    query GetStockLocationList($options: StockLocationListOptions) {
        stockLocations(options: $options) {
            items {
                ...StockLocationListItem
            }
            totalItems
        }
    }
    fragment StockLocationListItem on StockLocation {
        id
        createdAt
        updatedAt
        name
        description
    }
`;
class StockLocationListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'stock-location-list';
        this.customFields = this.getCustomFieldConfig('StockLocation');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilters([
            {
                name: 'enabled',
                type: { kind: 'text' },
                label: marker('common.enabled'),
                filterField: 'name',
            },
            {
                name: 'sku',
                type: { kind: 'text' },
                label: marker('catalog.sku'),
                filterField: 'description',
            },
        ])
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .addSorts([
            { name: 'id' },
            { name: 'createdAt' },
            { name: 'updatedAt' },
            { name: 'name' },
            { name: 'description' },
        ])
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        this.configure({
            document: GetStockLocationListDocument,
            getItems: data => data.stockLocations,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.sorts.valueChanges, this.filters.valueChanges],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: StockLocationListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: StockLocationListComponent, isStandalone: false, selector: "vdr-stock-location-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"stock-location-list\" />\n            <a\n                class=\"button primary\"\n                *vdrIfPermissions=\"['CreateStockLocation']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-new-stock-location' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"stock-location-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"stock-location-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\n        <ng-template let-stockLocation=\"item\">\n            {{ stockLocation.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-stockLocation=\"item\">\n            {{ stockLocation.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-stockLocation=\"item\">\n            {{ stockLocation.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-stockLocation=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', stockLocation.id]\"\n                ><span>{{ stockLocation.name }}</span\n                ><clr-icon shape=\"arrow right\"\n            /></a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.description' | translate\" id=\"description\" [sort]=\"sorts.get('description')\">\n        <ng-template let-stockLocation=\"item\">\n            <div class=\"description\" [innerHTML]=\"stockLocation.description\"></div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let field of customFields\"\n        [customField]=\"field\"\n        [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: ["::ng-deep .description>p{margin-top:0!important}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: StockLocationListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-stock-location-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"stock-location-list\" />\n            <a\n                class=\"button primary\"\n                *vdrIfPermissions=\"['CreateStockLocation']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-new-stock-location' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"stock-location-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"stock-location-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\n        <ng-template let-stockLocation=\"item\">\n            {{ stockLocation.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-stockLocation=\"item\">\n            {{ stockLocation.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-stockLocation=\"item\">\n            {{ stockLocation.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-stockLocation=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', stockLocation.id]\"\n                ><span>{{ stockLocation.name }}</span\n                ><clr-icon shape=\"arrow right\"\n            /></a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.description' | translate\" id=\"description\" [sort]=\"sorts.get('description')\">\n        <ng-template let-stockLocation=\"item\">\n            <div class=\"description\" [innerHTML]=\"stockLocation.description\"></div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let field of customFields\"\n        [customField]=\"field\"\n        [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: ["::ng-deep .description>p{margin-top:0!important}\n"] }]
        }], ctorParameters: () => [] });

const GET_TAX_CATEGORY_DETAIL = gql `
    query GetTaxCategoryDetail($id: ID!) {
        taxCategory(id: $id) {
            ...TaxCategory
        }
    }
    ${TAX_CATEGORY_FRAGMENT}
`;
class TaxCategoryDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('TaxCategory');
        this.detailForm = this.formBuilder.group({
            name: ['', Validators.required],
            isDefault: false,
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxCategory];
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    saveButtonEnabled() {
        return this.detailForm.dirty && this.detailForm.valid;
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        const input = {
            name: formValue.name,
            isDefault: formValue.isDefault,
            customFields: formValue.customFields,
        };
        this.dataService.settings.createTaxCategory(input).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'TaxCategory',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createTaxCategory.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'TaxCategory',
            });
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        this.entity$
            .pipe(take(1), mergeMap(taxCategory => {
            const input = {
                id: taxCategory.id,
                name: formValue.name,
                isDefault: formValue.isDefault,
                customFields: formValue.customFields,
            };
            return this.dataService.settings.updateTaxCategory(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'TaxCategory',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'TaxCategory',
            });
        });
    }
    /**
     * Update the form values when the entity changes.
     */
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            name: entity.name,
            isDefault: entity.isDefault,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TaxCategoryDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: TaxCategoryDetailComponent, isStandalone: false, selector: "vdr-tax-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"tax-category-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                    *vdrIfPermissions=\"updatePermission\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"tax-category-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'common.default-tax-category' | translate\" for=\"isDefault\">\n                        <clr-toggle-wrapper>\n                            <input\n                                type=\"checkbox\"\n                                clrToggle\n                                id=\"isDefault\"\n                                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                                formControlName=\"isDefault\"\n                            />\n                        </clr-toggle-wrapper>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"TaxCategory\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"tax-category-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TaxCategoryDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-tax-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"tax-category-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                    *vdrIfPermissions=\"updatePermission\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"tax-category-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'common.default-tax-category' | translate\" for=\"isDefault\">\n                        <clr-toggle-wrapper>\n                            <input\n                                type=\"checkbox\"\n                                clrToggle\n                                id=\"isDefault\"\n                                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                                formControlName=\"isDefault\"\n                            />\n                        </clr-toggle-wrapper>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"TaxCategory\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"tax-category-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deleteTaxCategoriesBulkAction = createBulkDeleteAction({
    location: 'tax-category-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteSettings) ||
        userPermissions.includes(Permission.DeleteTaxCategory),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.settings.deleteTaxCategories(ids).pipe(map(res => res.deleteTaxCategories)),
});

const GET_TAX_CATEGORY_LIST = gql `
    query GetTaxCategoryList($options: TaxCategoryListOptions) {
        taxCategories(options: $options) {
            items {
                ...TaxCategory
            }
            totalItems
        }
    }
    ${TAX_CATEGORY_FRAGMENT}
`;
class TaxCategoryListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'tax-category-list';
        this.customFields = this.serverConfigService.getCustomFieldsFor('TaxCategory');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addFilter({
            name: 'name',
            type: { kind: 'text' },
            label: marker('common.name'),
            filterField: 'name',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetTaxCategoryListDocument,
            getItems: data => data.taxCategories,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TaxCategoryListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: TaxCategoryListComponent, isStandalone: false, selector: "vdr-tax-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"tax-category-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateTaxCategory']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-tax-category' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"tax-category-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"tax-category-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-taxCategory=\"item\">\n            {{ taxCategory.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-taxCategory=\"item\">\n            {{ taxCategory.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-taxCategory=\"item\">\n            {{ taxCategory.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-taxCategory=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', taxCategory.id]\"\n                ><span>{{ taxCategory.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.default-tax-category' | translate\" id=\"default-tax-category\">\n        <ng-template let-taxCategory=\"item\">\n            <vdr-chip *ngIf=\"taxCategory.isDefault\">{{ 'common.default-tax-category' | translate }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TaxCategoryListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-tax-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"tax-category-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateTaxCategory']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-tax-category' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"tax-category-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"tax-category-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-taxCategory=\"item\">\n            {{ taxCategory.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-taxCategory=\"item\">\n            {{ taxCategory.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-taxCategory=\"item\">\n            {{ taxCategory.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-taxCategory=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', taxCategory.id]\"\n                ><span>{{ taxCategory.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.default-tax-category' | translate\" id=\"default-tax-category\">\n        <ng-template let-taxCategory=\"item\">\n            <vdr-chip *ngIf=\"taxCategory.isDefault\">{{ 'common.default-tax-category' | translate }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n" }]
        }], ctorParameters: () => [] });

const GET_TAX_RATE_DETAIL = gql `
    query GetTaxRateDetail($id: ID!) {
        taxRate(id: $id) {
            ...TaxRate
        }
    }
    ${TAX_RATE_FRAGMENT}
`;
class TaxRateDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('TaxRate');
        this.detailForm = this.formBuilder.group({
            name: ['', Validators.required],
            enabled: [true],
            value: [0, Validators.required],
            taxCategoryId: ['', Validators.required],
            zoneId: ['', Validators.required],
            customerGroupId: [''],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxRate];
    }
    ngOnInit() {
        this.init();
        this.taxCategories$ = this.dataService.settings
            .getTaxCategories({ take: 100 })
            .mapSingle(data => data.taxCategories.items);
    }
    ngOnDestroy() {
        this.destroy();
    }
    saveButtonEnabled() {
        return this.detailForm.dirty && this.detailForm.valid;
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const { name, enabled, value, taxCategoryId, zoneId, customerGroupId, customFields } = this.detailForm.value;
        if (!name || enabled == null || value == null || !taxCategoryId || !zoneId) {
            return;
        }
        const formValue = this.detailForm.value;
        const input = {
            name,
            enabled,
            value,
            categoryId: taxCategoryId,
            zoneId,
            customerGroupId: formValue.customerGroupId,
            customFields: formValue.customFields,
        };
        this.dataService.settings.createTaxRate(input).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'TaxRate',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createTaxRate.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'TaxRate',
            });
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        this.entity$
            .pipe(take(1), mergeMap(taxRate => {
            const input = {
                id: taxRate.id,
                name: formValue.name,
                enabled: formValue.enabled,
                value: formValue.value,
                categoryId: formValue.taxCategoryId,
                zoneId: formValue.zoneId,
                customerGroupId: formValue.customerGroupId,
                customFields: formValue.customFields,
            };
            return this.dataService.settings.updateTaxRate(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'TaxRate',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'TaxRate',
            });
        });
    }
    /**
     * Update the form values when the entity changes.
     */
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            name: entity.name,
            enabled: entity.enabled,
            value: entity.value,
            taxCategoryId: entity.category ? entity.category.id : '',
            zoneId: entity.zone ? entity.zone.id : '',
            customerGroupId: entity.customerGroup ? entity.customerGroup.id : '',
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TaxRateDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: TaxRateDetailComponent, isStandalone: false, selector: "vdr-tax-rate-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"tax-rate-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                    *vdrIfPermissions=\"updatePermission\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"tax-rate-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            id=\"enabled\"\n                            formControlName=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.rate' | translate\" for=\"value\">\n                        <vdr-affixed-input suffix=\"%\">\n                            <input\n                                id=\"value\"\n                                type=\"number\"\n                                step=\"0.1\"\n                                formControlName=\"value\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                            />\n                        </vdr-affixed-input>\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.tax-category' | translate\" for=\"taxCategoryId\">\n                        <select\n                            name=\"taxCategoryId\"\n                            formControlName=\"taxCategoryId\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option\n                                *ngFor=\"let taxCategory of taxCategories$ | async\"\n                                [value]=\"taxCategory.id\"\n                            >\n                                {{ taxCategory.name }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.zone' | translate\" for=\"zoneId\">\n                        <vdr-zone-selector\n                            name=\"zoneId\"\n                            formControlName=\"zoneId\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                        </vdr-zone-selector>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"TaxRate\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"tax-rate-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2$1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2$1.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.AffixedInputComponent, selector: "vdr-affixed-input", inputs: ["prefix", "suffix"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: i1.ZoneSelectorComponent, selector: "vdr-zone-selector", inputs: ["readonly", "transformControlValueAccessorValue"], outputs: ["selectedValuesChange"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TaxRateDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-tax-rate-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"tax-rate-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                    *vdrIfPermissions=\"updatePermission\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"tax-rate-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            id=\"enabled\"\n                            formControlName=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.rate' | translate\" for=\"value\">\n                        <vdr-affixed-input suffix=\"%\">\n                            <input\n                                id=\"value\"\n                                type=\"number\"\n                                step=\"0.1\"\n                                formControlName=\"value\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                            />\n                        </vdr-affixed-input>\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.tax-category' | translate\" for=\"taxCategoryId\">\n                        <select\n                            name=\"taxCategoryId\"\n                            formControlName=\"taxCategoryId\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                            <option\n                                *ngFor=\"let taxCategory of taxCategories$ | async\"\n                                [value]=\"taxCategory.id\"\n                            >\n                                {{ taxCategory.name }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'settings.zone' | translate\" for=\"zoneId\">\n                        <vdr-zone-selector\n                            name=\"zoneId\"\n                            formControlName=\"zoneId\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        >\n                        </vdr-zone-selector>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"TaxRate\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"tax-rate-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deleteTaxRatesBulkAction = createBulkDeleteAction({
    location: 'tax-rate-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteSettings) ||
        userPermissions.includes(Permission.DeleteTaxRate),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.settings.deleteTaxRates(ids).pipe(map(res => res.deleteTaxRates)),
});

const GET_TAX_RATE_LIST = gql `
    query GetTaxRateList($options: TaxRateListOptions) {
        taxRates(options: $options) {
            items {
                ...TaxRate
            }
            totalItems
        }
    }
    ${TAX_RATE_FRAGMENT}
`;
class TaxRateListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.dataTableListId = 'tax-rate-list';
        this.customFields = this.getCustomFieldConfig('TaxRate');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'name',
            type: { kind: 'text' },
            label: marker('common.name'),
            filterField: 'name',
        })
            .addFilter({
            name: 'enabled',
            type: { kind: 'boolean' },
            label: marker('common.enabled'),
            filterField: 'enabled',
        })
            .addFilter({
            name: 'value',
            type: { kind: 'number' },
            label: marker('common.value'),
            filterField: 'value',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .addSort({ name: 'value' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetTaxRateListDocument,
            getItems: data => data.taxRates,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TaxRateListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: TaxRateListComponent, isStandalone: false, selector: "vdr-tax-rate-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"tax-rate-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateTaxRate']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-tax-rate' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"tax-rate-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"tax-rate-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-taxRate=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', taxRate.id]\"\n                ><span>{{ taxRate.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.tax-category' | translate\" id=\"tax-category\">\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.category.name }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.zone' | translate\" id=\"zone\">\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.zone.name }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.customer-group' | translate\" id=\"customer-group\" [hiddenByDefault]=\"true\">\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.customerGroup?.name }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.tax-rate' | translate\" id=\"tax-rate\" [sort]=\"sorts.get('value')\">\n        <ng-template let-taxRate=\"item\"> {{ taxRate.value }}% </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-taxRate=\"item\">\n            <vdr-chip *ngIf=\"taxRate.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!taxRate.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TaxRateListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-tax-rate-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"tax-rate-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateTaxRate']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-tax-rate' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"tax-rate-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"tax-rate-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-taxRate=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', taxRate.id]\"\n                ><span>{{ taxRate.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.tax-category' | translate\" id=\"tax-category\">\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.category.name }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.zone' | translate\" id=\"zone\">\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.zone.name }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'customer.customer-group' | translate\" id=\"customer-group\" [hiddenByDefault]=\"true\">\n        <ng-template let-taxRate=\"item\">\n            {{ taxRate.customerGroup?.name }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'settings.tax-rate' | translate\" id=\"tax-rate\" [sort]=\"sorts.get('value')\">\n        <ng-template let-taxRate=\"item\"> {{ taxRate.value }}% </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-taxRate=\"item\">\n            <vdr-chip *ngIf=\"taxRate.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!taxRate.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n" }]
        }], ctorParameters: () => [] });

class TestShippingMethodsComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.testDataUpdated = false;
        this.fetchTestResult$ = new Subject();
    }
    ngOnInit() {
        this.activeChannel$ = this.dataService.settings
            .getActiveChannel()
            .mapStream(data => data.activeChannel);
        this.testResult$ = this.fetchTestResult$.pipe(switchMap$1(([address, lines]) => {
            const input = {
                shippingAddress: { ...address, streetLine1: 'test' },
                lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),
            };
            return this.dataService.shippingMethod
                .testEligibleShippingMethods(input)
                .mapSingle(result => result.testEligibleShippingMethods);
        }));
    }
    setTestOrderLines(event) {
        this.testOrderLines = event;
        this.testDataUpdated = true;
    }
    setTestAddress(event) {
        this.testAddress = event;
        this.testDataUpdated = true;
    }
    allTestDataPresent() {
        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);
    }
    runTest() {
        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);
        this.testDataUpdated = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TestShippingMethodsComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: TestShippingMethodsComponent, isStandalone: false, selector: "vdr-test-shipping-methods", ngImport: i0, template: "<vdr-page-block>\n    <div class=\"test-wrapper\">\n        <div class=\"\">\n            <vdr-test-order-builder (orderLinesChange)=\"setTestOrderLines($event)\"></vdr-test-order-builder>\n        </div>\n        <div class=\"\">\n            <vdr-test-address-form (addressChange)=\"setTestAddress($event)\"></vdr-test-address-form>\n            <vdr-shipping-eligibility-test-result\n                class=\"mt-1\"\n                [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\n                [okToRun]=\"allTestDataPresent()\"\n                [testDataUpdated]=\"testDataUpdated\"\n                [testResult]=\"testResult$ | async\"\n                (runTest)=\"runTest()\"\n            ></vdr-shipping-eligibility-test-result>\n        </div>\n    </div>\n</vdr-page-block>\n", styles: [".test-wrapper{display:flex;width:100%;gap:var(--space-unit)}.test-wrapper>div{flex:1}@media screen and (max-width: 992px){.test-wrapper{flex-direction:column}}\n"], dependencies: [{ kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: TestOrderBuilderComponent, selector: "vdr-test-order-builder", outputs: ["orderLinesChange"] }, { kind: "component", type: TestAddressFormComponent, selector: "vdr-test-address-form", outputs: ["addressChange"] }, { kind: "component", type: ShippingEligibilityTestResultComponent, selector: "vdr-shipping-eligibility-test-result", inputs: ["testResult", "okToRun", "testDataUpdated", "currencyCode"], outputs: ["runTest"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: TestShippingMethodsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-test-shipping-methods', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <div class=\"test-wrapper\">\n        <div class=\"\">\n            <vdr-test-order-builder (orderLinesChange)=\"setTestOrderLines($event)\"></vdr-test-order-builder>\n        </div>\n        <div class=\"\">\n            <vdr-test-address-form (addressChange)=\"setTestAddress($event)\"></vdr-test-address-form>\n            <vdr-shipping-eligibility-test-result\n                class=\"mt-1\"\n                [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\n                [okToRun]=\"allTestDataPresent()\"\n                [testDataUpdated]=\"testDataUpdated\"\n                [testResult]=\"testResult$ | async\"\n                (runTest)=\"runTest()\"\n            ></vdr-shipping-eligibility-test-result>\n        </div>\n    </div>\n</vdr-page-block>\n", styles: [".test-wrapper{display:flex;width:100%;gap:var(--space-unit)}.test-wrapper>div{flex:1}@media screen and (max-width: 992px){.test-wrapper{flex-direction:column}}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }] });

const GET_ZONE_DETAIL = gql `
    query GetZoneDetail($id: ID!) {
        zone(id: $id) {
            ...ZoneDetail
        }
    }
    fragment ZoneDetail on Zone {
        id
        createdAt
        updatedAt
        name
    }
`;
class ZoneDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('Zone');
        this.detailForm = this.formBuilder.group({
            name: ['', Validators.required],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateZone];
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    saveButtonEnabled() {
        return this.detailForm.dirty && this.detailForm.valid;
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const { name, customFields } = this.detailForm.value;
        if (!name) {
            return;
        }
        const input = {
            name,
            customFields,
        };
        this.dataService.settings.createZone(input).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Zone',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createZone.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Zone',
            });
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        this.entity$
            .pipe(take(1), mergeMap(zone => {
            const input = {
                id: zone.id,
                name: formValue.name,
                customFields: formValue.customFields,
            };
            return this.dataService.settings.updateZone(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Zone',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Zone',
            });
        });
    }
    /**
     * Update the form values when the entity changes.
     */
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            name: entity.name,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2$1.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ZoneDetailComponent, isStandalone: false, selector: "vdr-zone-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"zone-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                    *vdrIfPermissions=\"updatePermission\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"zone-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Zone\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"zone-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-zone-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left> </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"zone-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"!saveButtonEnabled()\"\n                    *vdrIfPermissions=\"updatePermission\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"zone-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Zone\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"zone-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2$1.FormBuilder }, { type: i1.NotificationService }] });

const deleteZonesBulkAction = createBulkDeleteAction({
    location: 'zone-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteSettings) ||
        userPermissions.includes(Permission.DeleteZone),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.settings.deleteZones(ids).pipe(map(res => res.deleteZones)),
});

const GET_ZONE_LIST = gql `
    query GetZoneList($options: ZoneListOptions) {
        zones(options: $options) {
            items {
                ...ZoneListItem
            }
            totalItems
        }
    }
    fragment ZoneListItem on Zone {
        id
        createdAt
        updatedAt
        name
    }
`;
class ZoneListComponent extends TypedBaseListComponent {
    constructor(dataService, notificationService, modalService) {
        super();
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.dataTableListId = 'zone-list';
        this.selectedMemberIds = [];
        this.customFields = this.serverConfigService.getCustomFieldsFor('Zone');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'name',
            type: { kind: 'text' },
            label: marker('common.name'),
            filterField: 'name',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetZoneListDocument,
            getItems: data => data.zones,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    filterOperator: this.searchTermControl.value ? LogicalOperator.OR : LogicalOperator.AND,
                    sort: this.sorts.createSortInput(),
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    ngOnInit() {
        super.ngOnInit();
        const activeZoneId$ = this.route.paramMap.pipe(map(pm => pm.get('contents')), distinctUntilChanged(), tap(() => (this.selectedMemberIds = [])));
        this.activeZone$ = combineLatest(this.items$, activeZoneId$).pipe(map(([zones, activeZoneId]) => {
            if (activeZoneId) {
                return zones.find(z => z.id === activeZoneId);
            }
        }));
        this.activeIndex$ = combineLatest(this.items$, activeZoneId$).pipe(map(([zones, activeZoneId]) => {
            if (activeZoneId) {
                return zones.findIndex(g => g.id === activeZoneId);
            }
            else {
                return -1;
            }
        }));
    }
    setLanguage(code) {
        this.dataService.client.setContentLanguage(code).subscribe();
    }
    closeMembers() {
        const params = { ...this.route.snapshot.params };
        delete params.contents;
        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });
    }
    addToZone(zone) {
        this.modalService
            .fromComponent(AddCountryToZoneDialogComponent, {
            locals: {
                zoneName: zone.name,
                zoneId: zone.id,
            },
            size: 'md',
        })
            .pipe(switchMap$1(memberIds => memberIds
            ? this.dataService.settings
                .addMembersToZone(zone.id, memberIds)
                .pipe(mapTo(memberIds))
            : EMPTY))
            .subscribe({
            next: result => {
                this.notificationService.success(marker(`settings.add-countries-to-zone-success`), {
                    countryCount: result.length,
                    zoneName: zone.name,
                });
                this.refreshMemberList();
            },
            error: err => {
                this.notificationService.error(err);
            },
        });
    }
    refreshMemberList() {
        this.zoneMemberList?.refresh();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneListComponent, deps: [{ token: i1.DataService }, { token: i1.NotificationService }, { token: i1.ModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ZoneListComponent, isStandalone: false, selector: "vdr-zone-list", viewQueries: [{ propertyName: "zoneMemberList", first: true, predicate: ZoneMemberListComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"zone-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateZone']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-zone' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"zone-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-split-view [rightPanelOpen]=\"activeZone$ | async\" (closeClicked)=\"closeMembers()\">\n    <ng-template vdrSplitViewLeft>\n        <vdr-data-table-2\n            [id]=\"dataTableListId\"\n            [items]=\"items$ | async\"\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            [totalItems]=\"totalItems$ | async\"\n            [currentPage]=\"currentPage$ | async\"\n            [filters]=\"filters\"\n            [activeIndex]=\"activeIndex$ | async\"\n            (pageChange)=\"setPageNumber($event)\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n            (visibleColumnsChange)=\"setVisibleColumns($event)\"\n        >\n            <vdr-bulk-action-menu\n                locationId=\"zone-list\"\n                [hostComponent]=\"this\"\n                [selectionManager]=\"selectionManager\"\n            />\n            <vdr-dt2-search\n                [searchTermControl]=\"searchTermControl\"\n                [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n            />\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.id }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('createdAt')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.createdAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('updatedAt')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.updatedAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.name' | translate\" id=\"name\"\n                [optional]=\"false\"\n                [sort]=\"sorts.get('name')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    <a class=\"button-ghost\" [routerLink]=\"['./', customerGroup.id]\"\n                        ><span>{{ customerGroup.name }}</span>\n                        <clr-icon shape=\"arrow right\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.view-contents' | translate\" id=\"view-contents\" [optional]=\"false\">\n                <ng-template let-customerGroup=\"item\">\n                    <a\n                        class=\"button-small bg-weight-150\"\n                        [routerLink]=\"['./', { contents: customerGroup.id }]\"\n                        queryParamsHandling=\"preserve\"\n                    >\n                        <span>{{ 'settings.view-zone-members' | translate }}</span>\n                        <clr-icon shape=\"file-group\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-custom-field-column\n                *ngFor=\"let customField of customFields\"\n                [customField]=\"customField\"\n                [sort]=\"sorts\"\n            />\n        </vdr-data-table-2>\n    </ng-template>\n    <ng-template vdrSplitViewRight [splitViewTitle]=\"(activeZone$ | async)?.name\">\n        <ng-container *ngIf=\"activeZone$ | async as activeZone\">\n            <button class=\"button-ghost ml-4\" (click)=\"addToZone(activeZone)\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                <span>{{\n                    'settings.add-countries-to-zone' | translate : { zoneName: activeZone.name }\n                }}</span>\n            </button>\n            <vdr-zone-member-list\n                *ngIf=\"activeZone$ | async as activeZone\"\n                locationId=\"zone-members-list\"\n                [selectedMemberIds]=\"selectedMemberIds\"\n                [activeZone]=\"activeZone\"\n                (selectionChange)=\"selectedMemberIds = $event\"\n            />\n        </ng-container>\n    </ng-template>\n</vdr-split-view>\n", styles: [".zone-wrapper{display:flex;height:calc(100% - 50px)}.zone-wrapper .zone-list{flex:1;overflow:auto;margin-top:0}.zone-wrapper .zone-list tr.active{background-color:var(--color-component-bg-200)}.zone-members{height:100%;width:0;opacity:0;visibility:hidden;overflow:auto;transition:width .3s,opacity .2s .3s,visibility 0s .3s}.zone-members.expanded{width:40vw;visibility:visible;opacity:1;padding-inline-start:12px}.zone-members .close-button{margin:0;background:none;border:none;cursor:pointer}.zone-members ::ng-deep table.table{margin-top:0}.zone-members ::ng-deep table.table th{top:0}.zone-members .controls{display:flex;justify-content:space-between}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.SplitViewComponent, selector: "vdr-split-view", inputs: ["rightPanelOpen"], outputs: ["closeClicked"] }, { kind: "directive", type: i1.SplitViewLeftDirective, selector: "[vdrSplitViewLeft]" }, { kind: "directive", type: i1.SplitViewRightDirective, selector: "[vdrSplitViewRight]", inputs: ["splitViewTitle"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: ZoneMemberListComponent, selector: "vdr-zone-member-list", inputs: ["locationId", "members", "selectedMemberIds", "activeZone"], outputs: ["selectionChange"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ZoneListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-zone-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            />\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"zone-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateSettings', 'CreateZone']\"\n                [routerLink]=\"['./', 'create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'settings.create-new-zone' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"zone-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-split-view [rightPanelOpen]=\"activeZone$ | async\" (closeClicked)=\"closeMembers()\">\n    <ng-template vdrSplitViewLeft>\n        <vdr-data-table-2\n            [id]=\"dataTableListId\"\n            [items]=\"items$ | async\"\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            [totalItems]=\"totalItems$ | async\"\n            [currentPage]=\"currentPage$ | async\"\n            [filters]=\"filters\"\n            [activeIndex]=\"activeIndex$ | async\"\n            (pageChange)=\"setPageNumber($event)\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n            (visibleColumnsChange)=\"setVisibleColumns($event)\"\n        >\n            <vdr-bulk-action-menu\n                locationId=\"zone-list\"\n                [hostComponent]=\"this\"\n                [selectionManager]=\"selectionManager\"\n            />\n            <vdr-dt2-search\n                [searchTermControl]=\"searchTermControl\"\n                [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n            />\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.id }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('createdAt')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.createdAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('updatedAt')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    {{ customerGroup.updatedAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.name' | translate\" id=\"name\"\n                [optional]=\"false\"\n                [sort]=\"sorts.get('name')\"\n            >\n                <ng-template let-customerGroup=\"item\">\n                    <a class=\"button-ghost\" [routerLink]=\"['./', customerGroup.id]\"\n                        ><span>{{ customerGroup.name }}</span>\n                        <clr-icon shape=\"arrow right\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.view-contents' | translate\" id=\"view-contents\" [optional]=\"false\">\n                <ng-template let-customerGroup=\"item\">\n                    <a\n                        class=\"button-small bg-weight-150\"\n                        [routerLink]=\"['./', { contents: customerGroup.id }]\"\n                        queryParamsHandling=\"preserve\"\n                    >\n                        <span>{{ 'settings.view-zone-members' | translate }}</span>\n                        <clr-icon shape=\"file-group\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-custom-field-column\n                *ngFor=\"let customField of customFields\"\n                [customField]=\"customField\"\n                [sort]=\"sorts\"\n            />\n        </vdr-data-table-2>\n    </ng-template>\n    <ng-template vdrSplitViewRight [splitViewTitle]=\"(activeZone$ | async)?.name\">\n        <ng-container *ngIf=\"activeZone$ | async as activeZone\">\n            <button class=\"button-ghost ml-4\" (click)=\"addToZone(activeZone)\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                <span>{{\n                    'settings.add-countries-to-zone' | translate : { zoneName: activeZone.name }\n                }}</span>\n            </button>\n            <vdr-zone-member-list\n                *ngIf=\"activeZone$ | async as activeZone\"\n                locationId=\"zone-members-list\"\n                [selectedMemberIds]=\"selectedMemberIds\"\n                [activeZone]=\"activeZone\"\n                (selectionChange)=\"selectedMemberIds = $event\"\n            />\n        </ng-container>\n    </ng-template>\n</vdr-split-view>\n", styles: [".zone-wrapper{display:flex;height:calc(100% - 50px)}.zone-wrapper .zone-list{flex:1;overflow:auto;margin-top:0}.zone-wrapper .zone-list tr.active{background-color:var(--color-component-bg-200)}.zone-members{height:100%;width:0;opacity:0;visibility:hidden;overflow:auto;transition:width .3s,opacity .2s .3s,visibility 0s .3s}.zone-members.expanded{width:40vw;visibility:visible;opacity:1;padding-inline-start:12px}.zone-members .close-button{margin:0;background:none;border:none;cursor:pointer}.zone-members ::ng-deep table.table{margin-top:0}.zone-members ::ng-deep table.table th{top:0}.zone-members .controls{display:flex;justify-content:space-between}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1.NotificationService }, { type: i1.ModalService }], propDecorators: { zoneMemberList: [{
                type: ViewChild,
                args: [ZoneMemberListComponent]
            }] } });

const removeZoneMembersBulkAction = {
    location: 'zone-members-list',
    label: marker('settings.remove-from-zone'),
    icon: 'trash',
    iconClass: 'is-danger',
    requiresPermission: Permission.UpdateCustomerGroup,
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const dataService = injector.get(DataService);
        const notificationService = injector.get(NotificationService);
        const zone = hostComponent.activeZone;
        const memberIds = selection.map(s => s.id);
        dataService.settings.removeMembersFromZone(zone.id, memberIds).subscribe({
            complete: () => {
                notificationService.success(marker(`settings.remove-countries-from-zone-success`), {
                    countryCount: memberIds.length,
                    zoneName: zone.name,
                });
                hostComponent.refresh();
                clearSelection();
            },
        });
    },
};

class ProfileResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'Administrator',
            id: '',
            createdAt: '',
            updatedAt: '',
            emailAddress: '',
            firstName: '',
            lastName: '',
            user: { roles: [] },
        }, id => dataService.administrator
            .getActiveAdministrator()
            .mapStream(data => data.activeAdministrator));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProfileResolver, deps: [{ token: i3$1.Router }, { token: i1.DataService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProfileResolver, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProfileResolver, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i3$1.Router }, { type: i1.DataService }] });

const createRoutes = (pageService) => [
    {
        path: 'profile',
        component: PageComponent,
        data: {
            breadcrumb: marker('breadcrumb.profile'),
        },
        resolve: {
            detail: () => inject(DataService)
                .query(GetProfileDetailDocument)
                .mapSingle(data => ({ entity: of(data.activeAdministrator) })),
        },
        children: pageService.getPageTabRoutes('profile'),
    },
    {
        path: 'administrators',
        component: PageComponent,
        data: {
            locationId: 'administrator-list',
            breadcrumb: marker('breadcrumb.administrators'),
        },
        children: pageService.getPageTabRoutes('administrator-list'),
    },
    {
        path: 'administrators/:id',
        component: PageComponent,
        data: {
            locationId: 'administrator-detail',
            breadcrumb: { label: marker('breadcrumb.administrators'), link: ['../', 'administrators'] },
        },
        children: pageService.getPageTabRoutes('administrator-detail'),
    },
    {
        path: 'channels',
        component: PageComponent,
        data: {
            locationId: 'channel-list',
            breadcrumb: marker('breadcrumb.channels'),
        },
        children: pageService.getPageTabRoutes('channel-list'),
    },
    {
        path: 'channels/:id',
        component: PageComponent,
        data: {
            locationId: 'channel-detail',
            breadcrumb: { label: marker('breadcrumb.channels'), link: ['../', 'channels'] },
        },
        children: pageService.getPageTabRoutes('channel-detail'),
    },
    {
        path: 'stock-locations',
        component: PageComponent,
        data: {
            locationId: 'stock-location-list',
            breadcrumb: marker('breadcrumb.stock-locations'),
        },
        children: pageService.getPageTabRoutes('stock-location-list'),
    },
    {
        path: 'stock-locations/:id',
        component: PageComponent,
        data: {
            locationId: 'stock-location-detail',
            breadcrumb: { label: marker('breadcrumb.stock-locations'), link: ['../', 'stock-locations'] },
        },
        children: pageService.getPageTabRoutes('stock-location-detail'),
    },
    {
        path: 'sellers',
        component: PageComponent,
        data: {
            locationId: 'seller-list',
            breadcrumb: marker('breadcrumb.sellers'),
        },
        children: pageService.getPageTabRoutes('seller-list'),
    },
    {
        path: 'sellers/:id',
        component: PageComponent,
        data: {
            locationId: 'seller-detail',
            breadcrumb: { label: marker('breadcrumb.sellers'), link: ['../', 'sellers'] },
        },
        children: pageService.getPageTabRoutes('seller-detail'),
    },
    {
        path: 'roles',
        component: PageComponent,
        data: {
            locationId: 'role-list',
            breadcrumb: marker('breadcrumb.roles'),
        },
        children: pageService.getPageTabRoutes('role-list'),
    },
    {
        path: 'roles/:id',
        component: PageComponent,
        data: {
            locationId: 'role-detail',
            breadcrumb: { label: marker('breadcrumb.roles'), link: ['../', 'roles'] },
        },
        children: pageService.getPageTabRoutes('role-detail'),
    },
    {
        path: 'tax-categories',
        component: PageComponent,
        data: {
            locationId: 'tax-category-list',
            breadcrumb: marker('breadcrumb.tax-categories'),
        },
        children: pageService.getPageTabRoutes('tax-category-list'),
    },
    {
        path: 'tax-categories/:id',
        component: PageComponent,
        data: {
            locationId: 'tax-category-detail',
            breadcrumb: { label: marker('breadcrumb.tax-categories'), link: ['../', 'tax-categories'] },
        },
        children: pageService.getPageTabRoutes('tax-category-detail'),
    },
    {
        path: 'tax-rates',
        component: PageComponent,
        data: {
            locationId: 'tax-rate-list',
            breadcrumb: marker('breadcrumb.tax-rates'),
        },
        children: pageService.getPageTabRoutes('tax-rate-list'),
    },
    {
        path: 'tax-rates/:id',
        component: PageComponent,
        data: {
            locationId: 'tax-rate-detail',
            breadcrumb: { label: marker('breadcrumb.tax-rates'), link: ['../', 'tax-rates'] },
        },
        children: pageService.getPageTabRoutes('tax-rate-detail'),
    },
    {
        path: 'countries',
        component: PageComponent,
        data: {
            locationId: 'country-list',
            breadcrumb: marker('breadcrumb.countries'),
        },
        children: pageService.getPageTabRoutes('country-list'),
    },
    {
        path: 'countries/:id',
        component: PageComponent,
        data: {
            locationId: 'country-detail',
            breadcrumb: { label: marker('breadcrumb.countries'), link: ['../', 'countries'] },
        },
        children: pageService.getPageTabRoutes('country-detail'),
    },
    {
        path: 'zones',
        component: PageComponent,
        data: {
            locationId: 'zone-list',
            breadcrumb: marker('breadcrumb.zones'),
        },
        children: pageService.getPageTabRoutes('zone-list'),
    },
    {
        path: 'zones/:id',
        component: PageComponent,
        data: {
            locationId: 'zone-detail',
            breadcrumb: { label: marker('breadcrumb.zones'), link: ['../', 'zones'] },
        },
        children: pageService.getPageTabRoutes('zone-detail'),
    },
    {
        path: 'shipping-methods',
        component: PageComponent,
        data: {
            locationId: 'shipping-method-list',
            breadcrumb: marker('breadcrumb.shipping-methods'),
        },
        children: pageService.getPageTabRoutes('shipping-method-list'),
    },
    {
        path: 'shipping-methods/:id',
        component: PageComponent,
        data: {
            locationId: 'shipping-method-detail',
            breadcrumb: { label: marker('breadcrumb.shipping-methods'), link: ['../', 'shipping-methods'] },
        },
        children: pageService.getPageTabRoutes('shipping-method-detail'),
    },
    {
        path: 'payment-methods',
        component: PageComponent,
        data: {
            locationId: 'payment-method-list',
            breadcrumb: marker('breadcrumb.payment-methods'),
        },
        children: pageService.getPageTabRoutes('payment-method-list'),
    },
    {
        path: 'payment-methods/:id',
        component: PageComponent,
        data: {
            locationId: 'payment-method-detail',
            breadcrumb: { label: marker('breadcrumb.payment-methods'), link: ['../', 'payment-methods'] },
        },
        children: pageService.getPageTabRoutes('payment-method-detail'),
    },
    {
        path: 'global-settings',
        component: PageComponent,
        data: {
            breadcrumb: marker('breadcrumb.global-settings'),
            locationId: 'global-setting-detail',
        },
        resolve: {
            detail: () => inject(DataService)
                .query(GetGlobalSettingsDetailDocument)
                .mapSingle(data => ({ entity: of(data.globalSettings) })),
        },
        children: pageService.getPageTabRoutes('global-setting-detail'),
    },
];

class SettingsModule {
    static { this.hasRegisteredTabsAndBulkActions = false; }
    constructor(bulkActionRegistryService, pageService) {
        if (SettingsModule.hasRegisteredTabsAndBulkActions) {
            return;
        }
        bulkActionRegistryService.registerBulkAction(deleteSellersBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteChannelsBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteAdministratorsBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteRolesBulkAction);
        bulkActionRegistryService.registerBulkAction(assignShippingMethodsToChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(removeShippingMethodsFromChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteShippingMethodsBulkAction);
        bulkActionRegistryService.registerBulkAction(assignPaymentMethodsToChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(removePaymentMethodsFromChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(deletePaymentMethodsBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteTaxCategoriesBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteTaxRatesBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteCountriesBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteZonesBulkAction);
        bulkActionRegistryService.registerBulkAction(removeZoneMembersBulkAction);
        bulkActionRegistryService.registerBulkAction(assignStockLocationsToChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(removeStockLocationsFromChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteStockLocationsBulkAction);
        pageService.registerPageTab({
            priority: 0,
            location: 'seller-list',
            tab: marker('breadcrumb.sellers'),
            route: '',
            component: SellerListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'seller-detail',
            tab: marker('settings.seller'),
            route: '',
            component: detailComponentWithResolver({
                component: SellerDetailComponent,
                query: GetSellerDetailDocument,
                entityKey: 'seller',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('settings.create-new-seller'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'channel-list',
            tab: marker('breadcrumb.channels'),
            route: '',
            component: ChannelListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'channel-detail',
            tab: marker('settings.channel'),
            route: '',
            component: detailComponentWithResolver({
                component: ChannelDetailComponent,
                query: GetChannelDetailDocument,
                entityKey: 'channel',
                getBreadcrumbs: entity => [
                    {
                        label: entity
                            ? entity.code === DEFAULT_CHANNEL_CODE
                                ? 'common.default-channel'
                                : entity.code
                            : marker('settings.create-new-channel'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'administrator-list',
            tab: marker('breadcrumb.administrators'),
            route: '',
            component: AdministratorListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'administrator-detail',
            tab: marker('settings.administrator'),
            route: '',
            component: detailComponentWithResolver({
                component: AdminDetailComponent,
                query: GetAdministratorDetailDocument,
                entityKey: 'administrator',
                getBreadcrumbs: entity => [
                    {
                        label: entity
                            ? `${entity.firstName} ${entity.lastName}`
                            : marker('admin.create-new-administrator'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'role-list',
            tab: marker('breadcrumb.roles'),
            route: '',
            component: RoleListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'role-detail',
            tab: marker('settings.role'),
            route: '',
            component: detailComponentWithResolver({
                component: RoleDetailComponent,
                query: GetRoleDetailDocument,
                entityKey: 'role',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.description : marker('settings.create-new-role'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'shipping-method-list',
            tab: marker('breadcrumb.shipping-methods'),
            route: '',
            component: ShippingMethodListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'shipping-method-detail',
            tab: marker('settings.shipping-method'),
            route: '',
            component: detailComponentWithResolver({
                component: ShippingMethodDetailComponent,
                query: GetShippingMethodDetailDocument,
                entityKey: 'shippingMethod',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('settings.create-new-shipping-method'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'shipping-method-list',
            tab: marker('settings.test-shipping-methods'),
            route: 'test',
            component: TestShippingMethodsComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'payment-method-list',
            tab: marker('breadcrumb.payment-methods'),
            route: '',
            component: PaymentMethodListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'payment-method-detail',
            tab: marker('settings.payment-method'),
            route: '',
            component: detailComponentWithResolver({
                component: PaymentMethodDetailComponent,
                query: GetPaymentMethodDetailDocument,
                entityKey: 'paymentMethod',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('settings.create-new-payment-method'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'tax-category-list',
            tab: marker('breadcrumb.tax-categories'),
            route: '',
            component: TaxCategoryListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'tax-category-detail',
            tab: marker('settings.tax-category'),
            route: '',
            component: detailComponentWithResolver({
                component: TaxCategoryDetailComponent,
                query: GetTaxCategoryDetailDocument,
                entityKey: 'taxCategory',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('settings.create-new-tax-category'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'tax-rate-list',
            tab: marker('breadcrumb.tax-rates'),
            route: '',
            component: TaxRateListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'tax-rate-detail',
            tab: marker('settings.tax-rate'),
            route: '',
            component: detailComponentWithResolver({
                component: TaxRateDetailComponent,
                query: GetTaxRateDetailDocument,
                entityKey: 'taxRate',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('settings.create-new-tax-rate'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'country-list',
            tab: marker('breadcrumb.countries'),
            route: '',
            component: CountryListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'country-detail',
            tab: marker('settings.country'),
            route: '',
            component: detailComponentWithResolver({
                component: CountryDetailComponent,
                query: GetCountryDetailDocument,
                entityKey: 'country',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('settings.create-new-country'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'zone-list',
            tab: marker('breadcrumb.zones'),
            route: '',
            component: ZoneListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'zone-detail',
            tab: marker('settings.zone'),
            route: '',
            component: detailComponentWithResolver({
                component: ZoneDetailComponent,
                query: GetZoneDetailDocument,
                entityKey: 'zone',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('settings.create-new-zone'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'global-setting-detail',
            tab: marker('breadcrumb.global-settings'),
            route: '',
            component: GlobalSettingsComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'profile',
            tab: marker('breadcrumb.profile'),
            route: '',
            component: ProfileComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'stock-location-list',
            tab: marker('catalog.stock-locations'),
            route: '',
            component: StockLocationListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'stock-location-detail',
            tab: marker('catalog.stock-location'),
            route: '',
            component: detailComponentWithResolver({
                component: StockLocationDetailComponent,
                query: GetStockLocationDetailDocument,
                entityKey: 'stockLocation',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('catalog.create-new-stock-location'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        SettingsModule.hasRegisteredTabsAndBulkActions = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: SettingsModule, deps: [{ token: i1.BulkActionRegistryService }, { token: i1.PageService }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.4", ngImport: i0, type: SettingsModule, declarations: [TaxCategoryListComponent,
            TaxCategoryDetailComponent,
            AdministratorListComponent,
            RoleListComponent,
            RoleDetailComponent,
            AdminDetailComponent,
            PermissionGridComponent,
            CountryListComponent,
            CountryDetailComponent,
            TaxRateListComponent,
            TaxRateDetailComponent,
            ChannelListComponent,
            ChannelDetailComponent,
            ShippingMethodListComponent,
            ShippingMethodDetailComponent,
            PaymentMethodListComponent,
            PaymentMethodDetailComponent,
            GlobalSettingsComponent,
            TestOrderBuilderComponent,
            TestAddressFormComponent,
            SellerDetailComponent,
            SellerListComponent,
            ShippingMethodTestResultComponent,
            ShippingEligibilityTestResultComponent,
            ZoneListComponent,
            AddCountryToZoneDialogComponent,
            ZoneMemberListComponent,
            ZoneMemberListHeaderDirective,
            ZoneMemberControlsDirective,
            ProfileComponent,
            TestShippingMethodsComponent,
            ZoneDetailComponent,
            StockLocationListComponent,
            StockLocationDetailComponent], imports: [SharedModule, i3$1.RouterModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: SettingsModule, providers: [
            {
                provide: ROUTES,
                useFactory: (pageService) => createRoutes(pageService),
                multi: true,
                deps: [PageService],
            },
        ], imports: [SharedModule, RouterModule.forChild([])] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: SettingsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [SharedModule, RouterModule.forChild([])],
                    providers: [
                        {
                            provide: ROUTES,
                            useFactory: (pageService) => createRoutes(pageService),
                            multi: true,
                            deps: [PageService],
                        },
                    ],
                    declarations: [
                        TaxCategoryListComponent,
                        TaxCategoryDetailComponent,
                        AdministratorListComponent,
                        RoleListComponent,
                        RoleDetailComponent,
                        AdminDetailComponent,
                        PermissionGridComponent,
                        CountryListComponent,
                        CountryDetailComponent,
                        TaxRateListComponent,
                        TaxRateDetailComponent,
                        ChannelListComponent,
                        ChannelDetailComponent,
                        ShippingMethodListComponent,
                        ShippingMethodDetailComponent,
                        PaymentMethodListComponent,
                        PaymentMethodDetailComponent,
                        GlobalSettingsComponent,
                        TestOrderBuilderComponent,
                        TestAddressFormComponent,
                        SellerDetailComponent,
                        SellerListComponent,
                        ShippingMethodTestResultComponent,
                        ShippingEligibilityTestResultComponent,
                        ZoneListComponent,
                        AddCountryToZoneDialogComponent,
                        ZoneMemberListComponent,
                        ZoneMemberListHeaderDirective,
                        ZoneMemberControlsDirective,
                        ProfileComponent,
                        TestShippingMethodsComponent,
                        ZoneDetailComponent,
                        StockLocationListComponent,
                        StockLocationDetailComponent,
                    ],
                }]
        }], ctorParameters: () => [{ type: i1.BulkActionRegistryService }, { type: i1.PageService }] });

// This file was generated by the build-public-api.ts script

/**
 * Generated bundle index. Do not edit.
 */

export { AddCountryToZoneDialogComponent, AdminDetailComponent, AdministratorListComponent, CREATE_STOCK_LOCATION, ChannelDetailComponent, ChannelListComponent, CountryDetailComponent, CountryListComponent, GET_ADMINISTRATOR_DETAIL, GET_ADMINISTRATOR_LIST, GET_CHANNEL_DETAIL, GET_CHANNEL_LIST, GET_COUNTRY_DETAIL, GET_COUNTRY_LIST, GET_GLOBAL_SETTINGS_DETAIL, GET_PAYMENT_METHOD_DETAIL, GET_PAYMENT_METHOD_LIST, GET_PROFILE_DETAIL, GET_ROLE_DETAIL, GET_ROLE_LIST, GET_SELLER_DETAIL, GET_SHIPPING_METHOD_DETAIL, GET_SHIPPING_METHOD_LIST, GET_STOCK_LOCATION_DETAIL, GET_STOCK_LOCATION_LIST, GET_TAX_CATEGORY_DETAIL, GET_TAX_CATEGORY_LIST, GET_TAX_RATE_DETAIL, GET_TAX_RATE_LIST, GET_ZONE_DETAIL, GET_ZONE_LIST, GET_ZONE_MEMBERS, GlobalSettingsComponent, PaymentMethodDetailComponent, PaymentMethodListComponent, PermissionGridComponent, ProfileComponent, ProfileResolver, RoleDetailComponent, RoleListComponent, SellerDetailComponent, SellerListComponent, SettingsModule, ShippingEligibilityTestResultComponent, ShippingMethodDetailComponent, ShippingMethodListComponent, ShippingMethodTestResultComponent, StockLocationDetailComponent, StockLocationListComponent, TaxCategoryDetailComponent, TaxCategoryListComponent, TaxRateDetailComponent, TaxRateListComponent, TestAddressFormComponent, TestOrderBuilderComponent, TestShippingMethodsComponent, UPDATE_STOCK_LOCATION, ZoneDetailComponent, ZoneListComponent, ZoneMemberControlsDirective, ZoneMemberListComponent, ZoneMemberListHeaderDirective, assignPaymentMethodsToChannelBulkAction, assignShippingMethodsToChannelBulkAction, assignStockLocationsToChannelBulkAction, createRoutes, deleteAdministratorsBulkAction, deleteChannelsBulkAction, deleteCountriesBulkAction, deletePaymentMethodsBulkAction, deleteRolesBulkAction, deleteSellersBulkAction, deleteShippingMethodsBulkAction, deleteStockLocationsBulkAction, deleteTaxCategoriesBulkAction, deleteTaxRatesBulkAction, deleteZonesBulkAction, removePaymentMethodsFromChannelBulkAction, removeShippingMethodsFromChannelBulkAction, removeStockLocationsFromChannelBulkAction, removeZoneMembersBulkAction };
//# sourceMappingURL=vendure-admin-ui-settings.mjs.map
