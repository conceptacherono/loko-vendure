import * as i0 from '@angular/core';
import { Injectable, ChangeDetectionStrategy, Component, forwardRef, EventEmitter, ElementRef, Input, Output, ViewChildren, ViewChild, inject, TemplateRef, ContentChild, Pipe, SkipSelf, Optional, NgModule } from '@angular/core';
import * as i1$1 from '@angular/router';
import { RouterModule, ROUTES } from '@angular/router';
import { marker } from '@biesbjerg/ngx-translate-extract-marker';
import * as i1 from '@vendure/admin-ui/core';
import { findTranslation, DeletionResult, BaseDetailComponent, Permission, createUpdatedTranslatable, SelectionManager, getDefaultUiLanguage, BaseEntityResolver, PageComponent, CanDeactivateDetailGuard, createResolveData, DataService, FacetValueSelectorComponent, ASSET_FRAGMENT, TAG_FRAGMENT, TypedBaseDetailComponent, getCustomFieldsDefaults, BaseListComponent, LogicalOperator, SortOrder, DataTable2Component, COLLECTION_FRAGMENT, unicodePatternValidator, getConfigArgValue, encodeConfigArgValue, createBulkDeleteAction, ModalService, NotificationService, createBulkAssignToChannelAction, createBulkRemoveFromChannelAction, DuplicateEntityDialogComponent, TypedBaseListComponent, GetCollectionListDocument, FACET_WITH_VALUE_LIST_FRAGMENT, GetFacetDetailDocument, getChannelCodeFromUserStatus, currentChannelIsNotDefault, GetFacetListDocument, GetStockLocationListDocument, ProductVariantListQueryDocument, PRODUCT_DETAIL_FRAGMENT, isMultiChannel, FacetValueFormInputComponent, ProductListQueryDocument, JobState, GetProductVariantsQuickJumpDocument, GlobalFlag, ProductVariantUpdateMutationDocument, detailComponentWithResolver, GetProductDetailDocument, GetProductVariantDetailDocument, CollectionDetailQueryDocument, AssetDetailQueryDocument, SharedModule, PageService, PRODUCT_VARIANT_PRICE_FRAGMENT } from '@vendure/admin-ui/core';
import { SortOrder as SortOrder$1 } from '@vendure/common/lib/generated-types';
import { shareReplay, mergeMap, map, switchMap, tap, take, startWith, debounceTime, takeUntil, finalize, distinctUntilChanged, filter, catchError, delay, skip, switchMapTo } from 'rxjs/operators';
import * as i2 from '@angular/forms';
import { UntypedFormGroup, UntypedFormArray, Validators, FormControl, NG_VALUE_ACCESSOR, FormGroup, UntypedFormControl } from '@angular/forms';
import { forkJoin, of, throwError, combineLatest, Subject, EMPTY, BehaviorSubject, from, lastValueFrom, merge, concat } from 'rxjs';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { notNullOrUndefined, generateAllCombinations } from '@vendure/common/lib/shared-utils';
import * as i3 from '@clr/angular';
import * as i3$1 from '@angular/common';
import * as i5 from '@ngx-translate/core';
import { unique } from '@vendure/common/lib/unique';
import * as i5$1 from '@ng-select/ng-select';
import { gql } from 'apollo-angular';
import * as i5$2 from 'ngx-pagination';
import * as i4 from '@angular/cdk/drag-drop';
import { CdkDropList, CdkDrag, moveItemInArray } from '@angular/cdk/drag-drop';
import { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';
import { pick } from '@vendure/common/lib/pick';

/**
 * @description
 * Like String.prototype.replace(), but replaces the last instance
 * rather than the first.
 */
function replaceLast(target, search, replace) {
    if (!target) {
        return '';
    }
    const lastIndex = target.lastIndexOf(search);
    if (lastIndex === -1) {
        return target;
    }
    const head = target.substr(0, lastIndex);
    const tail = target.substr(lastIndex).replace(search, replace);
    return head + tail;
}

/**
 * Handles the logic for making the API calls to perform CRUD operations on a Product and its related
 * entities. This logic was extracted out of the component because it became too large and hard to follow.
 */
class ProductDetailService {
    constructor(dataService) {
        this.dataService = dataService;
    }
    getTaxCategories() {
        return this.dataService.settings
            .getTaxCategories()
            .mapSingle(data => data.taxCategories.items)
            .pipe(shareReplay(1));
    }
    createProductWithVariants(input, createVariantsConfig, languageCode) {
        const createProduct$ = this.dataService.product.createProduct(input);
        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);
        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);
        return forkJoin(createProduct$, createOptionGroups$).pipe(mergeMap(([{ createProduct }, optionGroups]) => {
            const addOptionsToProduct$ = optionGroups.length
                ? forkJoin(optionGroups.map(optionGroup => this.dataService.product.addOptionGroupToProduct({
                    productId: createProduct.id,
                    optionGroupId: optionGroup.id,
                })))
                : of([]);
            return addOptionsToProduct$.pipe(map(() => ({ createProduct, optionGroups })));
        }), mergeMap(({ createProduct, optionGroups }) => {
            const variants = createVariantsConfig.variants.map(v => {
                const optionIds = optionGroups.length
                    ? v.optionValues.map((optionName, index) => {
                        const option = optionGroups[index].options.find(o => o.name === optionName);
                        if (!option) {
                            throw new Error(`Could not find a matching ProductOption "${optionName}" when creating variant`);
                        }
                        return option.id;
                    })
                    : [];
                return {
                    ...v,
                    optionIds,
                };
            });
            const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);
            return this.createProductVariants(createProduct, variants, options, languageCode, createVariantsConfig.stockLocationId);
        }));
    }
    createProductOptionGroups(groups, languageCode) {
        return groups.length
            ? forkJoin(groups.map(c => this.dataService.product
                .createProductOptionGroups({
                code: normalizeString(c.name, '-'),
                translations: [{ languageCode, name: c.name }],
                options: c.values.map(v => ({
                    code: normalizeString(v, '-'),
                    translations: [{ languageCode, name: v }],
                })),
            })
                .pipe(map(data => data.createProductOptionGroup))))
            : of([]);
    }
    createProductVariants(product, variantData, options, languageCode, stockLocationId) {
        const variants = variantData.map(v => {
            const name = options.length
                ? `${product.name} ${v.optionIds
                    .map(id => options.find(o => o.id === id))
                    .filter(notNullOrUndefined)
                    .map(o => o.name)
                    .join(' ')}`
                : product.name;
            return {
                productId: product.id,
                price: v.price,
                sku: v.sku,
                translations: [
                    {
                        languageCode,
                        name,
                    },
                ],
                stockLevels: [
                    {
                        stockLocationId,
                        stockOnHand: v.stock,
                    },
                ],
                optionIds: v.optionIds,
            };
        });
        return this.dataService.product.createProductVariants(variants).pipe(map(({ createProductVariants }) => ({
            createProductVariants,
            productId: product.id,
        })));
    }
    updateProduct(updateOptions) {
        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;
        const updateOperations = [];
        const updateVariantsInput = variantsInput || [];
        const variants$ = autoUpdate
            ? this.dataService.product
                .getProductVariantsForProduct({}, product.id)
                .mapSingle(({ productVariants }) => productVariants.items)
            : of([]);
        return variants$.pipe(mergeMap(variants => {
            if (productInput) {
                updateOperations.push(this.dataService.product.updateProduct(productInput));
                const productOldName = findTranslation(product, languageCode)?.name ?? '';
                const productNewName = findTranslation(productInput, languageCode)?.name;
                if (productNewName && productOldName !== productNewName && autoUpdate) {
                    for (const variant of variants) {
                        const currentVariantName = findTranslation(variant, languageCode)?.name || '';
                        let variantInput;
                        const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);
                        if (existingVariantInput) {
                            variantInput = existingVariantInput;
                        }
                        else {
                            variantInput = {
                                id: variant.id,
                                translations: [{ languageCode, name: currentVariantName }],
                            };
                            updateVariantsInput.push(variantInput);
                        }
                        const variantTranslation = findTranslation(variantInput, languageCode);
                        if (variantTranslation) {
                            if (variantTranslation.name) {
                                variantTranslation.name = replaceLast(variantTranslation.name, productOldName, productNewName);
                            }
                            else {
                                // The variant translation was falsy, which occurs
                                // when defining the product name for a new translation
                                // language that had not yet been defined.
                                variantTranslation.name = [
                                    productNewName,
                                    ...variant.options.map(o => o.name),
                                ].join(' ');
                            }
                        }
                    }
                }
            }
            if (updateVariantsInput.length) {
                updateOperations.push(this.dataService.product.updateProductVariants(updateVariantsInput));
            }
            return forkJoin(updateOperations);
        }));
    }
    updateProductOptions(inputs, autoUpdateProductNames, product, languageCode) {
        const variants$ = autoUpdateProductNames
            ? this.dataService.product
                .getProductVariantsForProduct({}, product.id)
                .mapSingle(({ productVariants }) => productVariants.items)
            : of([]);
        return variants$.pipe(mergeMap(variants => {
            let updateProductVariantNames$ = of([]);
            if (autoUpdateProductNames) {
                const replacementMap = new Map();
                for (const input of inputs) {
                    const newOptionName = findTranslation(input, languageCode)?.name;
                    let oldOptionName;
                    for (const variant of variants) {
                        if (oldOptionName) {
                            continue;
                        }
                        if (variant.options.map(o => o.id).includes(input.id)) {
                            if (!oldOptionName) {
                                oldOptionName = findTranslation(variant.options.find(o => o.id === input.id), languageCode)?.name;
                            }
                        }
                    }
                    if (oldOptionName && newOptionName) {
                        replacementMap.set(oldOptionName, newOptionName);
                    }
                }
                const variantsToUpdate = [];
                if (replacementMap.size) {
                    const oldOptionNames = Array.from(replacementMap.keys());
                    for (const variant of variants) {
                        const variantName = findTranslation(variant, languageCode)?.name;
                        if (!variantName) {
                            continue;
                        }
                        if (!oldOptionNames.some(oldOptionName => variantName.includes(oldOptionName))) {
                            continue;
                        }
                        const updatedVariantName = oldOptionNames.reduce((name, oldOptionName) => replaceLast(name, oldOptionName, replacementMap.get(oldOptionName)), variantName);
                        variantsToUpdate.push({
                            id: variant.id,
                            translations: [
                                {
                                    languageCode,
                                    name: updatedVariantName,
                                },
                            ],
                        });
                    }
                }
                if (variantsToUpdate.length) {
                    updateProductVariantNames$ =
                        this.dataService.product.updateProductVariants(variantsToUpdate);
                }
                else {
                    updateProductVariantNames$ = of([]);
                }
            }
            return forkJoin(inputs.map(input => this.dataService.product.updateProductOption(input))).pipe(mergeMap(() => updateProductVariantNames$));
        }));
    }
    deleteProductVariant(id, productId) {
        return this.dataService.product.deleteProductVariant(id).pipe(switchMap(result => {
            if (result.deleteProductVariant.result === DeletionResult.DELETED) {
                return this.dataService.product.getProduct(productId).single$;
            }
            else {
                return throwError(result.deleteProductVariant.message);
            }
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductDetailService, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductDetailService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductDetailService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.DataService }] });

class ProductOptionsEditorComponent extends BaseDetailComponent {
    constructor(route, router, serverConfigService, dataService, permissionsService, productDetailService, formBuilder, changeDetector, notificationService) {
        super(route, router, serverConfigService, dataService, permissionsService);
        this.route = route;
        this.router = router;
        this.serverConfigService = serverConfigService;
        this.dataService = dataService;
        this.permissionsService = permissionsService;
        this.productDetailService = productDetailService;
        this.formBuilder = formBuilder;
        this.changeDetector = changeDetector;
        this.notificationService = notificationService;
        this.autoUpdateVariantNames = true;
        this.paginationSettings = {};
        this.updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];
        this.optionGroupCustomFields = this.getCustomFieldConfig('ProductOptionGroup');
        this.optionCustomFields = this.getCustomFieldConfig('ProductOption');
    }
    ngOnInit() {
        this.optionGroups$ = this.route.snapshot.data.entity.pipe(map((product) => product.optionGroups), tap((optionGroups) => {
            for (const group of optionGroups) {
                this.paginationSettings[group.id] = {
                    currentPage: 1,
                    itemsPerPage: 10,
                };
            }
        }));
        this.detailForm = new UntypedFormGroup({
            optionGroups: new UntypedFormArray([]),
        });
        super.init();
    }
    getOptionGroups() {
        const optionGroups = this.detailForm.get('optionGroups');
        return optionGroups.controls;
    }
    getOptions(optionGroup) {
        const options = optionGroup.get('options');
        return options.controls;
    }
    save() {
        if (this.detailForm.invalid || this.detailForm.pristine) {
            return;
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const $product = this.dataService.product.getProduct(this.id).mapSingle(data => data.product);
        combineLatest(this.entity$, this.languageCode$, $product)
            .pipe(take(1), mergeMap(([{ optionGroups }, languageCode, product]) => {
            const updateOperations = [];
            const updatedProductOptionInputs = [];
            for (const optionGroupForm of this.getOptionGroups()) {
                if (optionGroupForm.dirty) {
                    const optionGroupEntity = optionGroups.find(og => og.id === optionGroupForm.value.id);
                    if (optionGroupEntity) {
                        const input = this.getUpdatedOptionGroup(optionGroupEntity, optionGroupForm, languageCode);
                        updateOperations.push(this.dataService.product.updateProductOptionGroup(input));
                    }
                }
                for (const optionForm of this.getOptions(optionGroupForm)) {
                    if (optionForm.dirty) {
                        const optionGroup = optionGroups
                            .find(og => og.id === optionGroupForm.value.id)
                            ?.options.find(o => o.id === optionForm.value.id);
                        if (optionGroup) {
                            const input = this.getUpdatedOption(optionGroup, optionForm, languageCode);
                            updatedProductOptionInputs.push(input);
                        }
                    }
                }
            }
            if (updatedProductOptionInputs.length) {
                updateOperations.push(this.productDetailService.updateProductOptions(updatedProductOptionInputs, this.autoUpdateVariantNames, product, languageCode));
            }
            return forkJoin(updateOperations);
        }))
            .subscribe(() => {
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'ProductOptionGroup',
            });
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'ProductOptionGroup',
            });
        });
    }
    getUpdatedOptionGroup(optionGroup, optionGroupFormGroup, languageCode) {
        const input = createUpdatedTranslatable({
            translatable: optionGroup,
            updatedFields: optionGroupFormGroup.value,
            customFieldConfig: this.optionGroupCustomFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: optionGroup.name || '',
            },
        });
        return input;
    }
    getUpdatedOption(option, optionFormGroup, languageCode) {
        const input = createUpdatedTranslatable({
            translatable: option,
            updatedFields: optionFormGroup.value,
            customFieldConfig: this.optionCustomFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: option.name || '',
            },
        });
        return input;
    }
    setFormValues(entity, languageCode) {
        const groupsForm = this.detailForm.get('optionGroups');
        for (const optionGroup of entity.optionGroups) {
            const groupTranslation = findTranslation(optionGroup, languageCode);
            const groupForm = this.setOptionGroupForm(optionGroup, groupsForm, groupTranslation);
            this.setCustomFieldsForm(this.optionGroupCustomFields, groupForm, optionGroup, groupTranslation);
            let optionsForm = groupForm.get('options');
            if (!optionsForm) {
                optionsForm = this.formBuilder.array([]);
                groupForm.addControl('options', optionsForm);
            }
            for (const option of optionGroup.options) {
                const optionTranslation = findTranslation(option, languageCode);
                const optionForm = this.setOptionForm(option, optionsForm, optionTranslation);
                this.setCustomFieldsForm(this.optionCustomFields, optionForm, option, optionTranslation);
            }
        }
    }
    setCustomFieldsForm(customFields, formGroup, entity, currentTranslation) {
        if (customFields.length) {
            let customValueFieldsGroup = formGroup.get(['customFields']);
            if (!customValueFieldsGroup) {
                customValueFieldsGroup = this.formBuilder.group(customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}));
                formGroup.addControl('customFields', customValueFieldsGroup);
            }
            this.setCustomFieldFormValues(customFields, customValueFieldsGroup, entity, currentTranslation);
        }
    }
    setOptionGroupForm(entity, groupsForm, currentTranslation) {
        const group = {
            id: entity.id,
            createdAt: entity.createdAt,
            updatedAt: entity.updatedAt,
            code: entity.code,
            name: currentTranslation?.name ?? '',
        };
        let groupForm = groupsForm.controls.find(control => control.value.id === entity.id);
        if (groupForm) {
            groupForm.get('id')?.setValue(group.id);
            groupForm.get('code')?.setValue(group.code);
            groupForm.get('name')?.setValue(group.name);
            groupForm.get('createdAt')?.setValue(group.createdAt);
            groupForm.get('updatedAt')?.setValue(group.updatedAt);
        }
        else {
            groupForm = this.formBuilder.group(group);
            groupsForm.push(groupForm);
        }
        return groupForm;
    }
    setOptionForm(entity, optionsForm, currentTranslation) {
        const group = {
            id: entity.id,
            createdAt: entity.createdAt,
            updatedAt: entity.updatedAt,
            code: entity.code,
            name: currentTranslation?.name ?? '',
        };
        let optionForm = optionsForm.controls.find(control => control.value.id === entity.id);
        if (optionForm) {
            optionForm.get('id')?.setValue(group.id);
            optionForm.get('code')?.setValue(group.code);
            optionForm.get('name')?.setValue(group.name);
            optionForm.get('createdAt')?.setValue(group.createdAt);
            optionForm.get('updatedAt')?.setValue(group.updatedAt);
        }
        else {
            optionForm = this.formBuilder.group(group);
            optionsForm.push(optionForm);
        }
        return optionForm;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductOptionsEditorComponent, deps: [{ token: i1$1.ActivatedRoute }, { token: i1$1.Router }, { token: i1.ServerConfigService }, { token: i1.DataService }, { token: i1.PermissionsService }, { token: ProductDetailService }, { token: i2.UntypedFormBuilder }, { token: i0.ChangeDetectorRef }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ProductOptionsEditorComponent, isStandalone: false, selector: "vdr-product-options-editor", usesInheritance: true, ngImport: i0, template: "<vdr-page-header>\n    <vdr-page-title></vdr-page-title>\n    <vdr-page-header-description>{{ 'catalog.page-description-options-editor' | translate }}</vdr-page-header-description>\n</vdr-page-header>\n<vdr-page-body>\n    <vdr-page-block>\n        <vdr-action-bar>\n            <vdr-ab-left>\n                <vdr-language-selector\n                    [availableLanguageCodes]=\"availableLanguages$ | async\"\n                    [currentLanguageCode]=\"languageCode$ | async\"\n                    (languageCodeChange)=\"setLanguage($event)\"\n                ></vdr-language-selector>\n            </vdr-ab-left>\n\n            <vdr-ab-right>\n                <div class=\"flex center\">\n                    <div class=\"mr-2\">\n                        <clr-checkbox-wrapper>\n                            <input\n                                clrCheckbox\n                                type=\"checkbox\"\n                                id=\"auto-update\"\n                                [(ngModel)]=\"autoUpdateVariantNames\"\n                            />\n                            <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\n                        </clr-checkbox-wrapper>\n                    </div>\n                    <button\n                        *vdrIfPermissions=\"updatePermission\"\n                        class=\"btn btn-primary\"\n                        (click)=\"save()\"\n                        [disabled]=\"detailForm.pristine || detailForm.invalid\"\n                    >\n                        {{ 'common.update' | translate }}\n                    </button>\n                </div>\n            </vdr-ab-right>\n        </vdr-action-bar>\n    </vdr-page-block>\n    <vdr-page-block>\n        <form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"optionGroups$ | async as optionGroups\">\n            <div formGroupName=\"optionGroups\">\n                <vdr-card\n                    *ngFor=\"let optionGroup of getOptionGroups(); index as i\"\n                    [formArrayName]=\"i\"\n                    [title]=\"optionGroup.value.code\"\n                >\n                    <vdr-page-entity-info [entity]=\"optionGroup.value\"></vdr-page-entity-info>\n                    <div class=\"form-grid\">\n                        <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                            <input\n                                [id]=\"'name-' + i\"\n                                type=\"text\"\n                                formControlName=\"name\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                            />\n                        </vdr-form-field>\n                        <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n                            <input\n                                [id]=\"'code-' + i\"\n                                type=\"text\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                formControlName=\"code\"\n                            />\n                        </vdr-form-field>\n                    </div>\n                    <ng-container formGroupName=\"customFields\" *ngIf=\"optionGroupCustomFields.length\">\n                        <vdr-tabbed-custom-fields\n                            entityName=\"ProductOptionGroup\"\n                            [customFields]=\"optionGroupCustomFields\"\n                            [customFieldsFormGroup]=\"optionGroup.get('customFields')\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        ></vdr-tabbed-custom-fields>\n                    </ng-container>\n\n                    <vdr-data-table-2\n                        id=\"edit-options-list\"\n                        *ngIf=\"getOptions(optionGroup) as options\"\n                        [items]=\"options\"\n                        [trackByPath]=\"'value.id'\"\n                        [itemsPerPage]=\"paginationSettings[optionGroup.value.id]?.itemsPerPage\"\n                        [currentPage]=\"paginationSettings[optionGroup.value.id]?.currentPage\"\n                        (pageChange)=\"paginationSettings[optionGroup.value.id].currentPage = $event\"\n                        (itemsPerPageChange)=\"paginationSettings[optionGroup.value.id].itemsPerPage = $event\"\n                        [totalItems]=\"options.length\"\n                    >\n                        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                            <ng-template let-optionControl=\"item\">\n                                {{ optionControl.value.id }}\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n                            <ng-template let-optionControl=\"item\">\n                                {{ optionControl.value.createdAt | localeDate : 'short' }}\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n                            <ng-template let-optionControl=\"item\">\n                                {{ optionControl.value.updatedAt | localeDate : 'short' }}\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\n                            <ng-template let-optionControl=\"item\">\n                                <input\n                                    type=\"text\"\n                                    [formControl]=\"optionControl.get('name')\"\n                                    [readonly]=\"!(updatePermission | hasPermission)\"\n                                />\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\">\n                            <ng-template let-optionControl=\"item\">\n                                <input type=\"text\" [formControl]=\"optionControl.get('code')\" />\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column\n                            [heading]=\"'common.custom-fields' | translate\" id=\"custom-fields\"\n                            [hiddenByDefault]=\"optionCustomFields.length === 0\"\n                        >\n                            <ng-template let-optionControl=\"item\">\n                                <vdr-tabbed-custom-fields\n                                    entityName=\"ProductOption\"\n                                    [customFields]=\"optionCustomFields\"\n                                    [compact]=\"true\"\n                                    [customFieldsFormGroup]=\"optionControl.get('customFields')\"\n                                    [readonly]=\"!(updatePermission | hasPermission)\"\n                                ></vdr-tabbed-custom-fields>\n                            </ng-template>\n                        </vdr-dt2-column>\n                    </vdr-data-table-2>\n                </vdr-card>\n            </div>\n        </form>\n    </vdr-page-block>\n</vdr-page-body>\n", styles: [".option-group-header{display:flex;align-items:baseline}\n"], dependencies: [{ kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i2.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.PageHeaderComponent, selector: "vdr-page-header" }, { kind: "component", type: i1.PageTitleComponent, selector: "vdr-page-title", inputs: ["title"] }, { kind: "component", type: i1.PageHeaderDescriptionComponent, selector: "vdr-page-header-description" }, { kind: "component", type: i1.PageBodyComponent, selector: "vdr-page-body" }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductOptionsEditorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-product-options-editor', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-header>\n    <vdr-page-title></vdr-page-title>\n    <vdr-page-header-description>{{ 'catalog.page-description-options-editor' | translate }}</vdr-page-header-description>\n</vdr-page-header>\n<vdr-page-body>\n    <vdr-page-block>\n        <vdr-action-bar>\n            <vdr-ab-left>\n                <vdr-language-selector\n                    [availableLanguageCodes]=\"availableLanguages$ | async\"\n                    [currentLanguageCode]=\"languageCode$ | async\"\n                    (languageCodeChange)=\"setLanguage($event)\"\n                ></vdr-language-selector>\n            </vdr-ab-left>\n\n            <vdr-ab-right>\n                <div class=\"flex center\">\n                    <div class=\"mr-2\">\n                        <clr-checkbox-wrapper>\n                            <input\n                                clrCheckbox\n                                type=\"checkbox\"\n                                id=\"auto-update\"\n                                [(ngModel)]=\"autoUpdateVariantNames\"\n                            />\n                            <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\n                        </clr-checkbox-wrapper>\n                    </div>\n                    <button\n                        *vdrIfPermissions=\"updatePermission\"\n                        class=\"btn btn-primary\"\n                        (click)=\"save()\"\n                        [disabled]=\"detailForm.pristine || detailForm.invalid\"\n                    >\n                        {{ 'common.update' | translate }}\n                    </button>\n                </div>\n            </vdr-ab-right>\n        </vdr-action-bar>\n    </vdr-page-block>\n    <vdr-page-block>\n        <form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"optionGroups$ | async as optionGroups\">\n            <div formGroupName=\"optionGroups\">\n                <vdr-card\n                    *ngFor=\"let optionGroup of getOptionGroups(); index as i\"\n                    [formArrayName]=\"i\"\n                    [title]=\"optionGroup.value.code\"\n                >\n                    <vdr-page-entity-info [entity]=\"optionGroup.value\"></vdr-page-entity-info>\n                    <div class=\"form-grid\">\n                        <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                            <input\n                                [id]=\"'name-' + i\"\n                                type=\"text\"\n                                formControlName=\"name\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                            />\n                        </vdr-form-field>\n                        <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n                            <input\n                                [id]=\"'code-' + i\"\n                                type=\"text\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                formControlName=\"code\"\n                            />\n                        </vdr-form-field>\n                    </div>\n                    <ng-container formGroupName=\"customFields\" *ngIf=\"optionGroupCustomFields.length\">\n                        <vdr-tabbed-custom-fields\n                            entityName=\"ProductOptionGroup\"\n                            [customFields]=\"optionGroupCustomFields\"\n                            [customFieldsFormGroup]=\"optionGroup.get('customFields')\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        ></vdr-tabbed-custom-fields>\n                    </ng-container>\n\n                    <vdr-data-table-2\n                        id=\"edit-options-list\"\n                        *ngIf=\"getOptions(optionGroup) as options\"\n                        [items]=\"options\"\n                        [trackByPath]=\"'value.id'\"\n                        [itemsPerPage]=\"paginationSettings[optionGroup.value.id]?.itemsPerPage\"\n                        [currentPage]=\"paginationSettings[optionGroup.value.id]?.currentPage\"\n                        (pageChange)=\"paginationSettings[optionGroup.value.id].currentPage = $event\"\n                        (itemsPerPageChange)=\"paginationSettings[optionGroup.value.id].itemsPerPage = $event\"\n                        [totalItems]=\"options.length\"\n                    >\n                        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                            <ng-template let-optionControl=\"item\">\n                                {{ optionControl.value.id }}\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n                            <ng-template let-optionControl=\"item\">\n                                {{ optionControl.value.createdAt | localeDate : 'short' }}\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n                            <ng-template let-optionControl=\"item\">\n                                {{ optionControl.value.updatedAt | localeDate : 'short' }}\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\n                            <ng-template let-optionControl=\"item\">\n                                <input\n                                    type=\"text\"\n                                    [formControl]=\"optionControl.get('name')\"\n                                    [readonly]=\"!(updatePermission | hasPermission)\"\n                                />\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\">\n                            <ng-template let-optionControl=\"item\">\n                                <input type=\"text\" [formControl]=\"optionControl.get('code')\" />\n                            </ng-template>\n                        </vdr-dt2-column>\n                        <vdr-dt2-column\n                            [heading]=\"'common.custom-fields' | translate\" id=\"custom-fields\"\n                            [hiddenByDefault]=\"optionCustomFields.length === 0\"\n                        >\n                            <ng-template let-optionControl=\"item\">\n                                <vdr-tabbed-custom-fields\n                                    entityName=\"ProductOption\"\n                                    [customFields]=\"optionCustomFields\"\n                                    [compact]=\"true\"\n                                    [customFieldsFormGroup]=\"optionControl.get('customFields')\"\n                                    [readonly]=\"!(updatePermission | hasPermission)\"\n                                ></vdr-tabbed-custom-fields>\n                            </ng-template>\n                        </vdr-dt2-column>\n                    </vdr-data-table-2>\n                </vdr-card>\n            </div>\n        </form>\n    </vdr-page-block>\n</vdr-page-body>\n", styles: [".option-group-header{display:flex;align-items:baseline}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.ActivatedRoute }, { type: i1$1.Router }, { type: i1.ServerConfigService }, { type: i1.DataService }, { type: i1.PermissionsService }, { type: ProductDetailService }, { type: i2.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i1.NotificationService }] });

class CreateProductOptionGroupDialogComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.form = this.formBuilder.group({
            name: ['', Validators.required],
            code: ['', Validators.required],
        });
    }
    updateCode() {
        const nameControl = this.form.get('name');
        const codeControl = this.form.get('code');
        if (nameControl && codeControl && codeControl.pristine) {
            codeControl.setValue(normalizeString(`${nameControl.value}`, '-'));
        }
    }
    confirm() {
        const { name, code } = this.form.value;
        if (!name || !code) {
            return;
        }
        this.resolveWith({
            code,
            options: [],
            translations: [{ languageCode: this.languageCode, name }],
        });
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CreateProductOptionGroupDialogComponent, deps: [{ token: i2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CreateProductOptionGroupDialogComponent, isStandalone: false, selector: "vdr-create-product-option-group-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.create-product-option-group' | translate }}\n</ng-template>\n<div class=\"form-grid\" [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input id=\"name\" type=\"text\" formControlName=\"name\" (input)=\"updateCode()\" />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n        />\n    </vdr-form-field>\n</div>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CreateProductOptionGroupDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-create-product-option-group-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.create-product-option-group' | translate }}\n</ng-template>\n<div class=\"form-grid\" [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input id=\"name\" type=\"text\" formControlName=\"name\" (input)=\"updateCode()\" />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n        />\n    </vdr-form-field>\n</div>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n" }]
        }], ctorParameters: () => [{ type: i2.FormBuilder }] });

class CreateProductVariantDialogComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.form = this.formBuilder.group({
            name: ['', Validators.required],
            sku: [''],
            price: [''],
            options: this.formBuilder.record({}),
        });
    }
    ngOnInit() {
        this.currencyCode = this.product.variants[0]?.currencyCode;
        for (const optionGroup of this.product.optionGroups) {
            this.form.get('options').addControl(optionGroup.code, new FormControl('', Validators.required));
        }
        const optionsRecord = this.form.get('options');
        optionsRecord.valueChanges.subscribe(value => {
            const nameControl = this.form.get('name');
            const allNull = Object.values(value).every(v => v == null);
            if (!allNull && value && nameControl && !nameControl.dirty) {
                const name = Object.entries(value)
                    .map(([groupCode, optionId]) => this.product.optionGroups
                    .find(og => og.code === groupCode)
                    ?.options.find(o => o.id === optionId)?.name)
                    .join(' ');
                nameControl.setValue(`${this.product.name} ${name}`);
            }
            const allSelected = Object.values(value).every(v => v != null);
            if (allSelected) {
                this.existingVariant = this.product.variants.find(v => Object.entries(value).every(([groupCode, optionId]) => v.options.find(o => o.groupId === this.getGroupIdFromCode(groupCode))?.id ===
                    optionId));
            }
        });
    }
    confirm() {
        const { name, sku, options, price } = this.form.value;
        if (!name || !options || price == null) {
            return;
        }
        const optionIds = Object.values(options).filter(notNullOrUndefined);
        this.resolveWith({
            productId: this.product.id,
            sku: sku || '',
            price: Number(price),
            optionIds,
            translations: [
                {
                    languageCode: this.product.languageCode,
                    name,
                },
            ],
        });
    }
    cancel() {
        this.resolveWith();
    }
    getGroupCodeFromId(id) {
        return this.product.optionGroups.find(og => og.id === id)?.code ?? '';
    }
    getGroupIdFromCode(code) {
        return this.product.optionGroups.find(og => og.code === code)?.id ?? '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CreateProductVariantDialogComponent, deps: [{ token: i2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CreateProductVariantDialogComponent, isStandalone: false, selector: "vdr-create-product-variant-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.create-product-variant' | translate }}\n</ng-template>\n<form [formGroup]=\"form\">\n    <div formGroupName=\"options\" class=\"form-grid\">\n        <vdr-form-field [label]=\"optionGroup.name\" *ngFor=\"let optionGroup of product.optionGroups\">\n            <ng-select [items]=\"optionGroup.options\" [formControlName]=\"optionGroup.code\" bindLabel=\"name\"\n                bindValue=\"id\" appendTo=\"body\">\n            </ng-select>\n        </vdr-form-field>\n        <clr-alert *ngIf=\"product.optionGroups.length === 0\" clrAlertType=\"warning\" [clrAlertClosable]=\"false\"\n            class=\"form-grid-span\">\n            <clr-alert-item>\n                <span class=\"alert-text\">\n                    {{ 'catalog.cannot-create-variants-without-options' | translate }}\n                </span>\n            </clr-alert-item>\n        </clr-alert>\n    </div>\n    <div *ngIf=\"existingVariant\" class=\"mt-2\">\n        <clr-alert clrAlertType=\"warning\" [clrAlertClosable]=\"false\" class=\"\">\n            <clr-alert-item>\n                <span class=\"alert-text\">\n                    {{ 'catalog.product-variant-exists' | translate }}: {{ existingVariant.name }} ({{\n                    existingVariant.sku\n                    }})\n                </span>\n            </clr-alert-item>\n        </clr-alert>\n    </div>\n    <div class=\"form-grid mt-2\">\n        <vdr-form-field [label]=\"'common.name' | translate\">\n            <input type=\"text\" formControlName=\"name\" />\n        </vdr-form-field>\n        <vdr-form-field [label]=\"'catalog.sku' | translate\">\n            <input type=\"text\" formControlName=\"sku\" />\n        </vdr-form-field>\n        <vdr-form-field [label]=\"'catalog.price' | translate\">\n            <vdr-currency-input name=\"price\" [currencyCode]=\"currencyCode\" formControlName=\"price\" />\n        </vdr-form-field>\n    </div>\n</form>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\"\n        [disabled]=\"form.invalid || existingVariant || product.optionGroups.length === 0\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>", styles: [""], dependencies: [{ kind: "component", type: i3.ClrAlert, selector: "clr-alert", inputs: ["clrAlertSizeSmall", "clrAlertClosable", "clrAlertAppLevel", "clrCloseButtonAriaLabel", "clrAlertLightweight", "clrAlertType", "clrAlertIcon", "clrAlertClosed"], outputs: ["clrAlertClosedChange"] }, { kind: "component", type: i3.ClrAlertItem, selector: "clr-alert-item" }, { kind: "directive", type: i3.ClrAlertText, selector: ".alert-text" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i5$1.NgSelectComponent, selector: "ng-select", inputs: ["ariaLabelDropdown", "bindLabel", "bindValue", "ariaLabel", "markFirst", "placeholder", "fixedPlaceholder", "notFoundText", "typeToSearchText", "preventToggleOnRightClick", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "ngClass", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick", "keyDownFn"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "component", type: i1.CurrencyInputComponent, selector: "vdr-currency-input", inputs: ["disabled", "readonly", "value", "currencyCode"], outputs: ["valueChange"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CreateProductVariantDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-create-product-variant-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.create-product-variant' | translate }}\n</ng-template>\n<form [formGroup]=\"form\">\n    <div formGroupName=\"options\" class=\"form-grid\">\n        <vdr-form-field [label]=\"optionGroup.name\" *ngFor=\"let optionGroup of product.optionGroups\">\n            <ng-select [items]=\"optionGroup.options\" [formControlName]=\"optionGroup.code\" bindLabel=\"name\"\n                bindValue=\"id\" appendTo=\"body\">\n            </ng-select>\n        </vdr-form-field>\n        <clr-alert *ngIf=\"product.optionGroups.length === 0\" clrAlertType=\"warning\" [clrAlertClosable]=\"false\"\n            class=\"form-grid-span\">\n            <clr-alert-item>\n                <span class=\"alert-text\">\n                    {{ 'catalog.cannot-create-variants-without-options' | translate }}\n                </span>\n            </clr-alert-item>\n        </clr-alert>\n    </div>\n    <div *ngIf=\"existingVariant\" class=\"mt-2\">\n        <clr-alert clrAlertType=\"warning\" [clrAlertClosable]=\"false\" class=\"\">\n            <clr-alert-item>\n                <span class=\"alert-text\">\n                    {{ 'catalog.product-variant-exists' | translate }}: {{ existingVariant.name }} ({{\n                    existingVariant.sku\n                    }})\n                </span>\n            </clr-alert-item>\n        </clr-alert>\n    </div>\n    <div class=\"form-grid mt-2\">\n        <vdr-form-field [label]=\"'common.name' | translate\">\n            <input type=\"text\" formControlName=\"name\" />\n        </vdr-form-field>\n        <vdr-form-field [label]=\"'catalog.sku' | translate\">\n            <input type=\"text\" formControlName=\"sku\" />\n        </vdr-form-field>\n        <vdr-form-field [label]=\"'catalog.price' | translate\">\n            <vdr-currency-input name=\"price\" [currencyCode]=\"currencyCode\" formControlName=\"price\" />\n        </vdr-form-field>\n    </div>\n</form>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\"\n        [disabled]=\"form.invalid || existingVariant || product.optionGroups.length === 0\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>" }]
        }], ctorParameters: () => [{ type: i2.FormBuilder }] });

const OPTION_VALUE_INPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => OptionValueInputComponent),
    multi: true,
};
class OptionValueInputComponent {
    get optionValues() {
        return this.formValue ?? this.options ?? [];
    }
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.groupName = '';
        this.add = new EventEmitter();
        this.remove = new EventEmitter();
        this.edit = new EventEmitter();
        this.disabled = false;
        this.input = '';
        this.isFocussed = false;
        this.lastSelected = false;
        this.editingIndex = -1;
    }
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouchFn = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.changeDetector.markForCheck();
    }
    writeValue(obj) {
        this.formValue = obj || [];
    }
    focus() {
        this.textArea.nativeElement.focus();
    }
    editName(index, event) {
        const optionValue = this.optionValues[index];
        if (!optionValue.locked && !optionValue.id) {
            event.cancelBubble = true;
            this.editingIndex = index;
            const input = this.nameInputs.get(index)?.nativeElement;
            setTimeout(() => input?.focus());
        }
    }
    updateOption(index, event) {
        const optionValue = this.optionValues[index];
        const newName = event.target.value;
        if (optionValue) {
            if (newName) {
                optionValue.name = newName;
                this.edit.emit({ index, option: optionValue });
            }
            this.editingIndex = -1;
        }
    }
    removeOption(option) {
        if (!option.locked) {
            if (this.formValue) {
                this.formValue = this.formValue?.filter(o => o.name !== option.name);
                this.onChangeFn(this.formValue);
            }
            else {
                this.remove.emit(option);
            }
        }
    }
    handleKey(event) {
        switch (event.key) {
            case ',':
            case 'Enter':
                this.addOptionValue();
                event.preventDefault();
                break;
            case 'Backspace':
                if (this.lastSelected) {
                    this.removeLastOption();
                    this.lastSelected = false;
                }
                else if (this.input === '') {
                    this.lastSelected = true;
                }
                break;
            default:
                this.lastSelected = false;
        }
    }
    handleBlur() {
        this.isFocussed = false;
        this.addOptionValue();
    }
    addOptionValue() {
        const options = this.parseInputIntoOptions(this.input).filter(option => {
            // do not add an option with the same name
            // as an existing option
            const existing = this.options ?? this.formValue;
            return !existing?.find(o => o?.name === option.name);
        });
        if (!this.formValue && this.options) {
            for (const option of options) {
                this.add.emit(option);
            }
        }
        else {
            this.formValue = unique([...this.formValue, ...options]);
            this.onChangeFn(this.formValue);
        }
        this.input = '';
    }
    parseInputIntoOptions(input) {
        return input
            .split(/[,\n]/)
            .map(s => s.trim())
            .filter(s => s !== '')
            .map(s => ({ name: s, locked: false }));
    }
    removeLastOption() {
        if (this.optionValues.length) {
            const option = this.optionValues[this.optionValues.length - 1];
            this.removeOption(option);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: OptionValueInputComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: OptionValueInputComponent, isStandalone: false, selector: "vdr-option-value-input", inputs: { groupName: "groupName", options: "options", disabled: "disabled" }, outputs: { add: "add", remove: "remove", edit: "edit" }, providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR], viewQueries: [{ propertyName: "textArea", first: true, predicate: ["textArea"], descendants: true, static: true }, { propertyName: "nameInputs", predicate: ["editNameInput"], descendants: true, read: ElementRef }], ngImport: i0, template: "<div class=\"input-wrapper\" [class.focus]=\"isFocussed\" (click)=\"textArea.focus()\">\n    <div class=\"chips\" *ngIf=\"0 < optionValues.length\">\n        <vdr-chip\n            *ngFor=\"let option of optionValues; last as isLast; index as i\"\n            [icon]=\"option.locked ? 'lock' : 'times'\"\n            [class.selected]=\"isLast && lastSelected\"\n            [class.locked]=\"option.locked\"\n            [colorFrom]=\"groupName\"\n            (iconClick)=\"removeOption(option)\"\n        >\n            <span [hidden]=\"editingIndex !== i\">\n                <input\n                    #editNameInput\n                    type=\"text\"\n                    [ngModel]=\"option.name\"\n                    (blur)=\"updateOption(i, $event)\"\n                    (click)=\"$event.cancelBubble = true\"\n                />\n            </span>\n            <span\n                class=\"option-name\"\n                [class.editable]=\"!option.locked && !option.id\"\n                (click)=\"editName(i, $event)\" [hidden]=\"editingIndex === i\">{{ option.name }}</span>\n        </vdr-chip>\n    </div>\n    <textarea\n        #textArea\n        (keyup)=\"handleKey($event)\"\n        (focus)=\"isFocussed = true\"\n        (blur)=\"handleBlur()\"\n        [(ngModel)]=\"input\"\n        [disabled]=\"disabled\"\n    ></textarea>\n</div>\n", styles: [".input-wrapper{background-color:var(--color-form-input-bg);border-radius:3px!important;border:1px solid var(--color-grey-300)!important;cursor:text}.input-wrapper.focus{border-color:var(--color-primary-500)!important;box-shadow:0 0 1px 1px var(--color-primary-100)}.input-wrapper .chips{padding:5px}.input-wrapper textarea{border:none;width:100%;height:24px;margin-top:3px;padding:0 6px}.input-wrapper textarea:focus{outline:none;box-shadow:none}.input-wrapper textarea:disabled{background-color:var(--color-component-bg-100)}vdr-chip ::ng-deep .wrapper{margin:0 3px}vdr-chip.locked{opacity:.8}vdr-chip.selected ::ng-deep .wrapper{border-color:var(--color-warning-500)!important;box-shadow:0 0 1px 1px var(--color-warning-400);opacity:.6}vdr-chip .option-name.editable:hover{outline:1px solid var(--color-component-bg-300);outline-offset:1px;border-radius:1px}vdr-chip input{padding:0!important;margin-top:-2px;margin-bottom:-2px}\n"], dependencies: [{ kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: OptionValueInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-option-value-input', changeDetection: ChangeDetectionStrategy.Default, providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR], standalone: false, template: "<div class=\"input-wrapper\" [class.focus]=\"isFocussed\" (click)=\"textArea.focus()\">\n    <div class=\"chips\" *ngIf=\"0 < optionValues.length\">\n        <vdr-chip\n            *ngFor=\"let option of optionValues; last as isLast; index as i\"\n            [icon]=\"option.locked ? 'lock' : 'times'\"\n            [class.selected]=\"isLast && lastSelected\"\n            [class.locked]=\"option.locked\"\n            [colorFrom]=\"groupName\"\n            (iconClick)=\"removeOption(option)\"\n        >\n            <span [hidden]=\"editingIndex !== i\">\n                <input\n                    #editNameInput\n                    type=\"text\"\n                    [ngModel]=\"option.name\"\n                    (blur)=\"updateOption(i, $event)\"\n                    (click)=\"$event.cancelBubble = true\"\n                />\n            </span>\n            <span\n                class=\"option-name\"\n                [class.editable]=\"!option.locked && !option.id\"\n                (click)=\"editName(i, $event)\" [hidden]=\"editingIndex === i\">{{ option.name }}</span>\n        </vdr-chip>\n    </div>\n    <textarea\n        #textArea\n        (keyup)=\"handleKey($event)\"\n        (focus)=\"isFocussed = true\"\n        (blur)=\"handleBlur()\"\n        [(ngModel)]=\"input\"\n        [disabled]=\"disabled\"\n    ></textarea>\n</div>\n", styles: [".input-wrapper{background-color:var(--color-form-input-bg);border-radius:3px!important;border:1px solid var(--color-grey-300)!important;cursor:text}.input-wrapper.focus{border-color:var(--color-primary-500)!important;box-shadow:0 0 1px 1px var(--color-primary-100)}.input-wrapper .chips{padding:5px}.input-wrapper textarea{border:none;width:100%;height:24px;margin-top:3px;padding:0 6px}.input-wrapper textarea:focus{outline:none;box-shadow:none}.input-wrapper textarea:disabled{background-color:var(--color-component-bg-100)}vdr-chip ::ng-deep .wrapper{margin:0 3px}vdr-chip.locked{opacity:.8}vdr-chip.selected ::ng-deep .wrapper{border-color:var(--color-warning-500)!important;box-shadow:0 0 1px 1px var(--color-warning-400);opacity:.6}vdr-chip .option-name.editable:hover{outline:1px solid var(--color-component-bg-300);outline-offset:1px;border-radius:1px}vdr-chip input{padding:0!important;margin-top:-2px;margin-bottom:-2px}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { groupName: [{
                type: Input
            }], textArea: [{
                type: ViewChild,
                args: ['textArea', { static: true }]
            }], nameInputs: [{
                type: ViewChildren,
                args: ['editNameInput', { read: ElementRef }]
            }], options: [{
                type: Input
            }], add: [{
                type: Output
            }], remove: [{
                type: Output
            }], edit: [{
                type: Output
            }], disabled: [{
                type: Input
            }] } });

class GeneratedVariant {
    constructor(config) {
        for (const key of Object.keys(config)) {
            this[key] = config[key];
        }
    }
}
class ProductVariantsEditorComponent {
    constructor(route, dataService, productDetailService, notificationService, modalService, changeDetector) {
        this.route = route;
        this.dataService = dataService;
        this.productDetailService = productDetailService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.changeDetector = changeDetector;
        this.formValueChanged = false;
        this.optionsChanged = false;
        this.itemsPerPage = 100;
        this.currentPage = 1;
        this.searchTermControl = new FormControl('');
        this.selectionManager = new SelectionManager({
            multiSelect: true,
            itemsAreEqual: (a, b) => a.id === b.id,
            additiveMode: true,
        });
        this.optionsToAddToVariant = {};
        this.refresh$ = new Subject();
    }
    ngOnInit() {
        this.languageCode =
            this.route.snapshot.paramMap.get('lang') || getDefaultUiLanguage();
        this.dataService.settings.getActiveChannel().single$.subscribe(data => {
            this.currencyCode = data.activeChannel.defaultCurrencyCode;
        });
        const product$ = this.refresh$.pipe(switchMap(() => this.dataService.product
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            .getProductVariantsOptions(this.route.parent?.snapshot.paramMap.get('id'))
            .mapSingle(data => data.product)), startWith(this.route.snapshot.data.product));
        this.variants$ = product$.pipe(switchMap(product => this.searchTermControl.valueChanges.pipe(startWith(''), map(term => term
            ? product.variants.filter(v => v.name.toLowerCase().includes(term.toLowerCase()))
            : product.variants))));
        this.optionGroups$ = product$.pipe(map(product => product.optionGroups));
        this.totalItems$ = this.variants$.pipe(map(variants => variants.length));
        product$.subscribe(p => {
            this.product = p;
            const allUsedOptionIds = p.variants.map(v => v.options.map(option => option.id)).flat();
            const allUsedOptionGroupIds = p.variants.map(v => v.options.map(option => option.groupId)).flat();
            this.optionGroups = p.optionGroups.map(og => ({
                id: og.id,
                isNew: false,
                name: og.name,
                locked: allUsedOptionGroupIds.includes(og.id),
                values: og.options.map(o => ({
                    id: o.id,
                    name: o.name,
                    locked: allUsedOptionIds.includes(o.id),
                })),
            }));
        });
    }
    setItemsPerPage(itemsPerPage) {
        this.itemsPerPage = itemsPerPage;
        this.currentPage = 1;
    }
    setPageNumber(page) {
        this.currentPage = page;
    }
    onFormChanged(variantInfo) {
        this.formValueChanged = true;
        variantInfo.enabled = true;
    }
    canDeactivate() {
        return !this.formValueChanged;
    }
    addOptionGroup() {
        this.modalService
            .fromComponent(CreateProductOptionGroupDialogComponent, {
            locals: {
                languageCode: this.languageCode,
            },
        })
            .pipe(switchMap(result => {
            if (result) {
                return this.dataService.product.createProductOptionGroups(result).pipe(switchMap(({ createProductOptionGroup }) => this.dataService.product.addOptionGroupToProduct({
                    optionGroupId: createProductOptionGroup.id,
                    productId: this.product.id,
                })));
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(result => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'ProductOptionGroup',
            });
            this.refresh$.next();
            this.changeDetector.markForCheck();
        });
    }
    removeOptionGroup(optionGroup) {
        const id = optionGroup.id;
        const usedByVariantsCount = this.product.variants.filter(v => v.options.map(o => o.groupId).includes(id)).length;
        this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-product-option-group'),
            body: usedByVariantsCount ? marker('catalog.confirm-delete-product-option-group-body') : '',
            translationVars: { name: optionGroup.name, count: usedByVariantsCount },
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(val => {
            if (val) {
                return this.dataService.product.removeOptionGroupFromProduct({
                    optionGroupId: id,
                    productId: this.product.id,
                    force: true,
                });
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(({ removeOptionGroupFromProduct }) => {
            if (removeOptionGroupFromProduct.__typename === 'Product') {
                this.notificationService.success(marker('common.notify-delete-success'), {
                    entity: 'ProductOptionGroup',
                });
                this.refresh$.next();
            }
            else if (removeOptionGroupFromProduct.__typename === 'ProductOptionInUseError') {
                this.notificationService.error(removeOptionGroupFromProduct.message ?? '');
            }
        });
    }
    addOption(index, optionName) {
        const group = this.optionGroups[index];
        if (group && group.id) {
            this.dataService.product
                .addOptionToGroup({
                productOptionGroupId: group.id,
                code: normalizeString(optionName, '-'),
                translations: [{ name: optionName, languageCode: this.languageCode }],
            })
                .subscribe(({ createProductOption }) => {
                this.notificationService.success(marker('common.notify-create-success'), {
                    entity: 'ProductOption',
                });
                this.refresh$.next();
            });
        }
    }
    removeOption(index, { id, name }) {
        const optionGroup = this.optionGroups[index];
        if (optionGroup) {
            this.modalService
                .dialog({
                title: marker('catalog.confirm-delete-product-option'),
                translationVars: { name },
                buttons: [
                    { type: 'secondary', label: marker('common.cancel') },
                    { type: 'danger', label: marker('common.delete'), returnValue: true },
                ],
            })
                .pipe(switchMap(val => {
                if (val) {
                    return this.dataService.product.deleteProductOption(id);
                }
                else {
                    return EMPTY;
                }
            }))
                .subscribe(({ deleteProductOption }) => {
                if (deleteProductOption.result === DeletionResult.DELETED) {
                    this.notificationService.success(marker('common.notify-delete-success'), {
                        entity: 'ProductOption',
                    });
                    optionGroup.values = optionGroup.values.filter(v => v.id !== id);
                    this.refresh$.next();
                }
                else {
                    this.notificationService.error(deleteProductOption.message ?? '');
                }
            });
        }
    }
    setOptionToAddToVariant(variantId, optionGroupId, optionId) {
        if (!this.optionsToAddToVariant[variantId]) {
            this.optionsToAddToVariant[variantId] = {};
        }
        if (optionId) {
            this.optionsToAddToVariant[variantId][optionGroupId] = optionId;
        }
        else {
            delete this.optionsToAddToVariant[variantId][optionGroupId];
        }
    }
    addOptionToVariant(variant) {
        const optionIds = [
            ...variant.options.map(o => o.id),
            ...Object.values(this.optionsToAddToVariant[variant.id]),
        ];
        this.dataService.product
            .updateProductVariants([
            {
                id: variant.id,
                optionIds: unique(optionIds),
            },
        ])
            .subscribe(({ updateProductVariants }) => {
            this.refresh$.next();
        });
    }
    deleteVariant(variant) {
        this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-product-variant'),
            translationVars: { name: variant.name },
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response
            ? this.productDetailService.deleteProductVariant(variant.id, this.product.id)
            : EMPTY))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'ProductVariant',
            });
            this.refresh$.next();
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'ProductVariant',
            });
        });
    }
    createNewVariant() {
        this.modalService
            .fromComponent(CreateProductVariantDialogComponent, {
            locals: {
                product: this.product,
            },
        })
            .pipe(switchMap(result => {
            if (result) {
                return this.dataService.product.createProductVariants([result]);
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(result => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'ProductVariant',
            });
            this.refresh$.next();
        });
    }
    getOption(variant, groupId) {
        return variant.options.find(o => o.groupId === groupId);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantsEditorComponent, deps: [{ token: i1$1.ActivatedRoute }, { token: i1.DataService }, { token: ProductDetailService }, { token: i1.NotificationService }, { token: i1.ModalService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ProductVariantsEditorComponent, isStandalone: false, selector: "vdr-product-variants-editor", ngImport: i0, template: "<vdr-page-block>\n    <vdr-card>\n        <div *ngFor=\"let group of optionGroups; index as i\" class=\"option-groups\">\n            <vdr-form-field [label]=\"'catalog.option' | translate\">\n                <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'catalog.option-values' | translate\" class=\"flex-spacer\">\n                <vdr-option-value-input\n                    #optionValueInputComponent\n                    [options]=\"group.values\"\n                    [groupName]=\"group.name\"\n                    [disabled]=\"group.name === ''\"\n                    (add)=\"addOption(i, $event.name)\"\n                    (remove)=\"removeOption(i, $event)\"\n                ></vdr-option-value-input>\n            </vdr-form-field>\n            <div>\n                <button class=\"button-small mt-4\" (click)=\"removeOptionGroup(group)\">\n                    <clr-icon shape=\"trash\"></clr-icon>\n                </button>\n            </div>\n        </div>\n        <button class=\"button mt-1\" (click)=\"addOptionGroup()\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-product-option-group' | translate }}\n        </button>\n    </vdr-card>\n    <vdr-card [paddingX]=\"false\">\n        <div class=\"mx-3\">\n            <button class=\"button\" (click)=\"createNewVariant()\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-product-variant' | translate }}\n            </button>\n        </div>\n        <vdr-data-table-2\n            id=\"manage-product-variant-list\"\n            [items]=\"variants$ | async\"\n            [itemsPerPage]=\"itemsPerPage\"\n            [totalItems]=\"totalItems$ | async\"\n            [currentPage]=\"currentPage\"\n            (pageChange)=\"setPageNumber($event)\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n        >\n            <vdr-dt2-search\n                [searchTermControl]=\"searchTermControl\"\n                [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n            />\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.id }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.createdAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.updatedAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'catalog.name' | translate\" id=\"name\" [optional]=\"false\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.name }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'catalog.sku' | translate\" id=\"sku\" [optional]=\"false\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.sku }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column *ngFor=\"let optionGroup of optionGroups$ | async\" [heading]=\"optionGroup.name\" [id]=\"optionGroup.code\">\n                <ng-template let-variant=\"item\">\n                    <vdr-chip\n                        *ngIf=\"getOption(variant, optionGroup.id) as option; else selectOption\"\n                        [colorFrom]=\"optionGroup.code\"\n                        >{{ option.name }}</vdr-chip\n                    >\n                    <ng-template #selectOption>\n                        <div class=\"flex center\">\n                            <ng-select\n                                [items]=\"optionGroup.options\"\n                                bindLabel=\"name\"\n                                bindValue=\"id\"\n                                appendTo=\"body\"\n                                (change)=\"setOptionToAddToVariant(variant.id, optionGroup.id, $event?.id)\"\n                            ></ng-select>\n                            <button\n                                class=\"button-small ml-1\"\n                                [class.primary]=\"!!optionsToAddToVariant[variant.id]?.[optionGroup.id]\"\n                                (click)=\"addOptionToVariant(variant)\"\n                                [disabled]=\"!optionsToAddToVariant[variant.id]?.[optionGroup.id]\"\n                            >\n                                <clr-icon shape=\"floppy\"></clr-icon>\n                            </button>\n                        </div>\n                    </ng-template>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.price' | translate\" id=\"price\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.price | localeCurrency : variant.currencyCode }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.price-with-tax' | translate\" id=\"price-with-tax\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.priceWithTax | localeCurrency : variant.currencyCode }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.delete' | translate\" id=\"delete\" [optional]=\"false\">\n                <ng-template let-variant=\"item\">\n                    <button class=\"button-small\" (click)=\"deleteVariant(variant)\">\n                        <clr-icon shape=\"trash is-danger\"></clr-icon>\n                    </button>\n                </ng-template>\n            </vdr-dt2-column>\n        </vdr-data-table-2>\n    </vdr-card>\n</vdr-page-block>\n", styles: [".option-groups{display:flex;width:100%;gap:var(--space-unit)}.values{flex:1;margin:0 6px}.variants-preview tr.disabled td{background-color:var(--color-component-bg-100);color:var(--color-grey-400)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrInput, selector: "[clrInput]" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i5$1.NgSelectComponent, selector: "ng-select", inputs: ["ariaLabelDropdown", "bindLabel", "bindValue", "ariaLabel", "markFirst", "placeholder", "fixedPlaceholder", "notFoundText", "typeToSearchText", "preventToggleOnRightClick", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "ngClass", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick", "keyDownFn"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: OptionValueInputComponent, selector: "vdr-option-value-input", inputs: ["groupName", "options", "disabled"], outputs: ["add", "remove", "edit"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantsEditorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-product-variants-editor', changeDetection: ChangeDetectionStrategy.Default, standalone: false, template: "<vdr-page-block>\n    <vdr-card>\n        <div *ngFor=\"let group of optionGroups; index as i\" class=\"option-groups\">\n            <vdr-form-field [label]=\"'catalog.option' | translate\">\n                <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'catalog.option-values' | translate\" class=\"flex-spacer\">\n                <vdr-option-value-input\n                    #optionValueInputComponent\n                    [options]=\"group.values\"\n                    [groupName]=\"group.name\"\n                    [disabled]=\"group.name === ''\"\n                    (add)=\"addOption(i, $event.name)\"\n                    (remove)=\"removeOption(i, $event)\"\n                ></vdr-option-value-input>\n            </vdr-form-field>\n            <div>\n                <button class=\"button-small mt-4\" (click)=\"removeOptionGroup(group)\">\n                    <clr-icon shape=\"trash\"></clr-icon>\n                </button>\n            </div>\n        </div>\n        <button class=\"button mt-1\" (click)=\"addOptionGroup()\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-product-option-group' | translate }}\n        </button>\n    </vdr-card>\n    <vdr-card [paddingX]=\"false\">\n        <div class=\"mx-3\">\n            <button class=\"button\" (click)=\"createNewVariant()\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-product-variant' | translate }}\n            </button>\n        </div>\n        <vdr-data-table-2\n            id=\"manage-product-variant-list\"\n            [items]=\"variants$ | async\"\n            [itemsPerPage]=\"itemsPerPage\"\n            [totalItems]=\"totalItems$ | async\"\n            [currentPage]=\"currentPage\"\n            (pageChange)=\"setPageNumber($event)\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n        >\n            <vdr-dt2-search\n                [searchTermControl]=\"searchTermControl\"\n                [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n            />\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.id }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.createdAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.updatedAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'catalog.name' | translate\" id=\"name\" [optional]=\"false\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.name }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'catalog.sku' | translate\" id=\"sku\" [optional]=\"false\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.sku }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column *ngFor=\"let optionGroup of optionGroups$ | async\" [heading]=\"optionGroup.name\" [id]=\"optionGroup.code\">\n                <ng-template let-variant=\"item\">\n                    <vdr-chip\n                        *ngIf=\"getOption(variant, optionGroup.id) as option; else selectOption\"\n                        [colorFrom]=\"optionGroup.code\"\n                        >{{ option.name }}</vdr-chip\n                    >\n                    <ng-template #selectOption>\n                        <div class=\"flex center\">\n                            <ng-select\n                                [items]=\"optionGroup.options\"\n                                bindLabel=\"name\"\n                                bindValue=\"id\"\n                                appendTo=\"body\"\n                                (change)=\"setOptionToAddToVariant(variant.id, optionGroup.id, $event?.id)\"\n                            ></ng-select>\n                            <button\n                                class=\"button-small ml-1\"\n                                [class.primary]=\"!!optionsToAddToVariant[variant.id]?.[optionGroup.id]\"\n                                (click)=\"addOptionToVariant(variant)\"\n                                [disabled]=\"!optionsToAddToVariant[variant.id]?.[optionGroup.id]\"\n                            >\n                                <clr-icon shape=\"floppy\"></clr-icon>\n                            </button>\n                        </div>\n                    </ng-template>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.price' | translate\" id=\"price\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.price | localeCurrency : variant.currencyCode }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.price-with-tax' | translate\" id=\"price-with-tax\" [hiddenByDefault]=\"true\">\n                <ng-template let-variant=\"item\">\n                    {{ variant.priceWithTax | localeCurrency : variant.currencyCode }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.delete' | translate\" id=\"delete\" [optional]=\"false\">\n                <ng-template let-variant=\"item\">\n                    <button class=\"button-small\" (click)=\"deleteVariant(variant)\">\n                        <clr-icon shape=\"trash is-danger\"></clr-icon>\n                    </button>\n                </ng-template>\n            </vdr-dt2-column>\n        </vdr-data-table-2>\n    </vdr-card>\n</vdr-page-block>\n", styles: [".option-groups{display:flex;width:100%;gap:var(--space-unit)}.values{flex:1;margin:0 6px}.variants-preview tr.disabled td{background-color:var(--color-component-bg-100);color:var(--color-grey-400)}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.ActivatedRoute }, { type: i1.DataService }, { type: ProductDetailService }, { type: i1.NotificationService }, { type: i1.ModalService }, { type: i0.ChangeDetectorRef }] });

class ProductVariantsResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'Product',
            id: '',
            createdAt: '',
            updatedAt: '',
            name: '',
            languageCode: '',
            optionGroups: [],
            variants: [],
        }, id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantsResolver, deps: [{ token: i1$1.Router }, { token: i1.DataService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantsResolver, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantsResolver, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1$1.Router }, { type: i1.DataService }] });

const createRoutes = (pageService) => [
    {
        path: 'products',
        component: PageComponent,
        data: {
            locationId: 'product-list',
            breadcrumb: marker('breadcrumb.products'),
        },
        children: pageService.getPageTabRoutes('product-list'),
    },
    {
        path: 'inventory',
        redirectTo: 'products',
    },
    {
        path: 'products/:id',
        component: PageComponent,
        data: {
            locationId: 'product-detail',
            breadcrumb: { label: marker('breadcrumb.products'), link: ['../', 'products'] },
        },
        children: [
            {
                path: 'manage-variants',
                component: ProductVariantsEditorComponent,
                canDeactivate: [CanDeactivateDetailGuard],
                data: {
                    breadcrumb: ({ product }) => [
                        {
                            label: `${product.name}`,
                            link: ['../'],
                        },
                        {
                            label: marker('breadcrumb.manage-variants'),
                            link: ['manage-variants'],
                        },
                    ],
                },
                resolve: {
                    product: (route) => inject(DataService)
                        .product.getProductVariantsOptions(route.parent?.params.id)
                        .mapSingle(data => data.product),
                },
            },
            ...pageService.getPageTabRoutes('product-detail'),
        ],
    },
    {
        path: 'products/:productId/variants/:id',
        component: PageComponent,
        data: {
            locationId: 'product-variant-detail',
            breadcrumb: { label: marker('breadcrumb.products'), link: ['../', 'products'] },
        },
        children: pageService.getPageTabRoutes('product-variant-detail'),
    },
    {
        path: 'products/:id/options',
        component: ProductOptionsEditorComponent,
        resolve: createResolveData(ProductVariantsResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: {
            breadcrumb: productOptionsEditorBreadcrumb,
        },
    },
    {
        path: 'facets',
        component: PageComponent,
        data: {
            locationId: 'facet-list',
            breadcrumb: marker('breadcrumb.facets'),
        },
        children: pageService.getPageTabRoutes('facet-list'),
    },
    {
        path: 'facets/:id',
        component: PageComponent,
        data: {
            locationId: 'facet-detail',
            breadcrumb: { label: marker('breadcrumb.facets'), link: ['../', 'facets'] },
        },
        children: pageService.getPageTabRoutes('facet-detail'),
    },
    {
        path: 'collections',
        component: PageComponent,
        data: {
            locationId: 'collection-list',
            breadcrumb: marker('breadcrumb.collections'),
        },
        children: pageService.getPageTabRoutes('collection-list'),
    },
    {
        path: 'collections/:id',
        component: PageComponent,
        data: {
            locationId: 'collection-detail',
            breadcrumb: { label: marker('breadcrumb.collections'), link: ['../', 'collections'] },
        },
        children: pageService.getPageTabRoutes('collection-detail'),
    },
    {
        path: 'assets',
        component: PageComponent,
        data: {
            locationId: 'asset-list',
            breadcrumb: marker('breadcrumb.assets'),
        },
        children: pageService.getPageTabRoutes('asset-list'),
    },
    {
        path: 'assets/:id',
        component: PageComponent,
        data: {
            locationId: 'asset-detail',
            breadcrumb: { label: marker('breadcrumb.assets'), link: ['../', 'assets'] },
        },
        children: pageService.getPageTabRoutes('asset-detail'),
    },
];
function productOptionsEditorBreadcrumb(data, params) {
    return data.entity.pipe(map((entity) => [
        {
            label: marker('breadcrumb.products'),
            link: ['../', 'products'],
        },
        {
            label: `${entity.name}`,
            link: ['../', 'products', params.id],
        },
        {
            label: marker('breadcrumb.product-options'),
            link: ['options'],
        },
    ]));
}

class ApplyFacetDialogComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.selectedValues = [];
    }
    ngAfterViewInit() {
        setTimeout(() => this.selector.focus(), 0);
    }
    selectValues() {
        this.resolveWith(this.selectedValues);
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ApplyFacetDialogComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ApplyFacetDialogComponent, isStandalone: false, selector: "vdr-apply-facet-dialog", viewQueries: [{ propertyName: "selector", first: true, predicate: FacetValueSelectorComponent, descendants: true }], ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'catalog.add-facets' | translate }}</ng-template>\n\n<vdr-facet-value-selector\n    (selectedValuesChange)=\"selectedValues = $event\"\n></vdr-facet-value-selector>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"selectValues()\"\n        [disabled]=\"selectedValues.length === 0\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.add-facets' | translate }}\n    </button>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "component", type: i1.FacetValueSelectorComponent, selector: "vdr-facet-value-selector", inputs: ["readonly", "transformControlValueAccessorValue"], outputs: ["selectedValuesChange"] }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ApplyFacetDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-apply-facet-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>{{ 'catalog.add-facets' | translate }}</ng-template>\n\n<vdr-facet-value-selector\n    (selectedValuesChange)=\"selectedValues = $event\"\n></vdr-facet-value-selector>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"selectValues()\"\n        [disabled]=\"selectedValues.length === 0\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.add-facets' | translate }}\n    </button>\n</ng-template>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { selector: [{
                type: ViewChild,
                args: [FacetValueSelectorComponent]
            }] } });

const ASSET_DETAIL_QUERY = gql `
    query AssetDetailQuery($id: ID!) {
        asset(id: $id) {
            ...Asset
            tags {
                ...Tag
            }
        }
    }
    ${ASSET_FRAGMENT}
    ${TAG_FRAGMENT}
`;
class AssetDetailComponent extends TypedBaseDetailComponent {
    constructor(notificationService, dataService, formBuilder) {
        super();
        this.notificationService = notificationService;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.customFields = this.getCustomFieldConfig('Asset');
        this.detailForm = new FormGroup({
            name: new FormControl(''),
            tags: new FormControl([]),
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    onAssetChange(event) {
        this.detailForm.get('name')?.setValue(event.name);
        this.detailForm.get('tags')?.setValue(event.tags);
        this.detailForm.markAsDirty();
    }
    save() {
        this.dataService.product
            .updateAsset({
            id: this.id,
            name: this.detailForm.value.name,
            tags: this.detailForm.value.tags,
            customFields: this.detailForm.value.customFields,
        })
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-update-success'), { entity: 'Asset' });
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Asset',
            });
        });
    }
    setFormValues(entity, languageCode) {
        this.detailForm.get('name')?.setValue(entity.name);
        this.detailForm.get('tags')?.setValue(entity.tags.map(t => t.id));
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AssetDetailComponent, deps: [{ token: i1.NotificationService }, { token: i1.DataService }, { token: i2.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: AssetDetailComponent, isStandalone: false, selector: "vdr-asset-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"asset-detail\" />\n            <button\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateAsset']\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n            <vdr-action-bar-dropdown-menu locationId=\"asset-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-page-block>\n    <vdr-asset-preview\n        [asset]=\"entity$ | async\"\n        [editable]=\"true\"\n        [customFields]=\"customFields\"\n        [customFieldsForm]=\"detailForm.get('customFields')\"\n        (assetChange)=\"onAssetChange($event)\"\n    />\n</vdr-page-block>\n", styles: [":host{display:flex;flex-direction:column;height:100%}\n"], dependencies: [{ kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.AssetPreviewComponent, selector: "vdr-asset-preview", inputs: ["asset", "assets", "editable", "customFields", "customFieldsForm"], outputs: ["assetChange", "editClick"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AssetDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-asset-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"asset-detail\" />\n            <button\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateAsset']\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n            <vdr-action-bar-dropdown-menu locationId=\"asset-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-page-block>\n    <vdr-asset-preview\n        [asset]=\"entity$ | async\"\n        [editable]=\"true\"\n        [customFields]=\"customFields\"\n        [customFieldsForm]=\"detailForm.get('customFields')\"\n        (assetChange)=\"onAssetChange($event)\"\n    />\n</vdr-page-block>\n", styles: [":host{display:flex;flex-direction:column;height:100%}\n"] }]
        }], ctorParameters: () => [{ type: i1.NotificationService }, { type: i1.DataService }, { type: i2.UntypedFormBuilder }] });

class AssetListComponent extends BaseListComponent {
    constructor(notificationService, modalService, dataService, router, route) {
        super(router, route);
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.dataService = dataService;
        this.searchTerm$ = new BehaviorSubject(undefined);
        this.filterByTags$ = new BehaviorSubject(undefined);
        this.uploading = false;
        super.setQueryFn((...args) => this.dataService.product.getAssetList(...args).refetchOnChannelChange(), data => data.assets, (skip, take) => {
            const searchTerm = this.searchTerm$.value;
            const tags = this.filterByTags$.value?.map(t => t.value);
            return {
                options: {
                    skip,
                    take,
                    ...(searchTerm
                        ? {
                            filter: {
                                name: { contains: searchTerm },
                            },
                        }
                        : {}),
                    sort: {
                        createdAt: SortOrder.DESC,
                    },
                    tags,
                    tagsOperator: LogicalOperator.AND,
                },
            };
        }, { take: 25, skip: 0 });
    }
    ngOnInit() {
        super.ngOnInit();
        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })));
        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());
        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());
        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);
    }
    filesSelected(files) {
        if (files.length) {
            this.uploading = true;
            this.dataService.product
                .createAssets(files)
                .pipe(finalize(() => (this.uploading = false)))
                .subscribe(({ createAssets }) => {
                let successCount = 0;
                for (const result of createAssets) {
                    switch (result.__typename) {
                        case 'Asset':
                            successCount++;
                            break;
                        case 'MimeTypeError':
                            this.notificationService.error(result.message);
                            break;
                    }
                }
                if (0 < successCount) {
                    super.refresh();
                    this.notificationService.success(marker('asset.notify-create-assets-success'), {
                        count: successCount,
                    });
                }
            });
        }
    }
    deleteAssets(assets) {
        this.showModalAndDelete(assets.map(a => a.id))
            .pipe(switchMap(response => {
            if (response.result === DeletionResult.DELETED) {
                return [true];
            }
            else {
                return this.showModalAndDelete(assets.map(a => a.id), response.message || '').pipe(map(r => r.result === DeletionResult.DELETED));
            }
        }))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'Assets',
            });
            this.refresh();
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'Assets',
            });
        });
    }
    showModalAndDelete(assetIds, message) {
        return this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-assets'),
            translationVars: {
                count: assetIds.length,
            },
            body: message,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)), map(res => res.deleteAssets));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AssetListComponent, deps: [{ token: i1.NotificationService }, { token: i1.ModalService }, { token: i1.DataService }, { token: i1$1.Router }, { token: i1$1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: AssetListComponent, isStandalone: false, selector: "vdr-asset-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <div class=\"my-2\">\n        <vdr-asset-search-input\n            [tags]=\"allTags$ | async\"\n            (searchTermChange)=\"searchTerm$.next($event)\"\n            (tagsChange)=\"filterByTags$.next($event)\"\n        >\n            <vdr-asset-file-input\n                (selectFiles)=\"filesSelected($event)\"\n                [uploading]=\"uploading\"\n                dropZoneTarget=\".content-area\"\n            ></vdr-asset-file-input>\n        </vdr-asset-search-input>\n    </div>\n    <vdr-asset-gallery\n        [assets]=\"(items$ | async)! | paginate : (paginationConfig$ | async) || {}\"\n        [multiSelect]=\"true\"\n        [canDelete]=\"['DeleteCatalog', 'DeleteAsset'] | hasPermission\"\n        (deleteAssets)=\"deleteAssets($event)\"\n    ></vdr-asset-gallery>\n\n    <div class=\"paging-controls\">\n        <vdr-items-per-page-controls\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n        ></vdr-items-per-page-controls>\n\n        <vdr-pagination-controls\n            [currentPage]=\"currentPage$ | async\"\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            [totalItems]=\"totalItems$ | async\"\n            (pageChange)=\"setPageNumber($event)\"\n        ></vdr-pagination-controls>\n    </div>\n</vdr-page-block>\n", styles: [":host{display:flex;flex-direction:column;height:100%}vdr-asset-gallery{flex:1}.paging-controls{padding-top:6px;border-top:1px solid var(--color-component-border-100);display:flex;justify-content:space-between}.search-input{margin-top:6px;min-width:300px}\n"], dependencies: [{ kind: "component", type: i1.AssetSearchInputComponent, selector: "vdr-asset-search-input", inputs: ["tags"], outputs: ["searchTermChange", "tagsChange"] }, { kind: "component", type: i1.ItemsPerPageControlsComponent, selector: "vdr-items-per-page-controls", inputs: ["itemsPerPage"], outputs: ["itemsPerPageChange"] }, { kind: "component", type: i1.PaginationControlsComponent, selector: "vdr-pagination-controls", inputs: ["id", "currentPage", "itemsPerPage", "totalItems"], outputs: ["pageChange"] }, { kind: "component", type: i1.AssetFileInputComponent, selector: "vdr-asset-file-input", inputs: ["dropZoneTarget", "uploading"], outputs: ["selectFiles"] }, { kind: "component", type: i1.AssetGalleryComponent, selector: "vdr-asset-gallery", inputs: ["assets", "multiSelect", "canDelete"], outputs: ["selectionChange", "deleteAssets", "editAssetClick"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5$2.PaginatePipe, name: "paginate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AssetListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-asset-list', standalone: false, template: "<vdr-page-block>\n    <div class=\"my-2\">\n        <vdr-asset-search-input\n            [tags]=\"allTags$ | async\"\n            (searchTermChange)=\"searchTerm$.next($event)\"\n            (tagsChange)=\"filterByTags$.next($event)\"\n        >\n            <vdr-asset-file-input\n                (selectFiles)=\"filesSelected($event)\"\n                [uploading]=\"uploading\"\n                dropZoneTarget=\".content-area\"\n            ></vdr-asset-file-input>\n        </vdr-asset-search-input>\n    </div>\n    <vdr-asset-gallery\n        [assets]=\"(items$ | async)! | paginate : (paginationConfig$ | async) || {}\"\n        [multiSelect]=\"true\"\n        [canDelete]=\"['DeleteCatalog', 'DeleteAsset'] | hasPermission\"\n        (deleteAssets)=\"deleteAssets($event)\"\n    ></vdr-asset-gallery>\n\n    <div class=\"paging-controls\">\n        <vdr-items-per-page-controls\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n        ></vdr-items-per-page-controls>\n\n        <vdr-pagination-controls\n            [currentPage]=\"currentPage$ | async\"\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            [totalItems]=\"totalItems$ | async\"\n            (pageChange)=\"setPageNumber($event)\"\n        ></vdr-pagination-controls>\n    </div>\n</vdr-page-block>\n", styles: [":host{display:flex;flex-direction:column;height:100%}vdr-asset-gallery{flex:1}.paging-controls{padding-top:6px;border-top:1px solid var(--color-component-border-100);display:flex;justify-content:space-between}.search-input{margin-top:6px;min-width:300px}\n"] }]
        }], ctorParameters: () => [{ type: i1.NotificationService }, { type: i1.ModalService }, { type: i1.DataService }, { type: i1$1.Router }, { type: i1$1.ActivatedRoute }] });

class AssignProductsToChannelDialogComponent {
    get isProductVariantMode() {
        return this.productVariantIds != null;
    }
    constructor(dataService, notificationService) {
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.priceFactorControl = new UntypedFormControl(1);
        this.selectedChannelIdControl = new UntypedFormControl();
    }
    ngOnInit() {
        const activeChannelId$ = this.dataService.client
            .userStatus()
            .mapSingle(({ userStatus }) => userStatus.activeChannelId);
        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);
        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.currentChannel = channels.items.find(c => c.id === activeChannelId);
            this.availableChannels = channels.items;
        });
        this.selectedChannelIdControl.valueChanges.subscribe(ids => {
            this.selectChannel(ids);
        });
        this.variantsPreview$ = combineLatest(from(this.getTopVariants(10)), this.priceFactorControl.valueChanges.pipe(startWith(1))).pipe(map(([variants, factor]) => variants.map(v => ({
            id: v.id,
            name: v.name,
            price: v.price,
            pricePreview: v.price * +factor,
        }))));
    }
    selectChannel(channelIds) {
        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);
    }
    assign() {
        const selectedChannel = this.selectedChannel;
        if (selectedChannel) {
            if (!this.isProductVariantMode) {
                this.dataService.product
                    .assignProductsToChannel({
                    channelId: selectedChannel.id,
                    productIds: this.productIds,
                    priceFactor: +this.priceFactorControl.value,
                })
                    .subscribe(() => {
                    this.notificationService.success(marker('catalog.assign-product-to-channel-success'), {
                        channel: selectedChannel.code,
                        count: this.productIds.length,
                    });
                    this.resolveWith(true);
                });
            }
            else if (this.productVariantIds) {
                this.dataService.product
                    .assignVariantsToChannel({
                    channelId: selectedChannel.id,
                    productVariantIds: this.productVariantIds,
                    priceFactor: +this.priceFactorControl.value,
                })
                    .subscribe(() => {
                    this.notificationService.success(marker('catalog.assign-variant-to-channel-success'), {
                        channel: selectedChannel.code,
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        count: this.productVariantIds.length,
                    });
                    this.resolveWith(true);
                });
            }
        }
    }
    cancel() {
        this.resolveWith();
    }
    async getTopVariants(take) {
        return (await lastValueFrom(this.dataService.product.getProductVariants({
            filterOperator: LogicalOperator.OR,
            filter: {
                productId: { in: this.productIds },
                id: { in: this.productVariantIds },
            },
            take,
        }).single$)).productVariants.items;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AssignProductsToChannelDialogComponent, deps: [{ token: i1.DataService }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: AssignProductsToChannelDialogComponent, isStandalone: false, selector: "vdr-assign-products-to-channel-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    <ng-container *ngIf=\"isProductVariantMode; else productModeTitle\">{{\n        'catalog.assign-variants-to-channel' | translate\n    }}</ng-container>\n    <ng-template #productModeTitle>{{ 'catalog.assign-products-to-channel' | translate }}</ng-template>\n</ng-template>\n\n<div class=\"flex\">\n    <clr-input-container>\n        <label>{{ 'common.channel' | translate }}</label>\n        <vdr-channel-assignment-control\n            clrInput\n            [multiple]=\"false\"\n            [includeDefaultChannel]=\"false\"\n            [disableChannelIds]=\"currentChannelIds\"\n            [formControl]=\"selectedChannelIdControl\"\n        ></vdr-channel-assignment-control>\n    </clr-input-container>\n    <div class=\"flex-spacer\"></div>\n    <clr-input-container>\n        <label>{{ 'catalog.price-conversion-factor' | translate }}</label>\n        <input clrInput type=\"number\" min=\"0\" max=\"99999\" [formControl]=\"priceFactorControl\" />\n    </clr-input-container>\n</div>\n\n<div class=\"channel-price-preview\">\n    <label class=\"clr-control-label\">{{ 'catalog.channel-price-preview' | translate }}</label>\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>{{ 'common.name' | translate }}</th>\n                <th>\n                    {{\n                        'catalog.price-in-channel'\n                            | translate: { channel: currentChannel?.code | channelCodeToLabel | translate }\n                    }}\n                </th>\n                <th>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n                        {{ 'catalog.price-in-channel' | translate: { channel: selectedChannel?.code } }}\n                    </ng-template>\n                    <ng-template #noSelection>\n                        {{ 'catalog.no-channel-selected' | translate }}\n                    </ng-template>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let row of variantsPreview$ | async\">\n                <td>{{ row.name }}</td>\n                <td>{{ row.price | localeCurrency: currentChannel?.defaultCurrencyCode }}</td>\n                <td>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noChannelSelected\">\n                        {{ row.pricePreview | localeCurrency: selectedChannel?.defaultCurrencyCode }}\n                    </ng-template>\n                    <ng-template #noChannelSelected> - </ng-template>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\n        </ng-template>\n        <ng-template #noSelection>\n            {{ 'catalog.no-channel-selected' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n", styles: ["vdr-channel-assignment-control{min-width:200px}.channel-price-preview{margin-top:24px}.channel-price-preview table.table{margin-top:6px}\n"], dependencies: [{ kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3.ClrInput, selector: "[clrInput]" }, { kind: "component", type: i3.ClrInputContainer, selector: "clr-input-container" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.ChannelAssignmentControlComponent, selector: "vdr-channel-assignment-control", inputs: ["multiple", "includeDefaultChannel", "disableChannelIds"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.ChannelLabelPipe, name: "channelCodeToLabel" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: AssignProductsToChannelDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-assign-products-to-channel-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    <ng-container *ngIf=\"isProductVariantMode; else productModeTitle\">{{\n        'catalog.assign-variants-to-channel' | translate\n    }}</ng-container>\n    <ng-template #productModeTitle>{{ 'catalog.assign-products-to-channel' | translate }}</ng-template>\n</ng-template>\n\n<div class=\"flex\">\n    <clr-input-container>\n        <label>{{ 'common.channel' | translate }}</label>\n        <vdr-channel-assignment-control\n            clrInput\n            [multiple]=\"false\"\n            [includeDefaultChannel]=\"false\"\n            [disableChannelIds]=\"currentChannelIds\"\n            [formControl]=\"selectedChannelIdControl\"\n        ></vdr-channel-assignment-control>\n    </clr-input-container>\n    <div class=\"flex-spacer\"></div>\n    <clr-input-container>\n        <label>{{ 'catalog.price-conversion-factor' | translate }}</label>\n        <input clrInput type=\"number\" min=\"0\" max=\"99999\" [formControl]=\"priceFactorControl\" />\n    </clr-input-container>\n</div>\n\n<div class=\"channel-price-preview\">\n    <label class=\"clr-control-label\">{{ 'catalog.channel-price-preview' | translate }}</label>\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>{{ 'common.name' | translate }}</th>\n                <th>\n                    {{\n                        'catalog.price-in-channel'\n                            | translate: { channel: currentChannel?.code | channelCodeToLabel | translate }\n                    }}\n                </th>\n                <th>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n                        {{ 'catalog.price-in-channel' | translate: { channel: selectedChannel?.code } }}\n                    </ng-template>\n                    <ng-template #noSelection>\n                        {{ 'catalog.no-channel-selected' | translate }}\n                    </ng-template>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let row of variantsPreview$ | async\">\n                <td>{{ row.name }}</td>\n                <td>{{ row.price | localeCurrency: currentChannel?.defaultCurrencyCode }}</td>\n                <td>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noChannelSelected\">\n                        {{ row.pricePreview | localeCurrency: selectedChannel?.defaultCurrencyCode }}\n                    </ng-template>\n                    <ng-template #noChannelSelected> - </ng-template>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\n        </ng-template>\n        <ng-template #noSelection>\n            {{ 'catalog.no-channel-selected' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n", styles: ["vdr-channel-assignment-control{min-width:200px}.channel-price-preview{margin-top:24px}.channel-price-preview table.table{margin-top:6px}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1.NotificationService }] });

const GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS = gql `
    query GetProductsWithFacetValuesByIds($ids: [String!]!) {
        products(options: { filter: { id: { in: $ids } } }) {
            items {
                id
                name
                facetValues {
                    id
                    name
                    code
                    facet {
                        id
                        name
                        code
                    }
                }
            }
        }
    }
`;
const GET_VARIANTS_WITH_FACET_VALUES_BY_IDS = gql `
    query GetVariantsWithFacetValuesByIds($ids: [String!]!) {
        productVariants(options: { filter: { id: { in: $ids } } }) {
            items {
                id
                name
                sku
                facetValues {
                    id
                    name
                    code
                    facet {
                        id
                        name
                        code
                    }
                }
            }
        }
    }
`;
const UPDATE_PRODUCTS_BULK = gql `
    mutation UpdateProductsBulk($input: [UpdateProductInput!]!) {
        updateProducts(input: $input) {
            id
            name
            facetValues {
                id
                name
                code
            }
        }
    }
`;
const UPDATE_VARIANTS_BULK = gql `
    mutation UpdateVariantsBulk($input: [UpdateProductVariantInput!]!) {
        updateProductVariants(input: $input) {
            id
            name
            facetValues {
                id
                name
                code
            }
        }
    }
`;

class BulkAddFacetValuesDialogComponent {
    constructor(dataService, changeDetectorRef) {
        this.dataService = dataService;
        this.changeDetectorRef = changeDetectorRef;
        /* provided by call to ModalService */
        this.mode = 'product';
        this.state = 'loading';
        this.selectedValues = [];
        this.items = [];
        this.facetValuesRemoved = false;
    }
    ngOnInit() {
        const fetchData$ = this.mode === 'product'
            ? this.dataService
                .query(GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS, {
                ids: this.ids ?? [],
            })
                .mapSingle(({ products }) => products.items.map(p => ({ ...p, facetValues: [...p.facetValues] })))
            : this.dataService
                .query(GET_VARIANTS_WITH_FACET_VALUES_BY_IDS, {
                ids: this.ids ?? [],
            })
                .mapSingle(({ productVariants }) => productVariants.items.map(p => ({ ...p, facetValues: [...p.facetValues] })));
        this.subscription = fetchData$.subscribe({
            next: items => {
                this.items = items;
                this.state = 'ready';
                this.changeDetectorRef.markForCheck();
            },
        });
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
    cancel() {
        this.resolveWith();
    }
    removeFacetValue(item, facetValueId) {
        item.facetValues = item.facetValues.filter(fv => fv.id !== facetValueId);
        this.facetValuesRemoved = true;
    }
    addFacetValues() {
        const selectedFacetValueIds = this.selectedValues.map(sv => sv.id);
        this.state = 'saving';
        const save$ = this.mode === 'product'
            ? this.dataService.mutate(UPDATE_PRODUCTS_BULK, {
                input: this.items?.map(product => ({
                    id: product.id,
                    facetValueIds: unique([
                        ...product.facetValues.map(fv => fv.id),
                        ...selectedFacetValueIds,
                    ]),
                })),
            })
            : this.dataService.mutate(UPDATE_VARIANTS_BULK, {
                input: this.items?.map(product => ({
                    id: product.id,
                    facetValueIds: unique([
                        ...product.facetValues.map(fv => fv.id),
                        ...selectedFacetValueIds,
                    ]),
                })),
            });
        return save$.subscribe(result => {
            this.resolveWith(this.selectedValues);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: BulkAddFacetValuesDialogComponent, deps: [{ token: i1.DataService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: BulkAddFacetValuesDialogComponent, isStandalone: false, selector: "vdr-bulk-add-facet-values-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.edit-facet-values' | translate }}\n</ng-template>\n\n<div class=\"flex\">\n    <div class=\"flex center\">\n        <div class=\"mr2\">\n            {{ 'catalog.add-facet-value' | translate }}\n        </div>\n        <vdr-facet-value-selector\n            (selectedValuesChange)=\"selectedValues = $event\"\n        ></vdr-facet-value-selector>\n    </div>\n</div>\n\n<table class=\"table\" *ngIf=\"state !== 'loading'; else placeholder\">\n    <tbody>\n        <tr *ngFor=\"let item of items\">\n            <td class=\"left align-middle\">\n                <div>{{ item.name }}</div>\n                <div *ngIf=\"item.sku\" class=\"sku\">{{ item.sku }}</div>\n            </td>\n            <td class=\"left\">\n                <vdr-facet-value-chip\n                    *ngFor=\"let facetValue of item.facetValues\"\n                    [facetValue]=\"facetValue\"\n                    (remove)=\"removeFacetValue(item, facetValue.id)\"\n                ></vdr-facet-value-chip>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<ng-template #placeholder>\n    <div class=\"loading\">\n    <clr-spinner></clr-spinner>\n    </div>\n</ng-template>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"addFacetValues()\"\n        [disabled]=\"selectedValues.length === 0 && facetValuesRemoved === false\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.update' | translate }}\n    </button>\n</ng-template>\n", styles: [".loading{min-height:25vh;display:flex;justify-content:center;align-items:center}.sku{color:var(--color-text-300)}\n"], dependencies: [{ kind: "component", type: i3.ClrSpinner, selector: "clr-spinner", inputs: ["clrInline", "clrInverse", "clrSmall", "clrMedium"] }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.FacetValueSelectorComponent, selector: "vdr-facet-value-selector", inputs: ["readonly", "transformControlValueAccessorValue"], outputs: ["selectedValuesChange"] }, { kind: "component", type: i1.FacetValueChipComponent, selector: "vdr-facet-value-chip", inputs: ["facetValue", "removable", "displayFacetName"], outputs: ["remove"] }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: BulkAddFacetValuesDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-bulk-add-facet-values-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.edit-facet-values' | translate }}\n</ng-template>\n\n<div class=\"flex\">\n    <div class=\"flex center\">\n        <div class=\"mr2\">\n            {{ 'catalog.add-facet-value' | translate }}\n        </div>\n        <vdr-facet-value-selector\n            (selectedValuesChange)=\"selectedValues = $event\"\n        ></vdr-facet-value-selector>\n    </div>\n</div>\n\n<table class=\"table\" *ngIf=\"state !== 'loading'; else placeholder\">\n    <tbody>\n        <tr *ngFor=\"let item of items\">\n            <td class=\"left align-middle\">\n                <div>{{ item.name }}</div>\n                <div *ngIf=\"item.sku\" class=\"sku\">{{ item.sku }}</div>\n            </td>\n            <td class=\"left\">\n                <vdr-facet-value-chip\n                    *ngFor=\"let facetValue of item.facetValues\"\n                    [facetValue]=\"facetValue\"\n                    (remove)=\"removeFacetValue(item, facetValue.id)\"\n                ></vdr-facet-value-chip>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<ng-template #placeholder>\n    <div class=\"loading\">\n    <clr-spinner></clr-spinner>\n    </div>\n</ng-template>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"addFacetValues()\"\n        [disabled]=\"selectedValues.length === 0 && facetValuesRemoved === false\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.update' | translate }}\n    </button>\n</ng-template>\n", styles: [".loading{min-height:25vh;display:flex;justify-content:center;align-items:center}.sku{color:var(--color-text-300)}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i0.ChangeDetectorRef }] });

class CollectionContentsComponent {
    constructor(route, router, dataService) {
        this.route = route;
        this.router = router;
        this.dataService = dataService;
        this.previewUpdatedFilters = false;
        this.filterTermControl = new UntypedFormControl('');
        this.isLoading = false;
        this.collectionIdChange$ = new BehaviorSubject('');
        this.parentIdChange$ = new BehaviorSubject('');
        this.filterChanges$ = new BehaviorSubject([]);
        this.inheritFiltersChanges$ = new BehaviorSubject(true);
        this.refresh$ = new BehaviorSubject(true);
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.contentsCurrentPage$ = this.route.queryParamMap.pipe(map(qpm => qpm.get('contentsPage')), map(page => (!page ? 1 : +page)), startWith(1), distinctUntilChanged());
        this.contentsItemsPerPage$ = this.route.queryParamMap.pipe(map(qpm => qpm.get('contentsPerPage')), map(perPage => (!perPage ? 10 : +perPage)), startWith(10), distinctUntilChanged());
        const filterTerm$ = this.filterTermControl.valueChanges.pipe(debounceTime(250), tap(() => this.setContentsPageNumber(1)), startWith(''));
        const filterChanges$ = this.filterChanges$.asObservable().pipe(filter(() => this.previewUpdatedFilters), tap(() => this.setContentsPageNumber(1)), startWith([]));
        const inheritFiltersChanges$ = this.inheritFiltersChanges$.asObservable().pipe(filter(() => this.inheritFilters != null), distinctUntilChanged(), tap(() => this.setContentsPageNumber(1)), startWith(true));
        const fetchUpdate$ = combineLatest(this.collectionIdChange$, this.parentIdChange$, this.contentsCurrentPage$, this.contentsItemsPerPage$, filterTerm$, filterChanges$, inheritFiltersChanges$, this.refresh$);
        const collection$ = fetchUpdate$.pipe(takeUntil(this.destroy$), tap(() => (this.isLoading = true)), debounceTime(50), switchMap(([id, parentId, currentPage, itemsPerPage, filterTerm, filters, inheritFilters]) => {
            const take = itemsPerPage;
            const skip = (currentPage - 1) * itemsPerPage;
            if (filters.length && this.previewUpdatedFilters) {
                const filterClause = filterTerm
                    ? { name: { contains: filterTerm } }
                    : undefined;
                return this.dataService.collection
                    .previewCollectionVariants({
                    parentId,
                    filters,
                    inheritFilters,
                }, {
                    take,
                    skip,
                    filter: filterClause,
                })
                    .mapSingle(data => data.previewCollectionVariants)
                    .pipe(catchError(() => of({ items: [], totalItems: 0 })));
            }
            else if (id) {
                return this.dataService.collection
                    .getCollectionContents(id, take, skip, filterTerm)
                    .mapSingle(data => data.collection?.productVariants);
            }
            else {
                return of(null);
            }
        }), tap(() => (this.isLoading = false)), finalize(() => (this.isLoading = false)));
        this.contents$ = collection$.pipe(map(result => (result ? result.items : [])));
        this.contentsTotalItems$ = collection$.pipe(map(result => (result ? result.totalItems : 0)));
    }
    ngOnChanges(changes) {
        if ('collectionId' in changes) {
            this.collectionIdChange$.next(changes.collectionId.currentValue);
        }
        if ('parentId' in changes) {
            this.parentIdChange$.next(changes.parentId.currentValue);
        }
        if ('inheritFilters' in changes) {
            this.inheritFiltersChanges$.next(changes.inheritFilters.currentValue);
        }
        if ('updatedFilters' in changes) {
            if (this.updatedFilters) {
                this.filterChanges$.next(this.updatedFilters);
            }
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    setContentsPageNumber(page) {
        this.setParam('contentsPage', page);
    }
    setContentsItemsPerPage(perPage) {
        this.setParam('contentsPerPage', perPage);
    }
    refresh() {
        this.refresh$.next(true);
    }
    setParam(key, value) {
        this.router.navigate(['./'], {
            relativeTo: this.route,
            queryParams: {
                [key]: value,
            },
            queryParamsHandling: 'merge',
            replaceUrl: true,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionContentsComponent, deps: [{ token: i1$1.ActivatedRoute }, { token: i1$1.Router }, { token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CollectionContentsComponent, isStandalone: false, selector: "vdr-collection-contents", inputs: { collectionId: "collectionId", parentId: "parentId", inheritFilters: "inheritFilters", updatedFilters: "updatedFilters", previewUpdatedFilters: "previewUpdatedFilters" }, queries: [{ propertyName: "headerTemplate", first: true, predicate: TemplateRef, descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"table-wrapper\">\n    <div class=\"progress loop\" [class.visible]=\"isLoading\"></div>\n    <div class=\"header-title-row\">\n        <ng-container\n            *ngTemplateOutlet=\"headerTemplate; context: { $implicit: contentsTotalItems$ | async }\"\n        ></ng-container>\n    </div>\n    <vdr-data-table-2\n        id=\"collection-contents\"\n        [class.loading]=\"isLoading\"\n        [items]=\"contents$ | async\"\n        [itemsPerPage]=\"contentsItemsPerPage$ | async\"\n        [totalItems]=\"contentsTotalItems$ | async\"\n        [currentPage]=\"contentsCurrentPage$ | async\"\n        (pageChange)=\"setContentsPageNumber($event)\"\n        (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\n    >\n        <vdr-dt2-search\n            [searchTermControl]=\"filterTermControl\"\n            [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n        />\n        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n            <ng-template let-variant=\"item\">\n                {{ variant.id }}\n            </ng-template>\n        </vdr-dt2-column>\n        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n            <ng-template let-variant=\"item\">\n                {{ variant.createdAt | localeDate : 'short' }}\n            </ng-template>\n        </vdr-dt2-column>\n        <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n            <ng-template let-variant=\"item\">\n                {{ variant.updatedAt | localeDate : 'short' }}\n            </ng-template>\n        </vdr-dt2-column>\n        <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\n            <ng-template let-variant=\"item\">\n                <a class=\"button-ghost\" [routerLink]=\"['/catalog/products', variant.productId]\"\n                    ><span>{{ variant.name }}</span\n                    ><clr-icon shape=\"arrow right\"\n                /></a>\n            </ng-template>\n        </vdr-dt2-column>\n        <vdr-dt2-column [heading]=\"'catalog.sku' | translate\" id=\"sku\" [optional]=\"false\">\n            <ng-template let-variant=\"item\">\n                {{ variant.sku }}\n            </ng-template>\n        </vdr-dt2-column>\n    </vdr-data-table-2>\n</div>\n", styles: [":host{display:block}:host ::ng-deep table{margin-top:-1px}vdr-data-table{opacity:1;transition:opacity .3s}vdr-data-table.loading{opacity:.5}.table-wrapper{position:relative}.progress{position:absolute;top:0;left:0;overflow:hidden;height:6px;opacity:0;transition:opacity .1s}.progress.visible{opacity:1}.sku{color:var(--color-text-200)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionContentsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-collection-contents', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<div class=\"table-wrapper\">\n    <div class=\"progress loop\" [class.visible]=\"isLoading\"></div>\n    <div class=\"header-title-row\">\n        <ng-container\n            *ngTemplateOutlet=\"headerTemplate; context: { $implicit: contentsTotalItems$ | async }\"\n        ></ng-container>\n    </div>\n    <vdr-data-table-2\n        id=\"collection-contents\"\n        [class.loading]=\"isLoading\"\n        [items]=\"contents$ | async\"\n        [itemsPerPage]=\"contentsItemsPerPage$ | async\"\n        [totalItems]=\"contentsTotalItems$ | async\"\n        [currentPage]=\"contentsCurrentPage$ | async\"\n        (pageChange)=\"setContentsPageNumber($event)\"\n        (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\n    >\n        <vdr-dt2-search\n            [searchTermControl]=\"filterTermControl\"\n            [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n        />\n        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n            <ng-template let-variant=\"item\">\n                {{ variant.id }}\n            </ng-template>\n        </vdr-dt2-column>\n        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\n            <ng-template let-variant=\"item\">\n                {{ variant.createdAt | localeDate : 'short' }}\n            </ng-template>\n        </vdr-dt2-column>\n        <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\n            <ng-template let-variant=\"item\">\n                {{ variant.updatedAt | localeDate : 'short' }}\n            </ng-template>\n        </vdr-dt2-column>\n        <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\n            <ng-template let-variant=\"item\">\n                <a class=\"button-ghost\" [routerLink]=\"['/catalog/products', variant.productId]\"\n                    ><span>{{ variant.name }}</span\n                    ><clr-icon shape=\"arrow right\"\n                /></a>\n            </ng-template>\n        </vdr-dt2-column>\n        <vdr-dt2-column [heading]=\"'catalog.sku' | translate\" id=\"sku\" [optional]=\"false\">\n            <ng-template let-variant=\"item\">\n                {{ variant.sku }}\n            </ng-template>\n        </vdr-dt2-column>\n    </vdr-data-table-2>\n</div>\n", styles: [":host{display:block}:host ::ng-deep table{margin-top:-1px}vdr-data-table{opacity:1;transition:opacity .3s}vdr-data-table.loading{opacity:.5}.table-wrapper{position:relative}.progress{position:absolute;top:0;left:0;overflow:hidden;height:6px;opacity:0;transition:opacity .1s}.progress.visible{opacity:1}.sku{color:var(--color-text-200)}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.ActivatedRoute }, { type: i1$1.Router }, { type: i1.DataService }], propDecorators: { collectionId: [{
                type: Input
            }], parentId: [{
                type: Input
            }], inheritFilters: [{
                type: Input
            }], updatedFilters: [{
                type: Input
            }], previewUpdatedFilters: [{
                type: Input
            }], headerTemplate: [{
                type: ContentChild,
                args: [TemplateRef, { static: true }]
            }] } });

class CollectionDataTableComponent extends DataTable2Component {
    constructor(changeDetectorRef, dataService) {
        super(changeDetectorRef, dataService);
        this.changeDetectorRef = changeDetectorRef;
        this.dataService = dataService;
        this.changeOrder = new EventEmitter();
        this.dragRefs = [];
        this.absoluteIndex = {};
        this.sortPredicate = (index, item) => {
            const itemAtIndex = this.dropList.getSortedItems()[index];
            return itemAtIndex?.data.collection.parentId === item.data.collection.parentId;
        };
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes.subCollections || changes.items) {
            const allCollections = [];
            for (const collection of this.items ?? []) {
                allCollections.push(collection);
                const subCollectionMatches = this.getSubcollections(collection);
                allCollections.push(...subCollectionMatches.flat());
            }
            allCollections.forEach((collection, index) => (this.absoluteIndex[collection.id] = index));
        }
    }
    ngAfterViewInit() {
        this.collectionRowList.changes.subscribe((val) => {
            this.dropList.getSortedItems().forEach(item => this.dropList.removeItem(item));
            for (const ref of val.toArray()) {
                ref.dropContainer = this.dropList;
                ref._dragRef._withDropContainer(this.dropList._dropListRef);
                this.dropList.addItem(ref);
            }
        });
    }
    getSubcollections(item) {
        return this.subCollections?.filter(c => c.parentId === item.id) ?? [];
    }
    onDrop(event) {
        const isTopLevel = event.item.data.collection.breadcrumbs.length === 2;
        const pageIndexOffset = isTopLevel ? (this.currentPage - 1) * this.itemsPerPage : 0;
        const parentId = event.item.data.collection.parentId;
        const parentIndex = this.items.findIndex(i => i.id === parentId);
        const adjustedIndex = pageIndexOffset + event.currentIndex - parentIndex - 1;
        this.changeOrder.emit({
            collectionId: event.item.data.collection.id,
            index: adjustedIndex,
            parentId: event.item.data.collection.parentId,
        });
        if (isTopLevel) {
            this.items = [...this.items];
            this.items.splice(event.previousIndex, 1);
            this.items.splice(event.currentIndex, 0, event.item.data.collection);
        }
        else {
            const parent = this.items.find(i => i.id === parentId);
            if (parent) {
                const subCollections = this.getSubcollections(parent);
                const adjustedPreviousIndex = pageIndexOffset + event.previousIndex - parentIndex - 1;
                subCollections.splice(adjustedPreviousIndex, 1);
                subCollections.splice(event.currentIndex, 0, event.item.data.collection);
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionDataTableComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CollectionDataTableComponent, isStandalone: false, selector: "vdr-collection-data-table", inputs: { subCollections: "subCollections" }, outputs: { changeOrder: "changeOrder" }, viewQueries: [{ propertyName: "dropList", first: true, predicate: CdkDropList, descendants: true, static: true }, { propertyName: "collectionRowList", predicate: ["collectionRow"], descendants: true, read: CdkDrag }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<vdr-data-table-filter-presets\n    *ngIf=\"filters\"\n    [filters]=\"filters\"\n    [dataTableId]=\"id\"\n></vdr-data-table-filter-presets>\n<div class=\"table-wrapper\">\n    <div class=\"bulk-actions\">\n        <ng-content select=\"vdr-bulk-action-menu\"></ng-content>\n    </div>\n    <table class=\"\" [class.no-select]=\"disableSelect\">\n        <thead [class.items-selected]=\"selectionManager?.selection.length\">\n            <tr class=\"heading-row\">\n                <th *ngIf=\"selectionManager\" class=\"selection-col\">\n                    <div class=\"flex\">\n                        <div class=\"drag-handle-spacer\"></div>\n                        <input\n                            type=\"checkbox\"\n                            clrCheckbox\n                            [checked]=\"selectionManager?.areAllCurrentItemsSelected()\"\n                            (change)=\"onToggleAllClick()\"\n                        />\n                    </div>\n                </th>\n                <th\n                    *ngFor=\"let column of visibleSortedColumns; last as isLast\"\n                    [class.expand]=\"column.expand\"\n                >\n                    <div class=\"cell-content\" [ngClass]=\"column.align\">\n                        <vdr-ui-extension-point\n                            [locationId]=\"id\"\n                            [metadata]=\"column.id\"\n                            api=\"dataTable\"\n                            [topPx]=\"-6\"\n                            [leftPx]=\"-24\"\n                            display=\"block\"\n                        >\n                            <span>{{ column.heading }}</span>\n                        </vdr-ui-extension-point>\n                        <div *ngIf=\"column.sort as sort\" class=\"sort-toggle\">\n                            <button (click)=\"sort.toggleSortOrder()\" [class.active]=\"sort.sortOrder\">\n                                <clr-icon *ngIf=\"!sort.sortOrder\" shape=\"two-way-arrows left\"></clr-icon>\n                                <clr-icon *ngIf=\"sort.sortOrder === 'ASC'\" shape=\"arrow up\"></clr-icon>\n                                <clr-icon *ngIf=\"sort.sortOrder === 'DESC'\" shape=\"arrow down\"></clr-icon>\n                            </button>\n                            <div class=\"sort-label\" *ngIf=\"sort.sortOrder\">{{ sort.sortOrder }}</div>\n                        </div>\n                    </div>\n                </th>\n                <th>\n                    <div class=\"column-picker\">\n                        <vdr-data-table-colum-picker\n                            [uiLanguage]=\"uiLanguage$ | async\"\n                            [columns]=\"sortedColumns\"\n                            (reorder)=\"onColumnReorder($event)\"\n                            (resetColumns)=\"onColumnsReset()\"\n                        ></vdr-data-table-colum-picker>\n                    </div>\n                </th>\n            </tr>\n            <tr *ngIf=\"searchComponent || customSearchTemplate || filters?.length\">\n                <th\n                    [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\"\n                    class=\"filter-row\"\n                    [class.active]=\"showSearchFilterRow\"\n                >\n                    <button\n                        class=\"button-ghost toggle-search-filter-row\"\n                        [class.active]=\"showSearchFilterRow\"\n                        (click)=\"toggleSearchFilterRow()\"\n                        [title]=\"'common.search-and-filter-list' | translate\"\n                    >\n                        <clr-icon shape=\"search\"></clr-icon>\n                    </button>\n                    <div class=\"filter-row-wrapper\" [class.hidden]=\"!showSearchFilterRow\">\n                        <ng-container *ngTemplateOutlet=\"searchComponent?.template\"></ng-container>\n                        <ng-container *ngTemplateOutlet=\"customSearchTemplate\"></ng-container>\n                        <ng-container *ngIf=\"filters\">\n                            <div class=\"filters\">\n                                <vdr-data-table-filters\n                                    *ngFor=\"let activeFilter of filters.activeFilters\"\n                                    [filterWithValue]=\"activeFilter\"\n                                    [filters]=\"filters\"\n                                    class=\"mt-1\"\n                                ></vdr-data-table-filters>\n                                <vdr-data-table-filters\n                                    *ngIf=\"filters.length\"\n                                    [filters]=\"filters\"\n                                    class=\"mt-1\"\n                                ></vdr-data-table-filters>\n                                <vdr-add-filter-preset-button\n                                    [filters]=\"filters\"\n                                    [dataTableId]=\"id\"\n                                ></vdr-add-filter-preset-button>\n                            </div>\n                        </ng-container>\n                    </div>\n                </th>\n            </tr>\n        </thead>\n        <tbody\n            cdkDropList\n            cdkDropListLockAxis=\"y\"\n            (cdkDropListDropped)=\"onDrop($event)\"\n            [cdkDropListSortPredicate]=\"sortPredicate\"\n        >\n            <ng-container\n                *ngFor=\"\n                let item of items\n                    | paginate\n                        : {\n                              itemsPerPage: itemsPerPage,\n                              currentPage: currentPage,\n                              totalItems: totalItems,\n                              id: id,\n                          };\n                index as i;\n                trackBy: trackByFn.bind(this)\n            \"\n            >\n                <ng-container\n                    [ngTemplateOutlet]=\"collectionRowTmp\"\n                    [ngTemplateOutletContext]=\"{ item: item, i: i, depth: 0 }\"\n                ></ng-container>\n            </ng-container>\n            <ng-container>\n                <tr *ngIf=\"!items?.length\">\n                    <td [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\">\n                        <vdr-empty-placeholder [emptyStateLabel]=\"emptyStateLabel\"></vdr-empty-placeholder>\n                    </td>\n                </tr>\n            </ng-container>\n        </tbody>\n    </table>\n</div>\n<div class=\"table-footer\">\n    <vdr-items-per-page-controls\n        *ngIf=\"totalItems\"\n        [itemsPerPage]=\"itemsPerPage\"\n        (itemsPerPageChange)=\"itemsPerPageChange.emit($event)\"\n    ></vdr-items-per-page-controls>\n    <div *ngIf=\"totalItems\" class=\"p5 total-items-count\">\n        {{ 'common.total-items' | translate : { currentStart, currentEnd, totalItems } }}\n    </div>\n\n    <vdr-pagination-controls\n        *ngIf=\"totalItems\"\n        [id]=\"id\"\n        [currentPage]=\"currentPage\"\n        [itemsPerPage]=\"itemsPerPage\"\n        [totalItems]=\"totalItems\"\n        (pageChange)=\"pageChange.emit($event)\"\n    ></vdr-pagination-controls>\n</div>\n\n<ng-template #collectionRowTmp let-item=\"item\" let-depth=\"depth\">\n    <tr #collectionRow cdkDrag [cdkDragData]=\"{ depth: depth, collection: item }\" cdkDragBoundary=\"tbody\">\n        <td\n            *ngIf=\"selectionManager\"\n            [class.active]=\"activeIndex === absoluteIndex[item.id]\"\n            class=\"selection-col\"\n        >\n            <div class=\"flex\">\n                <div class=\"drag-handle\" cdkDragHandle [title]=\"'catalog.reorder-collection' | translate\">\n                    <clr-icon shape=\"drag-handle\"></clr-icon>\n                </div>\n                <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    [checked]=\"selectionManager?.isSelected(item)\"\n                    (click)=\"onRowClick(item, $event)\"\n                />\n            </div>\n        </td>\n        <td\n            *ngFor=\"let column of visibleSortedColumns\"\n            [class.active]=\"activeIndex === absoluteIndex[item.id]\"\n        >\n            <div class=\"cell-content\" [ngClass]=\"column.align\">\n                <ng-container\n                    *ngIf=\"customComponents.get(column.id) as componentConfig; else defaultComponent\"\n                >\n                    <ng-container\n                        *ngComponentOutlet=\"\n                            componentConfig.config.component;\n                            inputs: { rowItem: item };\n                            injector: componentConfig.injector\n                        \"\n                    ></ng-container>\n                </ng-container>\n                <ng-template #defaultComponent>\n                    <ng-container\n                        *ngTemplateOutlet=\"column.template; context: { item: item, depth: depth }\"\n                    ></ng-container>\n                </ng-template>\n            </div>\n        </td>\n        <td [class.active]=\"activeIndex === absoluteIndex[item.id]\"><!-- column select --></td>\n    </tr>\n    <ng-container *ngFor=\"let subCollection of getSubcollections(item)\">\n        <ng-container\n            *ngTemplateOutlet=\"collectionRowTmp; context: { item: subCollection, depth: depth + 1 }\"\n        ></ng-container>\n    </ng-container>\n</ng-template>\n", styles: [":host{display:block;max-width:100%;position:relative;margin-bottom:calc(var(--space-unit) * 4);container-type:inline-size}th{border-bottom:1px solid var(--color-table-header-border);color:var(--color-weight-700);font-size:var(--font-size-xs);font-weight:600;text-transform:uppercase;position:relative;white-space:nowrap;background-color:transparent}th,td{padding:calc(var(--space-unit) * 1.5) calc(var(--space-unit) * 1);color:var(--color-text-100)}tr td:first-of-type,tr th:first-of-type{text-align:center}@media screen and (min-width: 992px){tr td:first-of-type,tr th:first-of-type{padding-inline-start:var(--surface-margin-left);text-align:start}}th:last-of-type,td:last-of-type{border-inline-end:1px solid var(--color-table-header-border)}tr:first-of-type th:last-of-type{border-image:linear-gradient(0deg,var(--color-table-header-border),transparent) 1}tr:last-of-type td:last-of-type{border-image:linear-gradient(180deg,var(--color-table-header-border),transparent) 1}tbody td{border-bottom:1px solid var(--color-table-row-separator)}tbody tr:hover{background-color:var(--color-table-row-hover-bg)}.bulk-actions{margin-inline-start:calc(var(--space-unit) * 5);background-color:var(--color-surface-bg);z-index:10;display:flex;position:absolute;top:5px;height:40px}@media screen and (min-width: 992px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 8.5)}}@media screen and (min-width: 1280px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 10.5)}}.table-wrapper{display:block;overflow-y:hidden;overflow-x:auto;position:relative;width:100%;max-width:var(--surface-width)}table{width:100%}table.no-select{-webkit-user-select:none;user-select:none}.column-picker{width:24px}.sort-toggle{display:flex;align-items:center;margin-inline-start:calc(var(--space-unit) * .5)}.sort-toggle button{border:0;border-radius:var(--border-radius-lg);color:var(--color-weight-500);padding:0 2px;cursor:pointer;background-color:transparent}.sort-toggle button.active{color:var(--color-primary-700)}.sort-toggle .sort-label{margin-inline-start:calc(var(--space-unit) * .5);font-size:10px;color:var(--color-primary-600);font-weight:400}.toggle-search-filter-row{position:absolute;top:-12px;left:4px}@media screen and (min-width: 1280px){.toggle-search-filter-row{left:8px}}.toggle-search-filter-row.active{background-color:var(--color-primary-700);color:var(--color-primary-100);border-color:var(--color-primary-700)}th.filter-row{position:relative;font-size:var(--font-size-base);font-weight:400;background-color:var(--color-weight-100);box-shadow:var(--data-table-filter-box-shadow);border-left-width:0;border-right-width:0;text-align:initial;padding:0}th.filter-row input{width:100%}th.filter-row.active{border-bottom:1px solid var(--color-table-header-border)}th.filter-row .filters{margin-top:calc(var(--space-unit) * 1);display:flex;flex-wrap:wrap;gap:calc(var(--space-unit) * .5)}.filter-row-wrapper{padding:calc(var(--space-unit) * 4);padding-inline-start:0;max-height:150px;transition:max-height .2s,padding .2s,opacity .2s}.filter-row-wrapper.hidden{max-height:0px;padding-top:0;padding-bottom:0;overflow:hidden;opacity:0}.cell-link{display:block;width:100%;height:100%}td.active{background-color:var(--color-table-row-active-bg)}.cell-content{display:flex;align-items:center;line-height:var(--font-size-sm);color:var(--color-weight-700)}.cell-content.left{justify-content:flex-start}.cell-content.center{justify-content:center}.cell-content.right{justify-content:flex-end}.selection-col{width:calc(var(--space-unit) * 8)}vdr-empty-placeholder{width:100%}.table-footer{display:flex;align-items:baseline;justify-content:space-between;margin-top:var(--space-unit);margin-inline-start:var(--surface-margin-left);margin-inline-end:var(--space-unit)}.total-items-count{font-size:var(--font-size-xs)}@container (max-width: 500px){.total-items-count{display:none}}\n", ".bulk-actions{margin-inline-start:calc(var(--space-unit) * 6);background-color:var(--color-surface-bg)}@media screen and (min-width: 992px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 9.5)}}@media screen and (min-width: 1280px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 11.5)}}.drag-handle{cursor:grab}.drag-handle-spacer{width:16px}.cdk-drop-list-dragging .cdk-drag{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drag-animating{transition:transform .3s cubic-bezier(0,0,.2,1)}.cdk-drag-preview{opacity:0}.cdk-drag-placeholder{background-color:var(--color-primary-100)!important}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "directive", type: i3$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3$1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"], exportAs: ["ngComponentOutlet"] }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep", "cdkDropListElementContainer"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: i4.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer", "cdkDragScale"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: i4.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { kind: "component", type: i1.ItemsPerPageControlsComponent, selector: "vdr-items-per-page-controls", inputs: ["itemsPerPage"], outputs: ["itemsPerPageChange"] }, { kind: "component", type: i1.PaginationControlsComponent, selector: "vdr-pagination-controls", inputs: ["id", "currentPage", "itemsPerPage", "totalItems"], outputs: ["pageChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.EmptyPlaceholderComponent, selector: "vdr-empty-placeholder", inputs: ["emptyStateLabel"] }, { kind: "component", type: i1.UiExtensionPointComponent, selector: "vdr-ui-extension-point", inputs: ["locationId", "metadata", "topPx", "leftPx", "display", "api"] }, { kind: "component", type: i1.DataTableFiltersComponent, selector: "vdr-data-table-filters", inputs: ["filters", "filterWithValue"] }, { kind: "component", type: i1.DataTableColumnPickerComponent, selector: "vdr-data-table-colum-picker", inputs: ["columns", "uiLanguage"], outputs: ["reorder", "resetColumns"] }, { kind: "component", type: i1.DataTableFilterPresetsComponent, selector: "vdr-data-table-filter-presets", inputs: ["dataTableId", "filters"] }, { kind: "component", type: i1.AddFilterPresetButtonComponent, selector: "vdr-add-filter-preset-button", inputs: ["dataTableId", "filters"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5$2.PaginatePipe, name: "paginate" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionDataTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-collection-data-table', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-data-table-filter-presets\n    *ngIf=\"filters\"\n    [filters]=\"filters\"\n    [dataTableId]=\"id\"\n></vdr-data-table-filter-presets>\n<div class=\"table-wrapper\">\n    <div class=\"bulk-actions\">\n        <ng-content select=\"vdr-bulk-action-menu\"></ng-content>\n    </div>\n    <table class=\"\" [class.no-select]=\"disableSelect\">\n        <thead [class.items-selected]=\"selectionManager?.selection.length\">\n            <tr class=\"heading-row\">\n                <th *ngIf=\"selectionManager\" class=\"selection-col\">\n                    <div class=\"flex\">\n                        <div class=\"drag-handle-spacer\"></div>\n                        <input\n                            type=\"checkbox\"\n                            clrCheckbox\n                            [checked]=\"selectionManager?.areAllCurrentItemsSelected()\"\n                            (change)=\"onToggleAllClick()\"\n                        />\n                    </div>\n                </th>\n                <th\n                    *ngFor=\"let column of visibleSortedColumns; last as isLast\"\n                    [class.expand]=\"column.expand\"\n                >\n                    <div class=\"cell-content\" [ngClass]=\"column.align\">\n                        <vdr-ui-extension-point\n                            [locationId]=\"id\"\n                            [metadata]=\"column.id\"\n                            api=\"dataTable\"\n                            [topPx]=\"-6\"\n                            [leftPx]=\"-24\"\n                            display=\"block\"\n                        >\n                            <span>{{ column.heading }}</span>\n                        </vdr-ui-extension-point>\n                        <div *ngIf=\"column.sort as sort\" class=\"sort-toggle\">\n                            <button (click)=\"sort.toggleSortOrder()\" [class.active]=\"sort.sortOrder\">\n                                <clr-icon *ngIf=\"!sort.sortOrder\" shape=\"two-way-arrows left\"></clr-icon>\n                                <clr-icon *ngIf=\"sort.sortOrder === 'ASC'\" shape=\"arrow up\"></clr-icon>\n                                <clr-icon *ngIf=\"sort.sortOrder === 'DESC'\" shape=\"arrow down\"></clr-icon>\n                            </button>\n                            <div class=\"sort-label\" *ngIf=\"sort.sortOrder\">{{ sort.sortOrder }}</div>\n                        </div>\n                    </div>\n                </th>\n                <th>\n                    <div class=\"column-picker\">\n                        <vdr-data-table-colum-picker\n                            [uiLanguage]=\"uiLanguage$ | async\"\n                            [columns]=\"sortedColumns\"\n                            (reorder)=\"onColumnReorder($event)\"\n                            (resetColumns)=\"onColumnsReset()\"\n                        ></vdr-data-table-colum-picker>\n                    </div>\n                </th>\n            </tr>\n            <tr *ngIf=\"searchComponent || customSearchTemplate || filters?.length\">\n                <th\n                    [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\"\n                    class=\"filter-row\"\n                    [class.active]=\"showSearchFilterRow\"\n                >\n                    <button\n                        class=\"button-ghost toggle-search-filter-row\"\n                        [class.active]=\"showSearchFilterRow\"\n                        (click)=\"toggleSearchFilterRow()\"\n                        [title]=\"'common.search-and-filter-list' | translate\"\n                    >\n                        <clr-icon shape=\"search\"></clr-icon>\n                    </button>\n                    <div class=\"filter-row-wrapper\" [class.hidden]=\"!showSearchFilterRow\">\n                        <ng-container *ngTemplateOutlet=\"searchComponent?.template\"></ng-container>\n                        <ng-container *ngTemplateOutlet=\"customSearchTemplate\"></ng-container>\n                        <ng-container *ngIf=\"filters\">\n                            <div class=\"filters\">\n                                <vdr-data-table-filters\n                                    *ngFor=\"let activeFilter of filters.activeFilters\"\n                                    [filterWithValue]=\"activeFilter\"\n                                    [filters]=\"filters\"\n                                    class=\"mt-1\"\n                                ></vdr-data-table-filters>\n                                <vdr-data-table-filters\n                                    *ngIf=\"filters.length\"\n                                    [filters]=\"filters\"\n                                    class=\"mt-1\"\n                                ></vdr-data-table-filters>\n                                <vdr-add-filter-preset-button\n                                    [filters]=\"filters\"\n                                    [dataTableId]=\"id\"\n                                ></vdr-add-filter-preset-button>\n                            </div>\n                        </ng-container>\n                    </div>\n                </th>\n            </tr>\n        </thead>\n        <tbody\n            cdkDropList\n            cdkDropListLockAxis=\"y\"\n            (cdkDropListDropped)=\"onDrop($event)\"\n            [cdkDropListSortPredicate]=\"sortPredicate\"\n        >\n            <ng-container\n                *ngFor=\"\n                let item of items\n                    | paginate\n                        : {\n                              itemsPerPage: itemsPerPage,\n                              currentPage: currentPage,\n                              totalItems: totalItems,\n                              id: id,\n                          };\n                index as i;\n                trackBy: trackByFn.bind(this)\n            \"\n            >\n                <ng-container\n                    [ngTemplateOutlet]=\"collectionRowTmp\"\n                    [ngTemplateOutletContext]=\"{ item: item, i: i, depth: 0 }\"\n                ></ng-container>\n            </ng-container>\n            <ng-container>\n                <tr *ngIf=\"!items?.length\">\n                    <td [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\">\n                        <vdr-empty-placeholder [emptyStateLabel]=\"emptyStateLabel\"></vdr-empty-placeholder>\n                    </td>\n                </tr>\n            </ng-container>\n        </tbody>\n    </table>\n</div>\n<div class=\"table-footer\">\n    <vdr-items-per-page-controls\n        *ngIf=\"totalItems\"\n        [itemsPerPage]=\"itemsPerPage\"\n        (itemsPerPageChange)=\"itemsPerPageChange.emit($event)\"\n    ></vdr-items-per-page-controls>\n    <div *ngIf=\"totalItems\" class=\"p5 total-items-count\">\n        {{ 'common.total-items' | translate : { currentStart, currentEnd, totalItems } }}\n    </div>\n\n    <vdr-pagination-controls\n        *ngIf=\"totalItems\"\n        [id]=\"id\"\n        [currentPage]=\"currentPage\"\n        [itemsPerPage]=\"itemsPerPage\"\n        [totalItems]=\"totalItems\"\n        (pageChange)=\"pageChange.emit($event)\"\n    ></vdr-pagination-controls>\n</div>\n\n<ng-template #collectionRowTmp let-item=\"item\" let-depth=\"depth\">\n    <tr #collectionRow cdkDrag [cdkDragData]=\"{ depth: depth, collection: item }\" cdkDragBoundary=\"tbody\">\n        <td\n            *ngIf=\"selectionManager\"\n            [class.active]=\"activeIndex === absoluteIndex[item.id]\"\n            class=\"selection-col\"\n        >\n            <div class=\"flex\">\n                <div class=\"drag-handle\" cdkDragHandle [title]=\"'catalog.reorder-collection' | translate\">\n                    <clr-icon shape=\"drag-handle\"></clr-icon>\n                </div>\n                <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    [checked]=\"selectionManager?.isSelected(item)\"\n                    (click)=\"onRowClick(item, $event)\"\n                />\n            </div>\n        </td>\n        <td\n            *ngFor=\"let column of visibleSortedColumns\"\n            [class.active]=\"activeIndex === absoluteIndex[item.id]\"\n        >\n            <div class=\"cell-content\" [ngClass]=\"column.align\">\n                <ng-container\n                    *ngIf=\"customComponents.get(column.id) as componentConfig; else defaultComponent\"\n                >\n                    <ng-container\n                        *ngComponentOutlet=\"\n                            componentConfig.config.component;\n                            inputs: { rowItem: item };\n                            injector: componentConfig.injector\n                        \"\n                    ></ng-container>\n                </ng-container>\n                <ng-template #defaultComponent>\n                    <ng-container\n                        *ngTemplateOutlet=\"column.template; context: { item: item, depth: depth }\"\n                    ></ng-container>\n                </ng-template>\n            </div>\n        </td>\n        <td [class.active]=\"activeIndex === absoluteIndex[item.id]\"><!-- column select --></td>\n    </tr>\n    <ng-container *ngFor=\"let subCollection of getSubcollections(item)\">\n        <ng-container\n            *ngTemplateOutlet=\"collectionRowTmp; context: { item: subCollection, depth: depth + 1 }\"\n        ></ng-container>\n    </ng-container>\n</ng-template>\n", styles: [":host{display:block;max-width:100%;position:relative;margin-bottom:calc(var(--space-unit) * 4);container-type:inline-size}th{border-bottom:1px solid var(--color-table-header-border);color:var(--color-weight-700);font-size:var(--font-size-xs);font-weight:600;text-transform:uppercase;position:relative;white-space:nowrap;background-color:transparent}th,td{padding:calc(var(--space-unit) * 1.5) calc(var(--space-unit) * 1);color:var(--color-text-100)}tr td:first-of-type,tr th:first-of-type{text-align:center}@media screen and (min-width: 992px){tr td:first-of-type,tr th:first-of-type{padding-inline-start:var(--surface-margin-left);text-align:start}}th:last-of-type,td:last-of-type{border-inline-end:1px solid var(--color-table-header-border)}tr:first-of-type th:last-of-type{border-image:linear-gradient(0deg,var(--color-table-header-border),transparent) 1}tr:last-of-type td:last-of-type{border-image:linear-gradient(180deg,var(--color-table-header-border),transparent) 1}tbody td{border-bottom:1px solid var(--color-table-row-separator)}tbody tr:hover{background-color:var(--color-table-row-hover-bg)}.bulk-actions{margin-inline-start:calc(var(--space-unit) * 5);background-color:var(--color-surface-bg);z-index:10;display:flex;position:absolute;top:5px;height:40px}@media screen and (min-width: 992px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 8.5)}}@media screen and (min-width: 1280px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 10.5)}}.table-wrapper{display:block;overflow-y:hidden;overflow-x:auto;position:relative;width:100%;max-width:var(--surface-width)}table{width:100%}table.no-select{-webkit-user-select:none;user-select:none}.column-picker{width:24px}.sort-toggle{display:flex;align-items:center;margin-inline-start:calc(var(--space-unit) * .5)}.sort-toggle button{border:0;border-radius:var(--border-radius-lg);color:var(--color-weight-500);padding:0 2px;cursor:pointer;background-color:transparent}.sort-toggle button.active{color:var(--color-primary-700)}.sort-toggle .sort-label{margin-inline-start:calc(var(--space-unit) * .5);font-size:10px;color:var(--color-primary-600);font-weight:400}.toggle-search-filter-row{position:absolute;top:-12px;left:4px}@media screen and (min-width: 1280px){.toggle-search-filter-row{left:8px}}.toggle-search-filter-row.active{background-color:var(--color-primary-700);color:var(--color-primary-100);border-color:var(--color-primary-700)}th.filter-row{position:relative;font-size:var(--font-size-base);font-weight:400;background-color:var(--color-weight-100);box-shadow:var(--data-table-filter-box-shadow);border-left-width:0;border-right-width:0;text-align:initial;padding:0}th.filter-row input{width:100%}th.filter-row.active{border-bottom:1px solid var(--color-table-header-border)}th.filter-row .filters{margin-top:calc(var(--space-unit) * 1);display:flex;flex-wrap:wrap;gap:calc(var(--space-unit) * .5)}.filter-row-wrapper{padding:calc(var(--space-unit) * 4);padding-inline-start:0;max-height:150px;transition:max-height .2s,padding .2s,opacity .2s}.filter-row-wrapper.hidden{max-height:0px;padding-top:0;padding-bottom:0;overflow:hidden;opacity:0}.cell-link{display:block;width:100%;height:100%}td.active{background-color:var(--color-table-row-active-bg)}.cell-content{display:flex;align-items:center;line-height:var(--font-size-sm);color:var(--color-weight-700)}.cell-content.left{justify-content:flex-start}.cell-content.center{justify-content:center}.cell-content.right{justify-content:flex-end}.selection-col{width:calc(var(--space-unit) * 8)}vdr-empty-placeholder{width:100%}.table-footer{display:flex;align-items:baseline;justify-content:space-between;margin-top:var(--space-unit);margin-inline-start:var(--surface-margin-left);margin-inline-end:var(--space-unit)}.total-items-count{font-size:var(--font-size-xs)}@container (max-width: 500px){.total-items-count{display:none}}\n", ".bulk-actions{margin-inline-start:calc(var(--space-unit) * 6);background-color:var(--color-surface-bg)}@media screen and (min-width: 992px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 9.5)}}@media screen and (min-width: 1280px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 11.5)}}.drag-handle{cursor:grab}.drag-handle-spacer{width:16px}.cdk-drop-list-dragging .cdk-drag{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drag-animating{transition:transform .3s cubic-bezier(0,0,.2,1)}.cdk-drag-preview{opacity:0}.cdk-drag-placeholder{background-color:var(--color-primary-100)!important}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }], propDecorators: { subCollections: [{
                type: Input
            }], changeOrder: [{
                type: Output
            }], dropList: [{
                type: ViewChild,
                args: [CdkDropList, { static: true }]
            }], collectionRowList: [{
                type: ViewChildren,
                args: ['collectionRow', { read: CdkDrag }]
            }] } });

const COLLECTION_DETAIL_QUERY = gql `
    query CollectionDetailQuery($id: ID!) {
        collection(id: $id) {
            ...Collection
        }
    }
    ${COLLECTION_FRAGMENT}
`;
class CollectionDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService, modalService, localStorageService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.localStorageService = localStorageService;
        this.customFields = this.getCustomFieldConfig('Collection');
        this.detailForm = this.formBuilder.group({
            name: ['', Validators.required],
            slug: ['', unicodePatternValidator(/^[\p{Letter}0-9._-]+$/u)],
            description: '',
            visible: false,
            inheritFilters: true,
            filters: this.formBuilder.array([]),
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.assetChanges = {};
        this.filters = [];
        this.allFilters = [];
        this.livePreview = false;
        this.updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];
        this.filterRemoved$ = new Subject();
        this.livePreview = this.localStorageService.get('livePreviewCollectionContents') ?? false;
    }
    ngOnInit() {
        this.init();
        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {
            this.allFilters = res.collectionFilters;
        });
        const filtersFormArray = this.detailForm.get('filters');
        const inheritFiltersControl = this.detailForm.get('inheritFilters');
        this.inheritFilters$ = inheritFiltersControl.valueChanges.pipe(distinctUntilChanged());
        this.updatedFilters$ = merge(filtersFormArray.statusChanges, this.filterRemoved$).pipe(debounceTime(200), filter(() => filtersFormArray.touched), map(() => this.mapOperationsToInputs(this.filters, filtersFormArray.value).filter(_filter => {
            // ensure all the arguments have valid values. E.g. a newly-added
            // filter will not yet have valid values
            for (const arg of _filter.arguments) {
                if (arg.value === '') {
                    return false;
                }
            }
            return true;
        })));
        this.parentId$ = this.route.paramMap.pipe(map(pm => pm.get('parentId') || undefined), switchMap(parentId => {
            if (parentId) {
                return of(parentId);
            }
            else {
                return this.entity$.pipe(map(collection => collection.parent?.id));
            }
        }));
    }
    ngOnDestroy() {
        this.destroy();
    }
    getFilterDefinition(_filter) {
        return this.allFilters.find(f => f.code === _filter.code);
    }
    assetsChanged() {
        return !!Object.values(this.assetChanges).length;
    }
    /**
     * If creating a new Collection, automatically generate the slug based on the collection name.
     */
    updateSlug(nameValue) {
        const slugControl = this.detailForm.get(['slug']);
        const currentTranslation = this.entity ? findTranslation(this.entity, this.languageCode) : undefined;
        const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;
        if (slugControl && slugControl.pristine && currentSlugIsEmpty) {
            slugControl.setValue(normalizeString(`${nameValue}`, '-'));
        }
    }
    addFilter(collectionFilter) {
        const filtersArray = this.detailForm.get('filters');
        const argsHash = collectionFilter.args.reduce((output, arg) => ({
            ...output,
            [arg.name]: getConfigArgValue(arg.value),
        }), {});
        filtersArray.push(this.formBuilder.control({
            code: collectionFilter.code,
            args: argsHash,
        }));
        this.filters.push({
            code: collectionFilter.code,
            args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),
        });
    }
    removeFilter(index) {
        const filtersArray = this.detailForm.get('filters');
        if (index !== -1) {
            filtersArray.removeAt(index);
            filtersArray.markAsDirty();
            filtersArray.markAsTouched();
            this.filters.splice(index, 1);
            this.filterRemoved$.next();
        }
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const input = this.getUpdatedCollection({
            id: '',
            createdAt: '',
            updatedAt: '',
            languageCode: this.languageCode,
            name: '',
            slug: '',
            isPrivate: false,
            breadcrumbs: [],
            description: '',
            featuredAsset: null,
            assets: [],
            translations: [],
            inheritFilters: true,
            filters: [],
            parent: {},
            children: null,
        }, this.detailForm, this.languageCode);
        const parentId = this.route.snapshot.paramMap.get('parentId');
        if (parentId) {
            input.parentId = parentId;
        }
        this.dataService.collection.createCollection(input).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Collection',
            });
            this.assetChanges = {};
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Collection',
            });
        });
    }
    save() {
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1), mergeMap(([category, languageCode]) => {
            const input = this.getUpdatedCollection(category, this.detailForm, languageCode);
            return this.dataService.collection.updateCollection(input);
        }))
            .subscribe(() => {
            this.assetChanges = {};
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Collection',
            });
            this.contentsComponent.refresh();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Collection',
            });
        });
    }
    canDeactivate() {
        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;
    }
    toggleLivePreview() {
        this.livePreview = !this.livePreview;
        this.localStorageService.set('livePreviewCollectionContents', this.livePreview);
    }
    trackByFn(index, item) {
        return JSON.stringify(item);
    }
    /**
     * Sets the values of the form on changes to the category or current language.
     */
    setFormValues(entity, languageCode) {
        const currentTranslation = findTranslation(entity, languageCode);
        this.detailForm.patchValue({
            name: currentTranslation ? currentTranslation.name : '',
            slug: currentTranslation ? currentTranslation.slug : '',
            description: currentTranslation ? currentTranslation.description : '',
            visible: !entity.isPrivate,
            inheritFilters: entity.inheritFilters,
        });
        const formArray = this.detailForm.get('filters');
        if (formArray.length !== entity.filters.length) {
            formArray.clear();
            this.filters = [];
            entity.filters.forEach(f => this.addFilter(f));
        }
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity, currentTranslation);
        }
    }
    /**
     * Given a category and the value of the form, this method creates an updated copy of the category which
     * can then be persisted to the API.
     */
    getUpdatedCollection(category, form, languageCode) {
        const updatedCategory = createUpdatedTranslatable({
            translatable: category,
            updatedFields: form.value,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: category.name || '',
                slug: category.slug || '',
                description: category.description || '',
            },
        });
        return {
            ...updatedCategory,
            assetIds: this.assetChanges.assets?.map(a => a.id),
            featuredAssetId: this.assetChanges.featuredAsset?.id,
            isPrivate: !form.value.visible,
            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),
        };
    }
    /**
     * Maps an array of conditions or actions to the input format expected by the GraphQL API.
     */
    mapOperationsToInputs(operations, formValueOperations) {
        return operations.map((o, i) => ({
            code: o.code,
            arguments: Object.entries(formValueOperations[i].args).map(([name, value], j) => ({
                name,
                value: encodeConfigArgValue(value),
            })),
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2.FormBuilder }, { token: i1.NotificationService }, { token: i1.ModalService }, { token: i1.LocalStorageService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CollectionDetailComponent, isStandalone: false, selector: "vdr-collection-detail", viewQueries: [{ propertyName: "contentsComponent", first: true, predicate: ["collectionContents"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"collection-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"updatePermission\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"collection-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            formControlName=\"visible\"\n                            id=\"visibility\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                        <label class=\"visible-toggle\">\n                            <ng-container *ngIf=\"detailForm.value.visible; else private\">{{\n                                'catalog.public' | translate\n                            }}</ng-container>\n                            <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                        </label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\"></vdr-page-entity-info>\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n\n        <vdr-page-block *ngIf=\"entity$ | async as entity\"\n            ><nav role=\"navigation\">\n                <ul class=\"collection-breadcrumbs\">\n                    <li *ngFor=\"let breadcrumb of entity.breadcrumbs; let isFirst = first; let isLast = last\">\n                        <a [routerLink]=\"['/catalog/collections']\" *ngIf=\"isFirst\">{{\n                            'catalog.root-collection' | translate\n                        }}</a>\n                        <a\n                            [routerLink]=\"['/catalog/collections', breadcrumb.id]\"\n                            *ngIf=\"!isFirst && !isLast\"\n                            >{{ breadcrumb.name | translate }}</a\n                        >\n                        <ng-container *ngIf=\"isLast\">{{ breadcrumb.name | translate }}</ng-container>\n                    </li>\n                </ul>\n            </nav>\n        </vdr-page-block>\n\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateSlug($event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'catalog.slug' | translate\"\n                        for=\"slug\"\n                        [errors]=\"{ pattern: ('catalog.slug-pattern-error' | translate) }\"\n                    >\n                        <input\n                            id=\"slug\"\n                            type=\"text\"\n                            formControlName=\"slug\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        class=\"form-grid-span\"\n                        [label]=\"'common.description' | translate\"\n                        for=\"slug\"\n                    >\n                        <vdr-rich-text-editor\n                            formControlName=\"description\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        ></vdr-rich-text-editor>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Collection\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"collection-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n            <vdr-card [title]=\"'catalog.assets' | translate\">\n                <vdr-assets\n                    [assets]=\"entity?.assets\"\n                    [featuredAsset]=\"entity?.featuredAsset\"\n                    [updatePermissions]=\"updatePermission\"\n                    (change)=\"assetChanges = $event\"\n                ></vdr-assets>\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.filters' | translate\">\n                <vdr-form-field [label]=\"'catalog.filter-inheritance' | translate\" for=\"inheritFilters\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            formControlName=\"inheritFilters\"\n                            id=\"inheritFilters\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                        <label class=\"visible-toggle\">\n                            <ng-container *ngIf=\"detailForm.value.inheritFilters; else noInherit\">{{\n                                'catalog.inherit-filters-from-parent' | translate\n                            }}</ng-container>\n                            <ng-template #noInherit>{{\n                                'catalog.do-not-inherit-filters' | translate\n                            }}</ng-template>\n                        </label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n                <div formArrayName=\"filters\">\n                    <ng-container *ngFor=\"let filter of filters; index as i; trackBy: trackByFn\">\n                        <vdr-configurable-input\n                            (remove)=\"removeFilter(i)\"\n                            [position]=\"i\"\n                            [operation]=\"filter\"\n                            [operationDefinition]=\"getFilterDefinition(filter)\"\n                            [formControlName]=\"i\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        ></vdr-configurable-input>\n                    </ng-container>\n                </div>\n                <div *vdrIfPermissions=\"updatePermission\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            <span>{{ 'marketing.add-condition' | translate }}</span>\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let filter of allFilters\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"addFilter(filter)\"\n                            >\n                                {{ filter.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n\n            <vdr-card [title]=\"'common.contents' | translate\" [paddingX]=\"false\">\n                <vdr-collection-contents\n                    [collectionId]=\"id\"\n                    [parentId]=\"parentId$ | async\"\n                    [updatedFilters]=\"updatedFilters$ | async\"\n                    [inheritFilters]=\"inheritFilters$ | async\"\n                    [previewUpdatedFilters]=\"livePreview\"\n                    #collectionContents\n                >\n                    <ng-template let-count>\n                        <div class=\"ml-3\">\n                            <div class=\"contents-title\">\n                                {{ 'catalog.collection-contents' | translate }} ({{\n                                    'common.results-count' | translate : { count: count }\n                                }})\n                            </div>\n                            <clr-checkbox-wrapper [class.disabled]=\"detailForm.get('filters')?.pristine\">\n                                <input\n                                    type=\"checkbox\"\n                                    clrCheckbox\n                                    [ngModelOptions]=\"{ standalone: true }\"\n                                    [disabled]=\"detailForm.get('filters')?.pristine\"\n                                    [ngModel]=\"livePreview\"\n                                    (ngModelChange)=\"toggleLivePreview()\"\n                                />\n                                <label>{{ 'catalog.live-preview-contents' | translate }}</label>\n                            </clr-checkbox-wrapper>\n                        </div>\n                    </ng-template>\n                </vdr-collection-contents>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: ["@charset \"UTF-8\";.visible-toggle{margin-top:-3px!important}clr-checkbox-wrapper{transition:opacity .3s}clr-checkbox-wrapper.disabled{opacity:.5}.collection-breadcrumbs{list-style-type:none;background-color:var(--color-component-bg-200);padding:2px 6px;margin-bottom:6px;border-radius:var(--clr-global-borderradius)}.collection-breadcrumbs li{font-size:.65rem;display:inline-block;margin-inline-end:10px}.collection-breadcrumbs li:last-child{font-weight:600}.collection-breadcrumbs li:not(:last-child):after{content:\"\\203a\";top:0;color:var(--color-grey-400);margin-inline-start:10px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i2.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.AssetsComponent, selector: "vdr-assets", inputs: ["assets", "featuredAsset", "compact", "updatePermissions", "multiSelect"], outputs: ["change"] }, { kind: "component", type: i1.ConfigurableInputComponent, selector: "vdr-configurable-input", inputs: ["operation", "operationDefinition", "readonly", "removable", "position", "hideDescription"], outputs: ["remove"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i1.RichTextEditorComponent, selector: "vdr-rich-text-editor", inputs: ["label", "readonly"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: CollectionContentsComponent, selector: "vdr-collection-contents", inputs: ["collectionId", "parentId", "inheritFilters", "updatedFilters", "previewUpdatedFilters"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-collection-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"collection-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"updatePermission\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"collection-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            formControlName=\"visible\"\n                            id=\"visibility\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                        <label class=\"visible-toggle\">\n                            <ng-container *ngIf=\"detailForm.value.visible; else private\">{{\n                                'catalog.public' | translate\n                            }}</ng-container>\n                            <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                        </label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\"></vdr-page-entity-info>\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n\n        <vdr-page-block *ngIf=\"entity$ | async as entity\"\n            ><nav role=\"navigation\">\n                <ul class=\"collection-breadcrumbs\">\n                    <li *ngFor=\"let breadcrumb of entity.breadcrumbs; let isFirst = first; let isLast = last\">\n                        <a [routerLink]=\"['/catalog/collections']\" *ngIf=\"isFirst\">{{\n                            'catalog.root-collection' | translate\n                        }}</a>\n                        <a\n                            [routerLink]=\"['/catalog/collections', breadcrumb.id]\"\n                            *ngIf=\"!isFirst && !isLast\"\n                            >{{ breadcrumb.name | translate }}</a\n                        >\n                        <ng-container *ngIf=\"isLast\">{{ breadcrumb.name | translate }}</ng-container>\n                    </li>\n                </ul>\n            </nav>\n        </vdr-page-block>\n\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateSlug($event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        [label]=\"'catalog.slug' | translate\"\n                        for=\"slug\"\n                        [errors]=\"{ pattern: ('catalog.slug-pattern-error' | translate) }\"\n                    >\n                        <input\n                            id=\"slug\"\n                            type=\"text\"\n                            formControlName=\"slug\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        class=\"form-grid-span\"\n                        [label]=\"'common.description' | translate\"\n                        for=\"slug\"\n                    >\n                        <vdr-rich-text-editor\n                            formControlName=\"description\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        ></vdr-rich-text-editor>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                formGroupName=\"customFields\"\n                *ngIf=\"customFields.length\"\n                [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                    entityName=\"Collection\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"collection-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n            <vdr-card [title]=\"'catalog.assets' | translate\">\n                <vdr-assets\n                    [assets]=\"entity?.assets\"\n                    [featuredAsset]=\"entity?.featuredAsset\"\n                    [updatePermissions]=\"updatePermission\"\n                    (change)=\"assetChanges = $event\"\n                ></vdr-assets>\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.filters' | translate\">\n                <vdr-form-field [label]=\"'catalog.filter-inheritance' | translate\" for=\"inheritFilters\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            formControlName=\"inheritFilters\"\n                            id=\"inheritFilters\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                        <label class=\"visible-toggle\">\n                            <ng-container *ngIf=\"detailForm.value.inheritFilters; else noInherit\">{{\n                                'catalog.inherit-filters-from-parent' | translate\n                            }}</ng-container>\n                            <ng-template #noInherit>{{\n                                'catalog.do-not-inherit-filters' | translate\n                            }}</ng-template>\n                        </label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n                <div formArrayName=\"filters\">\n                    <ng-container *ngFor=\"let filter of filters; index as i; trackBy: trackByFn\">\n                        <vdr-configurable-input\n                            (remove)=\"removeFilter(i)\"\n                            [position]=\"i\"\n                            [operation]=\"filter\"\n                            [operationDefinition]=\"getFilterDefinition(filter)\"\n                            [formControlName]=\"i\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        ></vdr-configurable-input>\n                    </ng-container>\n                </div>\n                <div *vdrIfPermissions=\"updatePermission\">\n                    <vdr-dropdown>\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            <span>{{ 'marketing.add-condition' | translate }}</span>\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                            <button\n                                *ngFor=\"let filter of allFilters\"\n                                type=\"button\"\n                                vdrDropdownItem\n                                (click)=\"addFilter(filter)\"\n                            >\n                                {{ filter.description }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-card>\n\n            <vdr-card [title]=\"'common.contents' | translate\" [paddingX]=\"false\">\n                <vdr-collection-contents\n                    [collectionId]=\"id\"\n                    [parentId]=\"parentId$ | async\"\n                    [updatedFilters]=\"updatedFilters$ | async\"\n                    [inheritFilters]=\"inheritFilters$ | async\"\n                    [previewUpdatedFilters]=\"livePreview\"\n                    #collectionContents\n                >\n                    <ng-template let-count>\n                        <div class=\"ml-3\">\n                            <div class=\"contents-title\">\n                                {{ 'catalog.collection-contents' | translate }} ({{\n                                    'common.results-count' | translate : { count: count }\n                                }})\n                            </div>\n                            <clr-checkbox-wrapper [class.disabled]=\"detailForm.get('filters')?.pristine\">\n                                <input\n                                    type=\"checkbox\"\n                                    clrCheckbox\n                                    [ngModelOptions]=\"{ standalone: true }\"\n                                    [disabled]=\"detailForm.get('filters')?.pristine\"\n                                    [ngModel]=\"livePreview\"\n                                    (ngModelChange)=\"toggleLivePreview()\"\n                                />\n                                <label>{{ 'catalog.live-preview-contents' | translate }}</label>\n                            </clr-checkbox-wrapper>\n                        </div>\n                    </ng-template>\n                </vdr-collection-contents>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: ["@charset \"UTF-8\";.visible-toggle{margin-top:-3px!important}clr-checkbox-wrapper{transition:opacity .3s}clr-checkbox-wrapper.disabled{opacity:.5}.collection-breadcrumbs{list-style-type:none;background-color:var(--color-component-bg-200);padding:2px 6px;margin-bottom:6px;border-radius:var(--clr-global-borderradius)}.collection-breadcrumbs li{font-size:.65rem;display:inline-block;margin-inline-end:10px}.collection-breadcrumbs li:last-child{font-weight:600}.collection-breadcrumbs li:not(:last-child):after{content:\"\\203a\";top:0;color:var(--color-grey-400);margin-inline-start:10px}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2.FormBuilder }, { type: i1.NotificationService }, { type: i1.ModalService }, { type: i1.LocalStorageService }], propDecorators: { contentsComponent: [{
                type: ViewChild,
                args: ['collectionContents']
            }] } });

/**
 * Removes the root collection and self breadcrumb from the collection breadcrumb list.
 */
class CollectionBreadcrumbPipe {
    transform(value) {
        return value?.breadcrumbs.slice(1, -1);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionBreadcrumbPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "19.2.4", ngImport: i0, type: CollectionBreadcrumbPipe, isStandalone: false, name: "collectionBreadcrumb" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionBreadcrumbPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'collectionBreadcrumb',
                    standalone: false
                }]
        }] });

class MoveCollectionsDialogComponent {
    constructor(dataService, i18nService) {
        this.dataService = dataService;
        this.i18nService = i18nService;
        this.searchTermControl = new FormControl('');
        this.currentPage$ = new BehaviorSubject(1);
        this.itemsPerPage$ = new BehaviorSubject(10);
        this.expandedIds$ = new Subject();
        this.expandedIds = [];
    }
    ngOnInit() {
        const getCollectionsResult = this.dataService.collection.getCollections();
        const searchTerm$ = this.searchTermControl.valueChanges.pipe(debounceTime(250), distinctUntilChanged(), startWith(''));
        const currentPage$ = this.currentPage$.pipe(distinctUntilChanged());
        const itemsPerPage$ = this.itemsPerPage$.pipe(distinctUntilChanged());
        combineLatest(searchTerm$, currentPage$, itemsPerPage$).subscribe(([searchTerm, currentPage, itemsPerPage]) => {
            const topLevelOnly = searchTerm === '';
            getCollectionsResult.ref.refetch({
                options: {
                    skip: (currentPage - 1) * itemsPerPage,
                    take: itemsPerPage,
                    filter: {
                        name: { contains: searchTerm },
                    },
                    topLevelOnly,
                },
            });
        });
        const rootCollectionId$ = this.dataService.collection
            .getCollections({
            take: 1,
            topLevelOnly: true,
        })
            .mapSingle(data => data.collections.items[0].parentId);
        this.items$ = combineLatest(getCollectionsResult.mapStream(({ collections }) => collections), rootCollectionId$).pipe(map(([collections, rootCollectionId]) => [
            ...(rootCollectionId
                ? [
                    {
                        id: rootCollectionId,
                        name: this.i18nService.translate('catalog.root-collection'),
                        slug: '',
                        parentId: '__',
                        position: 0,
                        featuredAsset: null,
                        children: [],
                        breadcrumbs: [],
                        isPrivate: false,
                        createdAt: '',
                        updatedAt: '',
                    },
                ]
                : []),
            ...collections.items,
        ]));
        this.totalItems$ = getCollectionsResult.mapStream(data => data.collections.totalItems);
        this.subCollections$ = this.expandedIds$.pipe(tap(val => (this.expandedIds = val)), switchMap(ids => {
            if (ids.length) {
                return this.dataService.collection
                    .getCollections({
                    take: 999,
                    filter: {
                        parentId: { in: ids },
                    },
                })
                    .mapStream(data => data.collections.items);
            }
            else {
                return of([]);
            }
        }));
    }
    toggleExpanded(collection) {
        let expandedIds = this.expandedIds;
        if (!expandedIds.includes(collection.id)) {
            expandedIds.push(collection.id);
        }
        else {
            expandedIds = expandedIds.filter(id => id !== collection.id);
        }
        this.expandedIds$.next(expandedIds);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: MoveCollectionsDialogComponent, deps: [{ token: i1.DataService }, { token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: MoveCollectionsDialogComponent, isStandalone: false, selector: "vdr-move-collections-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.move-collections' | translate }}\n</ng-template>\n<vdr-collection-data-table\n    class=\"mt-2\"\n    id=\"move-collection-list\"\n    [items]=\"items$ | async\"\n    [subCollections]=\"subCollections$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"currentPage$.next($event)\"\n    (itemsPerPageChange)=\"itemsPerPage$.next($event)\"\n>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-collection=\"item\">\n            {{ collection.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\n        <ng-template let-collection=\"item\" let-depth=\"depth\">\n            <div [ngClass]=\"'indent-' + depth\"></div>\n            <clr-icon\n                class=\"child-arrow\"\n                [class.transparent]=\"depth === 0\"\n                shape=\"child-arrow\"\n                *ngIf=\"!collection.children?.length && collection.parentId !== '__'\"\n            ></clr-icon>\n            <button\n                class=\"icon-button folder-button\"\n                *ngIf=\"collection.children?.length\"\n                (click)=\"toggleExpanded(collection)\"\n            >\n                <clr-icon shape=\"folder\" *ngIf=\"!expandedIds.includes(collection.id)\"></clr-icon>\n                <clr-icon shape=\"folder-open\" *ngIf=\"expandedIds.includes(collection.id)\"></clr-icon>\n            </button>\n            <button class=\"icon-button folder-button\" *ngIf=\"collection.parentId === '__'\" disabled>\n                <clr-icon shape=\"folder\" class=\"is-solid\"></clr-icon>\n            </button>\n            <button class=\"button-ghost\" (click)=\"resolveWith(collection)\">\n                <span>{{ 'catalog.move-collection-to' | translate : {name: collection.name} }}</span>\n            </button>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.breadcrumb' | translate\" id=\"breadcrumb\">\n        <ng-template let-collection=\"item\">\n            <div class=\"breadcrumb\">\n                <ng-container *ngIf=\"collection | collectionBreadcrumb as breadcrumbs\">\n                    <ng-container *ngIf=\"breadcrumbs.length\">\n                        <div *ngFor=\"let item of breadcrumbs\">\n                            <span class=\"separator\">/</span>{{ item.name }}\n                        </div>\n                    </ng-container>\n                    <span class=\"separator\" *ngIf=\"!breadcrumbs.length\">/</span>\n                </ng-container>\n            </div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.slug' | translate\" id=\"slug\">\n        <ng-template let-collection=\"item\">\n            {{ collection.slug }}\n        </ng-template>\n    </vdr-dt2-column>\n</vdr-collection-data-table>\n", styles: ["", ":host{--indent-spacing: 18px}.indent-1{padding-inline-start:var(--indent-spacing)}.indent-2{padding-inline-start:calc(var(--indent-spacing) * 2)}.indent-3{padding-inline-start:calc(var(--indent-spacing) * 3)}.indent-4,.indent-5,.indent-6,.indent-7,.indent-8,.indent-9{padding-inline-start:calc(var(--indent-spacing) * 4)}.child-arrow{margin:1px 6px}.child-arrow.transparent{opacity:0}.breadcrumb{display:flex}.separator{color:var(--color-weight-500);margin:0 3px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: CollectionDataTableComponent, selector: "vdr-collection-data-table", inputs: ["subCollections"], outputs: ["changeOrder"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: CollectionBreadcrumbPipe, name: "collectionBreadcrumb" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: MoveCollectionsDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-move-collections-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.move-collections' | translate }}\n</ng-template>\n<vdr-collection-data-table\n    class=\"mt-2\"\n    id=\"move-collection-list\"\n    [items]=\"items$ | async\"\n    [subCollections]=\"subCollections$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"currentPage$.next($event)\"\n    (itemsPerPageChange)=\"itemsPerPage$.next($event)\"\n>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n        <ng-template let-collection=\"item\">\n            {{ collection.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\n        <ng-template let-collection=\"item\" let-depth=\"depth\">\n            <div [ngClass]=\"'indent-' + depth\"></div>\n            <clr-icon\n                class=\"child-arrow\"\n                [class.transparent]=\"depth === 0\"\n                shape=\"child-arrow\"\n                *ngIf=\"!collection.children?.length && collection.parentId !== '__'\"\n            ></clr-icon>\n            <button\n                class=\"icon-button folder-button\"\n                *ngIf=\"collection.children?.length\"\n                (click)=\"toggleExpanded(collection)\"\n            >\n                <clr-icon shape=\"folder\" *ngIf=\"!expandedIds.includes(collection.id)\"></clr-icon>\n                <clr-icon shape=\"folder-open\" *ngIf=\"expandedIds.includes(collection.id)\"></clr-icon>\n            </button>\n            <button class=\"icon-button folder-button\" *ngIf=\"collection.parentId === '__'\" disabled>\n                <clr-icon shape=\"folder\" class=\"is-solid\"></clr-icon>\n            </button>\n            <button class=\"button-ghost\" (click)=\"resolveWith(collection)\">\n                <span>{{ 'catalog.move-collection-to' | translate : {name: collection.name} }}</span>\n            </button>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.breadcrumb' | translate\" id=\"breadcrumb\">\n        <ng-template let-collection=\"item\">\n            <div class=\"breadcrumb\">\n                <ng-container *ngIf=\"collection | collectionBreadcrumb as breadcrumbs\">\n                    <ng-container *ngIf=\"breadcrumbs.length\">\n                        <div *ngFor=\"let item of breadcrumbs\">\n                            <span class=\"separator\">/</span>{{ item.name }}\n                        </div>\n                    </ng-container>\n                    <span class=\"separator\" *ngIf=\"!breadcrumbs.length\">/</span>\n                </ng-container>\n            </div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.slug' | translate\" id=\"slug\">\n        <ng-template let-collection=\"item\">\n            {{ collection.slug }}\n        </ng-template>\n    </vdr-dt2-column>\n</vdr-collection-data-table>\n", styles: [":host{--indent-spacing: 18px}.indent-1{padding-inline-start:var(--indent-spacing)}.indent-2{padding-inline-start:calc(var(--indent-spacing) * 2)}.indent-3{padding-inline-start:calc(var(--indent-spacing) * 3)}.indent-4,.indent-5,.indent-6,.indent-7,.indent-8,.indent-9{padding-inline-start:calc(var(--indent-spacing) * 4)}.child-arrow{margin:1px 6px}.child-arrow.transparent{opacity:0}.breadcrumb{display:flex}.separator{color:var(--color-weight-500);margin:0 3px}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1.I18nService }] });

const deleteCollectionsBulkAction = createBulkDeleteAction({
    location: 'collection-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteCollection) ||
        userPermissions.includes(Permission.DeleteCatalog),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.collection.deleteCollections(ids).pipe(map(res => res.deleteCollections)),
});
const moveCollectionsBulkAction = {
    location: 'collection-list',
    label: marker('catalog.move-collections'),
    icon: 'drag-handle',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateCollection),
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const modalService = injector.get(ModalService);
        const dataService = injector.get(DataService);
        const notificationService = injector.get(NotificationService);
        modalService
            .fromComponent(MoveCollectionsDialogComponent, {
            size: 'xl',
            closable: true,
        })
            .pipe(switchMap(result => {
            if (result) {
                const inputs = selection.map(c => ({
                    collectionId: c.id,
                    parentId: result.id,
                    index: 0,
                }));
                return dataService.collection.moveCollection(inputs);
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(result => {
            notificationService.success(marker('catalog.move-collections-success'), {
                count: selection.length,
            });
            clearSelection();
            hostComponent.refresh();
        });
    },
};
const assignCollectionsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'collection-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateCollection),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, collectionIds, channelIds) => channelIds.map(channelId => dataService.collection
        .assignCollectionsToChannel({
        collectionIds,
        channelId,
    })
        .pipe(map(res => res.assignCollectionsToChannel))),
});
const removeCollectionsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'collection-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteCatalog) ||
        userPermissions.includes(Permission.DeleteCollection),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, collectionIds, channelId) => dataService.collection
        .removeCollectionsFromChannel({
        channelId: channelId,
        collectionIds,
    })
        .pipe(map(res => res.removeCollectionsFromChannel)),
});
const duplicateCollectionsBulkAction = {
    location: 'collection-list',
    label: marker('common.duplicate'),
    icon: 'copy',
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const modalService = injector.get(ModalService);
        modalService
            .fromComponent((DuplicateEntityDialogComponent), {
            locals: {
                entities: selection,
                entityName: 'Collection',
                title: marker('catalog.duplicate-collections'),
                getEntityName: entity => entity.name,
            },
        })
            .subscribe(result => {
            if (result) {
                clearSelection();
                hostComponent.refresh();
            }
        });
    },
};

class CollectionListComponent extends TypedBaseListComponent {
    constructor(dataService, notificationService) {
        super();
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.expandedIds = [];
        this.dataTableListId = 'collection-list';
        this.customFields = this.getCustomFieldConfig('Collection');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'slug',
            label: marker('common.slug'),
            type: { kind: 'text' },
            filterField: 'slug',
        })
            .addFilter({
            name: 'visibility',
            type: { kind: 'boolean' },
            label: marker('common.visibility'),
            toFilterInput: value => ({
                isPrivate: { eq: !value },
            }),
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('position', 'ASC')
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .addSort({ name: 'slug' })
            .addSort({ name: 'position' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetCollectionListDocument,
            getItems: data => data.collections,
            setVariables: (skip, _take) => {
                const topLevelOnly = this.searchTermControl.value === '' && this.filters.activeFilters.length === 0
                    ? true
                    : undefined;
                return {
                    options: {
                        skip,
                        take: _take,
                        filter: {
                            name: { contains: this.searchTermControl.value },
                            ...this.filters.createFilterInput(),
                        },
                        topLevelOnly,
                        sort: this.sorts.createSortInput(),
                    },
                };
            },
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    ngOnInit() {
        super.ngOnInit();
        this.activeCollectionId$ = this.route.paramMap.pipe(map(pm => pm.get('contents')), distinctUntilChanged());
        const expandedIds$ = this.route.queryParamMap.pipe(map(qpm => qpm.get('expanded')), distinctUntilChanged(), map(ids => (ids ? ids.split(',') : [])));
        expandedIds$.pipe(takeUntil(this.destroy$)).subscribe(ids => {
            this.expandedIds = ids;
        });
        this.subCollections$ = combineLatest(expandedIds$, this.refresh$).pipe(switchMap(([ids]) => {
            if (ids.length) {
                return this.dataService.collection
                    .getCollections({
                    take: 999,
                    filter: {
                        parentId: { in: ids },
                    },
                })
                    .mapStream(data => data.collections.items);
            }
            else {
                return of([]);
            }
        }));
        this.activeCollectionTitle$ = combineLatest(this.activeCollectionId$, this.items$, this.subCollections$).pipe(map(([id, collections, subCollections]) => {
            if (id) {
                const match = [...collections, ...subCollections].find(c => c.id === id);
                return match ? match.name : '';
            }
            return '';
        }));
        this.activeCollectionIndex$ = combineLatest(this.activeCollectionId$, this.items$, this.subCollections$).pipe(map(([id, collections, subCollections]) => {
            if (id) {
                const allCollections = [];
                for (const collection of collections) {
                    allCollections.push(collection);
                    const subCollectionMatches = subCollections.filter(c => c.parentId && c.parentId === collection.id);
                    allCollections.push(...subCollectionMatches);
                }
                return allCollections.findIndex(c => c.id === id);
            }
            return -1;
        }));
    }
    onRearrange(event) {
        this.dataService.collection.moveCollection([event]).subscribe({
            next: () => {
                this.notificationService.success(marker('common.notify-saved-changes'));
                this.refresh();
            },
            error: err => {
                this.notificationService.error(marker('common.notify-save-changes-error'));
            },
        });
    }
    closeContents() {
        const params = { ...this.route.snapshot.params };
        delete params.contents;
        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });
    }
    setLanguage(code) {
        this.dataService.client.setContentLanguage(code).subscribe();
    }
    toggleExpanded(collection) {
        let expandedIds = this.expandedIds;
        if (!expandedIds.includes(collection.id)) {
            expandedIds.push(collection.id);
        }
        else {
            expandedIds = expandedIds.filter(id => id !== collection.id);
        }
        this.router.navigate(['./'], {
            queryParams: {
                expanded: expandedIds.filter(id => !!id).join(','),
            },
            queryParamsHandling: 'merge',
            relativeTo: this.route,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionListComponent, deps: [{ token: i1.DataService }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CollectionListComponent, isStandalone: false, selector: "vdr-collection-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"collection-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\n                [routerLink]=\"['./create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-new-collection' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"collection-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-split-view [rightPanelOpen]=\"activeCollectionId$ | async\" (closeClicked)=\"closeContents()\">\n    <ng-template vdrSplitViewLeft>\n        <vdr-collection-data-table\n            class=\"mt-2\"\n            [id]=\"dataTableListId\"\n            [items]=\"items$ | async\"\n            [subCollections]=\"subCollections$ | async\"\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            [totalItems]=\"totalItems$ | async\"\n            [currentPage]=\"currentPage$ | async\"\n            [filters]=\"filters\"\n            [activeIndex]=\"activeCollectionIndex$ | async\"\n            (pageChange)=\"setPageNumber($event)\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n            (changeOrder)=\"onRearrange($event)\"\n            (visibleColumnsChange)=\"setVisibleColumns($event)\"\n        >\n            <vdr-bulk-action-menu\n                locationId=\"collection-list\"\n                [hostComponent]=\"this\"\n                [selectionManager]=\"selectionManager\"\n            ></vdr-bulk-action-menu>\n            <vdr-dt2-search\n                [searchTermControl]=\"searchTermControl\"\n                [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n            ></vdr-dt2-search>\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                <ng-template let-collection=\"item\">\n                    {{ collection.id }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('createdAt')\"\n            >\n                <ng-template let-collection=\"item\">\n                    {{ collection.createdAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('updatedAt')\"\n            >\n                <ng-template let-collection=\"item\">\n                    {{ collection.updatedAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.position' | translate\" id=\"position\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('position')\"\n            >\n                <ng-template let-collection=\"item\">\n                    {{ collection.position }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.name' | translate\" id=\"name\"\n                [optional]=\"false\"\n                [sort]=\"sorts.get('name')\"\n            >\n                <ng-template let-collection=\"item\" let-depth=\"depth\">\n                    <div [ngClass]=\"'indent-' + depth\"></div>\n                    <clr-icon\n                        class=\"child-arrow\"\n                        [class.transparent]=\"depth === 0\"\n                        shape=\"child-arrow\"\n                        *ngIf=\"!collection.children?.length\"\n                    ></clr-icon>\n                    <button\n                        class=\"icon-button folder-button\"\n                        *ngIf=\"collection.children?.length\"\n                        (click)=\"toggleExpanded(collection)\"\n                    >\n                        <clr-icon shape=\"folder\" *ngIf=\"!expandedIds.includes(collection.id)\"></clr-icon>\n                        <clr-icon shape=\"folder-open\" *ngIf=\"expandedIds.includes(collection.id)\"></clr-icon>\n                    </button>\n                    <a class=\"button-ghost\" [routerLink]=\"['./', collection.id]\"\n                        ><span>{{ collection.name }}</span>\n                        <clr-icon shape=\"arrow right\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.breadcrumb' | translate\" id=\"breadcrumb\">\n                <ng-template let-collection=\"item\">\n                    <div class=\"breadcrumb\">\n                        <ng-container *ngIf=\"collection | collectionBreadcrumb as breadcrumbs\">\n                            <ng-container *ngIf=\"breadcrumbs.length\">\n                                <div *ngFor=\"let item of breadcrumbs\">\n                                    <span class=\"separator\">/</span>{{ item.name }}\n                                </div>\n                            </ng-container>\n                            <span class=\"separator\" *ngIf=\"!breadcrumbs.length\">/</span>\n                        </ng-container>\n                    </div>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.slug' | translate\" id=\"slug\" [sort]=\"sorts.get('slug')\">\n                <ng-template let-collection=\"item\">\n                    {{ collection.slug }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.visibility' | translate\" id=\"visibility\">\n                <ng-template let-collection=\"item\">\n                    <vdr-chip *ngIf=\"collection.isPrivate\" colorType=\"warning\">{{\n                        'common.private' | translate\n                        }}</vdr-chip>\n                    <vdr-chip *ngIf=\"!collection.isPrivate\" colorType=\"success\">{{\n                        'common.public' | translate\n                        }}</vdr-chip>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.view-contents' | translate\" id=\"view-contents\" [optional]=\"false\">\n                <ng-template let-collection=\"item\">\n                    <a\n                        class=\"button-small bg-weight-150\"\n                        [routerLink]=\"['./', { contents: collection.id }]\"\n                        [queryParams]=\"{ contentsPage: 1 }\"\n                        queryParamsHandling=\"merge\"\n                    >\n                        <span>{{ 'common.view-contents' | translate }}</span>\n                        <clr-icon shape=\"file-group\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-custom-field-column\n                *ngFor=\"let customField of customFields\"\n                [customField]=\"customField\"\n                [sorts]=\"sorts\"\n            />\n        </vdr-collection-data-table>\n    </ng-template>\n    <ng-template vdrSplitViewRight [splitViewTitle]=\"activeCollectionTitle$ | async\">\n        <ng-container *ngIf=\"activeCollectionId$ | async as activeGroup\">\n            <vdr-collection-contents [collectionId]=\"activeCollectionId$ | async\"></vdr-collection-contents>\n        </ng-container>\n    </ng-template>\n</vdr-split-view>\n", styles: ["", ":host{--indent-spacing: 18px}.indent-1{padding-inline-start:var(--indent-spacing)}.indent-2{padding-inline-start:calc(var(--indent-spacing) * 2)}.indent-3{padding-inline-start:calc(var(--indent-spacing) * 3)}.indent-4,.indent-5,.indent-6,.indent-7,.indent-8,.indent-9{padding-inline-start:calc(var(--indent-spacing) * 4)}.child-arrow{margin:1px 6px}.child-arrow.transparent{opacity:0}.breadcrumb{display:flex}.separator{color:var(--color-weight-500);margin:0 3px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.SplitViewComponent, selector: "vdr-split-view", inputs: ["rightPanelOpen"], outputs: ["closeClicked"] }, { kind: "directive", type: i1.SplitViewLeftDirective, selector: "[vdrSplitViewLeft]" }, { kind: "directive", type: i1.SplitViewRightDirective, selector: "[vdrSplitViewRight]", inputs: ["splitViewTitle"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: CollectionContentsComponent, selector: "vdr-collection-contents", inputs: ["collectionId", "parentId", "inheritFilters", "updatedFilters", "previewUpdatedFilters"] }, { kind: "component", type: CollectionDataTableComponent, selector: "vdr-collection-data-table", inputs: ["subCollections"], outputs: ["changeOrder"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: CollectionBreadcrumbPipe, name: "collectionBreadcrumb" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-collection-list', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"collection-list\" />\n            <a\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\n                [routerLink]=\"['./create']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-new-collection' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"collection-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-split-view [rightPanelOpen]=\"activeCollectionId$ | async\" (closeClicked)=\"closeContents()\">\n    <ng-template vdrSplitViewLeft>\n        <vdr-collection-data-table\n            class=\"mt-2\"\n            [id]=\"dataTableListId\"\n            [items]=\"items$ | async\"\n            [subCollections]=\"subCollections$ | async\"\n            [itemsPerPage]=\"itemsPerPage$ | async\"\n            [totalItems]=\"totalItems$ | async\"\n            [currentPage]=\"currentPage$ | async\"\n            [filters]=\"filters\"\n            [activeIndex]=\"activeCollectionIndex$ | async\"\n            (pageChange)=\"setPageNumber($event)\"\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n            (changeOrder)=\"onRearrange($event)\"\n            (visibleColumnsChange)=\"setVisibleColumns($event)\"\n        >\n            <vdr-bulk-action-menu\n                locationId=\"collection-list\"\n                [hostComponent]=\"this\"\n                [selectionManager]=\"selectionManager\"\n            ></vdr-bulk-action-menu>\n            <vdr-dt2-search\n                [searchTermControl]=\"searchTermControl\"\n                [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\n            ></vdr-dt2-search>\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\n                <ng-template let-collection=\"item\">\n                    {{ collection.id }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('createdAt')\"\n            >\n                <ng-template let-collection=\"item\">\n                    {{ collection.createdAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('updatedAt')\"\n            >\n                <ng-template let-collection=\"item\">\n                    {{ collection.updatedAt | localeDate : 'short' }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.position' | translate\" id=\"position\"\n                [hiddenByDefault]=\"true\"\n                [sort]=\"sorts.get('position')\"\n            >\n                <ng-template let-collection=\"item\">\n                    {{ collection.position }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column\n                [heading]=\"'common.name' | translate\" id=\"name\"\n                [optional]=\"false\"\n                [sort]=\"sorts.get('name')\"\n            >\n                <ng-template let-collection=\"item\" let-depth=\"depth\">\n                    <div [ngClass]=\"'indent-' + depth\"></div>\n                    <clr-icon\n                        class=\"child-arrow\"\n                        [class.transparent]=\"depth === 0\"\n                        shape=\"child-arrow\"\n                        *ngIf=\"!collection.children?.length\"\n                    ></clr-icon>\n                    <button\n                        class=\"icon-button folder-button\"\n                        *ngIf=\"collection.children?.length\"\n                        (click)=\"toggleExpanded(collection)\"\n                    >\n                        <clr-icon shape=\"folder\" *ngIf=\"!expandedIds.includes(collection.id)\"></clr-icon>\n                        <clr-icon shape=\"folder-open\" *ngIf=\"expandedIds.includes(collection.id)\"></clr-icon>\n                    </button>\n                    <a class=\"button-ghost\" [routerLink]=\"['./', collection.id]\"\n                        ><span>{{ collection.name }}</span>\n                        <clr-icon shape=\"arrow right\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.breadcrumb' | translate\" id=\"breadcrumb\">\n                <ng-template let-collection=\"item\">\n                    <div class=\"breadcrumb\">\n                        <ng-container *ngIf=\"collection | collectionBreadcrumb as breadcrumbs\">\n                            <ng-container *ngIf=\"breadcrumbs.length\">\n                                <div *ngFor=\"let item of breadcrumbs\">\n                                    <span class=\"separator\">/</span>{{ item.name }}\n                                </div>\n                            </ng-container>\n                            <span class=\"separator\" *ngIf=\"!breadcrumbs.length\">/</span>\n                        </ng-container>\n                    </div>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.slug' | translate\" id=\"slug\" [sort]=\"sorts.get('slug')\">\n                <ng-template let-collection=\"item\">\n                    {{ collection.slug }}\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.visibility' | translate\" id=\"visibility\">\n                <ng-template let-collection=\"item\">\n                    <vdr-chip *ngIf=\"collection.isPrivate\" colorType=\"warning\">{{\n                        'common.private' | translate\n                        }}</vdr-chip>\n                    <vdr-chip *ngIf=\"!collection.isPrivate\" colorType=\"success\">{{\n                        'common.public' | translate\n                        }}</vdr-chip>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-column [heading]=\"'common.view-contents' | translate\" id=\"view-contents\" [optional]=\"false\">\n                <ng-template let-collection=\"item\">\n                    <a\n                        class=\"button-small bg-weight-150\"\n                        [routerLink]=\"['./', { contents: collection.id }]\"\n                        [queryParams]=\"{ contentsPage: 1 }\"\n                        queryParamsHandling=\"merge\"\n                    >\n                        <span>{{ 'common.view-contents' | translate }}</span>\n                        <clr-icon shape=\"file-group\"></clr-icon>\n                    </a>\n                </ng-template>\n            </vdr-dt2-column>\n            <vdr-dt2-custom-field-column\n                *ngFor=\"let customField of customFields\"\n                [customField]=\"customField\"\n                [sorts]=\"sorts\"\n            />\n        </vdr-collection-data-table>\n    </ng-template>\n    <ng-template vdrSplitViewRight [splitViewTitle]=\"activeCollectionTitle$ | async\">\n        <ng-container *ngIf=\"activeCollectionId$ | async as activeGroup\">\n            <vdr-collection-contents [collectionId]=\"activeCollectionId$ | async\"></vdr-collection-contents>\n        </ng-container>\n    </ng-template>\n</vdr-split-view>\n", styles: [":host{--indent-spacing: 18px}.indent-1{padding-inline-start:var(--indent-spacing)}.indent-2{padding-inline-start:calc(var(--indent-spacing) * 2)}.indent-3{padding-inline-start:calc(var(--indent-spacing) * 3)}.indent-4,.indent-5,.indent-6,.indent-7,.indent-8,.indent-9{padding-inline-start:calc(var(--indent-spacing) * 4)}.child-arrow{margin:1px 6px}.child-arrow.transparent{opacity:0}.breadcrumb{display:flex}.separator{color:var(--color-weight-500);margin:0 3px}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1.NotificationService }] });

/**
 * Facilitates communication between the CollectionTreeComponent and child CollectionTreeNodeComponents
 * without introducing a cyclic dependency.
 */
class CollectionTreeService {
    constructor() {
        this.allMoveListItems = [];
        this._rearrange$ = new Subject();
        this._delete$ = new Subject();
        this.rearrange$ = this._rearrange$.asObservable();
        this.delete$ = this._delete$.asObservable();
    }
    ngOnDestroy() {
        this._rearrange$.complete();
        this._delete$.complete();
    }
    setCollectionTree(tree) {
        this.collectionTree = tree;
    }
    resetMoveList() {
        this.allMoveListItems = [];
    }
    getMoveListItems(collection) {
        if (this.allMoveListItems.length === 0) {
            this.allMoveListItems = this.calculateAllMoveListItems();
        }
        return this.allMoveListItems.filter(item => item.id !== collection.id &&
            !item.ancestorIdPath.has(collection.id) &&
            item.id !== collection.parent?.id);
    }
    onDrop(event) {
        const item = event.item.data;
        const newParent = event.container.data;
        const newParentId = newParent.id;
        if (newParentId == null) {
            throw new Error(`Could not determine the ID of the root Collection`);
        }
        this._rearrange$.next({
            collectionId: item.id,
            parentId: newParentId,
            index: event.currentIndex,
        });
    }
    onMove(event) {
        this._rearrange$.next(event);
    }
    onDelete(id) {
        this._delete$.next(id);
    }
    calculateAllMoveListItems() {
        const visit = (node, parentPath, ancestorIdPath, output) => {
            const path = parentPath.concat(node.name);
            output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id, ancestorIdPath });
            node.children.forEach(child => visit(child, path, new Set([...ancestorIdPath, node.id]), output));
            return output;
        };
        return visit(this.collectionTree, [], new Set(), []);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionTreeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionTreeService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionTreeService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });

class CollectionTreeNodeComponent {
    constructor(parent, dataService, collectionTreeService, router, route, changeDetectorRef) {
        this.parent = parent;
        this.dataService = dataService;
        this.collectionTreeService = collectionTreeService;
        this.router = router;
        this.route = route;
        this.changeDetectorRef = changeDetectorRef;
        this.depth = 0;
        this.expandAll = false;
        this.moveListItems = [];
        if (parent) {
            this.depth = parent.depth + 1;
        }
    }
    ngOnInit() {
        this.parentName = this.collectionTree.name || '<root>';
        const permissions$ = this.dataService.client
            .userStatus()
            .mapStream(data => data.userStatus.permissions)
            .pipe(shareReplay(1));
        this.hasUpdatePermission$ = permissions$.pipe(map(perms => perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection)));
        this.hasDeletePermission$ = permissions$.pipe(map(perms => perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection)));
        this.subscription = this.selectionManager?.selectionChanges$.subscribe(() => this.changeDetectorRef.markForCheck());
    }
    ngOnChanges(changes) {
        const expandAllChange = changes['expandAll'];
        if (expandAllChange) {
            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {
                this.collectionTree.children.forEach(c => (c.expanded = false));
            }
        }
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
    trackByFn(index, item) {
        return item.id;
    }
    toggleExpanded(collection) {
        collection.expanded = !collection.expanded;
        let expandedIds = this.route.snapshot.queryParamMap.get('expanded')?.split(',') ?? [];
        if (collection.expanded) {
            expandedIds.push(collection.id);
        }
        else {
            expandedIds = expandedIds.filter(id => id !== collection.id);
        }
        this.router.navigate(['./'], {
            queryParams: {
                expanded: expandedIds.filter(id => !!id).join(','),
            },
            queryParamsHandling: 'merge',
            relativeTo: this.route,
        });
    }
    getMoveListItems(collection) {
        this.moveListItems = this.collectionTreeService.getMoveListItems(collection);
    }
    move(collection, parentId) {
        this.collectionTreeService.onMove({
            index: 0,
            parentId,
            collectionId: collection.id,
        });
    }
    moveUp(collection, currentIndex) {
        if (!collection.parent) {
            return;
        }
        this.collectionTreeService.onMove({
            index: currentIndex - 1,
            parentId: collection.parent.id,
            collectionId: collection.id,
        });
    }
    moveDown(collection, currentIndex) {
        if (!collection.parent) {
            return;
        }
        this.collectionTreeService.onMove({
            index: currentIndex + 1,
            parentId: collection.parent.id,
            collectionId: collection.id,
        });
    }
    drop(event) {
        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);
        this.collectionTreeService.onDrop(event);
    }
    delete(id) {
        this.collectionTreeService.onDelete(id);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionTreeNodeComponent, deps: [{ token: CollectionTreeNodeComponent, optional: true, skipSelf: true }, { token: i1.DataService }, { token: CollectionTreeService }, { token: i1$1.Router }, { token: i1$1.ActivatedRoute }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CollectionTreeNodeComponent, isStandalone: false, selector: "vdr-collection-tree-node", inputs: { collectionTree: "collectionTree", activeCollectionId: "activeCollectionId", expandAll: "expandAll", selectionManager: "selectionManager" }, usesOnChanges: true, ngImport: i0, template: "<div\n    cdkDropList\n    class=\"tree-node\"\n    #dropList\n    [cdkDropListData]=\"collectionTree\"\n    [cdkDropListDisabled]=\"!(hasUpdatePermission$ | async)\"\n    (cdkDropListDropped)=\"drop($event)\"\n>\n    <div\n        class=\"collection\"\n        [class.private]=\"collection.isPrivate\"\n        *ngFor=\"let collection of collectionTree.children; index as i; trackBy: trackByFn\"\n        cdkDrag\n        [cdkDragData]=\"collection\"\n    >\n        <div\n            class=\"collection-detail\"\n            [ngClass]=\"'depth-' + depth\"\n            [class.active]=\"collection.id === activeCollectionId\"\n        >\n            <div>\n                <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    [checked]=\"selectionManager.isSelected(collection)\"\n                    (click)=\"selectionManager.toggleSelection(collection, $event)\"\n                />\n            </div>\n            <div class=\"name\">\n                <button\n                    class=\"icon-button folder-button\"\n                    [disabled]=\"expandAll\"\n                    *ngIf=\"collection.children?.length; else folderSpacer\"\n                    (click)=\"toggleExpanded(collection)\"\n                >\n                    <clr-icon shape=\"folder\" *ngIf=\"!collection.expanded && !expandAll\"></clr-icon>\n                    <clr-icon shape=\"folder-open\" *ngIf=\"collection.expanded || expandAll\"></clr-icon>\n                </button>\n                <ng-template #folderSpacer>\n                    <div class=\"folder-button-spacer\"></div>\n                </ng-template>\n                {{ collection.name }}\n            </div>\n            <div class=\"flex-spacer\"></div>\n            <vdr-chip *ngIf=\"collection.isPrivate\">{{ 'catalog.private' | translate }}</vdr-chip>\n            <a\n                class=\"btn btn-link btn-sm\"\n                [routerLink]=\"['./', { contents: collection.id }]\"\n                queryParamsHandling=\"preserve\"\n            >\n                <clr-icon shape=\"view-list\"></clr-icon>\n                {{ 'catalog.view-contents' | translate }}\n            </a>\n            <a class=\"btn btn-link btn-sm\" [routerLink]=\"['/catalog/collections/', collection.id]\">\n                <clr-icon shape=\"edit\"></clr-icon>\n                {{ 'common.edit' | translate }}\n            </a>\n            <div class=\"drag-handle\" cdkDragHandle *vdrIfPermissions=\"['UpdateCatalog', 'UpdateCollection']\">\n                <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\n            </div>\n            <vdr-dropdown>\n                <button class=\"icon-button\" vdrDropdownTrigger (click)=\"getMoveListItems(collection)\">\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <a\n                        class=\"dropdown-item\"\n                        [routerLink]=\"['./', 'create', { parentId: collection.id }]\"\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\n                    >\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'catalog.create-new-collection' | translate }}\n                    </a>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"i === 0 || !(hasUpdatePermission$ | async)\"\n                        (click)=\"moveUp(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret up\"></clr-icon>\n                        {{ 'catalog.move-up' | translate }}\n                    </button>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"\n                            i === collectionTree.children.length - 1 || !(hasUpdatePermission$ | async)\n                        \"\n                        (click)=\"moveDown(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret down\"></clr-icon>\n                        {{ 'catalog.move-down' | translate }}\n                    </button>\n                    <h4 class=\"dropdown-header\">{{ 'catalog.move-to' | translate }}</h4>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        *ngFor=\"let item of moveListItems\"\n                        (click)=\"move(collection, item.id)\"\n                        [disabled]=\"!(hasUpdatePermission$ | async)\"\n                    >\n                        <div class=\"move-to-item\">\n                            <div class=\"move-icon\">\n                                <clr-icon shape=\"child-arrow\"></clr-icon>\n                            </div>\n                            <div class=\"path\">\n                                {{ item.path }}\n                            </div>\n                        </div>\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        class=\"button\"\n                        vdrDropdownItem\n                        (click)=\"delete(collection.id)\"\n                        [disabled]=\"!(hasDeletePermission$ | async)\"\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n        <vdr-collection-tree-node\n            *ngIf=\"collection.expanded || expandAll\"\n            [expandAll]=\"expandAll\"\n            [collectionTree]=\"collection\"\n            [activeCollectionId]=\"activeCollectionId\"\n            [selectionManager]=\"selectionManager\"\n        ></vdr-collection-tree-node>\n    </div>\n</div>\n", styles: [":host{display:block}.collection{background-color:var(--clr-table-bgcolor);border-radius:var(--clr-global-borderradius);font-size:.65rem;transition:transform .25s cubic-bezier(0,0,.2,1);margin-bottom:2px;border-inline-start:2px solid transparent;transition:border-left-color .2s}.collection.private{background-color:var(--color-component-bg-200)}.collection .collection-detail{padding:6px 12px;display:flex;align-items:center;justify-content:space-between;border-bottom:1px solid var(--color-component-border-100)}.collection .collection-detail.active{background-color:var(--clr-global-selection-color)}.collection .collection-detail.depth-1{padding-inline-start:36px}.collection .collection-detail.depth-2{padding-inline-start:60px}.collection .collection-detail.depth-3{padding-inline-start:84px}.collection .collection-detail.depth-4{padding-inline-start:108px}.collection .collection-detail .folder-button-spacer{display:inline-block;width:28px}.tree-node{display:block;background-color:var(--clr-table-bgcolor);border-radius:var(--clr-global-borderradius);overflow:hidden}.tree-node.cdk-drop-list-dragging>.collection{border-left-color:var(--color-primary-300)}.drag-placeholder{min-height:120px;background-color:var(--color-component-bg-300);transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drag-preview{box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.example-list.cdk-drop-list-dragging .tree-node:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}.move-to-item{display:flex;white-space:normal;align-items:baseline}.move-to-item .move-icon{flex:none;margin-inline-end:3px}.move-to-item .path{line-height:18px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "directive", type: i3$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i4.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep", "cdkDropListElementContainer"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: i4.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer", "cdkDragScale"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: i4.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: CollectionTreeNodeComponent, selector: "vdr-collection-tree-node", inputs: ["collectionTree", "activeCollectionId", "expandAll", "selectionManager"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionTreeNodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-collection-tree-node', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<div\n    cdkDropList\n    class=\"tree-node\"\n    #dropList\n    [cdkDropListData]=\"collectionTree\"\n    [cdkDropListDisabled]=\"!(hasUpdatePermission$ | async)\"\n    (cdkDropListDropped)=\"drop($event)\"\n>\n    <div\n        class=\"collection\"\n        [class.private]=\"collection.isPrivate\"\n        *ngFor=\"let collection of collectionTree.children; index as i; trackBy: trackByFn\"\n        cdkDrag\n        [cdkDragData]=\"collection\"\n    >\n        <div\n            class=\"collection-detail\"\n            [ngClass]=\"'depth-' + depth\"\n            [class.active]=\"collection.id === activeCollectionId\"\n        >\n            <div>\n                <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    [checked]=\"selectionManager.isSelected(collection)\"\n                    (click)=\"selectionManager.toggleSelection(collection, $event)\"\n                />\n            </div>\n            <div class=\"name\">\n                <button\n                    class=\"icon-button folder-button\"\n                    [disabled]=\"expandAll\"\n                    *ngIf=\"collection.children?.length; else folderSpacer\"\n                    (click)=\"toggleExpanded(collection)\"\n                >\n                    <clr-icon shape=\"folder\" *ngIf=\"!collection.expanded && !expandAll\"></clr-icon>\n                    <clr-icon shape=\"folder-open\" *ngIf=\"collection.expanded || expandAll\"></clr-icon>\n                </button>\n                <ng-template #folderSpacer>\n                    <div class=\"folder-button-spacer\"></div>\n                </ng-template>\n                {{ collection.name }}\n            </div>\n            <div class=\"flex-spacer\"></div>\n            <vdr-chip *ngIf=\"collection.isPrivate\">{{ 'catalog.private' | translate }}</vdr-chip>\n            <a\n                class=\"btn btn-link btn-sm\"\n                [routerLink]=\"['./', { contents: collection.id }]\"\n                queryParamsHandling=\"preserve\"\n            >\n                <clr-icon shape=\"view-list\"></clr-icon>\n                {{ 'catalog.view-contents' | translate }}\n            </a>\n            <a class=\"btn btn-link btn-sm\" [routerLink]=\"['/catalog/collections/', collection.id]\">\n                <clr-icon shape=\"edit\"></clr-icon>\n                {{ 'common.edit' | translate }}\n            </a>\n            <div class=\"drag-handle\" cdkDragHandle *vdrIfPermissions=\"['UpdateCatalog', 'UpdateCollection']\">\n                <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\n            </div>\n            <vdr-dropdown>\n                <button class=\"icon-button\" vdrDropdownTrigger (click)=\"getMoveListItems(collection)\">\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <a\n                        class=\"dropdown-item\"\n                        [routerLink]=\"['./', 'create', { parentId: collection.id }]\"\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\n                    >\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'catalog.create-new-collection' | translate }}\n                    </a>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"i === 0 || !(hasUpdatePermission$ | async)\"\n                        (click)=\"moveUp(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret up\"></clr-icon>\n                        {{ 'catalog.move-up' | translate }}\n                    </button>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"\n                            i === collectionTree.children.length - 1 || !(hasUpdatePermission$ | async)\n                        \"\n                        (click)=\"moveDown(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret down\"></clr-icon>\n                        {{ 'catalog.move-down' | translate }}\n                    </button>\n                    <h4 class=\"dropdown-header\">{{ 'catalog.move-to' | translate }}</h4>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        *ngFor=\"let item of moveListItems\"\n                        (click)=\"move(collection, item.id)\"\n                        [disabled]=\"!(hasUpdatePermission$ | async)\"\n                    >\n                        <div class=\"move-to-item\">\n                            <div class=\"move-icon\">\n                                <clr-icon shape=\"child-arrow\"></clr-icon>\n                            </div>\n                            <div class=\"path\">\n                                {{ item.path }}\n                            </div>\n                        </div>\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        class=\"button\"\n                        vdrDropdownItem\n                        (click)=\"delete(collection.id)\"\n                        [disabled]=\"!(hasDeletePermission$ | async)\"\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n        <vdr-collection-tree-node\n            *ngIf=\"collection.expanded || expandAll\"\n            [expandAll]=\"expandAll\"\n            [collectionTree]=\"collection\"\n            [activeCollectionId]=\"activeCollectionId\"\n            [selectionManager]=\"selectionManager\"\n        ></vdr-collection-tree-node>\n    </div>\n</div>\n", styles: [":host{display:block}.collection{background-color:var(--clr-table-bgcolor);border-radius:var(--clr-global-borderradius);font-size:.65rem;transition:transform .25s cubic-bezier(0,0,.2,1);margin-bottom:2px;border-inline-start:2px solid transparent;transition:border-left-color .2s}.collection.private{background-color:var(--color-component-bg-200)}.collection .collection-detail{padding:6px 12px;display:flex;align-items:center;justify-content:space-between;border-bottom:1px solid var(--color-component-border-100)}.collection .collection-detail.active{background-color:var(--clr-global-selection-color)}.collection .collection-detail.depth-1{padding-inline-start:36px}.collection .collection-detail.depth-2{padding-inline-start:60px}.collection .collection-detail.depth-3{padding-inline-start:84px}.collection .collection-detail.depth-4{padding-inline-start:108px}.collection .collection-detail .folder-button-spacer{display:inline-block;width:28px}.tree-node{display:block;background-color:var(--clr-table-bgcolor);border-radius:var(--clr-global-borderradius);overflow:hidden}.tree-node.cdk-drop-list-dragging>.collection{border-left-color:var(--color-primary-300)}.drag-placeholder{min-height:120px;background-color:var(--color-component-bg-300);transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drag-preview{box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.example-list.cdk-drop-list-dragging .tree-node:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}.move-to-item{display:flex;white-space:normal;align-items:baseline}.move-to-item .move-icon{flex:none;margin-inline-end:3px}.move-to-item .path{line-height:18px}\n"] }]
        }], ctorParameters: () => [{ type: CollectionTreeNodeComponent, decorators: [{
                    type: SkipSelf
                }, {
                    type: Optional
                }] }, { type: i1.DataService }, { type: CollectionTreeService }, { type: i1$1.Router }, { type: i1$1.ActivatedRoute }, { type: i0.ChangeDetectorRef }], propDecorators: { collectionTree: [{
                type: Input
            }], activeCollectionId: [{
                type: Input
            }], expandAll: [{
                type: Input
            }], selectionManager: [{
                type: Input
            }] } });

/**
 * Builds a tree from an array of nodes which have a parent.
 * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.
 */
function arrayToTree(nodes, currentState, expandedIds = []) {
    const topLevelNodes = [];
    const mappedArr = {};
    const currentStateMap = treeToMap(currentState);
    // First map the nodes of the array to an object -> create a hash table.
    for (const node of nodes) {
        mappedArr[node.id] = { ...node, children: [] };
    }
    for (const id of nodes.map(n => n.id)) {
        if (mappedArr.hasOwnProperty(id)) {
            const mappedElem = mappedArr[id];
            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? expandedIds.includes(id);
            const parent = mappedElem.parent;
            if (!parent) {
                continue;
            }
            // If the element is not at the root level, add it to its parent array of children.
            const parentIsRoot = !mappedArr[parent.id];
            if (!parentIsRoot) {
                if (mappedArr[parent.id]) {
                    mappedArr[parent.id].children.push(mappedElem);
                }
                else {
                    mappedArr[parent.id] = { children: [mappedElem] };
                }
            }
            else {
                topLevelNodes.push(mappedElem);
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const rootId = topLevelNodes.length ? topLevelNodes[0].parent.id : undefined;
    return { id: rootId, children: topLevelNodes };
}
/**
 * Converts an existing tree (as generated by the arrayToTree function) into a flat
 * Map. This is used to persist certain states (e.g. `expanded`) when re-building the
 * tree.
 */
function treeToMap(tree) {
    const nodeMap = new Map();
    function visit(node) {
        nodeMap.set(node.id, node);
        node.children.forEach(visit);
    }
    if (tree) {
        visit(tree);
    }
    return nodeMap;
}

class CollectionTreeComponent {
    constructor(collectionTreeService) {
        this.collectionTreeService = collectionTreeService;
        this.expandAll = false;
        this.expandedIds = [];
        this.rearrange = new EventEmitter();
        this.deleteCollection = new EventEmitter();
    }
    ngOnChanges(changes) {
        if ('collections' in changes && this.collections) {
            this.collectionTree = arrayToTree(this.collections, this.collectionTree, this.expandedIds);
            this.collectionTreeService.setCollectionTree(this.collectionTree);
            this.collectionTreeService.resetMoveList();
        }
    }
    ngOnInit() {
        this.collectionTreeService.rearrange$.subscribe(event => this.rearrange.emit(event));
        this.collectionTreeService.delete$.subscribe(id => this.deleteCollection.emit(id));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionTreeComponent, deps: [{ token: CollectionTreeService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CollectionTreeComponent, isStandalone: false, selector: "vdr-collection-tree", inputs: { collections: "collections", activeCollectionId: "activeCollectionId", expandAll: "expandAll", expandedIds: "expandedIds", selectionManager: "selectionManager" }, outputs: { rearrange: "rearrange", deleteCollection: "deleteCollection" }, providers: [CollectionTreeService], usesOnChanges: true, ngImport: i0, template: "<vdr-collection-tree-node\n    *ngIf=\"collectionTree\"\n    cdkDropListGroup\n    [expandAll]=\"expandAll\"\n    [collectionTree]=\"collectionTree\"\n    [selectionManager]=\"selectionManager\"\n    [activeCollectionId]=\"activeCollectionId\"\n></vdr-collection-tree-node>\n", styles: [""], dependencies: [{ kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.CdkDropListGroup, selector: "[cdkDropListGroup]", inputs: ["cdkDropListGroupDisabled"], exportAs: ["cdkDropListGroup"] }, { kind: "component", type: CollectionTreeNodeComponent, selector: "vdr-collection-tree-node", inputs: ["collectionTree", "activeCollectionId", "expandAll", "selectionManager"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CollectionTreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-collection-tree', changeDetection: ChangeDetectionStrategy.OnPush, providers: [CollectionTreeService], standalone: false, template: "<vdr-collection-tree-node\n    *ngIf=\"collectionTree\"\n    cdkDropListGroup\n    [expandAll]=\"expandAll\"\n    [collectionTree]=\"collectionTree\"\n    [selectionManager]=\"selectionManager\"\n    [activeCollectionId]=\"activeCollectionId\"\n></vdr-collection-tree-node>\n" }]
        }], ctorParameters: () => [{ type: CollectionTreeService }], propDecorators: { collections: [{
                type: Input
            }], activeCollectionId: [{
                type: Input
            }], expandAll: [{
                type: Input
            }], expandedIds: [{
                type: Input
            }], selectionManager: [{
                type: Input
            }], rearrange: [{
                type: Output
            }], deleteCollection: [{
                type: Output
            }] } });

class ConfirmVariantDeletionDialogComponent {
    constructor() {
        this.variants = [];
    }
    confirm() {
        this.resolveWith(true);
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ConfirmVariantDeletionDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ConfirmVariantDeletionDialogComponent, isStandalone: false, selector: "vdr-confirm-variant-deletion-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.confirm-deletion-of-unused-variants-title' | translate }}\n</ng-template>\n{{ 'catalog.confirm-deletion-of-unused-variants-body' | translate }}\n<ul>\n    <li *ngFor=\"let variant of variants\">{{ variant.name }} ({{ variant.sku }})</li>\n</ul>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ConfirmVariantDeletionDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-confirm-variant-deletion-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.confirm-deletion-of-unused-variants-title' | translate }}\n</ng-template>\n{{ 'catalog.confirm-deletion-of-unused-variants-body' | translate }}\n<ul>\n    <li *ngFor=\"let variant of variants\">{{ variant.name }} ({{ variant.sku }})</li>\n</ul>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n" }]
        }] });

class CreateFacetValueDialogComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.form = this.formBuilder.group({
            name: ['', Validators.required],
            code: ['', Validators.required],
        });
    }
    updateCode() {
        const nameControl = this.form.get('name');
        const codeControl = this.form.get('code');
        if (nameControl && codeControl && codeControl.pristine) {
            codeControl.setValue(normalizeString(`${nameControl.value}`, '-'));
        }
    }
    confirm() {
        const { name, code } = this.form.value;
        if (!name || !code) {
            return;
        }
        this.resolveWith({
            facetId: this.facetId,
            code,
            translations: [{ languageCode: this.languageCode, name }],
        });
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CreateFacetValueDialogComponent, deps: [{ token: i2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: CreateFacetValueDialogComponent, isStandalone: false, selector: "vdr-create-facet-value-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.create-facet-value' | translate }}\n</ng-template>\n<div class=\"form-grid\" [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input id=\"name\" type=\"text\" formControlName=\"name\" (input)=\"updateCode()\" />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n        />\n    </vdr-form-field>\n</div>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CreateFacetValueDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-create-facet-value-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>\n    {{ 'catalog.create-facet-value' | translate }}\n</ng-template>\n<div class=\"form-grid\" [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input id=\"name\" type=\"text\" formControlName=\"name\" (input)=\"updateCode()\" />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n        />\n    </vdr-form-field>\n</div>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n" }]
        }], ctorParameters: () => [{ type: i2.FormBuilder }] });

const FACET_DETAIL_QUERY = gql `
    query GetFacetDetail($id: ID!, $facetValueListOptions: FacetValueListOptions) {
        facet(id: $id) {
            ...FacetWithValueList
        }
    }
    ${FACET_WITH_VALUE_LIST_FRAGMENT}
`;
class FacetDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService, modalService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.customFields = this.getCustomFieldConfig('Facet');
        this.customValueFields = this.getCustomFieldConfig('FacetValue');
        this.detailForm = this.formBuilder.group({
            facet: this.formBuilder.group({
                code: ['', Validators.required],
                name: '',
                visible: true,
                customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
            }),
            values: this.formBuilder.record({}),
        });
        this.currentPage = 1;
        this.itemsPerPage = 10;
        this.totalItems = 0;
        this.filterControl = new FormControl('');
        this.values$ = new BehaviorSubject([]);
        this.updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];
    }
    ngOnInit() {
        this.init();
        this.filterControl.valueChanges
            .pipe(debounceTime(200), takeUntil(this.destroy$))
            .subscribe(filterTerm => {
            this.currentPage = 1;
            this.fetchFacetValues(this.currentPage, this.itemsPerPage, filterTerm);
        });
    }
    ngOnDestroy() {
        this.destroy();
    }
    updateCode(currentCode, nameValue) {
        if (!currentCode) {
            const codeControl = this.detailForm.get(['facet', 'code']);
            if (codeControl && codeControl.pristine) {
                codeControl.setValue(normalizeString(nameValue, '-'));
            }
        }
    }
    updateValueCode(currentCode, nameValue, valueId) {
        if (!currentCode) {
            const codeControl = this.detailForm.get(['values', valueId, 'code']);
            if (codeControl && codeControl.pristine) {
                codeControl.setValue(normalizeString(nameValue, '-'));
            }
        }
    }
    customValueFieldIsSet(index, name) {
        return !!this.detailForm.get(['values', index, 'customFields', name]);
    }
    addFacetValue() {
        this.modalService
            .fromComponent(CreateFacetValueDialogComponent, {
            locals: {
                languageCode: this.languageCode,
                facetId: this.id,
            },
        })
            .pipe(switchMap(result => {
            if (!result) {
                return EMPTY;
            }
            else {
                return this.dataService.facet.createFacetValues([result]);
            }
        }))
            .subscribe(result => {
            if (result.createFacetValues) {
                this.notificationService.success(marker('common.notify-create-success'), {
                    entity: 'FacetValue',
                });
                this.currentPage = 1;
                this.fetchFacetValues(this.currentPage, this.itemsPerPage);
            }
        });
    }
    create() {
        const facetForm = this.detailForm.get('facet');
        if (!facetForm || !facetForm.dirty) {
            return;
        }
        const newFacet = this.getUpdatedFacet({
            id: '',
            createdAt: '',
            updatedAt: '',
            isPrivate: false,
            languageCode: this.languageCode,
            name: '',
            code: '',
            translations: [],
        }, facetForm, this.languageCode);
        this.dataService.facet.createFacet(newFacet).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), { entity: 'Facet' });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Facet',
            });
        });
    }
    save() {
        const valuesFormRecord = this.detailForm.get('values');
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1), mergeMap(([facet, languageCode]) => {
            const facetForm = this.detailForm.get('facet');
            const updateOperations = [];
            if (facetForm && facetForm.dirty) {
                const updatedFacetInput = this.getUpdatedFacet(facet, facetForm, languageCode);
                if (updatedFacetInput) {
                    updateOperations.push(this.dataService.facet.updateFacet(updatedFacetInput));
                }
            }
            if (valuesFormRecord && valuesFormRecord.dirty) {
                const updatedValues = this.getUpdatedFacetValues(valuesFormRecord, languageCode);
                if (updatedValues.length) {
                    updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));
                }
            }
            return forkJoin(updateOperations);
        }))
            .subscribe(() => {
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.notificationService.success(marker('common.notify-update-success'), { entity: 'Facet' });
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Facet',
            });
        });
    }
    deleteFacetValue(facetValueId) {
        this.showModalAndDelete(facetValueId)
            .pipe(switchMap(response => {
            if (response.result === DeletionResult.DELETED) {
                return [true];
            }
            else {
                return this.showModalAndDelete(facetValueId, response.message || '').pipe(map(r => r.result === DeletionResult.DELETED));
            }
        }), switchMap(deleted => deleted
            ? this.dataService.query(GetFacetDetailDocument, {
                id: this.id,
            }).single$
            : []))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'FacetValue',
            });
            this.fetchFacetValues(this.currentPage, this.itemsPerPage, this.filterControl.value);
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'FacetValue',
            });
        });
    }
    showModalAndDelete(facetValueId, message) {
        return this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-facet-value'),
            body: message,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(result => result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY), map(result => result.deleteFacetValues[0]));
    }
    setCurrentPage(newPage) {
        this.currentPage = newPage;
        this.fetchFacetValues(this.currentPage, this.itemsPerPage, this.filterControl.value);
    }
    setItemsPerPage(itemsPerPage) {
        this.itemsPerPage = itemsPerPage;
        this.fetchFacetValues(this.currentPage, this.itemsPerPage, this.filterControl.value);
    }
    fetchFacetValues(currentPage, itemsPerPage, filterTerm) {
        this.dataService
            .query(FACET_DETAIL_QUERY, {
            id: this.id,
            facetValueListOptions: {
                take: itemsPerPage,
                skip: (currentPage - 1) * itemsPerPage,
                sort: {
                    createdAt: SortOrder$1.DESC,
                },
                ...(filterTerm ? { filter: { name: { contains: filterTerm } } } : {}),
            },
        })
            .single$.subscribe(({ facet }) => {
            if (facet) {
                this.values$.next([...facet.valueList.items]);
                this.totalItems = facet.valueList.totalItems;
                this.setFacetValueFormValues(facet, this.languageCode);
            }
        });
    }
    /**
     * Sets the values of the form on changes to the facet or current language.
     */
    setFormValues(facet, languageCode) {
        const currentTranslation = findTranslation(facet, languageCode);
        this.detailForm.patchValue({
            facet: {
                code: facet.code,
                visible: !facet.isPrivate,
                name: currentTranslation?.name ?? '',
            },
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['facet', 'customFields']), facet, currentTranslation);
        }
        this.values$.next([...facet.valueList.items]);
        this.totalItems = facet.valueList.totalItems;
        this.setFacetValueFormValues(facet, languageCode);
    }
    setFacetValueFormValues(facet, languageCode) {
        const currentValuesFormGroup = this.detailForm.get('values');
        facet.valueList.items.forEach(value => {
            const valueTranslation = findTranslation(value, languageCode);
            const group = {
                id: value.id,
                code: value.code,
                name: valueTranslation ? valueTranslation.name : '',
            };
            let valueControl = currentValuesFormGroup.get(value.id);
            if (!valueControl) {
                valueControl = this.formBuilder.group(group);
                currentValuesFormGroup.addControl(value.id, valueControl);
            }
            else {
                valueControl.patchValue(group);
            }
            if (this.customValueFields.length) {
                let customValueFieldsGroup = valueControl.get(['customFields']);
                if (!customValueFieldsGroup) {
                    customValueFieldsGroup = new UntypedFormGroup({});
                    valueControl.addControl('customFields', customValueFieldsGroup);
                }
                if (customValueFieldsGroup) {
                    for (const fieldDef of this.customValueFields) {
                        const key = fieldDef.name;
                        const fieldValue = fieldDef.type === 'localeString'
                            ? valueTranslation?.customFields?.[key]
                            : value.customFields[key];
                        const control = customValueFieldsGroup.get(key);
                        if (control) {
                            control.setValue(fieldValue);
                        }
                        else {
                            customValueFieldsGroup.addControl(key, new UntypedFormControl(fieldValue));
                        }
                    }
                }
            }
        });
    }
    /**
     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which
     * can then be persisted to the API.
     */
    getUpdatedFacet(facet, facetFormGroup, languageCode) {
        const input = createUpdatedTranslatable({
            translatable: facet,
            updatedFields: facetFormGroup.value,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: facet.name || '',
            },
        });
        input.isPrivate = !facetFormGroup.value.visible;
        return input;
    }
    /**
     * Given an array of facet values and the values from the detailForm, this method creates a new array
     * which can be persisted to the API via an updateFacetValues mutation.
     */
    getUpdatedFacetValues(valuesFormGroup, languageCode) {
        const dirtyValueValues = Object.values(valuesFormGroup.controls)
            .filter(c => c.dirty)
            .map(c => c.value);
        return dirtyValueValues
            .map((value, i) => createUpdatedTranslatable({
            translatable: value,
            updatedFields: value,
            customFieldConfig: this.customValueFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: '',
            },
        }))
            .filter(notNullOrUndefined);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: FacetDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2.FormBuilder }, { token: i1.NotificationService }, { token: i1.ModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: FacetDetailComponent, isStandalone: false, selector: "vdr-facet-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"facet-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"updatePermission\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"facet-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar formGroupName=\"facet\">\n            <vdr-card>\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"visible\"\n                            id=\"visibility\"\n                        />\n                        <label class=\"visible-toggle\">\n                            <ng-container *ngIf=\"detailForm.value.facet?.visible; else private\">{{\n                                'catalog.public' | translate\n                            }}</ng-container>\n                            <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                        </label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card>\n                <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card formGroupName=\"facet\">\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"code\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\n                <vdr-tabbed-custom-fields\n                    entityName=\"Facet\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('facet.customFields')\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                />\n            </vdr-card>\n\n            <vdr-custom-detail-component-host\n                locationId=\"facet-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n\n            <vdr-card\n                *ngIf=\"!(isNew$ | async)\"\n                [title]=\"'catalog.facet-values' | translate\"\n                [paddingX]=\"false\"\n            >\n                <ng-template vdrCardControls>\n                    <input\n                        type=\"text\"\n                        class=\"mr-3\"\n                        [formControl]=\"filterControl\"\n                        [placeholder]=\"'catalog.filter-by-name' | translate\"\n                    />\n                </ng-template>\n                <ng-container *ngIf=\"values$ | async as filteredValues\">\n                    <table class=\"facet-values-list table\" formArrayName=\"values\">\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>{{ 'common.name' | translate }}</th>\n                                <th>{{ 'common.code' | translate }}</th>\n                                <ng-container *ngIf=\"customValueFields.length\">\n                                    <th>{{ 'common.custom-fields' | translate }}</th>\n                                </ng-container>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr\n                                class=\"facet-value\"\n                                *ngFor=\"\n                                    let value of filteredValues\n                                        | paginate\n                                            : {\n                                                  currentPage: currentPage,\n                                                  itemsPerPage: itemsPerPage,\n                                                  totalItems: totalItems,\n                                              };\n                                    let i = index\n                                \"\n                                [formGroup]=\"detailForm.get(['values', value.id])\"\n                            >\n                                <td class=\"align-middle\">\n                                    <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\n                                </td>\n                                <td class=\"align-middle\">\n                                    <input\n                                        type=\"text\"\n                                        formControlName=\"name\"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                        (input)=\"updateValueCode(value.code, $event.target.value, value.id)\"\n                                    />\n                                </td>\n                                <td class=\"align-middle\">\n                                    <input type=\"text\" formControlName=\"code\" />\n                                </td>\n                                <td class=\"\" *ngIf=\"customValueFields.length\">\n                                    <vdr-tabbed-custom-fields\n                                        entityName=\"FacetValue\"\n                                        [customFields]=\"customValueFields\"\n                                        [compact]=\"true\"\n                                        [customFieldsFormGroup]=\"\n                                            detailForm.get(['values', value.id, 'customFields'])\n                                        \"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                    ></vdr-tabbed-custom-fields>\n                                </td>\n                                <td class=\"align-middle\">\n                                    <vdr-dropdown>\n                                        <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\n                                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                                        </button>\n                                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                            <button\n                                                type=\"button\"\n                                                class=\"delete-button\"\n                                                (click)=\"deleteFacetValue(value.id)\"\n                                                [disabled]=\"!(updatePermission | hasPermission)\"\n                                                vdrDropdownItem\n                                            >\n                                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                                {{ 'common.delete' | translate }}\n                                            </button>\n                                        </vdr-dropdown-menu>\n                                    </vdr-dropdown>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div class=\"pagination-wrapper\">\n                        <vdr-items-per-page-controls\n                            [itemsPerPage]=\"itemsPerPage\"\n                            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n                        ></vdr-items-per-page-controls>\n                        <vdr-pagination-controls\n                            [currentPage]=\"currentPage\"\n                            [itemsPerPage]=\"itemsPerPage\"\n                            [totalItems]=\"totalItems\"\n                            (pageChange)=\"setCurrentPage($event)\"\n                        ></vdr-pagination-controls>\n                    </div>\n                </ng-container>\n                <div>\n                    <button\n                        type=\"button\"\n                        class=\"button m-3\"\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n                        (click)=\"addFacetValue()\"\n                    >\n                        <clr-icon shape=\"add\"></clr-icon>\n                        {{ 'catalog.add-facet-value' | translate }}\n                    </button>\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [".visible-toggle{margin-top:-3px!important}tr.facet-value td{vertical-align:middle}.pagination-wrapper{display:flex;justify-content:space-between;padding:var(--card-padding)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i2.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ItemsPerPageControlsComponent, selector: "vdr-items-per-page-controls", inputs: ["itemsPerPage"], outputs: ["itemsPerPageChange"] }, { kind: "component", type: i1.PaginationControlsComponent, selector: "vdr-pagination-controls", inputs: ["id", "currentPage", "itemsPerPage", "totalItems"], outputs: ["pageChange"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.EntityInfoComponent, selector: "vdr-entity-info", inputs: ["small", "entity"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "directive", type: i1.CardControlsDirective, selector: "[vdrCardControls]" }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5$2.PaginatePipe, name: "paginate" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: FacetDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-facet-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"facet-detail\" />\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"updatePermission\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"facet-detail\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar formGroupName=\"facet\">\n            <vdr-card>\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"visible\"\n                            id=\"visibility\"\n                        />\n                        <label class=\"visible-toggle\">\n                            <ng-container *ngIf=\"detailForm.value.facet?.visible; else private\">{{\n                                'catalog.public' | translate\n                            }}</ng-container>\n                            <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                        </label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card>\n                <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n        <vdr-page-block>\n            <vdr-card formGroupName=\"facet\">\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n                        <input\n                            id=\"code\"\n                            type=\"text\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"code\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\n                <vdr-tabbed-custom-fields\n                    entityName=\"Facet\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('facet.customFields')\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                />\n            </vdr-card>\n\n            <vdr-custom-detail-component-host\n                locationId=\"facet-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n\n            <vdr-card\n                *ngIf=\"!(isNew$ | async)\"\n                [title]=\"'catalog.facet-values' | translate\"\n                [paddingX]=\"false\"\n            >\n                <ng-template vdrCardControls>\n                    <input\n                        type=\"text\"\n                        class=\"mr-3\"\n                        [formControl]=\"filterControl\"\n                        [placeholder]=\"'catalog.filter-by-name' | translate\"\n                    />\n                </ng-template>\n                <ng-container *ngIf=\"values$ | async as filteredValues\">\n                    <table class=\"facet-values-list table\" formArrayName=\"values\">\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>{{ 'common.name' | translate }}</th>\n                                <th>{{ 'common.code' | translate }}</th>\n                                <ng-container *ngIf=\"customValueFields.length\">\n                                    <th>{{ 'common.custom-fields' | translate }}</th>\n                                </ng-container>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr\n                                class=\"facet-value\"\n                                *ngFor=\"\n                                    let value of filteredValues\n                                        | paginate\n                                            : {\n                                                  currentPage: currentPage,\n                                                  itemsPerPage: itemsPerPage,\n                                                  totalItems: totalItems,\n                                              };\n                                    let i = index\n                                \"\n                                [formGroup]=\"detailForm.get(['values', value.id])\"\n                            >\n                                <td class=\"align-middle\">\n                                    <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\n                                </td>\n                                <td class=\"align-middle\">\n                                    <input\n                                        type=\"text\"\n                                        formControlName=\"name\"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                        (input)=\"updateValueCode(value.code, $event.target.value, value.id)\"\n                                    />\n                                </td>\n                                <td class=\"align-middle\">\n                                    <input type=\"text\" formControlName=\"code\" />\n                                </td>\n                                <td class=\"\" *ngIf=\"customValueFields.length\">\n                                    <vdr-tabbed-custom-fields\n                                        entityName=\"FacetValue\"\n                                        [customFields]=\"customValueFields\"\n                                        [compact]=\"true\"\n                                        [customFieldsFormGroup]=\"\n                                            detailForm.get(['values', value.id, 'customFields'])\n                                        \"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                    ></vdr-tabbed-custom-fields>\n                                </td>\n                                <td class=\"align-middle\">\n                                    <vdr-dropdown>\n                                        <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\n                                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                                        </button>\n                                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                            <button\n                                                type=\"button\"\n                                                class=\"delete-button\"\n                                                (click)=\"deleteFacetValue(value.id)\"\n                                                [disabled]=\"!(updatePermission | hasPermission)\"\n                                                vdrDropdownItem\n                                            >\n                                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                                {{ 'common.delete' | translate }}\n                                            </button>\n                                        </vdr-dropdown-menu>\n                                    </vdr-dropdown>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div class=\"pagination-wrapper\">\n                        <vdr-items-per-page-controls\n                            [itemsPerPage]=\"itemsPerPage\"\n                            (itemsPerPageChange)=\"setItemsPerPage($event)\"\n                        ></vdr-items-per-page-controls>\n                        <vdr-pagination-controls\n                            [currentPage]=\"currentPage\"\n                            [itemsPerPage]=\"itemsPerPage\"\n                            [totalItems]=\"totalItems\"\n                            (pageChange)=\"setCurrentPage($event)\"\n                        ></vdr-pagination-controls>\n                    </div>\n                </ng-container>\n                <div>\n                    <button\n                        type=\"button\"\n                        class=\"button m-3\"\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n                        (click)=\"addFacetValue()\"\n                    >\n                        <clr-icon shape=\"add\"></clr-icon>\n                        {{ 'catalog.add-facet-value' | translate }}\n                    </button>\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [".visible-toggle{margin-top:-3px!important}tr.facet-value td{vertical-align:middle}.pagination-wrapper{display:flex;justify-content:space-between;padding:var(--card-padding)}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2.FormBuilder }, { type: i1.NotificationService }, { type: i1.ModalService }] });

const deleteFacetsBulkAction = createBulkDeleteAction({
    location: 'facet-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteFacet) ||
        userPermissions.includes(Permission.DeleteCatalog),
    getItemName: item => item.name,
    shouldRetryItem: (response, item) => !!response.message,
    bulkDelete: (dataService, ids, retrying) => dataService.facet.deleteFacets(ids, retrying).pipe(map(res => res.deleteFacets)),
});
const assignFacetsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'facet-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateFacet),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, facetIds, channelIds) => channelIds.map(channelId => dataService.facet
        .assignFacetsToChannel({
        facetIds,
        channelId,
    })
        .pipe(map(res => res.assignFacetsToChannel))),
});
const removeFacetsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'facet-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteCatalog) ||
        userPermissions.includes(Permission.DeleteFacet),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, facetIds, channelId, retrying) => dataService.facet
        .removeFacetsFromChannel({
        channelId: channelId,
        facetIds,
        force: retrying,
    })
        .pipe(map(res => res.removeFacetsFromChannel)),
    isErrorResult: result => (result.__typename === 'FacetInUseError' ? result.message : undefined),
});
const removeFacetsFromChannelBulkAction2 = {
    location: 'facet-list',
    label: marker('catalog.remove-from-channel'),
    getTranslationVars: ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)),
    icon: 'layers',
    iconClass: 'is-warning',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateFacet) ||
        userPermissions.includes(Permission.UpdateCatalog),
    isVisible: ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)),
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const modalService = injector.get(ModalService);
        const dataService = injector.get(DataService);
        const notificationService = injector.get(NotificationService);
        const activeChannelId$ = dataService.client
            .userStatus()
            .mapSingle(({ userStatus }) => userStatus.activeChannelId);
        function showModalAndDelete(facetIds, message) {
            return modalService
                .dialog({
                title: marker('catalog.remove-from-channel'),
                translationVars: {
                    count: selection.length,
                },
                size: message ? 'lg' : 'md',
                body: message,
                buttons: [
                    { type: 'secondary', label: marker('common.cancel') },
                    {
                        type: 'danger',
                        label: message ? marker('common.force-remove') : marker('common.remove'),
                        returnValue: true,
                    },
                ],
            })
                .pipe(switchMap(res => res
                ? activeChannelId$.pipe(switchMap(activeChannelId => activeChannelId
                    ? dataService.facet.removeFacetsFromChannel({
                        channelId: activeChannelId,
                        facetIds,
                        force: !!message,
                    })
                    : EMPTY), map(res2 => res2.removeFacetsFromChannel))
                : EMPTY));
        }
        showModalAndDelete(unique(selection.map(f => f.id)))
            .pipe(switchMap(result => {
            let removedCount = selection.length;
            const errors = [];
            const errorIds = [];
            let i = 0;
            for (const item of result) {
                if (item.__typename === 'FacetInUseError') {
                    errors.push(item.message);
                    errorIds.push(selection[i]?.id);
                    removedCount--;
                }
                i++;
            }
            if (0 < errorIds.length) {
                return showModalAndDelete(errorIds, errors.join('\n')).pipe(map(result2 => {
                    const notRemovedCount = result2.filter(r => r.__typename === 'FacetInUseError').length;
                    return selection.length - notRemovedCount;
                }));
            }
            else {
                return of(removedCount);
            }
        }), switchMap(removedCount => removedCount
            ? getChannelCodeFromUserStatus(dataService).then(({ channelCode }) => ({
                channelCode,
                removedCount,
            }))
            : EMPTY))
            .subscribe(({ removedCount, channelCode }) => {
            if (removedCount) {
                hostComponent.refresh();
                clearSelection();
                notificationService.success(marker('catalog.notify-remove-facets-from-channel-success'), {
                    count: removedCount,
                    channelCode,
                });
            }
        });
    },
};
const duplicateFacetsBulkAction = {
    location: 'facet-list',
    label: marker('common.duplicate'),
    icon: 'copy',
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const modalService = injector.get(ModalService);
        modalService
            .fromComponent((DuplicateEntityDialogComponent), {
            locals: {
                entities: selection,
                entityName: 'Facet',
                title: marker('catalog.duplicate-facets'),
                getEntityName: entity => entity.name,
            },
        })
            .subscribe(result => {
            if (result) {
                clearSelection();
                hostComponent.refresh();
            }
        });
    },
};

const FACET_LIST_QUERY = gql `
    query GetFacetList($options: FacetListOptions, $facetValueListOptions: FacetValueListOptions) {
        facets(options: $options) {
            items {
                ...FacetWithValueList
            }
            totalItems
        }
    }
    ${FACET_WITH_VALUE_LIST_FRAGMENT}
`;
class FacetListComponent extends TypedBaseListComponent {
    constructor(dataService) {
        super();
        this.dataService = dataService;
        this.initialLimit = 3;
        this.displayLimit = {};
        this.dataTableListId = 'facet-list';
        this.customFields = this.getCustomFieldConfig('Facet');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'visibility',
            type: { kind: 'boolean' },
            label: marker('common.visibility'),
            toFilterInput: value => ({
                isPrivate: { eq: !value },
            }),
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSort({ name: 'id' })
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'name' })
            .addSort({ name: 'code' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        super.configure({
            document: GetFacetListDocument,
            getItems: data => data.facets,
            setVariables: (skip, take) => ({
                options: {
                    skip,
                    take,
                    filter: {
                        name: {
                            contains: this.searchTermControl.value,
                        },
                        ...this.filters.createFilterInput(),
                    },
                    sort: this.sorts.createSortInput(),
                },
                facetValueListOptions: {
                    take: 100,
                },
            }),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
    }
    toggleDisplayLimit(facet) {
        if (this.displayLimit[facet.id] === facet.valueList.items.length) {
            this.displayLimit[facet.id] = this.initialLimit;
        }
        else {
            this.displayLimit[facet.id] = facet.valueList.items.length;
        }
    }
    setLanguage(code) {
        this.dataService.client.setContentLanguage(code).subscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: FacetListComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: FacetListComponent, isStandalone: false, selector: "vdr-facet-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"facet-list\" />\n            <a\n                class=\"btn btn-primary\"\n                [routerLink]=\"['./create']\"\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-new-facet' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"facet-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"facet-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\n        <ng-template let-facet=\"item\">\n            {{ facet.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-facet=\"item\">\n            {{ facet.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-facet=\"item\">\n            {{ facet.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-facet=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', facet.id]\"\n                ><span>{{ facet.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\">\n        <ng-template let-facet=\"item\">\n            {{ facet.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.visibility' | translate\" id=\"visibility\">\n        <ng-template let-facet=\"item\">\n            <vdr-chip *ngIf=\"facet.isPrivate\" colorType=\"warning\">{{\n                'common.private' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!facet.isPrivate\" colorType=\"success\">{{\n                'common.public' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.values' | translate\" id=\"values\">\n        <ng-template let-facet=\"item\">\n            <div class=\"facet-values-list\">\n                <vdr-facet-value-chip\n                    *ngFor=\"let value of facet.valueList.items | slice : 0 : displayLimit[facet.id] || 3\"\n                    [facetValue]=\"value\"\n                    [removable]=\"false\"\n                    [displayFacetName]=\"false\"\n                ></vdr-facet-value-chip>\n                <vdr-chip *ngIf=\"displayLimit[facet.id] < facet.valueList.totalItems && (displayLimit[facet.id] || 0) === facet.valueList.items.length\">\n                    ... + {{ facet.valueList.totalItems - facet.valueList.items.length }}\n                </vdr-chip>\n                <button\n                    class=\"button-small\"\n                    *ngIf=\"facet.valueList.items.length > initialLimit\"\n                    (click)=\"toggleDisplayLimit(facet)\"\n                >\n                    <ng-container *ngIf=\"(displayLimit[facet.id] || 0) < facet.valueList.items.length; else collapse\">\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ facet.valueList.totalItems - initialLimit }}\n                    </ng-container>\n                    <ng-template #collapse>\n                        <clr-icon shape=\"minus\"></clr-icon>\n                    </ng-template>\n                </button>\n            </div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [".facet-values-list{max-width:500px;display:flex;flex-wrap:wrap;align-items:center;gap:4px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.FacetValueChipComponent, selector: "vdr-facet-value-chip", inputs: ["facetValue", "removable", "displayFacetName"], outputs: ["remove"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i3$1.SlicePipe, name: "slice" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: FacetListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-facet-list', standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"facet-list\" />\n            <a\n                class=\"btn btn-primary\"\n                [routerLink]=\"['./create']\"\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-new-facet' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu locationId=\"facet-list\" />\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"facet-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\n    ></vdr-dt2-search>\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\n        <ng-template let-facet=\"item\">\n            {{ facet.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-facet=\"item\">\n            {{ facet.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-facet=\"item\">\n            {{ facet.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-facet=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', facet.id]\"\n                ><span>{{ facet.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\">\n        <ng-template let-facet=\"item\">\n            {{ facet.code }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.visibility' | translate\" id=\"visibility\">\n        <ng-template let-facet=\"item\">\n            <vdr-chip *ngIf=\"facet.isPrivate\" colorType=\"warning\">{{\n                'common.private' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!facet.isPrivate\" colorType=\"success\">{{\n                'common.public' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.values' | translate\" id=\"values\">\n        <ng-template let-facet=\"item\">\n            <div class=\"facet-values-list\">\n                <vdr-facet-value-chip\n                    *ngFor=\"let value of facet.valueList.items | slice : 0 : displayLimit[facet.id] || 3\"\n                    [facetValue]=\"value\"\n                    [removable]=\"false\"\n                    [displayFacetName]=\"false\"\n                ></vdr-facet-value-chip>\n                <vdr-chip *ngIf=\"displayLimit[facet.id] < facet.valueList.totalItems && (displayLimit[facet.id] || 0) === facet.valueList.items.length\">\n                    ... + {{ facet.valueList.totalItems - facet.valueList.items.length }}\n                </vdr-chip>\n                <button\n                    class=\"button-small\"\n                    *ngIf=\"facet.valueList.items.length > initialLimit\"\n                    (click)=\"toggleDisplayLimit(facet)\"\n                >\n                    <ng-container *ngIf=\"(displayLimit[facet.id] || 0) < facet.valueList.items.length; else collapse\">\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ facet.valueList.totalItems - initialLimit }}\n                    </ng-container>\n                    <ng-template #collapse>\n                        <clr-icon shape=\"minus\"></clr-icon>\n                    </ng-template>\n                </button>\n            </div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [".facet-values-list{max-width:500px;display:flex;flex-wrap:wrap;align-items:center;gap:4px}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }] });

const DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';
class GenerateProductVariantsComponent {
    constructor(dataService, formBuilder) {
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.variantsChange = new EventEmitter();
        this.optionGroups = [];
        this.variantFormValues = {};
        this.selectedStockLocationId = null;
    }
    ngOnInit() {
        this.dataService.settings.getActiveChannel().single$.subscribe(data => {
            this.currencyCode = data.activeChannel.defaultCurrencyCode;
        });
        this.stockLocations$ = this.dataService
            .query(GetStockLocationListDocument, {
            options: {
                take: 999,
            },
        })
            .refetchOnChannelChange()
            .mapStream(({ stockLocations }) => stockLocations.items)
            .pipe(tap(items => {
            if (items.length) {
                this.selectedStockLocationId = items[0].id;
                this.onFormChange();
            }
        }));
        this.generateVariants();
    }
    addOption() {
        this.optionGroups.push({ name: '', values: [] });
        const index = this.optionGroups.length - 1;
        setTimeout(() => {
            const input = this.groupNameInputs.get(index)?.nativeElement;
            input?.focus();
        });
    }
    removeOption(name) {
        this.optionGroups = this.optionGroups.filter(g => g.name !== name);
        this.generateVariants();
    }
    generateVariants() {
        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);
        const groups = totalValuesCount
            ? this.optionGroups.map(g => g.values.map(v => v.name))
            : [[DEFAULT_VARIANT_CODE]];
        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));
        this.variants.forEach((variant, index) => {
            if (!this.variantFormValues[variant.id]) {
                const formGroup = this.formBuilder.nonNullable.group({
                    optionValues: [variant.values],
                    enabled: true,
                    price: this.copyFromDefault(variant.id, 'price', 0),
                    sku: this.copyFromDefault(variant.id, 'sku', ''),
                    stock: this.copyFromDefault(variant.id, 'stock', 0),
                });
                formGroup.valueChanges.subscribe(() => this.onFormChange());
                if (index === 0) {
                    formGroup.get('price')?.valueChanges.subscribe(value => {
                        this.copyValuesToPristine('price', formGroup.get('price'));
                    });
                    formGroup.get('sku')?.valueChanges.subscribe(value => {
                        this.copyValuesToPristine('sku', formGroup.get('sku'));
                    });
                    formGroup.get('stock')?.valueChanges.subscribe(value => {
                        this.copyValuesToPristine('stock', formGroup.get('stock'));
                    });
                }
                this.variantFormValues[variant.id] = formGroup;
            }
        });
        this.onFormChange();
    }
    trackByFn(index, variant) {
        return variant.values.join('|');
    }
    handleEnter(event, optionValueInputComponent) {
        event.preventDefault();
        event.stopPropagation();
        optionValueInputComponent.focus();
    }
    copyValuesToPristine(field, formControl) {
        if (!formControl) {
            return;
        }
        Object.values(this.variantFormValues).forEach(formGroup => {
            const correspondingFormControl = formGroup.get(field);
            if (correspondingFormControl && correspondingFormControl.pristine) {
                correspondingFormControl.setValue(formControl.value, { emitEvent: false });
            }
        });
    }
    onFormChange() {
        const variantsToCreate = this.variants
            .map(v => this.variantFormValues[v.id].value)
            .filter(v => v.enabled);
        this.variantsChange.emit({
            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),
            variants: variantsToCreate,
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            stockLocationId: this.selectedStockLocationId,
        });
    }
    copyFromDefault(variantId, prop, value) {
        return variantId !== DEFAULT_VARIANT_CODE
            ? this.variantFormValues[DEFAULT_VARIANT_CODE].get(prop)?.value
            : value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: GenerateProductVariantsComponent, deps: [{ token: i1.DataService }, { token: i2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: GenerateProductVariantsComponent, isStandalone: false, selector: "vdr-generate-product-variants", outputs: { variantsChange: "variantsChange" }, viewQueries: [{ propertyName: "groupNameInputs", predicate: ["optionGroupName"], descendants: true, read: ElementRef }], ngImport: i0, template: "<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\n    <div class=\"name\">\n        <label>{{ 'catalog.option' | translate }}</label>\n        <input\n            #optionGroupName\n            placeholder=\"e.g. Size\"\n            clrInput\n            [(ngModel)]=\"group.name\"\n            name=\"name\"\n            required\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\n        />\n    </div>\n    <div class=\"values\">\n        <label>{{ 'catalog.option-values' | translate }}</label>\n        <vdr-option-value-input\n            #optionValueInputComponent\n            [(ngModel)]=\"group.values\"\n            (ngModelChange)=\"generateVariants()\"\n            (edit)=\"generateVariants()\"\n            [groupName]=\"group.name\"\n            [disabled]=\"group.name === ''\"\n        ></vdr-option-value-input>\n    </div>\n    <div class=\"remove-group\">\n        <button\n            class=\"button-small mt-2\"\n            [title]=\"'catalog.remove-option' | translate\"\n            (click)=\"removeOption(group.name)\"\n        >\n            <clr-icon shape=\"trash\"></clr-icon>\n        </button>\n    </div>\n</div>\n<button class=\"button mb-2\" (click)=\"addOption()\">\n    <clr-icon shape=\"plus\"></clr-icon>\n    {{ 'catalog.add-option' | translate }}\n</button>\n\n<ng-container *ngIf=\"stockLocations$ | async as stockLocations\">\n    <clr-alert *ngIf=\"stockLocations.length === 0\" clrAlertType=\"warning\" [clrAlertClosable]=\"false\" class=\"\">\n        <clr-alert-item>\n            <span class=\"alert-text\">\n                {{ 'catalog.no-stock-locations-available-on-current-channel' | translate }}\n            </span>\n        </clr-alert-item>\n    </clr-alert>\n\n    <div class=\"form-grid mb-2\">\n        <vdr-form-field *ngIf=\"stockLocations.length\" [label]=\"'catalog.add-stock-to-location' | translate\">\n            <select [(ngModel)]=\"selectedStockLocationId\">\n                <option *ngFor=\"let location of stockLocations\" [value]=\"location.id\">\n                    {{ location.name }}\n                </option>\n            </select>\n        </vdr-form-field>\n    </div>\n\n    <div class=\"variants-preview\" *ngIf=\"0 < stockLocations.length\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\n                    <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\n                    <th>{{ 'catalog.sku' | translate }}</th>\n                    <th>{{ 'catalog.price' | translate }}</th>\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor=\"let variant of variants; trackBy: trackByFn\"\n                [class.disabled]=\"!variantFormValues[variant.id].value.enabled === false\"\n                [formGroup]=\"variantFormValues[variant.id]\"\n            >\n                <td *ngIf=\"1 < variants.length\">\n                    <input type=\"checkbox\" formControlName=\"enabled\" clrCheckbox />\n                </td>\n                <td *ngIf=\"1 < variants.length\">\n                    {{ variant.values.join(' ') }}\n                </td>\n                <td>\n                    <vdr-form-field>\n                        <input type=\"text\" formControlName=\"sku\" [placeholder]=\"'catalog.sku' | translate\" />\n                    </vdr-form-field>\n                </td>\n                <td>\n                    <vdr-form-field>\n                        <vdr-currency-input\n                            formControlName=\"price\"\n                            [currencyCode]=\"currencyCode\"\n                        ></vdr-currency-input>\n                    </vdr-form-field>\n                </td>\n                <td>\n                    <vdr-form-field>\n                        <input type=\"number\" formControlName=\"stock\" min=\"0\" step=\"1\" />\n                    </vdr-form-field>\n                </td>\n            </tr>\n        </table>\n    </div>\n</ng-container>\n", styles: [":host{display:block;margin-bottom:120px}.option-groups{display:flex}.values{flex:1;margin:0 6px}.remove-group{padding-top:18px}.variants-preview tr.disabled td{background-color:var(--color-component-bg-100);color:var(--color-grey-400)}\n"], dependencies: [{ kind: "component", type: i3.ClrAlert, selector: "clr-alert", inputs: ["clrAlertSizeSmall", "clrAlertClosable", "clrAlertAppLevel", "clrCloseButtonAriaLabel", "clrAlertLightweight", "clrAlertType", "clrAlertIcon", "clrAlertClosed"], outputs: ["clrAlertClosedChange"] }, { kind: "component", type: i3.ClrAlertItem, selector: "clr-alert-item" }, { kind: "directive", type: i3.ClrAlertText, selector: ".alert-text" }, { kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "directive", type: i3.ClrInput, selector: "[clrInput]" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i1.CurrencyInputComponent, selector: "vdr-currency-input", inputs: ["disabled", "readonly", "value", "currencyCode"], outputs: ["valueChange"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: OptionValueInputComponent, selector: "vdr-option-value-input", inputs: ["groupName", "options", "disabled"], outputs: ["add", "remove", "edit"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: GenerateProductVariantsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-generate-product-variants', standalone: false, template: "<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\n    <div class=\"name\">\n        <label>{{ 'catalog.option' | translate }}</label>\n        <input\n            #optionGroupName\n            placeholder=\"e.g. Size\"\n            clrInput\n            [(ngModel)]=\"group.name\"\n            name=\"name\"\n            required\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\n        />\n    </div>\n    <div class=\"values\">\n        <label>{{ 'catalog.option-values' | translate }}</label>\n        <vdr-option-value-input\n            #optionValueInputComponent\n            [(ngModel)]=\"group.values\"\n            (ngModelChange)=\"generateVariants()\"\n            (edit)=\"generateVariants()\"\n            [groupName]=\"group.name\"\n            [disabled]=\"group.name === ''\"\n        ></vdr-option-value-input>\n    </div>\n    <div class=\"remove-group\">\n        <button\n            class=\"button-small mt-2\"\n            [title]=\"'catalog.remove-option' | translate\"\n            (click)=\"removeOption(group.name)\"\n        >\n            <clr-icon shape=\"trash\"></clr-icon>\n        </button>\n    </div>\n</div>\n<button class=\"button mb-2\" (click)=\"addOption()\">\n    <clr-icon shape=\"plus\"></clr-icon>\n    {{ 'catalog.add-option' | translate }}\n</button>\n\n<ng-container *ngIf=\"stockLocations$ | async as stockLocations\">\n    <clr-alert *ngIf=\"stockLocations.length === 0\" clrAlertType=\"warning\" [clrAlertClosable]=\"false\" class=\"\">\n        <clr-alert-item>\n            <span class=\"alert-text\">\n                {{ 'catalog.no-stock-locations-available-on-current-channel' | translate }}\n            </span>\n        </clr-alert-item>\n    </clr-alert>\n\n    <div class=\"form-grid mb-2\">\n        <vdr-form-field *ngIf=\"stockLocations.length\" [label]=\"'catalog.add-stock-to-location' | translate\">\n            <select [(ngModel)]=\"selectedStockLocationId\">\n                <option *ngFor=\"let location of stockLocations\" [value]=\"location.id\">\n                    {{ location.name }}\n                </option>\n            </select>\n        </vdr-form-field>\n    </div>\n\n    <div class=\"variants-preview\" *ngIf=\"0 < stockLocations.length\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\n                    <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\n                    <th>{{ 'catalog.sku' | translate }}</th>\n                    <th>{{ 'catalog.price' | translate }}</th>\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor=\"let variant of variants; trackBy: trackByFn\"\n                [class.disabled]=\"!variantFormValues[variant.id].value.enabled === false\"\n                [formGroup]=\"variantFormValues[variant.id]\"\n            >\n                <td *ngIf=\"1 < variants.length\">\n                    <input type=\"checkbox\" formControlName=\"enabled\" clrCheckbox />\n                </td>\n                <td *ngIf=\"1 < variants.length\">\n                    {{ variant.values.join(' ') }}\n                </td>\n                <td>\n                    <vdr-form-field>\n                        <input type=\"text\" formControlName=\"sku\" [placeholder]=\"'catalog.sku' | translate\" />\n                    </vdr-form-field>\n                </td>\n                <td>\n                    <vdr-form-field>\n                        <vdr-currency-input\n                            formControlName=\"price\"\n                            [currencyCode]=\"currencyCode\"\n                        ></vdr-currency-input>\n                    </vdr-form-field>\n                </td>\n                <td>\n                    <vdr-form-field>\n                        <input type=\"number\" formControlName=\"stock\" min=\"0\" step=\"1\" />\n                    </vdr-form-field>\n                </td>\n            </tr>\n        </table>\n    </div>\n</ng-container>\n", styles: [":host{display:block;margin-bottom:120px}.option-groups{display:flex}.values{flex:1;margin:0 6px}.remove-group{padding-top:18px}.variants-preview tr.disabled td{background-color:var(--color-component-bg-100);color:var(--color-grey-400)}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i2.FormBuilder }], propDecorators: { variantsChange: [{
                type: Output
            }], groupNameInputs: [{
                type: ViewChildren,
                args: ['optionGroupName', { read: ElementRef }]
            }] } });

class ProductVariantListComponent extends TypedBaseListComponent {
    constructor() {
        super();
        this.hideLanguageSelect = false;
        this.customFields = this.getCustomFieldConfig('ProductVariant');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilters([
            {
                name: 'name',
                type: { kind: 'text' },
                label: marker('common.name'),
                filterField: 'name',
            },
            {
                name: 'enabled',
                type: { kind: 'boolean' },
                label: marker('common.enabled'),
                filterField: 'enabled',
            },
            {
                name: 'sku',
                type: { kind: 'text' },
                label: marker('catalog.sku'),
                filterField: 'sku',
            },
            {
                name: 'price',
                type: { kind: 'number', inputType: 'currency' },
                label: marker('common.price'),
                filterField: 'price',
            },
            {
                name: 'priceWithTax',
                type: { kind: 'number', inputType: 'currency' },
                label: marker('common.price-with-tax'),
                filterField: 'priceWithTax',
            },
        ])
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .addSorts([
            { name: 'id' },
            { name: 'createdAt' },
            { name: 'updatedAt' },
            { name: 'name' },
            { name: 'sku' },
            { name: 'price' },
            { name: 'priceWithTax' },
        ])
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        this.configure({
            document: ProductVariantListQueryDocument,
            getItems: data => data.productVariants,
            setVariables: (skip, take) => {
                const searchTerm = this.searchTermControl.value;
                const filterParam = { _and: [] };
                const filterInput = this.filters.createFilterInput();
                if (Object.keys(filterInput).length) {
                    filterParam._and?.push(filterInput);
                }
                if (searchTerm) {
                    filterParam._and?.push({
                        _or: [
                            {
                                name: { contains: searchTerm },
                            },
                            {
                                sku: { contains: searchTerm },
                            },
                        ],
                    });
                }
                if (this.productId) {
                    filterParam._and?.push({
                        productId: {
                            eq: this.productId,
                        },
                    });
                }
                return {
                    options: {
                        skip,
                        take,
                        filter: filterParam,
                        sort: this.sorts.createSortInput(),
                    },
                };
            },
            refreshListOnChanges: [this.sorts.valueChanges, this.filters.valueChanges],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ProductVariantListComponent, isStandalone: false, selector: "vdr-product-variant-list", inputs: { productId: "productId", hideLanguageSelect: "hideLanguageSelect", dataTableId: "dataTableId" }, usesInheritance: true, ngImport: i0, template: "<vdr-page-block *ngIf=\"!hideLanguageSelect\">\n    <vdr-language-selector\n        [availableLanguageCodes]=\"availableLanguages$ | async\"\n        [currentLanguageCode]=\"contentLanguage$ | async\"\n        (languageCodeChange)=\"setLanguage($event)\"\n    ></vdr-language-selector>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableId || 'product-variant-list'\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"product-variant-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'settings.search-by-product-name-or-sku' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\n        <ng-template let-variant=\"item\">\n            {{ variant.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-variant=\"item\">\n            {{ variant.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-variant=\"item\">\n            {{ variant.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\n        <ng-template let-variant=\"item\">\n            <div class=\"image-placeholder\">\n                <img\n                    *ngIf=\"variant.featuredAsset as asset; else imagePlaceholder\"\n                    [src]=\"asset | assetPreview : 'tiny'\"\n                />\n                <ng-template #imagePlaceholder>\n                    <div class=\"placeholder\">\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                    </div>\n                </ng-template>\n            </div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-variant=\"item\">\n            <a\n                class=\"button-ghost\"\n                [routerLink]=\"['/catalog/products', variant.productId, 'variants', variant.id]\"\n                ><span>{{ variant.name }}</span\n                ><clr-icon shape=\"arrow right\"\n            /></a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.sku' | translate\" id=\"sku\" [sort]=\"sorts.get('sku')\">\n        <ng-template let-variant=\"item\">\n            {{ variant.sku }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-variant=\"item\">\n            <vdr-chip *ngIf=\"variant.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!variant.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.price' | translate\" id=\"price\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('price')\"\n    >\n        <ng-template let-variant=\"item\">\n            {{ variant.price | localeCurrency : variant.currencyCode }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.price-with-tax' | translate\" id=\"price-with-tax\" [sort]=\"sorts.get('priceWithTax')\">\n        <ng-template let-variant=\"item\">\n            {{ variant.priceWithTax | localeCurrency : variant.currencyCode }}\n        </ng-template>\n    </vdr-dt2-column>\n\n    <vdr-dt2-column [heading]=\"'catalog.stock-on-hand' | translate\" id=\"stock-on-hand\" [hiddenByDefault]=\"false\">\n        <ng-template let-variant=\"item\">\n            <vdr-chip *ngFor=\"let stockLevel of variant.stockLevels\" [title]=\"stockLevel.stockLocation?.name\">\n                <div class=\"flex center\">\n                    <div>\n                        {{ stockLevel.stockOnHand\n                        }}<span class=\"ml-1\" *ngIf=\"stockLevel.stockAllocated\"\n                            >({{ stockLevel.stockAllocated }} allocated)</span\n                        >\n                    </div>\n                </div>\n            </vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let field of customFields\" [customField]=\"field\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [".image-col{width:70px}.image-placeholder{width:50px;height:50px;margin-top:calc(var(--space-unit) * -1);margin-bottom:calc(var(--space-unit) * -1);background-color:var(--color-component-bg-200)}.image-placeholder img{border-radius:var(--border-radius-img)}.image-placeholder .placeholder{text-align:center;color:var(--color-grey-300)}.search-form{display:flex;align-items:center;width:100%}vdr-product-search-input{min-width:300px}@media screen and (max-width: 768px){vdr-product-search-input{min-width:100px}}.search-settings-menu{margin:0 12px}td.disabled{background-color:var(--color-component-bg-200)}.search-index-button{position:relative}.search-index-button vdr-status-badge{right:0;top:0}.run-updates-button{position:relative}.run-updates-button vdr-status-badge{left:10px;top:10px}.edit-button{margin-inline-end:24px}.sku{color:var(--color-text-300)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.AssetPreviewPipe, name: "assetPreview" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-product-variant-list', standalone: false, template: "<vdr-page-block *ngIf=\"!hideLanguageSelect\">\n    <vdr-language-selector\n        [availableLanguageCodes]=\"availableLanguages$ | async\"\n        [currentLanguageCode]=\"contentLanguage$ | async\"\n        (languageCodeChange)=\"setLanguage($event)\"\n    ></vdr-language-selector>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableId || 'product-variant-list'\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"product-variant-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'settings.search-by-product-name-or-sku' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\n        <ng-template let-variant=\"item\">\n            {{ variant.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-variant=\"item\">\n            {{ variant.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-variant=\"item\">\n            {{ variant.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\n        <ng-template let-variant=\"item\">\n            <div class=\"image-placeholder\">\n                <img\n                    *ngIf=\"variant.featuredAsset as asset; else imagePlaceholder\"\n                    [src]=\"asset | assetPreview : 'tiny'\"\n                />\n                <ng-template #imagePlaceholder>\n                    <div class=\"placeholder\">\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                    </div>\n                </ng-template>\n            </div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-variant=\"item\">\n            <a\n                class=\"button-ghost\"\n                [routerLink]=\"['/catalog/products', variant.productId, 'variants', variant.id]\"\n                ><span>{{ variant.name }}</span\n                ><clr-icon shape=\"arrow right\"\n            /></a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.sku' | translate\" id=\"sku\" [sort]=\"sorts.get('sku')\">\n        <ng-template let-variant=\"item\">\n            {{ variant.sku }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-variant=\"item\">\n            <vdr-chip *ngIf=\"variant.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!variant.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.price' | translate\" id=\"price\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('price')\"\n    >\n        <ng-template let-variant=\"item\">\n            {{ variant.price | localeCurrency : variant.currencyCode }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.price-with-tax' | translate\" id=\"price-with-tax\" [sort]=\"sorts.get('priceWithTax')\">\n        <ng-template let-variant=\"item\">\n            {{ variant.priceWithTax | localeCurrency : variant.currencyCode }}\n        </ng-template>\n    </vdr-dt2-column>\n\n    <vdr-dt2-column [heading]=\"'catalog.stock-on-hand' | translate\" id=\"stock-on-hand\" [hiddenByDefault]=\"false\">\n        <ng-template let-variant=\"item\">\n            <vdr-chip *ngFor=\"let stockLevel of variant.stockLevels\" [title]=\"stockLevel.stockLocation?.name\">\n                <div class=\"flex center\">\n                    <div>\n                        {{ stockLevel.stockOnHand\n                        }}<span class=\"ml-1\" *ngIf=\"stockLevel.stockAllocated\"\n                            >({{ stockLevel.stockAllocated }} allocated)</span\n                        >\n                    </div>\n                </div>\n            </vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column *ngFor=\"let field of customFields\" [customField]=\"field\" [sorts]=\"sorts\" />\n</vdr-data-table-2>\n", styles: [".image-col{width:70px}.image-placeholder{width:50px;height:50px;margin-top:calc(var(--space-unit) * -1);margin-bottom:calc(var(--space-unit) * -1);background-color:var(--color-component-bg-200)}.image-placeholder img{border-radius:var(--border-radius-img)}.image-placeholder .placeholder{text-align:center;color:var(--color-grey-300)}.search-form{display:flex;align-items:center;width:100%}vdr-product-search-input{min-width:300px}@media screen and (max-width: 768px){vdr-product-search-input{min-width:100px}}.search-settings-menu{margin:0 12px}td.disabled{background-color:var(--color-component-bg-200)}.search-index-button{position:relative}.search-index-button vdr-status-badge{right:0;top:0}.run-updates-button{position:relative}.run-updates-button vdr-status-badge{left:10px;top:10px}.edit-button{margin-inline-end:24px}.sku{color:var(--color-text-300)}\n"] }]
        }], ctorParameters: () => [], propDecorators: { productId: [{
                type: Input
            }], hideLanguageSelect: [{
                type: Input
            }], dataTableId: [{
                type: Input
            }] } });

const GET_PRODUCT_DETAIL = gql `
    query GetProductDetail($id: ID!) {
        product(id: $id) {
            ...ProductDetail
        }
    }
    ${PRODUCT_DETAIL_FRAGMENT}
`;
class ProductDetailComponent extends TypedBaseDetailComponent {
    constructor(productDetailService, formBuilder, modalService, notificationService, dataService, changeDetector) {
        super();
        this.productDetailService = productDetailService;
        this.formBuilder = formBuilder;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.dataService = dataService;
        this.changeDetector = changeDetector;
        this.customFields = this.getCustomFieldConfig('Product');
        this.detailForm = this.formBuilder.group({
            enabled: true,
            name: ['', Validators.required],
            autoUpdateVariantNames: true,
            slug: ['', unicodePatternValidator(/^[\p{Letter}0-9._-]+$/u)],
            description: '',
            facetValueIds: [[]],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.assetChanges = {};
        this.createVariantsConfig = { groups: [], variants: [], stockLocationId: '' };
        this.updatePermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];
    }
    ngOnInit() {
        this.init();
        const productFacetValues$ = this.isNew$.pipe(switchMap(isNew => {
            return isNew ? of([]) : this.entity$.pipe(map(product => product.facetValues));
        }));
        const productGroup = this.detailForm;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const formFacetValueIdChanges$ = productGroup.get('facetValueIds').valueChanges.pipe(distinctUntilChanged(), switchMap(ids => this.dataService.facet
            .getFacetValues({ filter: { id: { in: ids } } })
            .mapSingle(({ facetValues }) => facetValues.items)), shareReplay(1));
        this.facetValues$ = concat(productFacetValues$.pipe(take(1)), productFacetValues$.pipe(switchMap(() => formFacetValueIdChanges$)));
        this.productChannels$ = this.entity$.pipe(map(p => p.channels));
    }
    ngOnDestroy() {
        this.destroy();
    }
    isDefaultChannel(channelCode) {
        return channelCode === DEFAULT_CHANNEL_CODE;
    }
    assignToChannel() {
        this.productChannels$
            .pipe(take(1), switchMap(channels => this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {
            size: 'lg',
            locals: {
                productIds: [this.id],
                currentChannelIds: channels.map(c => c.id),
            },
        })))
            .subscribe();
    }
    removeFromChannel(channelId) {
        from(getChannelCodeFromUserStatus(this.dataService, channelId))
            .pipe(switchMap(({ channelCode }) => this.modalService.dialog({
            title: marker('catalog.remove-product-from-channel'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                {
                    type: 'danger',
                    label: marker('catalog.remove-from-channel'),
                    translationVars: { channelCode },
                    returnValue: true,
                },
            ],
        })), switchMap(response => response
            ? this.dataService.product.removeProductsFromChannel({
                channelId,
                productIds: [this.id],
            })
            : EMPTY))
            .subscribe(() => {
            this.notificationService.success(marker('catalog.notify-remove-product-from-channel-success'));
        }, err => {
            this.notificationService.error(marker('catalog.notify-remove-product-from-channel-error'));
        });
    }
    assignVariantToChannel(variant) {
        return this.modalService
            .fromComponent(AssignProductsToChannelDialogComponent, {
            size: 'lg',
            locals: {
                productIds: [this.id],
                productVariantIds: [variant.id],
                currentChannelIds: variant.channels.map(c => c.id),
            },
        })
            .subscribe();
    }
    removeVariantFromChannel({ channelId, variant }) {
        from(getChannelCodeFromUserStatus(this.dataService, channelId))
            .pipe(switchMap(({ channelCode }) => this.modalService.dialog({
            title: marker('catalog.remove-product-variant-from-channel'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                {
                    type: 'danger',
                    label: marker('catalog.remove-from-channel'),
                    translationVars: { channelCode },
                    returnValue: true,
                },
            ],
        })), switchMap(response => response
            ? this.dataService.product.removeVariantsFromChannel({
                channelId,
                productVariantIds: [variant.id],
            })
            : EMPTY))
            .subscribe(() => {
            this.notificationService.success(marker('catalog.notify-remove-variant-from-channel-success'));
        }, err => {
            this.notificationService.error(marker('catalog.notify-remove-variant-from-channel-error'));
        });
    }
    assetsChanged() {
        return !!Object.values(this.assetChanges).length;
    }
    /**
     * If creating a new product, automatically generate the slug based on the product name.
     */
    updateSlug(nameValue) {
        const slugControl = this.detailForm.get('slug');
        const currentTranslation = this.entity ? findTranslation(this.entity, this.languageCode) : undefined;
        const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;
        if (slugControl && slugControl.pristine && currentSlugIsEmpty) {
            slugControl.setValue(normalizeString(`${nameValue}`, '-'));
        }
    }
    selectProductFacetValue() {
        this.displayFacetValueModal().subscribe(facetValueIds => {
            if (facetValueIds) {
                const facetValueIdsControl = this.detailForm.controls.facetValueIds;
                const currentFacetValueIds = facetValueIdsControl.value ?? [];
                facetValueIdsControl.setValue(unique([...currentFacetValueIds, ...facetValueIds]));
                facetValueIdsControl.markAsDirty();
            }
        });
    }
    removeProductFacetValue(facetValueId) {
        const facetValueIdsControl = this.detailForm.controls.facetValueIds;
        const currentFacetValueIds = facetValueIdsControl.value ?? [];
        facetValueIdsControl.setValue(currentFacetValueIds.filter(id => id !== facetValueId));
        facetValueIdsControl.markAsDirty();
    }
    displayFacetValueModal() {
        return this.modalService
            .fromComponent(ApplyFacetDialogComponent, {
            size: 'md',
            closable: true,
        })
            .pipe(map(facetValues => facetValues && facetValues.map(v => v.id)));
    }
    create() {
        const productGroup = this.detailForm;
        if (!productGroup.dirty) {
            return;
        }
        const newProduct = this.getUpdatedProduct({
            id: '',
            createdAt: '',
            updatedAt: '',
            enabled: true,
            languageCode: this.languageCode,
            name: '',
            slug: '',
            featuredAsset: null,
            assets: [],
            description: '',
            translations: [],
            optionGroups: [],
            facetValues: [],
            channels: [],
        }, productGroup, this.languageCode);
        this.productDetailService
            .createProductWithVariants(newProduct, this.createVariantsConfig, this.languageCode)
            .subscribe(({ createProductVariants, productId }) => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Product',
            });
            this.assetChanges = {};
            this.detailForm.markAsPristine();
            this.router.navigate(['../', productId], { relativeTo: this.route });
        }, err => {
            // eslint-disable-next-line no-console
            console.error(err);
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Product',
            });
        });
    }
    save() {
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1), mergeMap(([product, languageCode]) => {
            const productGroup = this.detailForm;
            let productInput;
            let variantsInput;
            if (productGroup.dirty || this.assetsChanged()) {
                productInput = this.getUpdatedProduct(product, productGroup, languageCode);
            }
            return this.productDetailService.updateProduct({
                product,
                languageCode,
                autoUpdate: this.detailForm.get(['autoUpdateVariantNames'])?.value ?? false,
                productInput,
                variantsInput,
            });
        }))
            .subscribe(result => {
            this.updateSlugAfterSave(result);
            this.detailForm.markAsPristine();
            this.assetChanges = {};
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Product',
            });
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Product',
            });
        });
    }
    canDeactivate() {
        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;
    }
    /**
     * Sets the values of the form on changes to the product or current language.
     */
    setFormValues(product, languageCode) {
        const currentTranslation = findTranslation(product, languageCode);
        this.detailForm.patchValue({
            enabled: product.enabled,
            name: currentTranslation ? currentTranslation.name : '',
            slug: currentTranslation ? currentTranslation.slug : '',
            description: currentTranslation ? currentTranslation.description : '',
            facetValueIds: product.facetValues.map(fv => fv.id),
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), product, currentTranslation);
        }
    }
    /**
     * Given a product and the value of the detailForm, this method creates an updated copy of the product which
     * can then be persisted to the API.
     */
    getUpdatedProduct(product, productFormGroup, languageCode) {
        const updatedProduct = createUpdatedTranslatable({
            translatable: product,
            updatedFields: productFormGroup.value,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: product.name || '',
                slug: product.slug || '',
                description: product.description || '',
            },
        });
        return {
            ...updatedProduct,
            assetIds: this.assetChanges.assets?.map(a => a.id),
            featuredAssetId: this.assetChanges.featuredAsset?.id,
            facetValueIds: productFormGroup.controls.facetValueIds.dirty
                ? productFormGroup.value.facetValueIds
                : undefined,
        };
    }
    /**
     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.
     */
    updateSlugAfterSave(results) {
        const firstResult = results[0];
        const slugControl = this.detailForm.get(['product', 'slug']);
        function isUpdateMutation(input) {
            return input.hasOwnProperty('updateProduct');
        }
        if (slugControl && isUpdateMutation(firstResult)) {
            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductDetailComponent, deps: [{ token: ProductDetailService }, { token: i2.FormBuilder }, { token: i1.ModalService }, { token: i1.NotificationService }, { token: i1.DataService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ProductDetailComponent, isStandalone: false, selector: "vdr-product-detail2", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <div class=\"flex clr-flex-row\"></div>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine || createVariantsConfig.variants.length === 0\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"updatePermissions\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"product-detail\"></vdr-action-bar-dropdown-menu>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermissions\">\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            [formControl]=\"detailForm.get(['enabled'])\"\n                        />\n                        <label>{{ 'common.enabled' | translate }}</label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <ng-container *ngIf=\"!(isNew$ | async)\">\n                <vdr-card *vdrIfMultichannel [title]=\"'common.channels' | translate\">\n                    <vdr-form-item *vdrIfDefaultChannelActive>\n                        <div class=\"flex channel-assignment\">\n                            <div class=\"mb-2\">\n                                <ng-container *ngFor=\"let channel of productChannels$ | async\">\n                                    <vdr-chip\n                                        *ngIf=\"!isDefaultChannel(channel.code)\"\n                                        icon=\"times-circle\"\n                                        (iconClick)=\"removeFromChannel(channel.id)\"\n                                    >\n                                        <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n                                        {{ channel.code | channelCodeToLabel }}\n                                    </vdr-chip>\n                                </ng-container>\n                            </div>\n                            <button class=\"button-small\" (click)=\"assignToChannel()\">\n                                <clr-icon shape=\"layers\"></clr-icon>\n                                {{ 'common.assign-to-channel' | translate }}\n                            </button>\n                        </div>\n                    </vdr-form-item>\n                </vdr-card>\n            </ng-container>\n            <vdr-card *ngIf=\"entity?.optionGroups.length\" [title]=\"'catalog.product-options' | translate\">\n                <div class=\"options\">\n                    <vdr-chip\n                        *ngFor=\"let optionGroup of entity?.optionGroups | sort : 'id'\"\n                        [colorFrom]=\"optionGroup.code\"\n                        [invert]=\"true\"\n                    >\n                        {{ optionGroup.name }}\n                    </vdr-chip>\n                </div>\n                <div>\n                    <a [routerLink]=\"['options']\" class=\"button-small mt-2\" *vdrIfPermissions=\"updatePermissions\">\n                        <clr-icon shape=\"pencil\"></clr-icon>\n                        {{ 'catalog.edit-options' | translate }}\n                    </a>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.facets' | translate\">\n                <div class=\"facets\">\n                    <vdr-facet-value-chip\n                        *ngFor=\"let facetValue of facetValues$ | async\"\n                        [facetValue]=\"facetValue\"\n                        [removable]=\"updatePermissions | hasPermission\"\n                        (remove)=\"removeProductFacetValue(facetValue.id)\"\n                    ></vdr-facet-value-chip>\n                </div>\n                <div>\n                    <button\n                        class=\"button-small mt-2\"\n                        *vdrIfPermissions=\"updatePermissions\"\n                        (click)=\"selectProductFacetValue()\"\n                    >\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'catalog.add-facets' | translate }}\n                    </button>\n                </div>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\"></vdr-page-entity-info>\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n\n        <vdr-page-block>\n            <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <div>\n                        <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\n                            <input\n                                id=\"name\"\n                                type=\"text\"\n                                formControlName=\"name\"\n                                [readonly]=\"!(updatePermissions | hasPermission)\"\n                                (input)=\"updateSlug($event.target.value)\"\n                            />\n                        </vdr-form-field>\n                        <div *ngIf=\"(isNew$ | async) === false && detailForm.get(['name'])?.dirty\">\n                            <clr-checkbox-wrapper>\n                                <input\n                                    clrCheckbox\n                                    type=\"checkbox\"\n                                    id=\"auto-update\"\n                                    formControlName=\"autoUpdateVariantNames\"\n                                />\n                                <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\n                            </clr-checkbox-wrapper>\n                        </div>\n                    </div>\n                    <vdr-form-field\n                        [label]=\"'catalog.slug' | translate\"\n                        for=\"slug\"\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\n                    >\n                        <input\n                            id=\"slug\"\n                            type=\"text\"\n                            formControlName=\"slug\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        class=\"form-grid-span\"\n                        [label]=\"'common.description' | translate\"\n                        for=\"slug\"\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\n                    >\n                        <vdr-rich-text-editor\n                            formControlName=\"description\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        ></vdr-rich-text-editor>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\n                <vdr-tabbed-custom-fields\n                    entityName=\"Product\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                    [readonly]=\"!(updatePermissions | hasPermission)\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"product-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n            <vdr-card [title]=\"'catalog.assets' | translate\">\n                <vdr-assets\n                    [assets]=\"assetChanges.assets || entity?.assets\"\n                    [featuredAsset]=\"assetChanges.featuredAsset || entity?.featuredAsset\"\n                    [updatePermissions]=\"updatePermissions\"\n                    (change)=\"assetChanges = $event\"\n                ></vdr-assets>\n            </vdr-card>\n\n            <vdr-card [title]=\"'catalog.product-variants' | translate\" [paddingX]=\"isNew$ | async\">\n                <div *ngIf=\"isNew$ | async; else variantList\">\n                    <vdr-generate-product-variants\n                        (variantsChange)=\"createVariantsConfig = $event\"\n                    ></vdr-generate-product-variants>\n                </div>\n                <ng-template #variantList>\n                    <vdr-product-variant-list\n                        [productId]=\"this.id\"\n                        dataTableId=\"product-detail-variants-list\"\n                        [hideLanguageSelect]=\"true\"\n                    ></vdr-product-variant-list>\n                </ng-template>\n                <div class=\"mx-3\" *ngIf=\"(isNew$ | async) === false\">\n                    <a class=\"button\" [routerLink]=\"['manage-variants']\">\n                        <clr-icon shape=\"add-text\"></clr-icon>\n                        {{ 'catalog.manage-variants' | translate }}</a\n                    >\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [":host ::ng-deep trix-toolbar{top:24px}.facets,.options{display:flex;flex-wrap:wrap;gap:3px}vdr-action-bar clr-toggle-wrapper{margin-top:12px}.variant-filter{flex:1;display:flex}.variant-filter input{flex:1;max-width:initial;border-radius:3px 0 0 3px!important}.variant-filter .icon-button{border:1px solid var(--color-component-border-300);background-color:var(--color-component-bg-100);border-radius:0 3px 3px 0;border-inline-start:none}.group-name{padding-inline-end:6px}.view-mode{display:flex;flex-direction:column;justify-content:space-between}@media screen and (min-width: 768px){.view-mode{flex-direction:row}}.edit-variants-btn{margin-top:0}.channel-assignment{flex-wrap:wrap;min-height:24px}.pagination-row{display:flex;align-items:baseline;justify-content:space-between}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.AssetsComponent, selector: "vdr-assets", inputs: ["assets", "featuredAsset", "compact", "updatePermissions", "multiSelect"], outputs: ["change"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.FacetValueChipComponent, selector: "vdr-facet-value-chip", inputs: ["facetValue", "removable", "displayFacetName"], outputs: ["remove"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.FormItemComponent, selector: "vdr-form-item", inputs: ["label", "tooltip"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i1.RichTextEditorComponent, selector: "vdr-rich-text-editor", inputs: ["label", "readonly"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "directive", type: i1.IfMultichannelDirective, selector: "[vdrIfMultichannel]", inputs: ["vdrIfMultichannelElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.ChannelBadgeComponent, selector: "vdr-channel-badge", inputs: ["channelCode"] }, { kind: "directive", type: i1.IfDefaultChannelActiveDirective, selector: "[vdrIfDefaultChannelActive]", inputs: ["vdrIfMultichannelElse"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: GenerateProductVariantsComponent, selector: "vdr-generate-product-variants", outputs: ["variantsChange"] }, { kind: "component", type: ProductVariantListComponent, selector: "vdr-product-variant-list", inputs: ["productId", "hideLanguageSelect", "dataTableId"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.SortPipe, name: "sort" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.ChannelLabelPipe, name: "channelCodeToLabel" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-product-detail2', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <div class=\"flex clr-flex-row\"></div>\n            <vdr-language-selector\n                [disabled]=\"isNew$ | async\"\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"languageCode$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\n            <button\n                class=\"btn btn-primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine || createVariantsConfig.variants.length === 0\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    *vdrIfPermissions=\"updatePermissions\"\n                    class=\"btn btn-primary\"\n                    (click)=\"save()\"\n                    [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n            <vdr-action-bar-dropdown-menu locationId=\"product-detail\"></vdr-action-bar-dropdown-menu>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card>\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermissions\">\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            [formControl]=\"detailForm.get(['enabled'])\"\n                        />\n                        <label>{{ 'common.enabled' | translate }}</label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <ng-container *ngIf=\"!(isNew$ | async)\">\n                <vdr-card *vdrIfMultichannel [title]=\"'common.channels' | translate\">\n                    <vdr-form-item *vdrIfDefaultChannelActive>\n                        <div class=\"flex channel-assignment\">\n                            <div class=\"mb-2\">\n                                <ng-container *ngFor=\"let channel of productChannels$ | async\">\n                                    <vdr-chip\n                                        *ngIf=\"!isDefaultChannel(channel.code)\"\n                                        icon=\"times-circle\"\n                                        (iconClick)=\"removeFromChannel(channel.id)\"\n                                    >\n                                        <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n                                        {{ channel.code | channelCodeToLabel }}\n                                    </vdr-chip>\n                                </ng-container>\n                            </div>\n                            <button class=\"button-small\" (click)=\"assignToChannel()\">\n                                <clr-icon shape=\"layers\"></clr-icon>\n                                {{ 'common.assign-to-channel' | translate }}\n                            </button>\n                        </div>\n                    </vdr-form-item>\n                </vdr-card>\n            </ng-container>\n            <vdr-card *ngIf=\"entity?.optionGroups.length\" [title]=\"'catalog.product-options' | translate\">\n                <div class=\"options\">\n                    <vdr-chip\n                        *ngFor=\"let optionGroup of entity?.optionGroups | sort : 'id'\"\n                        [colorFrom]=\"optionGroup.code\"\n                        [invert]=\"true\"\n                    >\n                        {{ optionGroup.name }}\n                    </vdr-chip>\n                </div>\n                <div>\n                    <a [routerLink]=\"['options']\" class=\"button-small mt-2\" *vdrIfPermissions=\"updatePermissions\">\n                        <clr-icon shape=\"pencil\"></clr-icon>\n                        {{ 'catalog.edit-options' | translate }}\n                    </a>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.facets' | translate\">\n                <div class=\"facets\">\n                    <vdr-facet-value-chip\n                        *ngFor=\"let facetValue of facetValues$ | async\"\n                        [facetValue]=\"facetValue\"\n                        [removable]=\"updatePermissions | hasPermission\"\n                        (remove)=\"removeProductFacetValue(facetValue.id)\"\n                    ></vdr-facet-value-chip>\n                </div>\n                <div>\n                    <button\n                        class=\"button-small mt-2\"\n                        *vdrIfPermissions=\"updatePermissions\"\n                        (click)=\"selectProductFacetValue()\"\n                    >\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'catalog.add-facets' | translate }}\n                    </button>\n                </div>\n            </vdr-card>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\"></vdr-page-entity-info>\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n\n        <vdr-page-block>\n            <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <div>\n                        <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\n                            <input\n                                id=\"name\"\n                                type=\"text\"\n                                formControlName=\"name\"\n                                [readonly]=\"!(updatePermissions | hasPermission)\"\n                                (input)=\"updateSlug($event.target.value)\"\n                            />\n                        </vdr-form-field>\n                        <div *ngIf=\"(isNew$ | async) === false && detailForm.get(['name'])?.dirty\">\n                            <clr-checkbox-wrapper>\n                                <input\n                                    clrCheckbox\n                                    type=\"checkbox\"\n                                    id=\"auto-update\"\n                                    formControlName=\"autoUpdateVariantNames\"\n                                />\n                                <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\n                            </clr-checkbox-wrapper>\n                        </div>\n                    </div>\n                    <vdr-form-field\n                        [label]=\"'catalog.slug' | translate\"\n                        for=\"slug\"\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\n                    >\n                        <input\n                            id=\"slug\"\n                            type=\"text\"\n                            formControlName=\"slug\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field\n                        class=\"form-grid-span\"\n                        [label]=\"'common.description' | translate\"\n                        for=\"slug\"\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\n                    >\n                        <vdr-rich-text-editor\n                            formControlName=\"description\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        ></vdr-rich-text-editor>\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\n                <vdr-tabbed-custom-fields\n                    entityName=\"Product\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                    [readonly]=\"!(updatePermissions | hasPermission)\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"product-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            ></vdr-custom-detail-component-host>\n            <vdr-card [title]=\"'catalog.assets' | translate\">\n                <vdr-assets\n                    [assets]=\"assetChanges.assets || entity?.assets\"\n                    [featuredAsset]=\"assetChanges.featuredAsset || entity?.featuredAsset\"\n                    [updatePermissions]=\"updatePermissions\"\n                    (change)=\"assetChanges = $event\"\n                ></vdr-assets>\n            </vdr-card>\n\n            <vdr-card [title]=\"'catalog.product-variants' | translate\" [paddingX]=\"isNew$ | async\">\n                <div *ngIf=\"isNew$ | async; else variantList\">\n                    <vdr-generate-product-variants\n                        (variantsChange)=\"createVariantsConfig = $event\"\n                    ></vdr-generate-product-variants>\n                </div>\n                <ng-template #variantList>\n                    <vdr-product-variant-list\n                        [productId]=\"this.id\"\n                        dataTableId=\"product-detail-variants-list\"\n                        [hideLanguageSelect]=\"true\"\n                    ></vdr-product-variant-list>\n                </ng-template>\n                <div class=\"mx-3\" *ngIf=\"(isNew$ | async) === false\">\n                    <a class=\"button\" [routerLink]=\"['manage-variants']\">\n                        <clr-icon shape=\"add-text\"></clr-icon>\n                        {{ 'catalog.manage-variants' | translate }}</a\n                    >\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [":host ::ng-deep trix-toolbar{top:24px}.facets,.options{display:flex;flex-wrap:wrap;gap:3px}vdr-action-bar clr-toggle-wrapper{margin-top:12px}.variant-filter{flex:1;display:flex}.variant-filter input{flex:1;max-width:initial;border-radius:3px 0 0 3px!important}.variant-filter .icon-button{border:1px solid var(--color-component-border-300);background-color:var(--color-component-bg-100);border-radius:0 3px 3px 0;border-inline-start:none}.group-name{padding-inline-end:6px}.view-mode{display:flex;flex-direction:column;justify-content:space-between}@media screen and (min-width: 768px){.view-mode{flex-direction:row}}.edit-variants-btn{margin-top:0}.channel-assignment{flex-wrap:wrap;min-height:24px}.pagination-row{display:flex;align-items:baseline;justify-content:space-between}\n"] }]
        }], ctorParameters: () => [{ type: ProductDetailService }, { type: i2.FormBuilder }, { type: i1.ModalService }, { type: i1.NotificationService }, { type: i1.DataService }, { type: i0.ChangeDetectorRef }] });

const deleteProductsBulkAction = {
    location: 'product-list',
    label: marker('common.delete'),
    icon: 'trash',
    iconClass: 'is-danger',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteProduct) ||
        userPermissions.includes(Permission.DeleteCatalog),
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const modalService = injector.get(ModalService);
        const dataService = injector.get(DataService);
        const notificationService = injector.get(NotificationService);
        modalService
            .dialog({
            title: marker('catalog.confirm-bulk-delete-products'),
            translationVars: {
                count: selection.length,
            },
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response ? dataService.product.deleteProducts(unique(selection.map(p => p.id))) : EMPTY))
            .subscribe(result => {
            let deleted = 0;
            const errors = [];
            for (const item of result.deleteProducts) {
                if (item.result === DeletionResult.DELETED) {
                    deleted++;
                }
                else if (item.message) {
                    errors.push(item.message);
                }
            }
            if (0 < deleted) {
                notificationService.success(marker('catalog.notify-bulk-delete-products-success'), {
                    count: deleted,
                });
            }
            if (0 < errors.length) {
                notificationService.error(errors.join('\n'));
            }
            hostComponent.refresh();
            clearSelection();
        });
    },
};
const assignProductsToChannelBulkAction = {
    location: 'product-list',
    label: marker('common.assign-to-channel'),
    icon: 'layers',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateProduct),
    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),
    onClick: ({ injector, selection, clearSelection }) => {
        const modalService = injector.get(ModalService);
        modalService
            .fromComponent(AssignProductsToChannelDialogComponent, {
            size: 'lg',
            locals: {
                productIds: unique(selection.map(p => p.id)),
                currentChannelIds: [],
            },
        })
            .subscribe(result => {
            if (result) {
                clearSelection();
            }
        });
    },
};
const removeProductsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'product-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateProduct),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, productIds, channelId) => dataService.product
        .removeProductsFromChannel({
        channelId: channelId,
        productIds,
    })
        .pipe(map(res => res.removeProductsFromChannel)),
});
const assignFacetValuesToProductsBulkAction = {
    location: 'product-list',
    label: marker('catalog.edit-facet-values'),
    icon: 'tag',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateProduct),
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const modalService = injector.get(ModalService);
        const notificationService = injector.get(NotificationService);
        const mode = 'product';
        const ids = unique(selection.map(p => p.id));
        return modalService
            .fromComponent(BulkAddFacetValuesDialogComponent, {
            size: 'xl',
            locals: {
                mode,
                ids,
            },
        })
            .subscribe(result => {
            if (result) {
                notificationService.success(marker('common.notify-bulk-update-success'), {
                    count: selection.length,
                    entity: mode === 'product' ? 'Products' : 'ProductVariants',
                });
                clearSelection();
            }
        });
    },
};
const duplicateProductsBulkAction = {
    location: 'product-list',
    label: marker('common.duplicate'),
    icon: 'copy',
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const modalService = injector.get(ModalService);
        modalService
            .fromComponent((DuplicateEntityDialogComponent), {
            locals: {
                entities: selection,
                entityName: 'Product',
                title: marker('catalog.duplicate-products'),
                getEntityName: entity => entity.name,
            },
        })
            .subscribe(result => {
            if (result) {
                clearSelection();
                hostComponent.refresh();
            }
        });
    },
};

class ProductListComponent extends TypedBaseListComponent {
    constructor(dataService, modalService, notificationService, jobQueueService) {
        super();
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.jobQueueService = jobQueueService;
        this.pendingSearchIndexUpdates = 0;
        this.dataTableListId = 'product-list';
        this.pageLocationId = 'product-list';
        this.customFields = this.getCustomFieldConfig('Product');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilters([
            {
                name: 'enabled',
                type: { kind: 'boolean' },
                label: marker('common.enabled'),
                filterField: 'enabled',
            },
            {
                name: 'slug',
                type: { kind: 'text' },
                label: marker('common.slug'),
                filterField: 'slug',
            },
        ])
            .addFilter({
            name: 'facetValues',
            type: {
                kind: 'custom',
                component: FacetValueFormInputComponent,
                serializeValue: value => value.map(v => v.id).join(','),
                deserializeValue: value => value.split(',').map(id => ({ id })),
                getLabel: value => {
                    if (value.length === 0) {
                        return '';
                    }
                    if (value[0].name) {
                        return value.map(v => v.name).join(', ');
                    }
                    else {
                        return lastValueFrom(this.dataService.facet
                            .getFacetValues({ filter: { id: { in: value.map(v => v.id) } } })
                            .mapSingle(({ facetValues }) => facetValues.items.map(fv => fv.name).join(', ')));
                    }
                },
            },
            label: marker('catalog.facet-values'),
            toFilterInput: (value) => ({
                facetValueId: {
                    in: value.map(v => v.id),
                },
            }),
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('createdAt', 'DESC')
            .addSorts([
            { name: 'id' },
            { name: 'createdAt' },
            { name: 'updatedAt' },
            { name: 'name' },
            { name: 'slug' },
        ])
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        this.configure({
            document: ProductListQueryDocument,
            getItems: data => data.products,
            setVariables: (skip, take) => {
                const searchTerm = this.searchTermControl.value;
                let filterInput = this.filters.createFilterInput();
                if (searchTerm) {
                    filterInput = {
                        name: {
                            contains: searchTerm,
                        },
                        sku: {
                            contains: searchTerm,
                        },
                    };
                }
                return {
                    options: {
                        skip,
                        take,
                        filter: {
                            ...(filterInput ?? {}),
                        },
                        filterOperator: searchTerm ? LogicalOperator.OR : LogicalOperator.AND,
                        sort: this.sorts.createSortInput(),
                    },
                };
            },
            refreshListOnChanges: [this.sorts.valueChanges, this.filters.valueChanges],
        });
    }
    rebuildSearchIndex() {
        this.dataService.product.reindex().subscribe(({ reindex }) => {
            this.notificationService.info(marker('catalog.reindexing'));
            this.jobQueueService.addJob(reindex.id, job => {
                if (job.state === JobState.COMPLETED) {
                    const time = new Intl.NumberFormat().format(job.duration || 0);
                    this.notificationService.success(marker('catalog.reindex-successful'), {
                        count: job.result.indexedItemCount,
                        time,
                    });
                    this.refresh();
                }
                else {
                    this.notificationService.error(marker('catalog.reindex-error'));
                }
            });
        });
    }
    deleteProduct(productId) {
        this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-product'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)), 
        // Short delay to allow the product to be removed from the search index before
        // refreshing.
        delay(500))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'Product',
            });
            this.refresh();
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'Product',
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductListComponent, deps: [{ token: i1.DataService }, { token: i1.ModalService }, { token: i1.NotificationService }, { token: i1.JobQueueService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ProductListComponent, isStandalone: false, selector: "vdr-products-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items [locationId]=\"pageLocationId\"></vdr-action-bar-items>\n            <a\n                class=\"button primary mr-1\"\n                [routerLink]=\"['./create']\"\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateProduct']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-new-product' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu [alwaysShow]=\"true\" [locationId]=\"pageLocationId\">\n                <button type=\"button\" vdrDropdownItem (click)=\"rebuildSearchIndex()\">\n                    <clr-icon shape=\"refresh\" class=\"\"></clr-icon>\n                    {{ 'catalog.rebuild-search-index' | translate }}\n                </button>\n            </vdr-action-bar-dropdown-menu>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        [locationId]=\"dataTableListId\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'settings.search-by-product-name-or-sku' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\n        <ng-template let-product=\"item\">\n            {{ product.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-product=\"item\">\n            {{ product.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-product=\"item\">\n            {{ product.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\n        <ng-template let-product=\"item\">\n            <div class=\"image-placeholder\">\n                <img\n                    *ngIf=\"product.featuredAsset as asset; else imagePlaceholder\"\n                    [src]=\"asset | assetPreview : 'tiny'\"\n                />\n                <ng-template #imagePlaceholder>\n                    <div class=\"placeholder\">\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                    </div>\n                </ng-template>\n            </div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-product=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', product.id]\"\n                ><span>{{ product.name }}</span\n                ><clr-icon shape=\"arrow right\"\n            /></a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.slug' | translate\" id=\"slug\" [sort]=\"sorts.get('slug')\">\n        <ng-template let-product=\"item\">\n            {{ product.slug }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-product=\"item\">\n            <vdr-chip *ngIf=\"product.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!product.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.number-of-variants' | translate\" id=\"number-of-variants\">\n        <ng-template let-product=\"item\">\n            {{ 'catalog.variant-count' | translate : { count: product.variantList?.totalItems } }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n", styles: [".image-col{width:70px}.image-placeholder{width:50px;height:50px;margin-top:calc(var(--space-unit) * -1);margin-bottom:calc(var(--space-unit) * -1);background-color:var(--color-component-bg-200)}.image-placeholder img{border-radius:var(--border-radius-img)}.image-placeholder .placeholder{text-align:center;color:var(--color-grey-300)}.search-form{display:flex;align-items:center;width:100%}vdr-product-search-input{min-width:300px}@media screen and (max-width: 768px){vdr-product-search-input{min-width:100px}}.search-settings-menu{margin:0 12px}td.disabled{background-color:var(--color-component-bg-200)}.search-index-button{position:relative}.search-index-button vdr-status-badge{right:0;top:0}.run-updates-button{position:relative}.run-updates-button vdr-status-badge{left:10px;top:10px}.edit-button{margin-inline-end:24px}.sku{color:var(--color-text-300)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex", "trackByPath"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.AssetPreviewPipe, name: "assetPreview" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-products-list', standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>\n            <vdr-language-selector\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\n                [currentLanguageCode]=\"contentLanguage$ | async\"\n                (languageCodeChange)=\"setLanguage($event)\"\n            ></vdr-language-selector>\n        </vdr-ab-left>\n        <vdr-ab-right>\n            <vdr-action-bar-items [locationId]=\"pageLocationId\"></vdr-action-bar-items>\n            <a\n                class=\"button primary mr-1\"\n                [routerLink]=\"['./create']\"\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateProduct']\"\n            >\n                <clr-icon shape=\"plus\"></clr-icon>\n                {{ 'catalog.create-new-product' | translate }}\n            </a>\n            <vdr-action-bar-dropdown-menu [alwaysShow]=\"true\" [locationId]=\"pageLocationId\">\n                <button type=\"button\" vdrDropdownItem (click)=\"rebuildSearchIndex()\">\n                    <clr-icon shape=\"refresh\" class=\"\"></clr-icon>\n                    {{ 'catalog.rebuild-search-index' | translate }}\n                </button>\n            </vdr-action-bar-dropdown-menu>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-data-table-2\n    class=\"mt-2\"\n    [id]=\"dataTableListId\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\n>\n    <vdr-bulk-action-menu\n        [locationId]=\"dataTableListId\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    ></vdr-bulk-action-menu>\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        [searchTermPlaceholder]=\"'settings.search-by-product-name-or-sku' | translate\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\n        <ng-template let-product=\"item\">\n            {{ product.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-product=\"item\">\n            {{ product.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-product=\"item\">\n            {{ product.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\n        <ng-template let-product=\"item\">\n            <div class=\"image-placeholder\">\n                <img\n                    *ngIf=\"product.featuredAsset as asset; else imagePlaceholder\"\n                    [src]=\"asset | assetPreview : 'tiny'\"\n                />\n                <ng-template #imagePlaceholder>\n                    <div class=\"placeholder\">\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                    </div>\n                </ng-template>\n            </div>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-product=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', product.id]\"\n                ><span>{{ product.name }}</span\n                ><clr-icon shape=\"arrow right\"\n            /></a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.slug' | translate\" id=\"slug\" [sort]=\"sorts.get('slug')\">\n        <ng-template let-product=\"item\">\n            {{ product.slug }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\n        <ng-template let-product=\"item\">\n            <vdr-chip *ngIf=\"product.enabled\" colorType=\"success\">{{\n                'common.enabled' | translate\n            }}</vdr-chip>\n            <vdr-chip *ngIf=\"!product.enabled\" colorType=\"warning\">{{\n                'common.disabled' | translate\n            }}</vdr-chip>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'catalog.number-of-variants' | translate\" id=\"number-of-variants\">\n        <ng-template let-product=\"item\">\n            {{ 'catalog.variant-count' | translate : { count: product.variantList?.totalItems } }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-custom-field-column\n        *ngFor=\"let customField of customFields\"\n        [customField]=\"customField\"\n        [sorts]=\"sorts\"\n    />\n</vdr-data-table-2>\n", styles: [".image-col{width:70px}.image-placeholder{width:50px;height:50px;margin-top:calc(var(--space-unit) * -1);margin-bottom:calc(var(--space-unit) * -1);background-color:var(--color-component-bg-200)}.image-placeholder img{border-radius:var(--border-radius-img)}.image-placeholder .placeholder{text-align:center;color:var(--color-grey-300)}.search-form{display:flex;align-items:center;width:100%}vdr-product-search-input{min-width:300px}@media screen and (max-width: 768px){vdr-product-search-input{min-width:100px}}.search-settings-menu{margin:0 12px}td.disabled{background-color:var(--color-component-bg-200)}.search-index-button{position:relative}.search-index-button vdr-status-badge{right:0;top:0}.run-updates-button{position:relative}.run-updates-button vdr-status-badge{left:10px;top:10px}.edit-button{margin-inline-end:24px}.sku{color:var(--color-text-300)}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1.ModalService }, { type: i1.NotificationService }, { type: i1.JobQueueService }] });

class VariantPriceDetailComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.priceChange$ = new BehaviorSubject(0);
        this.taxCategoryIdChange$ = new BehaviorSubject('');
    }
    ngOnInit() {
        const taxRates$ = this.dataService.settings
            .getTaxRatesSimple(999, 0, 'cache-first')
            .mapStream(data => data.taxRates.items);
        const activeChannel$ = this.dataService.settings
            .getActiveChannel('cache-first')
            .refetchOnChannelChange()
            .mapStream(data => data.activeChannel);
        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(map(([channel, taxRates, taxCategoryId]) => {
            const defaultTaxZone = channel.defaultTaxZone;
            if (!defaultTaxZone) {
                return 0;
            }
            const applicableRate = taxRates.find(taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId);
            if (!applicableRate) {
                return 0;
            }
            return applicableRate.value;
        }));
        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(map(([taxRate, price]) => Math.round(price * ((100 + taxRate) / 100))));
    }
    ngOnChanges(changes) {
        if ('price' in changes) {
            this.priceChange$.next(changes.price.currentValue);
        }
        if ('taxCategoryId' in changes) {
            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: VariantPriceDetailComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: VariantPriceDetailComponent, isStandalone: false, selector: "vdr-variant-price-detail", inputs: { priceIncludesTax: "priceIncludesTax", price: "price", currencyCode: "currencyCode", taxCategoryId: "taxCategoryId" }, usesOnChanges: true, ngImport: i0, template: "<label class=\"clr-control-label\">{{ 'catalog.taxes' | translate }}</label>\n<div *ngIf=\"priceIncludesTax\" class=\"value\">\n    {{ 'catalog.price-includes-tax-at' | translate: { rate: taxRate$ | async } }}\n</div>\n<div *ngIf=\"!priceIncludesTax\" class=\"value\">\n    {{\n        'catalog.price-with-tax-in-default-zone'\n            | translate: { price: grossPrice$ | async | localeCurrency: currencyCode, rate: taxRate$ | async }\n    }}\n</div>\n", styles: [":host{display:flex;flex-direction:column}.value{margin-top:3px}\n"], dependencies: [{ kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: VariantPriceDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-variant-price-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<label class=\"clr-control-label\">{{ 'catalog.taxes' | translate }}</label>\n<div *ngIf=\"priceIncludesTax\" class=\"value\">\n    {{ 'catalog.price-includes-tax-at' | translate: { rate: taxRate$ | async } }}\n</div>\n<div *ngIf=\"!priceIncludesTax\" class=\"value\">\n    {{\n        'catalog.price-with-tax-in-default-zone'\n            | translate: { price: grossPrice$ | async | localeCurrency: currencyCode, rate: taxRate$ | async }\n    }}\n</div>\n", styles: [":host{display:flex;flex-direction:column}.value{margin-top:3px}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }], propDecorators: { priceIncludesTax: [{
                type: Input
            }], price: [{
                type: Input
            }], currencyCode: [{
                type: Input
            }], taxCategoryId: [{
                type: Input
            }] } });

class VariantPriceStrategyDetailComponent {
    calculatedPriceDiffersFromInputPrice() {
        const defaultPrice = this.variant.prices.find(p => p.currencyCode === this.channelDefaultCurrencyCode) ??
            this.variant.prices[0];
        if (!defaultPrice) {
            return false;
        }
        if (this.channelPriceIncludesTax) {
            return this.variant.priceWithTax !== defaultPrice.price;
        }
        else {
            return this.variant.price !== defaultPrice.price;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: VariantPriceStrategyDetailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: VariantPriceStrategyDetailComponent, isStandalone: false, selector: "vdr-variant-price-strategy-detail", inputs: { channelPriceIncludesTax: "channelPriceIncludesTax", variant: "variant", channelDefaultCurrencyCode: "channelDefaultCurrencyCode" }, ngImport: i0, template: "<div *ngIf=\"calculatedPriceDiffersFromInputPrice()\" class=\"price-strategy-detail\">\n    <vdr-form-item\n        [label]=\"'catalog.calculated-price' | translate\"\n        [tooltip]=\"'catalog.calculated-price-tooltip' | translate\"\n        for=\"price\"\n    >\n    </vdr-form-item>\n    <div class=\"form-grid mt-2\">\n        <vdr-form-item [label]=\"'common.price' | translate\">\n            {{ variant.price | localeCurrency : variant.currencyCode }}\n        </vdr-form-item>\n        <vdr-form-item [label]=\"'common.price-with-tax' | translate\">\n            {{ variant.priceWithTax | localeCurrency : variant.currencyCode }}\n        </vdr-form-item>\n    </div>\n</div>\n", styles: [":host{display:block}.price-strategy-detail{margin-top:calc(var(--space-unit) * 2);padding-top:calc(var(--space-unit) * 2);border-top:1px solid var(--color-weight-150)}\n"], dependencies: [{ kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.FormItemComponent, selector: "vdr-form-item", inputs: ["label", "tooltip"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: VariantPriceStrategyDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-variant-price-strategy-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<div *ngIf=\"calculatedPriceDiffersFromInputPrice()\" class=\"price-strategy-detail\">\n    <vdr-form-item\n        [label]=\"'catalog.calculated-price' | translate\"\n        [tooltip]=\"'catalog.calculated-price-tooltip' | translate\"\n        for=\"price\"\n    >\n    </vdr-form-item>\n    <div class=\"form-grid mt-2\">\n        <vdr-form-item [label]=\"'common.price' | translate\">\n            {{ variant.price | localeCurrency : variant.currencyCode }}\n        </vdr-form-item>\n        <vdr-form-item [label]=\"'common.price-with-tax' | translate\">\n            {{ variant.priceWithTax | localeCurrency : variant.currencyCode }}\n        </vdr-form-item>\n    </div>\n</div>\n", styles: [":host{display:block}.price-strategy-detail{margin-top:calc(var(--space-unit) * 2);padding-top:calc(var(--space-unit) * 2);border-top:1px solid var(--color-weight-150)}\n"] }]
        }], propDecorators: { channelPriceIncludesTax: [{
                type: Input
            }], variant: [{
                type: Input
            }], channelDefaultCurrencyCode: [{
                type: Input
            }] } });

const GET_PRODUCT_VARIANTS_QUICK_JUMP = gql `
    query GetProductVariantsQuickJump($id: ID!) {
        product(id: $id) {
            id
            variants {
                id
                name
                sku
            }
        }
    }
`;
class ProductVariantQuickJumpComponent {
    constructor(dataService, router) {
        this.dataService = dataService;
        this.router = router;
        this.searchFn = (term, item) => item.name.toLowerCase().includes(term.toLowerCase()) ||
            item.sku.toLowerCase().includes(term.toLowerCase());
    }
    ngOnInit() {
        this.variants$ = this.dataService
            .query(GetProductVariantsQuickJumpDocument, {
            id: this.productId,
        })
            .mapStream(data => data.product?.variants ?? []);
    }
    onSelect(item) {
        if (item) {
            this.router
                .navigate(['catalog', 'products', this.productId, 'variants', item.id])
                .then(() => (this.selectedVariantId = undefined));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantQuickJumpComponent, deps: [{ token: i1.DataService }, { token: i1$1.Router }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ProductVariantQuickJumpComponent, isStandalone: false, selector: "vdr-product-variant-quick-jump", inputs: { productId: "productId" }, ngImport: i0, template: "<ng-select\n    *ngIf=\"(variants$ | async)?.length > 1\"\n    [items]=\"variants$ | async\"\n    appendTo=\"body\"\n    bindValue=\"id\"\n    [(ngModel)]=\"selectedVariantId\"\n    [searchFn]=\"searchFn\"\n    [clearable]=\"false\"\n    [placeholder]=\"'catalog.quick-jump-placeholder' | translate\"\n    (change)=\"onSelect($event)\"\n>\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\n        {{ item.name }} ({{ item.sku }})\n    </ng-template>\n</ng-select>\n", styles: [""], dependencies: [{ kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i5$1.NgSelectComponent, selector: "ng-select", inputs: ["ariaLabelDropdown", "bindLabel", "bindValue", "ariaLabel", "markFirst", "placeholder", "fixedPlaceholder", "notFoundText", "typeToSearchText", "preventToggleOnRightClick", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "ngClass", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick", "keyDownFn"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i5$1.NgOptionTemplateDirective, selector: "[ng-option-tmp]" }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantQuickJumpComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-product-variant-quick-jump', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-select\n    *ngIf=\"(variants$ | async)?.length > 1\"\n    [items]=\"variants$ | async\"\n    appendTo=\"body\"\n    bindValue=\"id\"\n    [(ngModel)]=\"selectedVariantId\"\n    [searchFn]=\"searchFn\"\n    [clearable]=\"false\"\n    [placeholder]=\"'catalog.quick-jump-placeholder' | translate\"\n    (change)=\"onSelect($event)\"\n>\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\n        {{ item.name }} ({{ item.sku }})\n    </ng-template>\n</ng-select>\n" }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1$1.Router }], propDecorators: { productId: [{
                type: Input
            }] } });

class ProductVariantDetailComponent extends TypedBaseDetailComponent {
    constructor(productDetailService, formBuilder, modalService, notificationService, dataService, changeDetector) {
        super();
        this.productDetailService = productDetailService;
        this.formBuilder = formBuilder;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.dataService = dataService;
        this.changeDetector = changeDetector;
        this.updatePermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];
        this.customFields = this.getCustomFieldConfig('ProductVariant');
        this.customPriceFields = this.getCustomFieldConfig('ProductVariantPrice');
        this.customOptionFields = this.getCustomFieldConfig('ProductOption');
        this.detailForm = this.formBuilder.group({
            id: '',
            enabled: false,
            sku: '',
            name: '',
            taxCategoryId: '',
            stockOnHand: 0,
            useGlobalOutOfStockThreshold: true,
            outOfStockThreshold: 0,
            trackInventory: GlobalFlag.TRUE,
            facetValueIds: [],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.stockLevelsForm = this.formBuilder.array([]);
        this.pricesForm = this.formBuilder.array([]);
        this.assetChanges = {};
        this.GlobalFlag = GlobalFlag;
    }
    ngOnInit() {
        this.init();
        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {
            this.globalTrackInventory = globalSettings.trackInventory;
            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;
            this.changeDetector.markForCheck();
        });
        this.taxCategories$ = this.result$.pipe(map(data => data.taxCategories.items));
        const availableCurrencyCodes$ = this.result$.pipe(tap(data => (this.channelDefaultCurrencyCode = data.activeChannel.defaultCurrencyCode)), map(data => data.activeChannel.availableCurrencyCodes));
        this.unusedCurrencyCodes$ = combineLatest(this.pricesForm.valueChanges, availableCurrencyCodes$).pipe(map(([prices, currencyCodes]) => currencyCodes.filter(code => !prices.map(p => p.currencyCode).includes(code))));
        const stockLocations$ = this.result$.pipe(map(data => data.stockLocations.items));
        this.unusedStockLocation$ = combineLatest(this.entity$, stockLocations$).pipe(map(([entity, stockLocations]) => {
            const usedIds = entity.stockLevels.map(l => l.stockLocation.id);
            return stockLocations.filter(l => !usedIds.includes(l.id));
        }));
        this.channelPriceIncludesTax$ = this.dataService.settings
            .getActiveChannel('cache-first')
            .refetchOnChannelChange()
            .mapStream(data => data.activeChannel.pricesIncludeTax)
            .pipe(shareReplay(1));
        this.stockLevels$ = this.entity$.pipe(map(entity => entity?.stockLevels ?? []));
        const facetValues$ = this.entity$.pipe(map(variant => variant.facetValues ?? []));
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const formFacetValueIdChanges$ = this.detailForm.get('facetValueIds').valueChanges.pipe(skip(1), distinctUntilChanged(), switchMap(ids => this.dataService.facet
            .getFacetValues({ filter: { id: { in: ids } } })
            .mapSingle(({ facetValues }) => facetValues.items)), shareReplay(1));
        this.facetValues$ = concat(facetValues$.pipe(take(1)), facetValues$.pipe(switchMapTo(formFacetValueIdChanges$)));
    }
    ngOnDestroy() {
        this.destroy();
    }
    addPriceInCurrency(currencyCode) {
        this.pricesForm.push(this.formBuilder.group({
            currencyCode,
            price: 0,
            delete: false,
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customPriceFields)),
        }));
    }
    toggleDeletePrice(deleteFormControl) {
        deleteFormControl.setValue(!deleteFormControl.value);
        deleteFormControl.markAsDirty();
    }
    addStockLocation(stockLocation) {
        this.stockLevelsForm.push(this.formBuilder.group({
            stockLocationId: stockLocation.id,
            stockLocationName: stockLocation.name,
            stockOnHand: 0,
            stockAllocated: 0,
        }));
    }
    save() {
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1), mergeMap(([variant, languageCode]) => {
            const input = pick(this.getUpdatedVariant(variant, this.detailForm, languageCode), [
                'id',
                'enabled',
                'translations',
                'sku',
                'taxCategoryId',
                'facetValueIds',
                'featuredAssetId',
                'assetIds',
                'trackInventory',
                'outOfStockThreshold',
                'useGlobalOutOfStockThreshold',
                'customFields',
            ]);
            if (this.stockLevelsForm.dirty) {
                input.stockLevels = this.stockLevelsForm.controls
                    .filter(control => control.dirty)
                    .map(control => ({
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    stockLocationId: control.value.stockLocationId,
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    stockOnHand: control.value.stockOnHand,
                }));
            }
            if (this.pricesForm.dirty) {
                input.prices = this.pricesForm.controls
                    .filter(control => control.dirty)
                    .map(control => ({
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    price: control.value.price,
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    currencyCode: control.value.currencyCode,
                    delete: control.value.delete === true,
                    customFields: control.get('customFields')?.value,
                }));
            }
            return this.dataService.mutate(ProductVariantUpdateMutationDocument, {
                input: [input],
            });
        }))
            .subscribe(result => {
            this.detailForm.markAsPristine();
            this.stockLevelsForm.markAsPristine();
            this.pricesForm.markAsPristine();
            this.assetChanges = {};
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'ProductVariant',
            });
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'ProductVariant',
            });
        });
    }
    assetsChanged() {
        return !!Object.values(this.assetChanges).length;
    }
    inventoryIsNotTracked(formGroup) {
        const trackInventory = formGroup.get('trackInventory')?.value;
        return (trackInventory === GlobalFlag.FALSE ||
            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false));
    }
    optionGroupCode(optionGroupId) {
        const group = this.entity?.product.optionGroups.find(g => g.id === optionGroupId);
        return group?.code;
    }
    optionName(option) {
        const translation = option.translations.find(t => t.languageCode === this.languageCode) ?? option.translations[0];
        return translation.name;
    }
    removeFacetValue(facetValueId) {
        const facetValueIdsControl = this.detailForm.controls.facetValueIds;
        const currentFacetValueIds = facetValueIdsControl.value ?? [];
        facetValueIdsControl.setValue(currentFacetValueIds.filter(id => id !== facetValueId));
        facetValueIdsControl.markAsDirty();
    }
    selectFacetValue() {
        this.displayFacetValueModal().subscribe(facetValueIds => {
            if (facetValueIds) {
                const facetValueIdsControl = this.detailForm.controls.facetValueIds;
                const currentFacetValueIds = facetValueIdsControl.value ?? [];
                facetValueIdsControl.setValue(unique([...currentFacetValueIds, ...facetValueIds]));
                facetValueIdsControl.markAsDirty();
            }
        });
    }
    displayFacetValueModal() {
        return this.modalService
            .fromComponent(ApplyFacetDialogComponent, {
            size: 'md',
            closable: true,
        })
            .pipe(map(facetValues => facetValues && facetValues.map(v => v.id)));
    }
    setFormValues(variant, languageCode) {
        const variantTranslation = findTranslation(variant, languageCode);
        const facetValueIds = variant.facetValues.map(fv => fv.id);
        this.detailForm.patchValue({
            id: variant.id,
            enabled: variant.enabled,
            sku: variant.sku,
            name: variantTranslation ? variantTranslation.name : '',
            taxCategoryId: variant.taxCategory.id,
            stockOnHand: variant.stockLevels[0]?.stockOnHand ?? 0,
            useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,
            outOfStockThreshold: variant.outOfStockThreshold,
            trackInventory: variant.trackInventory,
            facetValueIds,
        });
        this.stockLevelsForm.clear();
        for (const stockLevel of variant.stockLevels) {
            this.stockLevelsForm.push(this.formBuilder.group({
                stockLocationId: stockLevel.stockLocation.id,
                stockLocationName: stockLevel.stockLocation.name,
                stockOnHand: stockLevel.stockOnHand,
                stockAllocated: stockLevel.stockAllocated,
            }));
        }
        this.pricesForm.clear();
        for (const price of variant.prices) {
            const priceForm = this.formBuilder.group({
                price: price.price,
                currencyCode: price.currencyCode,
                delete: false,
                customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customPriceFields)),
            });
            if (this.customPriceFields.length) {
                this.setCustomFieldFormValues(this.customPriceFields, priceForm.get(['customFields']), price);
            }
            this.pricesForm.push(priceForm);
        }
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), variant, variantTranslation);
        }
    }
    /**
     * Given a product and the value of the detailForm, this method creates an updated copy of the product which
     * can then be persisted to the API.
     */
    getUpdatedVariant(variant, variantFormGroup, languageCode) {
        const updatedProduct = createUpdatedTranslatable({
            translatable: variant,
            updatedFields: variantFormGroup.value,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: variant.name || '',
            },
        });
        return {
            ...updatedProduct,
            assetIds: this.assetChanges.assets?.map(a => a.id),
            featuredAssetId: this.assetChanges.featuredAsset?.id,
            facetValueIds: variantFormGroup.controls.facetValueIds.dirty
                ? variantFormGroup.value.facetValueIds
                : undefined,
            taxCategoryId: variantFormGroup.controls.taxCategoryId.dirty
                ? variantFormGroup.value.taxCategoryId
                : undefined,
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantDetailComponent, deps: [{ token: ProductDetailService }, { token: i2.FormBuilder }, { token: i1.ModalService }, { token: i1.NotificationService }, { token: i1.DataService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ProductVariantDetailComponent, isStandalone: false, selector: "vdr-product-variant-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left [grow]=\"true\">\n            <div class=\"flex center\">\n                <ng-container *ngIf=\"availableLanguages$ | async as availableLanguages\">\n                    <vdr-language-selector\n                        *ngIf=\"availableLanguages.length > 1\"\n                        class=\"mr-2\"\n                        [disabled]=\"isNew$ | async\"\n                        [availableLanguageCodes]=\"availableLanguages\"\n                        [currentLanguageCode]=\"languageCode$ | async\"\n                        (languageCodeChange)=\"setLanguage($event)\"\n                    ></vdr-language-selector>\n                </ng-container>\n                <vdr-product-variant-quick-jump [productId]=\"entity?.product.id\" />\n            </div>\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"product-variant-detail\"></vdr-action-bar-items>\n            <button\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"\n                    (detailForm.invalid ||\n                        stockLevelsForm.invalid ||\n                        pricesForm.invalid ||\n                        (detailForm.pristine && stockLevelsForm.pristine && pricesForm.pristine)) &&\n                    !assetsChanged()\n                \"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n            <vdr-action-bar-dropdown-menu locationId=\"product-variant-detail\"></vdr-action-bar-dropdown-menu>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as variant\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar\n            ><vdr-card>\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                    <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            [formControl]=\"detailForm.get(['enabled'])\"\n                        />\n                        <label>{{ 'common.enabled' | translate }}</label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"variant.options.length\" [title]=\"'catalog.product-options' | translate\">\n                <div class=\"options\">\n                    <vdr-chip\n                        *ngFor=\"let option of variant.options | sort : 'groupId'\"\n                        [colorFrom]=\"optionGroupCode(option.groupId)\"\n                        [invert]=\"true\"\n                    >\n                        <span>{{ optionGroupCode(option.groupId) }}:</span>\n                        {{ optionName(option) }}\n                    </vdr-chip>\n                </div>\n                <div>\n                    <a\n                        [routerLink]=\"['../../', 'options']\"\n                        class=\"button-small mt-2\"\n                        *vdrIfPermissions=\"updatePermissions\"\n                    >\n                        <clr-icon shape=\"pencil\"></clr-icon>\n                        {{ 'catalog.edit-options' | translate }}\n                    </a>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.facets' | translate\">\n                <div class=\"facets\">\n                    <vdr-facet-value-chip\n                        *ngFor=\"let facetValue of facetValues$ | async\"\n                        [facetValue]=\"facetValue\"\n                        [removable]=\"updatePermissions | hasPermission\"\n                        (remove)=\"removeFacetValue(facetValue.id)\"\n                    ></vdr-facet-value-chip>\n                </div>\n                <div>\n                    <button\n                        class=\"button-small mt-2\"\n                        *vdrIfPermissions=\"updatePermissions\"\n                        (click)=\"selectFacetValue()\"\n                    >\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'catalog.add-facets' | translate }}\n                    </button>\n                </div>\n            </vdr-card>\n\n            <vdr-card>\n                <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n\n        <vdr-page-block>\n            <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'catalog.sku' | translate\" for=\"sku\">\n                        <input\n                            id=\"sku\"\n                            type=\"text\"\n                            formControlName=\"sku\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\n                <vdr-tabbed-custom-fields\n                    entityName=\"ProductVariant\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                    [readonly]=\"!(updatePermissions | hasPermission)\"\n                />\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"product-variant-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            />\n            <vdr-card [title]=\"'catalog.assets' | translate\">\n                <vdr-assets\n                    [assets]=\"assetChanges.assets || variant.assets\"\n                    [featuredAsset]=\"assetChanges.featuredAsset || variant.featuredAsset\"\n                    [updatePermissions]=\"updatePermissions\"\n                    (change)=\"assetChanges = $event\"\n                />\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.price-and-tax' | translate\">\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'catalog.tax-category' | translate\" for=\"taxCategory\">\n                        <select name=\"taxCategory\" formControlName=\"taxCategoryId\">\n                            <option\n                                *ngFor=\"let taxCategory of taxCategories$ | async\"\n                                [value]=\"taxCategory.id\"\n                            >\n                                {{ taxCategory.name }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                </div>\n                <div class=\"form-grid prices\" *ngFor=\"let price of pricesForm.controls\" [formGroup]=\"price\">\n                    <vdr-form-field\n                        [label]=\"\n                            ('catalog.price' | translate) +\n                            (1 < pricesForm.length ? ' (' + price.value.currencyCode + ')' : '')\n                        \"\n                        [tooltip]=\"\n                            1 < pricesForm.length && price.value.currencyCode === channelDefaultCurrencyCode\n                                ? ('catalog.default-currency' | translate)\n                                : undefined\n                        \"\n                        for=\"price\"\n                    >\n                        <div class=\"price-wrapper\" [class.pending-deletion]=\"price.value.delete === true\">\n                            <vdr-currency-input\n                                name=\"price\"\n                                [currencyCode]=\"price.value.currencyCode\"\n                                [readonly]=\"\n                                    !(updatePermissions | hasPermission) || price.value.delete === true\n                                \"\n                                formControlName=\"price\"\n                            />\n                            <div *ngIf=\"1 < pricesForm.controls.length\">\n                                <button\n                                    class=\"button-small delete-button\"\n                                    [disabled]=\"price.value.currencyCode === channelDefaultCurrencyCode\"\n                                    (click)=\"toggleDeletePrice(price.get('delete'))\"\n                                >\n                                    <clr-icon shape=\"trash\"></clr-icon>\n                                </button>\n                            </div>\n                        </div>\n                    </vdr-form-field>\n                    <vdr-variant-price-detail\n                        [price]=\"price.value.price\"\n                        [currencyCode]=\"price.value.currencyCode\"\n                        [priceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                        [taxCategoryId]=\"detailForm.get('taxCategoryId')!.value\"\n                    />\n\n                    <div class=\"form-grid-span\" *ngIf=\"customPriceFields.length\">\n                        <div class=\"title-row\">\n                            <span class=\"title\">{{ 'common.custom-fields' | translate }}</span>\n                        </div>\n                        <vdr-tabbed-custom-fields\n                            entityName=\"ProductVariantPrice\"\n                            [customFields]=\"customPriceFields\"\n                            [customFieldsFormGroup]=\"price.get(['customFields'])\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        />\n                    </div>\n                </div>\n\n                <vdr-variant-price-strategy-detail\n                    [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                    [channelDefaultCurrencyCode]=\"channelDefaultCurrencyCode\"\n                    [variant]=\"variant\"\n                />\n\n                <ng-container *ngIf=\"unusedCurrencyCodes$ | async as unusedCurrencyCodes\">\n                    <div *ngIf=\"unusedCurrencyCodes.length\">\n                        <vdr-dropdown>\n                            <button class=\"button mt-2\" vdrDropdownTrigger>\n                                <clr-icon shape=\"plus\"></clr-icon>\n                                {{ 'catalog.add-price-in-another-currency' | translate }}\n                                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu>\n                                <button\n                                    vdrDropdownItem\n                                    *ngFor=\"let currencyCode of unusedCurrencyCodes\"\n                                    (click)=\"addPriceInCurrency(currencyCode)\"\n                                >\n                                    {{ currencyCode | localeCurrencyName }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </div>\n                </ng-container>\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.stock-levels' | translate\">\n                <div class=\"form-grid\">\n                    <vdr-form-field\n                        for=\"track-inventory\"\n                        [label]=\"'catalog.track-inventory' | translate\"\n                        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\n                    >\n                        <select\n                            name=\"track-inventory\"\n                            formControlName=\"trackInventory\"\n                            [disabled]=\"!(updatePermissions | hasPermission)\"\n                        >\n                            <option [value]=\"GlobalFlag.TRUE\">\n                                {{ 'catalog.track-inventory-true' | translate }}\n                            </option>\n                            <option [value]=\"GlobalFlag.FALSE\">\n                                {{ 'catalog.track-inventory-false' | translate }}\n                            </option>\n                            <option [value]=\"GlobalFlag.INHERIT\">\n                                {{ 'catalog.track-inventory-inherit' | translate }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n\n                    <vdr-form-item\n                        [label]=\"'catalog.out-of-stock-threshold' | translate\"\n                        [tooltip]=\"'catalog.out-of-stock-threshold-tooltip' | translate\"\n                    >\n                        <input\n                            type=\"number\"\n                            formControlName=\"outOfStockThreshold\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                            [vdrDisabled]=\"\n                                detailForm.get('useGlobalOutOfStockThreshold')?.value !== false ||\n                                inventoryIsNotTracked(detailForm)\n                            \"\n                        />\n                        <clr-toggle-wrapper>\n                            <input\n                                type=\"checkbox\"\n                                clrToggle\n                                name=\"useGlobalOutOfStockThreshold\"\n                                formControlName=\"useGlobalOutOfStockThreshold\"\n                                [vdrDisabled]=\"\n                                    !(updatePermissions | hasPermission) || inventoryIsNotTracked(detailForm)\n                                \"\n                            />\n                            <label\n                                >{{ 'catalog.use-global-value' | translate }} ({{\n                                    globalOutOfStockThreshold\n                                }})</label\n                            >\n                        </clr-toggle-wrapper>\n                    </vdr-form-item>\n                </div>\n                <div\n                    class=\"form-grid stock-levels\"\n                    *ngFor=\"let stockLevel of stockLevelsForm.controls\"\n                    [formGroup]=\"stockLevel\"\n                >\n                    <vdr-form-field\n                        [label]=\"\n                            stockLevel.get('stockLocationName')?.value +\n                            ': ' +\n                            ('catalog.stock-on-hand' | translate)\n                        \"\n                        [for]=\"'stockOnHand_' + stockLevel.get('stockLocationId')?.value\"\n                    >\n                        <input\n                            [id]=\"'stockOnHand_' + stockLevel.get('stockLocationId')?.value\"\n                            type=\"number\"\n                            formControlName=\"stockOnHand\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-item\n                        [label]=\"\n                            stockLevel.get('stockLocationName')?.value +\n                            ': ' +\n                            ('catalog.stock-allocated' | translate)\n                        \"\n                    >\n                        {{ stockLevel.get('stockAllocated')?.value }}\n                    </vdr-form-item>\n                </div>\n                <ng-container *ngIf=\"unusedStockLocation$ | async as unusedStockLocations\">\n                    <div *ngIf=\"unusedStockLocations.length\">\n                        <vdr-dropdown>\n                            <button class=\"button mt-2\" vdrDropdownTrigger>\n                                <clr-icon shape=\"plus\"></clr-icon>\n                                {{ 'catalog.add-stock-location' | translate }}\n                                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu>\n                                <button\n                                    vdrDropdownItem\n                                    *ngFor=\"let stockLocation of unusedStockLocations\"\n                                    (click)=\"addStockLocation(stockLocation)\"\n                                >\n                                    <clr-icon shape=\"map-marker\"></clr-icon> {{ stockLocation.name }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </div>\n                </ng-container>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [".facets,.options{display:flex;flex-wrap:wrap;gap:3px}vdr-product-variant-quick-jump{flex:1;margin-inline-end:calc(var(--space-unit) * 2)}.stock-levels,.prices{margin-top:calc(var(--space-unit) * 2);padding-top:calc(var(--space-unit) * 2);border-top:1px solid var(--color-weight-150)}.price-wrapper{display:flex;align-items:center;gap:var(--space-unit);width:100%}.price-wrapper.pending-deletion vdr-currency-input{opacity:.7}.price-wrapper.pending-deletion .delete-button{background-color:var(--color-error-700);color:var(--color-error-100)}.title-row{display:flex;justify-content:space-between;align-items:center}.title{font-size:var(--font-size-base)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.AssetsComponent, selector: "vdr-assets", inputs: ["assets", "featuredAsset", "compact", "updatePermissions", "multiSelect"], outputs: ["change"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.CurrencyInputComponent, selector: "vdr-currency-input", inputs: ["disabled", "readonly", "value", "currencyCode"], outputs: ["valueChange"] }, { kind: "component", type: i1.FacetValueChipComponent, selector: "vdr-facet-value-chip", inputs: ["facetValue", "removable", "displayFacetName"], outputs: ["remove"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.FormItemComponent, selector: "vdr-form-item", inputs: ["label", "tooltip"] }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: VariantPriceDetailComponent, selector: "vdr-variant-price-detail", inputs: ["priceIncludesTax", "price", "currencyCode", "taxCategoryId"] }, { kind: "component", type: VariantPriceStrategyDetailComponent, selector: "vdr-variant-price-strategy-detail", inputs: ["channelPriceIncludesTax", "variant", "channelDefaultCurrencyCode"] }, { kind: "component", type: ProductVariantQuickJumpComponent, selector: "vdr-product-variant-quick-jump", inputs: ["productId"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyNamePipe, name: "localeCurrencyName" }, { kind: "pipe", type: i1.SortPipe, name: "sort" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-product-variant-detail', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left [grow]=\"true\">\n            <div class=\"flex center\">\n                <ng-container *ngIf=\"availableLanguages$ | async as availableLanguages\">\n                    <vdr-language-selector\n                        *ngIf=\"availableLanguages.length > 1\"\n                        class=\"mr-2\"\n                        [disabled]=\"isNew$ | async\"\n                        [availableLanguageCodes]=\"availableLanguages\"\n                        [currentLanguageCode]=\"languageCode$ | async\"\n                        (languageCodeChange)=\"setLanguage($event)\"\n                    ></vdr-language-selector>\n                </ng-container>\n                <vdr-product-variant-quick-jump [productId]=\"entity?.product.id\" />\n            </div>\n        </vdr-ab-left>\n\n        <vdr-ab-right>\n            <vdr-action-bar-items locationId=\"product-variant-detail\"></vdr-action-bar-items>\n            <button\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"\n                    (detailForm.invalid ||\n                        stockLevelsForm.invalid ||\n                        pricesForm.invalid ||\n                        (detailForm.pristine && stockLevelsForm.pristine && pricesForm.pristine)) &&\n                    !assetsChanged()\n                \"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n            <vdr-action-bar-dropdown-menu locationId=\"product-variant-detail\"></vdr-action-bar-dropdown-menu>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as variant\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar\n            ><vdr-card>\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                    <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            [formControl]=\"detailForm.get(['enabled'])\"\n                        />\n                        <label>{{ 'common.enabled' | translate }}</label>\n                    </clr-toggle-wrapper>\n                </vdr-form-field>\n            </vdr-card>\n            <vdr-card *ngIf=\"variant.options.length\" [title]=\"'catalog.product-options' | translate\">\n                <div class=\"options\">\n                    <vdr-chip\n                        *ngFor=\"let option of variant.options | sort : 'groupId'\"\n                        [colorFrom]=\"optionGroupCode(option.groupId)\"\n                        [invert]=\"true\"\n                    >\n                        <span>{{ optionGroupCode(option.groupId) }}:</span>\n                        {{ optionName(option) }}\n                    </vdr-chip>\n                </div>\n                <div>\n                    <a\n                        [routerLink]=\"['../../', 'options']\"\n                        class=\"button-small mt-2\"\n                        *vdrIfPermissions=\"updatePermissions\"\n                    >\n                        <clr-icon shape=\"pencil\"></clr-icon>\n                        {{ 'catalog.edit-options' | translate }}\n                    </a>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.facets' | translate\">\n                <div class=\"facets\">\n                    <vdr-facet-value-chip\n                        *ngFor=\"let facetValue of facetValues$ | async\"\n                        [facetValue]=\"facetValue\"\n                        [removable]=\"updatePermissions | hasPermission\"\n                        (remove)=\"removeFacetValue(facetValue.id)\"\n                    ></vdr-facet-value-chip>\n                </div>\n                <div>\n                    <button\n                        class=\"button-small mt-2\"\n                        *vdrIfPermissions=\"updatePermissions\"\n                        (click)=\"selectFacetValue()\"\n                    >\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'catalog.add-facets' | translate }}\n                    </button>\n                </div>\n            </vdr-card>\n\n            <vdr-card>\n                <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n\n        <vdr-page-block>\n            <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-field [label]=\"'catalog.sku' | translate\" for=\"sku\">\n                        <input\n                            id=\"sku\"\n                            type=\"text\"\n                            formControlName=\"sku\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\n                <vdr-tabbed-custom-fields\n                    entityName=\"ProductVariant\"\n                    [customFields]=\"customFields\"\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                    [readonly]=\"!(updatePermissions | hasPermission)\"\n                />\n            </vdr-card>\n            <vdr-custom-detail-component-host\n                locationId=\"product-variant-detail\"\n                [entity$]=\"entity$\"\n                [detailForm]=\"detailForm\"\n            />\n            <vdr-card [title]=\"'catalog.assets' | translate\">\n                <vdr-assets\n                    [assets]=\"assetChanges.assets || variant.assets\"\n                    [featuredAsset]=\"assetChanges.featuredAsset || variant.featuredAsset\"\n                    [updatePermissions]=\"updatePermissions\"\n                    (change)=\"assetChanges = $event\"\n                />\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.price-and-tax' | translate\">\n                <div class=\"form-grid\">\n                    <vdr-form-field [label]=\"'catalog.tax-category' | translate\" for=\"taxCategory\">\n                        <select name=\"taxCategory\" formControlName=\"taxCategoryId\">\n                            <option\n                                *ngFor=\"let taxCategory of taxCategories$ | async\"\n                                [value]=\"taxCategory.id\"\n                            >\n                                {{ taxCategory.name }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n                </div>\n                <div class=\"form-grid prices\" *ngFor=\"let price of pricesForm.controls\" [formGroup]=\"price\">\n                    <vdr-form-field\n                        [label]=\"\n                            ('catalog.price' | translate) +\n                            (1 < pricesForm.length ? ' (' + price.value.currencyCode + ')' : '')\n                        \"\n                        [tooltip]=\"\n                            1 < pricesForm.length && price.value.currencyCode === channelDefaultCurrencyCode\n                                ? ('catalog.default-currency' | translate)\n                                : undefined\n                        \"\n                        for=\"price\"\n                    >\n                        <div class=\"price-wrapper\" [class.pending-deletion]=\"price.value.delete === true\">\n                            <vdr-currency-input\n                                name=\"price\"\n                                [currencyCode]=\"price.value.currencyCode\"\n                                [readonly]=\"\n                                    !(updatePermissions | hasPermission) || price.value.delete === true\n                                \"\n                                formControlName=\"price\"\n                            />\n                            <div *ngIf=\"1 < pricesForm.controls.length\">\n                                <button\n                                    class=\"button-small delete-button\"\n                                    [disabled]=\"price.value.currencyCode === channelDefaultCurrencyCode\"\n                                    (click)=\"toggleDeletePrice(price.get('delete'))\"\n                                >\n                                    <clr-icon shape=\"trash\"></clr-icon>\n                                </button>\n                            </div>\n                        </div>\n                    </vdr-form-field>\n                    <vdr-variant-price-detail\n                        [price]=\"price.value.price\"\n                        [currencyCode]=\"price.value.currencyCode\"\n                        [priceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                        [taxCategoryId]=\"detailForm.get('taxCategoryId')!.value\"\n                    />\n\n                    <div class=\"form-grid-span\" *ngIf=\"customPriceFields.length\">\n                        <div class=\"title-row\">\n                            <span class=\"title\">{{ 'common.custom-fields' | translate }}</span>\n                        </div>\n                        <vdr-tabbed-custom-fields\n                            entityName=\"ProductVariantPrice\"\n                            [customFields]=\"customPriceFields\"\n                            [customFieldsFormGroup]=\"price.get(['customFields'])\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        />\n                    </div>\n                </div>\n\n                <vdr-variant-price-strategy-detail\n                    [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                    [channelDefaultCurrencyCode]=\"channelDefaultCurrencyCode\"\n                    [variant]=\"variant\"\n                />\n\n                <ng-container *ngIf=\"unusedCurrencyCodes$ | async as unusedCurrencyCodes\">\n                    <div *ngIf=\"unusedCurrencyCodes.length\">\n                        <vdr-dropdown>\n                            <button class=\"button mt-2\" vdrDropdownTrigger>\n                                <clr-icon shape=\"plus\"></clr-icon>\n                                {{ 'catalog.add-price-in-another-currency' | translate }}\n                                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu>\n                                <button\n                                    vdrDropdownItem\n                                    *ngFor=\"let currencyCode of unusedCurrencyCodes\"\n                                    (click)=\"addPriceInCurrency(currencyCode)\"\n                                >\n                                    {{ currencyCode | localeCurrencyName }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </div>\n                </ng-container>\n            </vdr-card>\n            <vdr-card [title]=\"'catalog.stock-levels' | translate\">\n                <div class=\"form-grid\">\n                    <vdr-form-field\n                        for=\"track-inventory\"\n                        [label]=\"'catalog.track-inventory' | translate\"\n                        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\n                    >\n                        <select\n                            name=\"track-inventory\"\n                            formControlName=\"trackInventory\"\n                            [disabled]=\"!(updatePermissions | hasPermission)\"\n                        >\n                            <option [value]=\"GlobalFlag.TRUE\">\n                                {{ 'catalog.track-inventory-true' | translate }}\n                            </option>\n                            <option [value]=\"GlobalFlag.FALSE\">\n                                {{ 'catalog.track-inventory-false' | translate }}\n                            </option>\n                            <option [value]=\"GlobalFlag.INHERIT\">\n                                {{ 'catalog.track-inventory-inherit' | translate }}\n                            </option>\n                        </select>\n                    </vdr-form-field>\n\n                    <vdr-form-item\n                        [label]=\"'catalog.out-of-stock-threshold' | translate\"\n                        [tooltip]=\"'catalog.out-of-stock-threshold-tooltip' | translate\"\n                    >\n                        <input\n                            type=\"number\"\n                            formControlName=\"outOfStockThreshold\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                            [vdrDisabled]=\"\n                                detailForm.get('useGlobalOutOfStockThreshold')?.value !== false ||\n                                inventoryIsNotTracked(detailForm)\n                            \"\n                        />\n                        <clr-toggle-wrapper>\n                            <input\n                                type=\"checkbox\"\n                                clrToggle\n                                name=\"useGlobalOutOfStockThreshold\"\n                                formControlName=\"useGlobalOutOfStockThreshold\"\n                                [vdrDisabled]=\"\n                                    !(updatePermissions | hasPermission) || inventoryIsNotTracked(detailForm)\n                                \"\n                            />\n                            <label\n                                >{{ 'catalog.use-global-value' | translate }} ({{\n                                    globalOutOfStockThreshold\n                                }})</label\n                            >\n                        </clr-toggle-wrapper>\n                    </vdr-form-item>\n                </div>\n                <div\n                    class=\"form-grid stock-levels\"\n                    *ngFor=\"let stockLevel of stockLevelsForm.controls\"\n                    [formGroup]=\"stockLevel\"\n                >\n                    <vdr-form-field\n                        [label]=\"\n                            stockLevel.get('stockLocationName')?.value +\n                            ': ' +\n                            ('catalog.stock-on-hand' | translate)\n                        \"\n                        [for]=\"'stockOnHand_' + stockLevel.get('stockLocationId')?.value\"\n                    >\n                        <input\n                            [id]=\"'stockOnHand_' + stockLevel.get('stockLocationId')?.value\"\n                            type=\"number\"\n                            formControlName=\"stockOnHand\"\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\n                        />\n                    </vdr-form-field>\n                    <vdr-form-item\n                        [label]=\"\n                            stockLevel.get('stockLocationName')?.value +\n                            ': ' +\n                            ('catalog.stock-allocated' | translate)\n                        \"\n                    >\n                        {{ stockLevel.get('stockAllocated')?.value }}\n                    </vdr-form-item>\n                </div>\n                <ng-container *ngIf=\"unusedStockLocation$ | async as unusedStockLocations\">\n                    <div *ngIf=\"unusedStockLocations.length\">\n                        <vdr-dropdown>\n                            <button class=\"button mt-2\" vdrDropdownTrigger>\n                                <clr-icon shape=\"plus\"></clr-icon>\n                                {{ 'catalog.add-stock-location' | translate }}\n                                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu>\n                                <button\n                                    vdrDropdownItem\n                                    *ngFor=\"let stockLocation of unusedStockLocations\"\n                                    (click)=\"addStockLocation(stockLocation)\"\n                                >\n                                    <clr-icon shape=\"map-marker\"></clr-icon> {{ stockLocation.name }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </div>\n                </ng-container>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n", styles: [".facets,.options{display:flex;flex-wrap:wrap;gap:3px}vdr-product-variant-quick-jump{flex:1;margin-inline-end:calc(var(--space-unit) * 2)}.stock-levels,.prices{margin-top:calc(var(--space-unit) * 2);padding-top:calc(var(--space-unit) * 2);border-top:1px solid var(--color-weight-150)}.price-wrapper{display:flex;align-items:center;gap:var(--space-unit);width:100%}.price-wrapper.pending-deletion vdr-currency-input{opacity:.7}.price-wrapper.pending-deletion .delete-button{background-color:var(--color-error-700);color:var(--color-error-100)}.title-row{display:flex;justify-content:space-between;align-items:center}.title{font-size:var(--font-size-base)}\n"] }]
        }], ctorParameters: () => [{ type: ProductDetailService }, { type: i2.FormBuilder }, { type: i1.ModalService }, { type: i1.NotificationService }, { type: i1.DataService }, { type: i0.ChangeDetectorRef }] });

const assignProductVariantsToChannelBulkAction = {
    location: 'product-variant-list',
    label: marker('common.assign-to-channel'),
    icon: 'layers',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateProduct),
    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),
    onClick: ({ injector, selection, clearSelection }) => {
        const modalService = injector.get(ModalService);
        modalService
            .fromComponent(AssignProductsToChannelDialogComponent, {
            size: 'lg',
            locals: {
                productVariantIds: unique(selection.map(p => p.id)),
                currentChannelIds: [],
            },
        })
            .subscribe(result => {
            if (result) {
                clearSelection();
            }
        });
    },
};
const removeProductVariantsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'product-variant-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateProduct),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, ids, channelId) => dataService.product
        .removeVariantsFromChannel({
        channelId: channelId,
        productVariantIds: ids,
    })
        .pipe(map(res => res.removeProductVariantsFromChannel)),
});
const deleteProductVariantsBulkAction = {
    location: 'product-variant-list',
    label: marker('common.delete'),
    icon: 'trash',
    iconClass: 'is-danger',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteProduct) ||
        userPermissions.includes(Permission.DeleteCatalog),
    onClick: ({ injector, selection, hostComponent, clearSelection }) => {
        const modalService = injector.get(ModalService);
        const dataService = injector.get(DataService);
        const notificationService = injector.get(NotificationService);
        modalService
            .dialog({
            title: marker('common.confirm-bulk-delete'),
            translationVars: {
                count: selection.length,
            },
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response
            ? dataService.product.deleteProductVariants(unique(selection.map(p => p.id)))
            : EMPTY))
            .subscribe(result => {
            let deleted = 0;
            const errors = [];
            for (const item of result.deleteProductVariants) {
                if (item.result === DeletionResult.DELETED) {
                    deleted++;
                }
                else if (item.message) {
                    errors.push(item.message);
                }
            }
            if (0 < deleted) {
                notificationService.success(marker('catalog.notify-bulk-delete-products-success'), {
                    count: deleted,
                });
            }
            if (0 < errors.length) {
                notificationService.error(errors.join('\n'));
            }
            hostComponent.refresh();
            clearSelection();
        });
    },
};
const assignFacetValuesToProductVariantsBulkAction = {
    location: 'product-variant-list',
    label: marker('catalog.edit-facet-values'),
    icon: 'tag',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateProduct),
    onClick: ({ injector, selection, clearSelection }) => {
        const modalService = injector.get(ModalService);
        const notificationService = injector.get(NotificationService);
        const mode = 'variant';
        const ids = unique(selection.map(p => p.id));
        return modalService
            .fromComponent(BulkAddFacetValuesDialogComponent, {
            size: 'xl',
            locals: {
                mode,
                ids,
            },
        })
            .subscribe(result => {
            if (result) {
                notificationService.success(marker('common.notify-bulk-update-success'), {
                    count: selection.length,
                    entity: mode === 'variant' ? 'Products' : 'ProductVariants',
                });
                clearSelection();
            }
        });
    },
};

class ProductVariantsTableComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.formGroupMap = new Map();
        this.updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];
    }
    ngOnInit() {
        this.subscription = this.formArray.valueChanges
            .pipe(map(value => value.length), debounceTime(1), distinctUntilChanged())
            .subscribe(() => {
            this.buildFormGroupMap();
        });
        this.buildFormGroupMap();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    trackByFn(index, item) {
        if (item.id != null) {
            return item.id;
        }
        else {
            return index;
        }
    }
    getFeaturedAsset(variant) {
        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;
    }
    optionGroupName(optionGroupId) {
        const group = this.optionGroups.find(g => g.id === optionGroupId);
        return group && group.name;
    }
    buildFormGroupMap() {
        this.formGroupMap.clear();
        for (const controlGroup of this.formArray.controls) {
            this.formGroupMap.set(controlGroup.value.id, controlGroup);
        }
        this.changeDetector.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantsTableComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: ProductVariantsTableComponent, isStandalone: false, selector: "vdr-product-variants-table", inputs: { formArray: ["productVariantsFormArray", "formArray"], variants: "variants", paginationConfig: "paginationConfig", channelPriceIncludesTax: "channelPriceIncludesTax", optionGroups: "optionGroups", pendingAssetChanges: "pendingAssetChanges" }, ngImport: i0, template: "<table class=\"table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ 'common.name' | translate }}</th>\n            <th>{{ 'catalog.sku' | translate }}</th>\n            <ng-container *ngFor=\"let optionGroup of optionGroups | sort: 'id'\">\n                <th>{{ optionGroup.name }}</th>\n            </ng-container>\n            <th>{{ 'catalog.price' | translate }}</th>\n            <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n            <th>{{ 'common.enabled' | translate }}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let variant of variants | paginate: paginationConfig; index as i; trackBy: trackByFn\">\n            <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <div class=\"card-img\">\n                        <div class=\"featured-asset\">\n                            <img\n                                *ngIf=\"getFeaturedAsset(variant) as featuredAsset; else placeholder\"\n                                [src]=\"featuredAsset | assetPreview: 'tiny'\"\n                            />\n                            <ng-template #placeholder>\n                                <div class=\"placeholder\">\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                                </div>\n                            </ng-template>\n                        </div>\n                    </div>\n                </td>\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            [placeholder]=\"'common.name' | translate\"\n                        />\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"text\"\n                            formControlName=\"sku\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            [placeholder]=\"'catalog.sku' | translate\"\n                        />\n                    </clr-input-container>\n                </td>\n                <ng-container *ngFor=\"let option of variant.options | sort: 'groupId'\">\n                    <td\n                        class=\"left align-middle\"\n                        [class.disabled]=\"!formGroup.get('enabled')!.value\"\n                        [style.color]=\"optionGroupName(option.groupId) | stringToColor\"\n                    >\n                        {{ option.name }}\n                    </td>\n                </ng-container>\n                <td class=\"left align-middle price\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <vdr-currency-input\n                            *ngIf=\"!channelPriceIncludesTax\"\n                            clrInput\n                            [currencyCode]=\"variant.currencyCode\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"price\"\n                        ></vdr-currency-input>\n                        <vdr-currency-input\n                            *ngIf=\"channelPriceIncludesTax\"\n                            clrInput\n                            [currencyCode]=\"variant.currencyCode\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"priceWithTax\"\n                        ></vdr-currency-input>\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"number\"\n                            min=\"0\"\n                            step=\"1\"\n                            formControlName=\"stockOnHand\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            formControlName=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </td>\n            </ng-container>\n        </tr>\n    </tbody>\n</table>\n", styles: [".placeholder{color:var(--color-grey-300)}.stock input,.price input{max-width:96px}td{transition:background-color .2s}td.disabled{background-color:var(--color-component-bg-200)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i3.ClrInput, selector: "[clrInput]" }, { kind: "component", type: i3.ClrInputContainer, selector: "clr-input-container" }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i1.CurrencyInputComponent, selector: "vdr-currency-input", inputs: ["disabled", "readonly", "value", "currencyCode"], outputs: ["valueChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "pipe", type: i5$2.PaginatePipe, name: "paginate" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.SortPipe, name: "sort" }, { kind: "pipe", type: i1.StringToColorPipe, name: "stringToColor" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.AssetPreviewPipe, name: "assetPreview" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: ProductVariantsTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-product-variants-table', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<table class=\"table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ 'common.name' | translate }}</th>\n            <th>{{ 'catalog.sku' | translate }}</th>\n            <ng-container *ngFor=\"let optionGroup of optionGroups | sort: 'id'\">\n                <th>{{ optionGroup.name }}</th>\n            </ng-container>\n            <th>{{ 'catalog.price' | translate }}</th>\n            <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n            <th>{{ 'common.enabled' | translate }}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let variant of variants | paginate: paginationConfig; index as i; trackBy: trackByFn\">\n            <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <div class=\"card-img\">\n                        <div class=\"featured-asset\">\n                            <img\n                                *ngIf=\"getFeaturedAsset(variant) as featuredAsset; else placeholder\"\n                                [src]=\"featuredAsset | assetPreview: 'tiny'\"\n                            />\n                            <ng-template #placeholder>\n                                <div class=\"placeholder\">\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                                </div>\n                            </ng-template>\n                        </div>\n                    </div>\n                </td>\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            [placeholder]=\"'common.name' | translate\"\n                        />\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"text\"\n                            formControlName=\"sku\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            [placeholder]=\"'catalog.sku' | translate\"\n                        />\n                    </clr-input-container>\n                </td>\n                <ng-container *ngFor=\"let option of variant.options | sort: 'groupId'\">\n                    <td\n                        class=\"left align-middle\"\n                        [class.disabled]=\"!formGroup.get('enabled')!.value\"\n                        [style.color]=\"optionGroupName(option.groupId) | stringToColor\"\n                    >\n                        {{ option.name }}\n                    </td>\n                </ng-container>\n                <td class=\"left align-middle price\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <vdr-currency-input\n                            *ngIf=\"!channelPriceIncludesTax\"\n                            clrInput\n                            [currencyCode]=\"variant.currencyCode\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"price\"\n                        ></vdr-currency-input>\n                        <vdr-currency-input\n                            *ngIf=\"channelPriceIncludesTax\"\n                            clrInput\n                            [currencyCode]=\"variant.currencyCode\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            formControlName=\"priceWithTax\"\n                        ></vdr-currency-input>\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-input-container>\n                        <input\n                            clrInput\n                            type=\"number\"\n                            min=\"0\"\n                            step=\"1\"\n                            formControlName=\"stockOnHand\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-input-container>\n                </td>\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                    <clr-toggle-wrapper>\n                        <input\n                            type=\"checkbox\"\n                            clrToggle\n                            name=\"enabled\"\n                            formControlName=\"enabled\"\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                        />\n                    </clr-toggle-wrapper>\n                </td>\n            </ng-container>\n        </tr>\n    </tbody>\n</table>\n", styles: [".placeholder{color:var(--color-grey-300)}.stock input,.price input{max-width:96px}td{transition:background-color .2s}td.disabled{background-color:var(--color-component-bg-200)}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { formArray: [{
                type: Input,
                args: ['productVariantsFormArray']
            }], variants: [{
                type: Input
            }], paginationConfig: [{
                type: Input
            }], channelPriceIncludesTax: [{
                type: Input
            }], optionGroups: [{
                type: Input
            }], pendingAssetChanges: [{
                type: Input
            }] } });

class UpdateProductOptionDialogComponent {
    constructor() {
        this.updateVariantName = true;
        this.codeInputTouched = false;
    }
    ngOnInit() {
        const currentTranslation = this.productOption.translations.find(t => t.languageCode === this.activeLanguage);
        this.name = currentTranslation?.name ?? '';
        this.code = this.productOption.code;
        this.customFieldsForm = new UntypedFormGroup({});
        if (this.customFields) {
            const cfCurrentTranslation = (currentTranslation && currentTranslation.customFields) || {};
            for (const fieldDef of this.customFields) {
                const key = fieldDef.name;
                const value = fieldDef.type === 'localeString'
                    ? cfCurrentTranslation[key]
                    : this.productOption.customFields[key];
                this.customFieldsForm.addControl(fieldDef.name, new UntypedFormControl(value));
            }
        }
    }
    update() {
        const result = createUpdatedTranslatable({
            translatable: this.productOption,
            languageCode: this.activeLanguage,
            updatedFields: {
                code: this.code,
                name: this.name,
                customFields: this.customFieldsForm.value,
            },
            customFieldConfig: this.customFields,
            defaultTranslation: {
                languageCode: this.activeLanguage,
                name: '',
            },
        });
        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });
    }
    cancel() {
        this.resolveWith();
    }
    updateCode(nameValue) {
        if (!this.codeInputTouched && !this.productOption.code) {
            this.code = normalizeString(nameValue, '-');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: UpdateProductOptionDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.4", type: UpdateProductOptionDialogComponent, isStandalone: false, selector: "vdr-update-product-option-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'catalog.update-product-option' | translate }}</ng-template>\n<vdr-form-field [label]=\"'catalog.option-name' | translate\" for=\"name\">\n    <input\n        id=\"name\"\n        type=\"text\"\n        #nameInput=\"ngModel\"\n        [(ngModel)]=\"name\"\n        required\n        (input)=\"updateCode($event.target.value)\"\n    />\n</vdr-form-field>\n<vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n    <input id=\"code\" type=\"text\" #codeInput=\"ngModel\" required [(ngModel)]=\"code\" pattern=\"[a-z0-9_-]+\" />\n</vdr-form-field>\n<clr-checkbox-wrapper>\n    <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"updateVariantName\" />\n    <label>{{ 'catalog.auto-update-option-variant-name' | translate }}</label>\n</clr-checkbox-wrapper>\n<section *ngIf=\"customFields.length\">\n    <label>{{ 'common.custom-fields' | translate }}</label>\n    <vdr-tabbed-custom-fields\n        entityName=\"ProductOption\"\n        [customFields]=\"customFields\"\n        [customFieldsFormGroup]=\"customFieldsForm\"\n        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n    ></vdr-tabbed-custom-fields>\n</section>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"update()\"\n        [disabled]=\"\n            nameInput.invalid ||\n            codeInput.invalid ||\n            (nameInput.pristine && codeInput.pristine && customFieldsForm.pristine)\n        \"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.update-product-option' | translate }}\n    </button>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["id", "for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: UpdateProductOptionDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-update-product-option-dialog', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<ng-template vdrDialogTitle>{{ 'catalog.update-product-option' | translate }}</ng-template>\n<vdr-form-field [label]=\"'catalog.option-name' | translate\" for=\"name\">\n    <input\n        id=\"name\"\n        type=\"text\"\n        #nameInput=\"ngModel\"\n        [(ngModel)]=\"name\"\n        required\n        (input)=\"updateCode($event.target.value)\"\n    />\n</vdr-form-field>\n<vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n    <input id=\"code\" type=\"text\" #codeInput=\"ngModel\" required [(ngModel)]=\"code\" pattern=\"[a-z0-9_-]+\" />\n</vdr-form-field>\n<clr-checkbox-wrapper>\n    <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"updateVariantName\" />\n    <label>{{ 'catalog.auto-update-option-variant-name' | translate }}</label>\n</clr-checkbox-wrapper>\n<section *ngIf=\"customFields.length\">\n    <label>{{ 'common.custom-fields' | translate }}</label>\n    <vdr-tabbed-custom-fields\n        entityName=\"ProductOption\"\n        [customFields]=\"customFields\"\n        [customFieldsFormGroup]=\"customFieldsForm\"\n        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n    ></vdr-tabbed-custom-fields>\n</section>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"update()\"\n        [disabled]=\"\n            nameInput.invalid ||\n            codeInput.invalid ||\n            (nameInput.pristine && codeInput.pristine && customFieldsForm.pristine)\n        \"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.update-product-option' | translate }}\n    </button>\n</ng-template>\n" }]
        }] });

const CATALOG_COMPONENTS = [
    ProductListComponent,
    ProductDetailComponent,
    FacetListComponent,
    FacetDetailComponent,
    GenerateProductVariantsComponent,
    ApplyFacetDialogComponent,
    AssetListComponent,
    VariantPriceDetailComponent,
    VariantPriceStrategyDetailComponent,
    CollectionListComponent,
    CollectionDetailComponent,
    CollectionTreeComponent,
    CollectionTreeNodeComponent,
    CollectionContentsComponent,
    ProductVariantsTableComponent,
    OptionValueInputComponent,
    UpdateProductOptionDialogComponent,
    ProductVariantsEditorComponent,
    AssignProductsToChannelDialogComponent,
    AssetDetailComponent,
    ConfirmVariantDeletionDialogComponent,
    ProductOptionsEditorComponent,
    BulkAddFacetValuesDialogComponent,
    CollectionDataTableComponent,
    CollectionBreadcrumbPipe,
    MoveCollectionsDialogComponent,
    ProductVariantListComponent,
    ProductDetailComponent,
    ProductVariantDetailComponent,
    CreateProductVariantDialogComponent,
    CreateProductOptionGroupDialogComponent,
    ProductVariantQuickJumpComponent,
    CreateFacetValueDialogComponent,
];
class CatalogModule {
    static { this.hasRegisteredTabsAndBulkActions = false; }
    constructor(bulkActionRegistryService, pageService) {
        if (CatalogModule.hasRegisteredTabsAndBulkActions) {
            return;
        }
        bulkActionRegistryService.registerBulkAction(assignFacetValuesToProductsBulkAction);
        bulkActionRegistryService.registerBulkAction(assignProductsToChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(duplicateProductsBulkAction);
        bulkActionRegistryService.registerBulkAction(removeProductsFromChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteProductsBulkAction);
        bulkActionRegistryService.registerBulkAction(assignFacetValuesToProductVariantsBulkAction);
        bulkActionRegistryService.registerBulkAction(assignProductVariantsToChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(removeProductVariantsFromChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteProductVariantsBulkAction);
        bulkActionRegistryService.registerBulkAction(assignFacetsToChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(duplicateFacetsBulkAction);
        bulkActionRegistryService.registerBulkAction(removeFacetsFromChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteFacetsBulkAction);
        bulkActionRegistryService.registerBulkAction(moveCollectionsBulkAction);
        bulkActionRegistryService.registerBulkAction(assignCollectionsToChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(duplicateCollectionsBulkAction);
        bulkActionRegistryService.registerBulkAction(removeCollectionsFromChannelBulkAction);
        bulkActionRegistryService.registerBulkAction(deleteCollectionsBulkAction);
        pageService.registerPageTab({
            priority: 0,
            location: 'product-list',
            tab: marker('catalog.products'),
            route: '',
            component: ProductListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'product-detail',
            tab: marker('catalog.product'),
            route: '',
            component: detailComponentWithResolver({
                component: ProductDetailComponent,
                query: GetProductDetailDocument,
                entityKey: 'product',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('catalog.create-new-product'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'product-variant-list',
            tab: marker('catalog.product-variants'),
            route: 'variants',
            component: ProductVariantListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'product-variant-detail',
            tab: marker('catalog.product-variants'),
            route: '',
            component: detailComponentWithResolver({
                component: ProductVariantDetailComponent,
                query: GetProductVariantDetailDocument,
                entityKey: 'productVariant',
                getBreadcrumbs: entity => [
                    {
                        label: `${entity?.product.name}`,
                        link: ['/catalog', 'products', entity?.product.id],
                    },
                    {
                        label: `${entity?.name} (${entity?.sku})`,
                        link: ['variants', entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'facet-list',
            tab: marker('catalog.facets'),
            route: '',
            component: FacetListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'facet-detail',
            tab: marker('catalog.facet'),
            route: '',
            component: detailComponentWithResolver({
                component: FacetDetailComponent,
                query: GetFacetDetailDocument,
                variables: {
                    facetValueListOptions: {
                        take: 10,
                        skip: 0,
                        sort: {
                            createdAt: SortOrder$1.DESC,
                        },
                    },
                },
                entityKey: 'facet',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('catalog.create-new-facet'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'collection-list',
            tab: marker('catalog.collections'),
            route: '',
            component: CollectionListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'collection-detail',
            tab: marker('catalog.collection'),
            route: '',
            component: detailComponentWithResolver({
                component: CollectionDetailComponent,
                query: CollectionDetailQueryDocument,
                entityKey: 'collection',
                getBreadcrumbs: entity => [
                    {
                        label: entity ? entity.name : marker('catalog.create-new-collection'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'asset-list',
            tab: marker('catalog.assets'),
            route: '',
            component: AssetListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'asset-detail',
            tab: marker('catalog.asset'),
            route: '',
            component: detailComponentWithResolver({
                component: AssetDetailComponent,
                query: AssetDetailQueryDocument,
                entityKey: 'asset',
                getBreadcrumbs: entity => [
                    {
                        label: `${entity?.name}`,
                        link: [entity?.id],
                    },
                ],
            }),
        });
        CatalogModule.hasRegisteredTabsAndBulkActions = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CatalogModule, deps: [{ token: i1.BulkActionRegistryService }, { token: i1.PageService }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.4", ngImport: i0, type: CatalogModule, declarations: [ProductListComponent,
            ProductDetailComponent,
            FacetListComponent,
            FacetDetailComponent,
            GenerateProductVariantsComponent,
            ApplyFacetDialogComponent,
            AssetListComponent,
            VariantPriceDetailComponent,
            VariantPriceStrategyDetailComponent,
            CollectionListComponent,
            CollectionDetailComponent,
            CollectionTreeComponent,
            CollectionTreeNodeComponent,
            CollectionContentsComponent,
            ProductVariantsTableComponent,
            OptionValueInputComponent,
            UpdateProductOptionDialogComponent,
            ProductVariantsEditorComponent,
            AssignProductsToChannelDialogComponent,
            AssetDetailComponent,
            ConfirmVariantDeletionDialogComponent,
            ProductOptionsEditorComponent,
            BulkAddFacetValuesDialogComponent,
            CollectionDataTableComponent,
            CollectionBreadcrumbPipe,
            MoveCollectionsDialogComponent,
            ProductVariantListComponent,
            ProductDetailComponent,
            ProductVariantDetailComponent,
            CreateProductVariantDialogComponent,
            CreateProductOptionGroupDialogComponent,
            ProductVariantQuickJumpComponent,
            CreateFacetValueDialogComponent], imports: [SharedModule, i1$1.RouterModule], exports: [ProductListComponent,
            ProductDetailComponent,
            FacetListComponent,
            FacetDetailComponent,
            GenerateProductVariantsComponent,
            ApplyFacetDialogComponent,
            AssetListComponent,
            VariantPriceDetailComponent,
            VariantPriceStrategyDetailComponent,
            CollectionListComponent,
            CollectionDetailComponent,
            CollectionTreeComponent,
            CollectionTreeNodeComponent,
            CollectionContentsComponent,
            ProductVariantsTableComponent,
            OptionValueInputComponent,
            UpdateProductOptionDialogComponent,
            ProductVariantsEditorComponent,
            AssignProductsToChannelDialogComponent,
            AssetDetailComponent,
            ConfirmVariantDeletionDialogComponent,
            ProductOptionsEditorComponent,
            BulkAddFacetValuesDialogComponent,
            CollectionDataTableComponent,
            CollectionBreadcrumbPipe,
            MoveCollectionsDialogComponent,
            ProductVariantListComponent,
            ProductDetailComponent,
            ProductVariantDetailComponent,
            CreateProductVariantDialogComponent,
            CreateProductOptionGroupDialogComponent,
            ProductVariantQuickJumpComponent,
            CreateFacetValueDialogComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CatalogModule, providers: [
            {
                provide: ROUTES,
                useFactory: (pageService) => createRoutes(pageService),
                multi: true,
                deps: [PageService],
            },
        ], imports: [SharedModule, RouterModule.forChild([])] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.4", ngImport: i0, type: CatalogModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [SharedModule, RouterModule.forChild([])],
                    exports: [...CATALOG_COMPONENTS],
                    declarations: [...CATALOG_COMPONENTS],
                    providers: [
                        {
                            provide: ROUTES,
                            useFactory: (pageService) => createRoutes(pageService),
                            multi: true,
                            deps: [PageService],
                        },
                    ],
                }]
        }], ctorParameters: () => [{ type: i1.BulkActionRegistryService }, { type: i1.PageService }] });

const PRODUCT_LIST_QUERY_PRODUCT_FRAGMENT = gql `
    fragment ProductListQueryProductFragment on Product {
        id
        createdAt
        updatedAt
        enabled
        languageCode
        name
        slug
        featuredAsset {
            id
            createdAt
            updatedAt
            preview
            focalPoint {
                x
                y
            }
        }
        variantList {
            totalItems
        }
    }
`;
const PRODUCT_LIST_QUERY = gql `
    query ProductListQuery($options: ProductListOptions) {
        products(options: $options) {
            items {
                ...ProductListQueryProductFragment
            }
            totalItems
        }
    }
    ${PRODUCT_LIST_QUERY_PRODUCT_FRAGMENT}
`;

const PRODUCT_VARIANT_DETAIL_QUERY_PRODUCT_VARIANT_FRAGMENT = gql `
    fragment ProductVariantDetailQueryProductVariantFragment on ProductVariant {
        id
        createdAt
        updatedAt
        enabled
        languageCode
        name
        price
        currencyCode
        prices {
            ...ProductVariantPrice
        }
        priceWithTax
        stockOnHand
        stockAllocated
        trackInventory
        outOfStockThreshold
        useGlobalOutOfStockThreshold
        taxRateApplied {
            id
            name
            value
        }
        taxCategory {
            id
            name
        }
        sku
        options {
            ...ProductOption
        }
        stockLevels {
            id
            createdAt
            updatedAt
            stockOnHand
            stockAllocated
            stockLocationId
            stockLocation {
                id
                createdAt
                updatedAt
                name
            }
        }
        facetValues {
            id
            code
            name
            facet {
                id
                name
            }
        }
        featuredAsset {
            ...Asset
        }
        assets {
            ...Asset
        }
        translations {
            id
            languageCode
            name
        }
        channels {
            id
            code
        }
        product {
            id
            name
            optionGroups {
                id
                name
                code
                translations {
                    id
                    languageCode
                    name
                }
            }
        }
    }
    ${PRODUCT_VARIANT_PRICE_FRAGMENT}
`;
const PRODUCT_VARIANT_DETAIL_QUERY = gql `
    query GetProductVariantDetail($id: ID!) {
        productVariant(id: $id) {
            ...ProductVariantDetailQueryProductVariantFragment
        }
        stockLocations(options: { take: 100 }) {
            items {
                id
                createdAt
                updatedAt
                name
                description
            }
        }
        taxCategories(options: { take: 100 }) {
            items {
                id
                createdAt
                updatedAt
                name
                isDefault
            }
            totalItems
        }
        activeChannel {
            id
            availableCurrencyCodes
            defaultCurrencyCode
        }
    }
    ${PRODUCT_VARIANT_DETAIL_QUERY_PRODUCT_VARIANT_FRAGMENT}
`;
const PRODUCT_VARIANT_UPDATE_MUTATION = gql `
    mutation ProductVariantUpdateMutation($input: [UpdateProductVariantInput!]!) {
        updateProductVariants(input: $input) {
            ...ProductVariantDetailQueryProductVariantFragment
        }
    }
    ${PRODUCT_VARIANT_DETAIL_QUERY_PRODUCT_VARIANT_FRAGMENT}
`;

const PRODUCT_VARIANT_LIST_QUERY_PRODUCT_VARIANT_FRAGMENT = gql `
    fragment ProductVariantListQueryProductVariantFragment on ProductVariant {
        id
        createdAt
        updatedAt
        productId
        enabled
        languageCode
        name
        price
        currencyCode
        priceWithTax
        trackInventory
        outOfStockThreshold
        stockLevels {
            id
            createdAt
            updatedAt
            stockLocationId
            stockOnHand
            stockAllocated
            stockLocation {
                id
                createdAt
                updatedAt
                name
            }
        }
        useGlobalOutOfStockThreshold
        sku
        featuredAsset {
            ...Asset
        }
    }

    ${ASSET_FRAGMENT}
`;
const PRODUCT_VARIANT_LIST_QUERY = gql `
    query ProductVariantListQuery($options: ProductVariantListOptions!) {
        productVariants(options: $options) {
            items {
                ...ProductVariantListQueryProductVariantFragment
            }
            totalItems
        }
    }
    ${PRODUCT_VARIANT_LIST_QUERY_PRODUCT_VARIANT_FRAGMENT}
`;

// This file was generated by the build-public-api.ts script

/**
 * Generated bundle index. Do not edit.
 */

export { ASSET_DETAIL_QUERY, ApplyFacetDialogComponent, AssetDetailComponent, AssetListComponent, AssignProductsToChannelDialogComponent, BulkAddFacetValuesDialogComponent, COLLECTION_DETAIL_QUERY, CatalogModule, CollectionBreadcrumbPipe, CollectionContentsComponent, CollectionDataTableComponent, CollectionDetailComponent, CollectionListComponent, CollectionTreeComponent, CollectionTreeNodeComponent, CollectionTreeService, ConfirmVariantDeletionDialogComponent, CreateFacetValueDialogComponent, CreateProductOptionGroupDialogComponent, CreateProductVariantDialogComponent, FACET_DETAIL_QUERY, FACET_LIST_QUERY, FacetDetailComponent, FacetListComponent, GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS, GET_PRODUCT_DETAIL, GET_VARIANTS_WITH_FACET_VALUES_BY_IDS, GenerateProductVariantsComponent, GeneratedVariant, MoveCollectionsDialogComponent, OPTION_VALUE_INPUT_VALUE_ACCESSOR, OptionValueInputComponent, PRODUCT_LIST_QUERY, PRODUCT_VARIANT_DETAIL_QUERY, PRODUCT_VARIANT_DETAIL_QUERY_PRODUCT_VARIANT_FRAGMENT, PRODUCT_VARIANT_LIST_QUERY, PRODUCT_VARIANT_UPDATE_MUTATION, ProductDetailComponent, ProductDetailService, ProductListComponent, ProductOptionsEditorComponent, ProductVariantDetailComponent, ProductVariantListComponent, ProductVariantQuickJumpComponent, ProductVariantsEditorComponent, ProductVariantsResolver, ProductVariantsTableComponent, UPDATE_PRODUCTS_BULK, UPDATE_VARIANTS_BULK, UpdateProductOptionDialogComponent, VariantPriceDetailComponent, VariantPriceStrategyDetailComponent, arrayToTree, assignCollectionsToChannelBulkAction, assignFacetValuesToProductVariantsBulkAction, assignFacetValuesToProductsBulkAction, assignFacetsToChannelBulkAction, assignProductVariantsToChannelBulkAction, assignProductsToChannelBulkAction, createRoutes, deleteCollectionsBulkAction, deleteFacetsBulkAction, deleteProductVariantsBulkAction, deleteProductsBulkAction, duplicateCollectionsBulkAction, duplicateFacetsBulkAction, duplicateProductsBulkAction, moveCollectionsBulkAction, productOptionsEditorBreadcrumb, removeCollectionsFromChannelBulkAction, removeFacetsFromChannelBulkAction, removeFacetsFromChannelBulkAction2, removeProductVariantsFromChannelBulkAction, removeProductsFromChannelBulkAction, replaceLast };
//# sourceMappingURL=vendure-admin-ui-catalog.mjs.map
