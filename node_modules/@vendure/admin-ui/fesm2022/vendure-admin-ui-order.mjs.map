{"version":3,"file":"vendure-admin-ui-order.mjs","sources":["../../src/lib/order/src/common/get-refundable-payments.ts","../../src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.ts","../../src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.html","../../src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.ts","../../src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.html","../../src/lib/order/src/components/coupon-code-selector/coupon-code-selector.component.ts","../../src/lib/order/src/components/coupon-code-selector/coupon-code-selector.component.html","../../src/lib/order/src/components/select-address-dialog/select-address-dialog.component.ts","../../src/lib/order/src/components/select-address-dialog/select-address-dialog.component.html","../../src/lib/order/src/components/select-customer-dialog/select-customer-dialog.component.ts","../../src/lib/order/src/components/select-customer-dialog/select-customer-dialog.component.html","../../src/lib/order/src/components/select-shipping-method-dialog/select-shipping-method-dialog.component.ts","../../src/lib/order/src/components/select-shipping-method-dialog/select-shipping-method-dialog.component.html","../../src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.ts","../../src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.html","../../src/lib/order/src/providers/order-transition.service.ts","../../src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.ts","../../src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.html","../../src/lib/order/src/components/line-fulfillment/line-fulfillment.component.ts","../../src/lib/order/src/components/line-fulfillment/line-fulfillment.component.html","../../src/lib/order/src/components/line-refunds/line-refunds.component.ts","../../src/lib/order/src/components/line-refunds/line-refunds.component.html","../../src/lib/order/src/components/order-data-table/order-total-column.component.ts","../../src/lib/order/src/components/order-data-table/order-data-table.component.ts","../../src/lib/order/src/components/order-data-table/order-data-table.component.html","../../src/lib/order/src/components/order-table/order-table.component.ts","../../src/lib/order/src/components/order-table/order-table.component.html","../../src/lib/order/src/components/draft-order-variant-selector/draft-order-variant-selector.component.ts","../../src/lib/order/src/components/draft-order-variant-selector/draft-order-variant-selector.component.html","../../src/lib/order/src/components/draft-order-detail/draft-order-detail.component.ts","../../src/lib/order/src/components/draft-order-detail/draft-order-detail.component.html","../../src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.ts","../../src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.html","../../src/lib/order/src/components/simple-item-list/simple-item-list.component.ts","../../src/lib/order/src/components/simple-item-list/simple-item-list.component.html","../../src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.ts","../../src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.html","../../src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.ts","../../src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.html","../../src/lib/order/src/components/fulfillment-card/fulfillment-card.component.ts","../../src/lib/order/src/components/fulfillment-card/fulfillment-card.component.html","../../src/lib/order/src/components/modification-detail/modification-detail.component.ts","../../src/lib/order/src/components/modification-detail/modification-detail.component.html","../../src/lib/order/src/components/order-process-graph/constants.ts","../../src/lib/order/src/components/order-process-graph/order-process-node.component.ts","../../src/lib/order/src/components/order-process-graph/order-process-node.component.html","../../src/lib/order/src/components/order-process-graph/order-process-edge.component.ts","../../src/lib/order/src/components/order-process-graph/order-process-edge.component.html","../../src/lib/order/src/components/order-process-graph/order-process-graph.component.ts","../../src/lib/order/src/components/order-process-graph/order-process-graph.component.html","../../src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.ts","../../src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.html","../../src/lib/order/src/components/payment-for-refund-selector/payment-for-refund-selector.component.ts","../../src/lib/order/src/components/payment-for-refund-selector/payment-for-refund-selector.component.html","../../src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.ts","../../src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.html","../../src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.ts","../../src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.html","../../src/lib/order/src/components/payment-state-label/payment-state-label.component.ts","../../src/lib/order/src/components/payment-state-label/payment-state-label.component.html","../../src/lib/order/src/components/refund-state-label/refund-state-label.component.ts","../../src/lib/order/src/components/refund-state-label/refund-state-label.component.html","../../src/lib/order/src/components/payment-detail/payment-detail.component.ts","../../src/lib/order/src/components/payment-detail/payment-detail.component.html","../../src/lib/order/src/components/order-payment-card/order-payment-card.component.ts","../../src/lib/order/src/components/order-payment-card/order-payment-card.component.html","../../src/lib/order/src/components/order-history/order-history-entry-host.component.ts","../../src/lib/order/src/components/order-history/order-history.component.ts","../../src/lib/order/src/components/order-history/order-history.component.html","../../src/lib/order/src/components/seller-orders-card/seller-orders-card.graphql.ts","../../src/lib/order/src/components/seller-orders-card/seller-orders-card.component.ts","../../src/lib/order/src/components/seller-orders-card/seller-orders-card.component.html","../../src/lib/order/src/components/order-detail/order-detail.component.ts","../../src/lib/order/src/components/order-detail/order-detail.component.html","../../src/lib/order/src/components/order-modification-summary/order-modification-summary.component.ts","../../src/lib/order/src/components/order-modification-summary/order-modification-summary.component.html","../../src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.ts","../../src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.html","../../src/lib/order/src/components/order-editor/order-editor.component.ts","../../src/lib/order/src/components/order-editor/order-editor.component.html","../../src/lib/order/src/components/order-list/order-list.component.ts","../../src/lib/order/src/components/order-list/order-list.component.html","../../src/lib/order/src/components/refund-detail/refund-detail.component.ts","../../src/lib/order/src/components/refund-detail/refund-detail.component.html","../../src/lib/order/src/components/select-address-dialog/select-address-dialog.graphql.ts","../../src/lib/order/src/providers/routing/order.guard.ts","../../src/lib/order/src/order.routes.ts","../../src/lib/order/src/order.module.ts","../../src/lib/order/src/public_api.ts","../../src/lib/order/src/vendure-admin-ui-order.ts"],"sourcesContent":["import { FormControl, Validators } from '@angular/forms';\r\nimport { OrderDetailFragment } from '@vendure/admin-ui/core';\r\nimport { summate } from '@vendure/common/lib/shared-utils';\r\n\r\nexport type Payment = NonNullable<OrderDetailFragment['payments']>[number];\r\nexport type RefundablePayment = Payment & {\r\n    refundableAmount: number;\r\n    amountToRefundControl: FormControl<number>;\r\n    selected: boolean;\r\n};\r\n\r\nexport function getRefundablePayments(payments: OrderDetailFragment['payments']): RefundablePayment[] {\r\n    const settledPayments = (payments || []).filter(p => p.state === 'Settled');\r\n    return settledPayments.map((payment, index) => {\r\n        const refundableAmount =\r\n            payment.amount -\r\n            summate(\r\n                payment.refunds.filter(r => r.state !== 'Failed'),\r\n                'total',\r\n            );\r\n        return {\r\n            ...payment,\r\n            refundableAmount,\r\n            amountToRefundControl: new FormControl(0, {\r\n                nonNullable: true,\r\n                validators: [Validators.min(0), Validators.max(refundableAmount)],\r\n            }),\r\n            selected: index === 0,\r\n        };\r\n    });\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport {\r\n    CurrencyCode,\r\n    DataService,\r\n    Dialog,\r\n    GetAddManualPaymentMethodListDocument,\r\n    GetAddManualPaymentMethodListQuery,\r\n    GetPaymentMethodListQuery,\r\n    ItemOf,\r\n    ManualPaymentInput,\r\n    PAYMENT_METHOD_FRAGMENT,\r\n} from '@vendure/admin-ui/core';\r\nimport { gql } from 'apollo-angular';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst GET_PAYMENT_METHODS_FOR_MANUAL_ADD = gql`\r\n    query GetAddManualPaymentMethodList($options: PaymentMethodListOptions!) {\r\n        paymentMethods(options: $options) {\r\n            items {\r\n                id\r\n                createdAt\r\n                updatedAt\r\n                name\r\n                code\r\n                description\r\n                enabled\r\n            }\r\n            totalItems\r\n        }\r\n    }\r\n`;\r\n\r\n@Component({\r\n    selector: 'vdr-add-manual-payment-dialog',\r\n    templateUrl: './add-manual-payment-dialog.component.html',\r\n    styleUrls: ['./add-manual-payment-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddManualPaymentDialogComponent implements OnInit, Dialog<Omit<ManualPaymentInput, 'orderId'>> {\r\n    // populated by ModalService call\r\n    outstandingAmount: number;\r\n    currencyCode: CurrencyCode;\r\n\r\n    resolveWith: (result?: Omit<ManualPaymentInput, 'orderId'>) => void;\r\n    form = new UntypedFormGroup({\r\n        method: new UntypedFormControl('', Validators.required),\r\n        transactionId: new UntypedFormControl('', Validators.required),\r\n    });\r\n    paymentMethods$: Observable<Array<ItemOf<GetAddManualPaymentMethodListQuery, 'paymentMethods'>>>;\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.paymentMethods$ = this.dataService\r\n            .query(GetAddManualPaymentMethodListDocument, {\r\n                options: {\r\n                    take: 999,\r\n                },\r\n            })\r\n            .mapSingle(data => data.paymentMethods.items);\r\n    }\r\n\r\n    submit() {\r\n        const formValue = this.form.value;\r\n        this.resolveWith({\r\n            method: formValue.method,\r\n            transactionId: formValue.transactionId,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\r\n        <ng-select\r\n            [items]=\"paymentMethods$ | async\"\r\n            bindLabel=\"code\"\r\n            appendTo=\"body\"\r\n            autofocus\r\n            bindValue=\"code\"\r\n            [addTag]=\"true\"\r\n            formControlName=\"method\"\r\n        ></ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\r\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\r\n    </vdr-form-field>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\r\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CancelOrderInput,\r\n    Dialog,\r\n    getAppConfig,\r\n    I18nService,\r\n    OrderDetailFragment,\r\n    OrderLineInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-cancel-order-dialog',\r\n    templateUrl: './cancel-order-dialog.component.html',\r\n    styleUrls: ['./cancel-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CancelOrderDialogComponent implements OnInit, Dialog<CancelOrderInput> {\r\n    order: OrderDetailFragment;\r\n    cancelAll = true;\r\n    resolveWith: (result?: CancelOrderInput) => void;\r\n    reason: string;\r\n    lineQuantities: { [lineId: string]: number } = {};\r\n    reasons: string[] = getAppConfig().cancellationReasons ?? [\r\n        _('order.cancel-reason-customer-request'),\r\n        _('order.cancel-reason-not-available'),\r\n    ];\r\n\r\n    get selectionCount(): number {\r\n        return Object.values(this.lineQuantities).reduce((sum, n) => sum + n, 0);\r\n    }\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce(\r\n            (result, line) => ({ ...result, [line.id]: line.quantity }),\r\n            {},\r\n        );\r\n    }\r\n\r\n    radioChanged() {\r\n        if (this.cancelAll) {\r\n            for (const line of this.order.lines) {\r\n                this.lineQuantities[line.id] = line.quantity;\r\n            }\r\n        } else {\r\n            for (const line of this.order.lines) {\r\n                this.lineQuantities[line.id] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIfAllSelected() {\r\n        for (const [lineId, quantity] of Object.entries(this.lineQuantities)) {\r\n            const quantityInOrder = this.order.lines.find(line => line.id === lineId)?.quantity;\r\n            if (quantityInOrder && quantity < quantityInOrder) {\r\n                return;\r\n            }\r\n        }\r\n        // If we got here, all of the selected quantities are equal to the order\r\n        // line quantities, i.e. everything is selected.\r\n        this.cancelAll = true;\r\n    }\r\n\r\n    select() {\r\n        this.resolveWith({\r\n            orderId: this.order.id,\r\n            lines: this.getLineInputs(),\r\n            reason: this.reason,\r\n            cancelShipping: this.cancelAll,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getLineInputs(): OrderLineInput[] | undefined {\r\n        if (this.order.active) {\r\n            return;\r\n        }\r\n        return Object.entries(this.lineQuantities)\r\n            .map(([orderLineId, quantity]) => ({\r\n                orderLineId,\r\n                quantity,\r\n            }))\r\n            .filter(l => 0 < l.quantity);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-lines\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.is-disabled]=\"cancelAll\"\r\n                [class.is-cancelled]=\"line.quantity === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\r\n                        [(ngModel)]=\"lineQuantities[line.id]\"\r\n                        (input)=\"checkIfAllSelected()\"\r\n                        [disabled]=\"cancelAll\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                    />\r\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"cancellation-details\">\r\n        <ng-container *ngIf=\"order.active !== true\">\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"true\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-entire-order' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"false\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-specified-items' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n        </ng-container>\r\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\r\n        <ng-select\r\n            [items]=\"reasons\"\r\n            bindLabel=\"name\"\r\n            autofocus\r\n            bindValue=\"id\"\r\n            [addTag]=\"true\"\r\n            [(ngModel)]=\"reason\"\r\n        ></ng-select>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        <ng-container *ngIf=\"!order.active\">\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"order.active\">\r\n            {{ 'order.cancel-order' | translate }}\r\n        </ng-container>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport {\r\n    DataService,\r\n    GetCouponCodeSelectorPromotionListDocument,\r\n    PROMOTION_FRAGMENT,\r\n} from '@vendure/admin-ui/core';\r\nimport { gql } from 'apollo-angular';\r\nimport { concat, Observable, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map, skip, startWith, switchMap } from 'rxjs/operators';\r\n\r\nexport const GET_COUPON_CODE_SELECTOR_PROMOTION_LIST = gql`\r\n    query GetCouponCodeSelectorPromotionList($options: PromotionListOptions) {\r\n        promotions(options: $options) {\r\n            items {\r\n                id\r\n                name\r\n                couponCode\r\n            }\r\n            totalItems\r\n        }\r\n    }\r\n`;\r\n\r\n@Component({\r\n    selector: 'vdr-coupon-code-selector',\r\n    templateUrl: './coupon-code-selector.component.html',\r\n    styleUrls: ['./coupon-code-selector.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CouponCodeSelectorComponent implements OnInit {\r\n    @Input() couponCodes: string[];\r\n    @Input() control: UntypedFormControl | undefined;\r\n    @Output() addCouponCode = new EventEmitter<string>();\r\n    @Output() removeCouponCode = new EventEmitter<string>();\r\n    availableCouponCodes$: Observable<Array<{ code: string; promotionName: string }>>;\r\n    couponCodeInput$ = new Subject<string>();\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.availableCouponCodes$ = concat(\r\n            this.couponCodeInput$.pipe(\r\n                debounceTime(200),\r\n                distinctUntilChanged(),\r\n                switchMap(\r\n                    term =>\r\n                        this.dataService.query(GetCouponCodeSelectorPromotionListDocument, {\r\n                            options: {\r\n                                take: 10,\r\n                                skip: 0,\r\n                                filter: {\r\n                                    couponCode: { contains: term },\r\n                                },\r\n                            },\r\n                        }).single$,\r\n                ),\r\n                map(({ promotions }) =>\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    promotions.items.map(p => ({ code: p.couponCode!, promotionName: p.name })),\r\n                ),\r\n                startWith([]),\r\n            ),\r\n        );\r\n        if (!this.control) {\r\n            this.control = new UntypedFormControl(this.couponCodes ?? []);\r\n        }\r\n    }\r\n\r\n    remove(code: string) {\r\n        this.removeCouponCode.emit(code);\r\n    }\r\n}\r\n","<ng-select\r\n    [items]=\"availableCouponCodes$ | async\"\r\n    appendTo=\"body\"\r\n    bindLabel=\"code\"\r\n    bindValue=\"code\"\r\n    [addTag]=\"false\"\r\n    [multiple]=\"true\"\r\n    [hideSelected]=\"true\"\r\n    [minTermLength]=\"2\"\r\n    typeToSearchText=\"\"\r\n    [typeahead]=\"couponCodeInput$\"\r\n    [formControl]=\"control\"\r\n    (add)=\"addCouponCode.emit($event.code)\"\r\n    (remove)=\"remove($event.code)\"\r\n>\r\n    <ng-template ng-option-tmp let-item=\"item\">\r\n        <div class=\"flex items-center\">\r\n            <vdr-chip class=\"mr-1\">{{ item.code }}</vdr-chip>\r\n            <span>{{ item.promotionName }}</span>\r\n        </div>\r\n    </ng-template>\r\n</ng-select>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport {\r\n    AddressFragment,\r\n    CreateAddressInput,\r\n    DataService,\r\n    Dialog,\r\n    GetAvailableCountriesQuery,\r\n    GetCustomerAddressesDocument,\r\n    OrderAddressFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { Customer } from '../select-customer-dialog/select-customer-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-select-address-dialog',\r\n    templateUrl: './select-address-dialog.component.html',\r\n    styleUrls: ['./select-address-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectAddressDialogComponent implements OnInit, Dialog<CreateAddressInput> {\r\n    resolveWith: (result?: CreateAddressInput) => void;\r\n    availableCountries$: Observable<GetAvailableCountriesQuery['countries']['items']>;\r\n    addresses$: Observable<AddressFragment[]>;\r\n    customerId: string | undefined;\r\n    currentAddress: OrderAddressFragment | undefined;\r\n    addressForm: UntypedFormGroup;\r\n    selectedAddress: AddressFragment | undefined;\r\n    useExisting = true;\r\n    createNew = false;\r\n\r\n    constructor(private dataService: DataService, private formBuilder: UntypedFormBuilder) {}\r\n\r\n    ngOnInit(): void {\r\n        this.addressForm = this.formBuilder.group({\r\n            fullName: [this.currentAddress?.fullName ?? ''],\r\n            company: [this.currentAddress?.company ?? ''],\r\n            streetLine1: [this.currentAddress?.streetLine1 ?? '', Validators.required],\r\n            streetLine2: [this.currentAddress?.streetLine2 ?? ''],\r\n            city: [this.currentAddress?.city ?? '', Validators.required],\r\n            province: [this.currentAddress?.province ?? ''],\r\n            postalCode: [this.currentAddress?.postalCode ?? '', Validators.required],\r\n            countryCode: [this.currentAddress?.countryCode ?? '', Validators.required],\r\n            phoneNumber: [this.currentAddress?.phoneNumber ?? ''],\r\n        });\r\n        this.useExisting = !!this.customerId;\r\n        this.addresses$ = this.customerId\r\n            ? this.dataService\r\n                  .query(GetCustomerAddressesDocument, { customerId: this.customerId })\r\n                  .mapSingle(({ customer }) => customer?.addresses ?? [])\r\n                  .pipe(\r\n                      tap(addresses => {\r\n                          if (this.currentAddress) {\r\n                              this.selectedAddress = addresses.find(\r\n                                  a =>\r\n                                      a.streetLine1 === this.currentAddress?.streetLine1 &&\r\n                                      a.postalCode === this.currentAddress?.postalCode,\r\n                              );\r\n                          }\r\n                          if (addresses.length === 0) {\r\n                              this.createNew = true;\r\n                              this.useExisting = false;\r\n                          }\r\n                      }),\r\n                  )\r\n            : of([]);\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(({ countries }) => countries.items);\r\n    }\r\n\r\n    trackByFn(item: Customer) {\r\n        return item.id;\r\n    }\r\n\r\n    addressIdFn(item: AddressFragment) {\r\n        return item.streetLine1 + item.postalCode;\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    select() {\r\n        if (this.useExisting && this.selectedAddress) {\r\n            this.resolveWith({\r\n                ...pick(this.selectedAddress, [\r\n                    'fullName',\r\n                    'company',\r\n                    'streetLine1',\r\n                    'streetLine2',\r\n                    'city',\r\n                    'province',\r\n                    'phoneNumber',\r\n                    'postalCode',\r\n                ]),\r\n                countryCode: this.selectedAddress.country.code,\r\n            });\r\n        }\r\n        if (this.createNew && this.addressForm.valid) {\r\n            const formValue = this.addressForm.value;\r\n            this.resolveWith(formValue);\r\n        }\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.select-address' | translate }}</ng-template>\r\n\r\n<clr-tabs *ngIf=\"addresses$ | async as addresses\">\r\n    <clr-tab *ngIf=\"customerId && addresses.length\">\r\n        <button clrTabLink>{{ 'order.existing-address' | translate }}</button>\r\n        <ng-template [(clrIfActive)]=\"useExisting\">\r\n            <clr-tab-content>\r\n                <vdr-radio-card-fieldset\r\n                    class=\"block mt-4\"\r\n                    [idFn]=\"addressIdFn\"\r\n                    [selectedItemId]=\"selectedAddress && addressIdFn(selectedAddress)\"\r\n                    (selectItem)=\"selectedAddress = $event\"\r\n                >\r\n                    <vdr-radio-card *ngFor=\"let address of addresses\" [item]=\"address\">\r\n                        <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\r\n                    </vdr-radio-card>\r\n                </vdr-radio-card-fieldset>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n    <clr-tab>\r\n        <button clrTabLink>{{ 'customer.create-new-address' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"createNew\">\r\n            <clr-tab-content>\r\n                <vdr-address-form\r\n                    [formGroup]=\"addressForm\"\r\n                    [availableCountries]=\"availableCountries$ | async\"\r\n                ></vdr-address-form>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n</clr-tabs>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"(useExisting && !selectedAddress) || (createNew && addressForm.invalid)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { CreateCustomerInput, DataService, Dialog, GetCustomerListQuery } from '@vendure/admin-ui/core';\r\nimport { concat, Observable, of, Subject } from 'rxjs';\r\nimport { catchError, debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\n\r\nexport type Customer = GetCustomerListQuery['customers']['items'][number];\r\nexport type SelectCustomerDialogResult = (Customer | CreateCustomerInput) & { note: string };\r\n\r\n@Component({\r\n    selector: 'vdr-select-customer-dialog',\r\n    templateUrl: './select-customer-dialog.component.html',\r\n    styleUrls: ['./select-customer-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectCustomerDialogComponent implements OnInit, Dialog<SelectCustomerDialogResult> {\r\n    resolveWith: (result?: SelectCustomerDialogResult) => void;\r\n\r\n    // populated by the dialog service\r\n    canCreateNew = true;\r\n    includeNoteInput = false;\r\n    title: string = _('order.set-customer-for-order');\r\n\r\n    customerForm: UntypedFormGroup;\r\n    customers$: Observable<Customer[]>;\r\n    isLoading = false;\r\n    input$ = new Subject<string>();\r\n    selectedCustomer: Customer[] = [];\r\n    useExisting = true;\r\n    createNew = false;\r\n    note = '';\r\n\r\n    constructor(private dataService: DataService, private formBuilder: UntypedFormBuilder) {\r\n        this.customerForm = this.formBuilder.group({\r\n            title: '',\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            phoneNumber: '',\r\n            emailAddress: ['', [Validators.required, Validators.email]],\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.customers$ = concat(\r\n            of([]), // default items\r\n            this.input$.pipe(\r\n                debounceTime(200),\r\n                distinctUntilChanged(),\r\n                tap(() => (this.isLoading = true)),\r\n                switchMap(term =>\r\n                    this.dataService.customer\r\n                        .getCustomerList(10, 0, term)\r\n                        .mapStream(({ customers }) => customers.items)\r\n                        .pipe(\r\n                            catchError(() => of([])), // empty list on error\r\n                            tap(() => (this.isLoading = false)),\r\n                        ),\r\n                ),\r\n            ),\r\n        );\r\n    }\r\n\r\n    trackByFn(item: Customer) {\r\n        return item.id;\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    select() {\r\n        if (this.useExisting && this.selectedCustomer.length === 1) {\r\n            this.resolveWith({ ...this.selectedCustomer[0], note: this.note });\r\n        } else if (this.createNew && this.customerForm.valid) {\r\n            const formValue = this.customerForm.value;\r\n            this.resolveWith({ ...formValue, note: this.note });\r\n        }\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ title | translate }}</ng-template>\r\n\r\n<ng-container *ngIf=\"!canCreateNew\">\r\n    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n    <vdr-form-field [label]=\"'common.add-note' | translate\" *ngIf=\"includeNoteInput\" class=\"mt-4\">\r\n        <textarea [(ngModel)]=\"note\"></textarea>\r\n    </vdr-form-field>\r\n</ng-container>\r\n\r\n<clr-tabs *ngIf=\"canCreateNew\" class=\"pt-1\">\r\n    <clr-tab>\r\n        <button clrTabLink>{{ 'order.existing-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"useExisting\">\r\n            <clr-tab-content>\r\n                <div class=\"mt-4\">\r\n                    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n                </div>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n    <clr-tab *ngIf=\"canCreateNew\">\r\n        <button clrTabLink>{{ 'customer.create-new-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"createNew\">\r\n            <clr-tab-content>\r\n                <form [formGroup]=\"customerForm\">\r\n                    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\">\r\n                        <input id=\"title\" type=\"text\" formControlName=\"title\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.first-name' | translate\" for=\"firstName\">\r\n                        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.last-name' | translate\" for=\"lastName\">\r\n                        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.email-address' | translate\" for=\"emailAddress\">\r\n                        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.phone-number' | translate\" for=\"phoneNumber\">\r\n                        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\r\n                    </vdr-form-field>\r\n                </form>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n</clr-tabs>\r\n\r\n<ng-template #customerSelect>\r\n    <ng-select\r\n        [items]=\"customers$ | async\"\r\n        appendTo=\"body\"\r\n        bindLabel=\"name\"\r\n        [addTag]=\"false\"\r\n        [multiple]=\"true\"\r\n        [hideSelected]=\"true\"\r\n        [trackByFn]=\"trackByFn\"\r\n        [minTermLength]=\"2\"\r\n        [loading]=\"isLoading\"\r\n        [typeahead]=\"input$\"\r\n        [(ngModel)]=\"selectedCustomer\"\r\n    >\r\n        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n        <ng-template ng-option-tmp let-item=\"item\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n    </ng-select>\r\n</ng-template>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"(useExisting && selectedCustomer.length === 0) || (createNew && customerForm.invalid)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport {\r\n    CreateAddressInput,\r\n    CurrencyCode,\r\n    Dialog,\r\n    DraftOrderEligibleShippingMethodsQuery,\r\n} from '@vendure/admin-ui/core';\r\n\r\ntype ShippingMethodQuote =\r\n    DraftOrderEligibleShippingMethodsQuery['eligibleShippingMethodsForDraftOrder'][number];\r\n\r\n@Component({\r\n    selector: 'vdr-select-shipping-method-dialog',\r\n    templateUrl: './select-shipping-method-dialog.component.html',\r\n    styleUrls: ['./select-shipping-method-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectShippingMethodDialogComponent implements OnInit, Dialog<string> {\r\n    resolveWith: (result?: string) => void;\r\n    eligibleShippingMethods: ShippingMethodQuote[];\r\n    currentSelectionId: string;\r\n    currencyCode: CurrencyCode;\r\n    selectedMethod: ShippingMethodQuote | undefined;\r\n\r\n    ngOnInit(): void {\r\n        if (this.currentSelectionId) {\r\n            this.selectedMethod = this.eligibleShippingMethods.find(m => m.id === this.currentSelectionId);\r\n        }\r\n    }\r\n\r\n    methodIdFn(item: ShippingMethodQuote) {\r\n        return item.id;\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    select() {\r\n        if (this.selectedMethod) {\r\n            this.resolveWith(this.selectedMethod.id);\r\n        }\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.select-shipping-method' | translate }}</ng-template>\r\n<vdr-radio-card-fieldset\r\n    [idFn]=\"methodIdFn\"\r\n    [selectedItemId]=\"selectedMethod?.id\"\r\n    (selectItem)=\"selectedMethod = $event\"\r\n>\r\n    <vdr-radio-card *ngFor=\"let quote of eligibleShippingMethods\" [item]=\"quote\">\r\n        <div class=\"result-details\">\r\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\r\n                {{ quote.name }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\r\n                    {{ quote.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\r\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\r\n        </div>\r\n    </vdr-radio-card>\r\n</vdr-radio-card-fieldset>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!selectedMethod\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-state-select-dialog',\r\n    templateUrl: './order-state-select-dialog.component.html',\r\n    styleUrls: ['./order-state-select-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderStateSelectDialogComponent implements Dialog<string> {\r\n    resolveWith: (result?: string) => void;\r\n    nextStates: string[] = [];\r\n    message = '';\r\n    cancellable: boolean;\r\n    selectedState = '';\r\n\r\n    select() {\r\n        if (this.selectedState) {\r\n            this.resolveWith(this.selectedState);\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\r\n<p>{{ message | translate }}</p>\r\n<vdr-form-field>\r\n    <select name=\"state\" [(ngModel)]=\"selectedState\">\r\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\r\n            {{ state | stateI18nToken | translate }}\r\n        </option>\r\n    </select>\r\n</vdr-form-field>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\r\n        {{ 'common.cancel' | translate }}\r\n    </button>\r\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\r\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\r\n    </button>\r\n</ng-template>\r\n","import { Injectable } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    HistoryEntryType,\n    I18nService,\n    ModalService,\n    NotificationService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { catchError, delay, map, retryWhen, switchMap, take } from 'rxjs/operators';\n\nimport { OrderStateSelectDialogComponent } from '../components/order-state-select-dialog/order-state-select-dialog.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderTransitionService {\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private i18nService: I18nService,\n    ) {}\n\n    /**\n     * Attempts to transition the Order to the last state it was in before it was transitioned\n     * to the \"Modifying\" state. If this fails, a manual prompt is used.\n     */\n    transitionToPreModifyingState(orderId: string, nextStates: string[]) {\n        return this.getPreModifyingState(orderId).pipe(\n            switchMap(state => {\n                const manualTransitionOptions = {\n                    orderId,\n                    nextStates,\n                    message: this.i18nService.translate(\n                        _('order.unable-to-transition-to-state-try-another'),\n                        { state },\n                    ),\n                    cancellable: false,\n                    retry: 10,\n                };\n                if (state) {\n                    return this.transitionToStateOrThrow(orderId, state).pipe(\n                        catchError(err => this.manuallyTransitionToState(manualTransitionOptions)),\n                    );\n                } else {\n                    return this.manuallyTransitionToState(manualTransitionOptions);\n                }\n            }),\n        );\n    }\n\n    /**\n     * Displays a modal for manually selecting the next state.\n     */\n    manuallyTransitionToState(options: {\n        orderId: string;\n        nextStates: string[];\n        message: string;\n        cancellable: boolean;\n        retry: number;\n    }) {\n        return this.modalService\n            .fromComponent(OrderStateSelectDialogComponent, {\n                locals: {\n                    nextStates: options.nextStates,\n                    cancellable: options.cancellable,\n                    message: options.message,\n                },\n                closable: false,\n                size: 'md',\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.transitionToStateOrThrow(options.orderId, result);\n                    } else {\n                        if (!options.cancellable) {\n                            throw new Error(`An order state must be selected`);\n                        } else {\n                            return EMPTY;\n                        }\n                    }\n                }),\n                retryWhen(errors => errors.pipe(delay(2000), take(options.retry))),\n            );\n    }\n\n    /**\n     * Attempts to get the last state the Order was in before it was transitioned\n     * to the \"Modifying\" state.\n     */\n    private getPreModifyingState(orderId: string) {\n        return this.dataService.order\n            .getOrderHistory(orderId, {\n                filter: {\n                    type: {\n                        eq: HistoryEntryType.ORDER_STATE_TRANSITION,\n                    },\n                },\n                sort: {\n                    createdAt: SortOrder.DESC,\n                },\n            })\n            .mapSingle(result => result.order)\n            .pipe(\n                map(result => {\n                    const item = result?.history.items.find(i => i.data.to === 'Modifying');\n                    if (item) {\n                        return item.data.from as string;\n                    } else {\n                        return;\n                    }\n                }),\n            );\n    }\n\n    private transitionToStateOrThrow(orderId: string, state: string) {\n        return this.dataService.order.transitionToState(orderId, state).pipe(\n            map(({ transitionOrderToState }) => {\n                switch (transitionOrderToState?.__typename) {\n                    case 'Order':\n                        return transitionOrderToState?.state;\n                    case 'OrderStateTransitionError':\n                        this.notificationService.error(transitionOrderToState?.transitionError);\n                        throw new Error(transitionOrderToState?.transitionError);\n                }\n            }),\n        );\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { CustomFieldConfig, ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-custom-fields-card',\r\n    templateUrl: './order-custom-fields-card.component.html',\r\n    styleUrls: ['./order-custom-fields-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderCustomFieldsCardComponent implements OnInit {\r\n    @Input() customFieldsConfig: CustomFieldConfig[] = [];\r\n    @Input() customFieldValues: { [name: string]: any } = {};\r\n    @Output() updateClick = new EventEmitter<any>();\r\n    customFieldForm: UntypedFormGroup;\r\n    editable = false;\r\n    constructor(private formBuilder: UntypedFormBuilder, private modalService: ModalService) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldForm = this.formBuilder.group({});\r\n        for (const field of this.customFieldsConfig) {\r\n            this.customFieldForm.addControl(\r\n                field.name,\r\n                this.formBuilder.control(this.customFieldValues[field.name]),\r\n            );\r\n        }\r\n    }\r\n\r\n    onUpdateClick() {\r\n        this.updateClick.emit(this.customFieldForm.value);\r\n        this.customFieldForm.markAsPristine();\r\n        this.editable = false;\r\n    }\r\n\r\n    onCancelClick() {\r\n        if (this.customFieldForm.dirty) {\r\n            this.modalService\r\n                .dialog({\r\n                    title: _('catalog.confirm-cancel'),\r\n                    buttons: [\r\n                        { type: 'secondary', label: _('common.keep-editing') },\r\n                        { type: 'danger', label: _('common.discard-changes'), returnValue: true },\r\n                    ],\r\n                })\r\n                .subscribe(result => {\r\n                    if (result) {\r\n                        this.customFieldForm.reset();\r\n                        this.customFieldForm.markAsPristine();\r\n                        this.editable = false;\r\n                    }\r\n                });\r\n        } else {\r\n            this.editable = false;\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\r\n    <div class=\"card-header\">\r\n        {{ 'common.custom-fields' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Order\"\r\n                [customFields]=\"customFieldsConfig\"\r\n                [customFieldsFormGroup]=\"customFieldForm\"\r\n                [readonly]=\"!editable\"\r\n                [compact]=\"true\"\r\n            ></vdr-tabbed-custom-fields>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\r\n            <clr-icon shape=\"pencil\"></clr-icon>\r\n            {{ 'common.edit' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            (click)=\"onUpdateClick()\"\r\n            *ngIf=\"editable\"\r\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\r\n        >\r\n            <clr-icon shape=\"check\"></clr-icon>\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-secondary\"\r\n            (click)=\"onCancelClick()\"\r\n            *ngIf=\"editable\"\r\n        >\r\n            <clr-icon shape=\"times\"></clr-icon>\r\n            {{ 'common.cancel' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { OrderDetailFragment } from '@vendure/admin-ui/core';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport type FulfillmentStatus = 'full' | 'partial' | 'none';\r\ntype Fulfillment = NonNullable<OrderDetailFragment['fulfillments']>[number];\r\n\r\n@Component({\r\n    selector: 'vdr-line-fulfillment',\r\n    templateUrl: './line-fulfillment.component.html',\r\n    styleUrls: ['./line-fulfillment.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineFulfillmentComponent implements OnChanges {\r\n    @Input() line: OrderDetailFragment['lines'][number];\r\n    @Input() allOrderFulfillments: OrderDetailFragment['fulfillments'];\r\n    @Input() orderState: string;\r\n    fulfilledCount = 0;\r\n    fulfillmentStatus: FulfillmentStatus;\r\n    fulfillments: Array<{\r\n        count: number;\r\n        fulfillment: Fulfillment;\r\n    }> = [];\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.line) {\r\n            this.fulfilledCount = this.getDeliveredCount(this.line);\r\n            this.fulfillmentStatus = this.getFulfillmentStatus(this.fulfilledCount, this.line.quantity);\r\n            this.fulfillments = this.getFulfillments(this.line);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in an OrderLine which are fulfilled.\r\n     */\r\n    private getDeliveredCount(line: OrderDetailFragment['lines'][number]): number {\r\n        return (\r\n            line.fulfillmentLines?.reduce((sum, fulfillmentLine) => sum + fulfillmentLine.quantity, 0) ?? 0\r\n        );\r\n    }\r\n\r\n    private getFulfillmentStatus(fulfilledCount: number, lineQuantity: number): FulfillmentStatus {\r\n        if (fulfilledCount === lineQuantity) {\r\n            return 'full';\r\n        }\r\n        if (0 < fulfilledCount && fulfilledCount < lineQuantity) {\r\n            return 'partial';\r\n        }\r\n        return 'none';\r\n    }\r\n\r\n    private getFulfillments(\r\n        line: OrderDetailFragment['lines'][number],\r\n    ): Array<{ count: number; fulfillment: NonNullable<OrderDetailFragment['fulfillments']>[number] }> {\r\n        return (\r\n            line.fulfillmentLines\r\n                ?.map(fulfillmentLine => {\r\n                    const fulfillment = this.allOrderFulfillments?.find(\r\n                        f => f.id === fulfillmentLine.fulfillmentId,\r\n                    );\r\n                    if (!fulfillment) {\r\n                        return;\r\n                    }\r\n                    return {\r\n                        count: fulfillmentLine.quantity,\r\n                        fulfillment,\r\n                    };\r\n                })\r\n                .filter(notNullOrUndefined) ?? []\r\n        );\r\n    }\r\n}\r\n","<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\r\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'partial'\"\r\n            class=\"item-partially-fulfilled\"\r\n            shape=\"check-circle\"\r\n        ></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'none'\"\r\n            class=\"item-not-fulfilled\"\r\n            shape=\"exclamation-circle\"\r\n        ></clr-icon>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\r\n            {{ 'order.line-fulfillment-all' | translate }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\r\n            {{\r\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\r\n            }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\r\n            {{ 'order.line-fulfillment-none' | translate }}\r\n        </label>\r\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\r\n            <div class=\"fulfillment-title\">\r\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\r\n                    'order.item-count' | translate: { count: item.count }\r\n                }})\r\n            </div>\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n                {{ item.fulfillment.method }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                *ngIf=\"item.fulfillment.trackingCode\"\r\n                [label]=\"'order.tracking-code' | translate\"\r\n            >\r\n                {{ item.fulfillment.trackingCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { OrderDetailFragment, PaymentWithRefundsFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-line-refunds',\r\n    templateUrl: './line-refunds.component.html',\r\n    styleUrls: ['./line-refunds.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineRefundsComponent {\r\n    @Input() line: OrderDetailFragment['lines'][number];\r\n    @Input() payments: PaymentWithRefundsFragment[];\r\n\r\n    getRefundedCount(): number {\r\n        const refundLines =\r\n            this.payments\r\n                ?.reduce(\r\n                    (all, payment) => [...all, ...payment.refunds],\r\n                    [] as PaymentWithRefundsFragment['refunds'],\r\n                )\r\n                .filter(refund => refund.state !== 'Failed')\r\n                .reduce(\r\n                    (all, refund) => [...all, ...refund.lines],\r\n                    [] as Array<{ orderLineId: string; quantity: number }>,\r\n                ) ?? [];\r\n\r\n        return refundLines\r\n            .filter(i => i.orderLineId === this.line.id)\r\n            .reduce((sum, i) => sum + i.quantity, 0);\r\n    }\r\n}\r\n","<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\r\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\r\n</span>\r\n","import { Component } from '@angular/core';\r\nimport { DataTable2ColumnComponent } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-total-column',\r\n    template: ``,\r\n    exportAs: 'row',\r\n})\r\nexport class OrderTotalColumnComponent<T> extends DataTable2ColumnComponent<T> {\r\n    orderable = false;\r\n}\r\n","import { ChangeDetectionStrategy, Component, ContentChildren, Input, QueryList } from '@angular/core';\r\nimport { DataTable2Component, OrderDetailFragment } from '@vendure/admin-ui/core';\r\nimport { OrderTotalColumnComponent } from './order-total-column.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-data-table',\r\n    templateUrl: './order-data-table.component.html',\r\n    styleUrls: [\r\n        '../../../../core/src/shared/components/data-table-2/data-table2.component.scss',\r\n        './order-data-table.component.scss',\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderDataTableComponent extends DataTable2Component<OrderDetailFragment> {\r\n    @ContentChildren(OrderTotalColumnComponent) totalColumns: QueryList<OrderTotalColumnComponent<any>>;\r\n    @Input() order: OrderDetailFragment;\r\n\r\n    get allColumns() {\r\n        return [...(this.columns ?? []), ...(this.customFieldColumns ?? []), ...(this.totalColumns ?? [])];\r\n    }\r\n\r\n    getPromotionLink(promotion: OrderDetailFragment['discounts'][number]): any[] {\r\n        const id = promotion.adjustmentSource.split(':')[1];\r\n        return ['/marketing', 'promotions', id];\r\n    }\r\n\r\n    getCouponCodeForAdjustment(\r\n        order: OrderDetailFragment,\r\n        promotionAdjustment: OrderDetailFragment['discounts'][number],\r\n    ): string | undefined {\r\n        const id = promotionAdjustment.adjustmentSource.split(':')[1];\r\n        const promotion = order.promotions.find(p => p.id === id);\r\n        if (promotion) {\r\n            return promotion.couponCode || undefined;\r\n        }\r\n    }\r\n\r\n    getShippingNames(order: OrderDetailFragment) {\r\n        if (order.shippingLines.length) {\r\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n","<div class=\"bulk-actions\">\r\n    <ng-content select=\"vdr-bulk-action-menu\"></ng-content>\r\n</div>\r\n<div class=\"table-wrapper\">\r\n    <table\r\n        class=\"\"\r\n        [class.no-select]=\"disableSelect\"\r\n    >\r\n        <thead [class.items-selected]=\"selectionManager?.selection.length\">\r\n            <tr class=\"heading-row\">\r\n                <th *ngIf=\"selectionManager\" class=\"selection-col\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrCheckbox\r\n                        [checked]=\"selectionManager?.areAllCurrentItemsSelected()\"\r\n                        (change)=\"onToggleAllClick()\"\r\n                    />\r\n                </th>\r\n                <th\r\n                    *ngFor=\"let column of visibleSortedColumns; last as isLast\"\r\n                    [class.expand]=\"column.expand\"\r\n                >\r\n                    <div class=\"cell-content\" [ngClass]=\"column.align\">\r\n                        <vdr-ui-extension-point\r\n                            [locationId]=\"id\"\r\n                            [metadata]=\"column.id\"\r\n                            api=\"dataTable\"\r\n                            [topPx]=\"-6\"\r\n                            [leftPx]=\"-24\"\r\n                            display=\"block\"\r\n                        >\r\n                            <span>{{ column.heading }}</span>\r\n                        </vdr-ui-extension-point>\r\n                        <div *ngIf=\"column.sort as sort\" class=\"sort-toggle\">\r\n                            <button (click)=\"sort.toggleSortOrder()\" [class.active]=\"sort.sortOrder\">\r\n                                <clr-icon *ngIf=\"!sort.sortOrder\" shape=\"two-way-arrows left\"></clr-icon>\r\n                                <clr-icon *ngIf=\"sort.sortOrder === 'ASC'\" shape=\"arrow up\"></clr-icon>\r\n                                <clr-icon *ngIf=\"sort.sortOrder === 'DESC'\" shape=\"arrow down\"></clr-icon>\r\n                            </button>\r\n                            <div class=\"sort-label\" *ngIf=\"sort.sortOrder\">{{ sort.sortOrder }}</div>\r\n                        </div>\r\n                    </div>\r\n                </th>\r\n                <th>\r\n                    <div class=\"column-picker\">\r\n                        <vdr-data-table-colum-picker\r\n                            [uiLanguage]=\"uiLanguage$ | async\"\r\n                            [columns]=\"sortedColumns\"\r\n                            (reorder)=\"onColumnReorder($event)\"\r\n                            (resetColumns)=\"onColumnsReset()\"\r\n                        ></vdr-data-table-colum-picker>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n            <tr *ngIf=\"searchComponent || customSearchTemplate || filters?.length\">\r\n                <th\r\n                    [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\"\r\n                    class=\"filter-row\"\r\n                    [class.active]=\"showSearchFilterRow\"\r\n                >\r\n                    <button\r\n                        class=\"button-ghost toggle-search-filter-row\"\r\n                        [class.active]=\"showSearchFilterRow\"\r\n                        (click)=\"toggleSearchFilterRow()\"\r\n                        [title]=\"'common.search-and-filter-list' | translate\"\r\n                    >\r\n                        <clr-icon shape=\"search\"></clr-icon>\r\n                    </button>\r\n                    <div class=\"filter-row-wrapper\" [class.hidden]=\"!showSearchFilterRow\">\r\n                        <ng-container *ngTemplateOutlet=\"searchComponent?.template\"></ng-container>\r\n                        <ng-container *ngTemplateOutlet=\"customSearchTemplate\"></ng-container>\r\n                        <ng-container *ngIf=\"filters\">\r\n                            <div class=\"filters\">\r\n                                <vdr-data-table-filters\r\n                                    *ngFor=\"let activeFilter of filters.activeFilters\"\r\n                                    [filterWithValue]=\"activeFilter\"\r\n                                    [filters]=\"filters\"\r\n                                    class=\"mt-1\"\r\n                                ></vdr-data-table-filters>\r\n                                <vdr-data-table-filters\r\n                                    *ngIf=\"filters.length\"\r\n                                    [filters]=\"filters\"\r\n                                    class=\"mt-1\"\r\n                                ></vdr-data-table-filters>\r\n                            </div>\r\n                        </ng-container>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr\r\n                *ngFor=\"\r\n                    let item of items\r\n                        | paginate\r\n                            : {\r\n                                  id: id,\r\n                                  itemsPerPage: itemsPerPage,\r\n                                  currentPage: currentPage,\r\n                                  totalItems: totalItems\r\n                              };\r\n                    index as i;\r\n                    trackBy: trackByFn\r\n                \"\r\n            >\r\n                <td *ngIf=\"selectionManager\" class=\"selection-col\" [class.active]=\"activeIndex === i\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrCheckbox\r\n                        [checked]=\"selectionManager?.isSelected(item)\"\r\n                        (click)=\"onRowClick(item, $event)\"\r\n                    />\r\n                </td>\r\n                <td *ngFor=\"let column of visibleSortedColumns\" [class.active]=\"activeIndex === i\">\r\n                    <div class=\"cell-content\" [ngClass]=\"column.align\">\r\n                        <ng-container\r\n                            *ngIf=\"customComponents.get(column.id) as componentConfig; else defaultComponent\"\r\n                        >\r\n                            <ng-container\r\n                                *ngComponentOutlet=\"\r\n                                    componentConfig.config.component;\r\n                                    inputs: { rowItem: item };\r\n                                    injector: componentConfig.injector\r\n                                \"\r\n                            ></ng-container>\r\n                        </ng-container>\r\n                        <ng-template #defaultComponent>\r\n                            <ng-container\r\n                                *ngTemplateOutlet=\"column.template; context: { item: item, index: i }\"\r\n                            ></ng-container>\r\n                        </ng-template>\r\n                    </div>\r\n                </td>\r\n                <td [class.active]=\"activeIndex === i\"><!-- column select --></td>\r\n            </tr>\r\n            <ng-container>\r\n                <tr *ngIf=\"!items?.length\">\r\n                    <td [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\">\r\n                        <vdr-empty-placeholder [emptyStateLabel]=\"'order.order-is-empty' | translate\"></vdr-empty-placeholder>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n            <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n                <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n                <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                <td class=\"align-middle\" [attr.colspan]=\"visibleSortedColumns.length - 4\"></td>\r\n                <td class=\"align-middle total\">\r\n                    {{ surcharge.priceWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ surcharge.price | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n            <ng-container *ngFor=\"let discount of order.discounts\">\r\n                <tr class=\"order-adjustment\" *ngIf=\"discount.type !== 'OTHER'\">\r\n                    <td [attr.colspan]=\"visibleSortedColumns.length - 1\" class=\"\">\r\n                        <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\r\n                        <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\r\n                            couponCode\r\n                        }}</vdr-chip>\r\n                    </td>\r\n                    <td class=\"\">\r\n                        {{ discount.amountWithTax | localeCurrency : order.currencyCode }}\r\n                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                            {{ discount.amount | localeCurrency : order.currencyCode }}\r\n                        </div>\r\n                    </td>\r\n                    <td><!-- column select --></td>\r\n                </tr>\r\n            </ng-container>\r\n            <tr class=\"sub-total\">\r\n                <td class=\"\">{{ 'order.sub-total' | translate }}</td>\r\n                <td [attr.colspan]=\"visibleSortedColumns.length - 2\"></td>\r\n                <td class=\"clr-align-middle\">\r\n                    {{ order.subTotalWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ order.subTotal | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n            <tr class=\"shipping\">\r\n                <td class=\"\">{{ 'order.shipping' | translate }}</td>\r\n                <td [attr.colspan]=\"visibleSortedColumns.length - 2\">\r\n                    <vdr-chip *ngFor=\"let shippingLine of order.shippingLines\" class=\"shipping-method-name\">\r\n                        {{ shippingLine.shippingMethod.name }}\r\n                    </vdr-chip>\r\n                </td>\r\n                <td class=\"clr-align-middle\">\r\n                    {{ order.shippingWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ order.shipping | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n            <tr class=\"total\">\r\n                <td class=\"\">{{ 'order.total' | translate }}</td>\r\n                <td [attr.colspan]=\"visibleSortedColumns.length - 2\"></td>\r\n                <td class=\"clr-align-middle\">\r\n                    {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ order.total | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\r\nimport { AdjustmentType, CustomFieldConfig, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-table',\r\n    templateUrl: './order-table.component.html',\r\n    styleUrls: ['./order-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderTableComponent implements OnInit {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() orderLineCustomFields: CustomFieldConfig[];\r\n    @Input() isDraft = false;\r\n    @Output() adjust = new EventEmitter<{ lineId: string; quantity: number }>();\r\n    @Output() remove = new EventEmitter<{ lineId: string }>();\r\n    orderLineCustomFieldsVisible = false;\r\n    customFieldsForLine: {\r\n        [lineId: string]: Array<{ config: CustomFieldConfig; formGroup: UntypedFormGroup; value: any }>;\r\n    } = {};\r\n\r\n    get visibleOrderLineCustomFields(): CustomFieldConfig[] {\r\n        return this.orderLineCustomFieldsVisible ? this.orderLineCustomFields : [];\r\n    }\r\n\r\n    get showElided(): boolean {\r\n        return !this.orderLineCustomFieldsVisible && 0 < this.orderLineCustomFields.length;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.orderLineCustomFieldsVisible = this.orderLineCustomFields.length < 2;\r\n        this.getLineCustomFields();\r\n    }\r\n\r\n    draftInputBlur(line: OrderDetailFragment['lines'][number], quantity: number) {\r\n        if (line.quantity !== quantity) {\r\n            this.adjust.emit({ lineId: line.id, quantity });\r\n        }\r\n    }\r\n\r\n    toggleOrderLineCustomFields() {\r\n        this.orderLineCustomFieldsVisible = !this.orderLineCustomFieldsVisible;\r\n    }\r\n\r\n    getLineDiscounts(line: OrderDetailFragment['lines'][number]) {\r\n        return line.discounts.filter(a => a.type === AdjustmentType.PROMOTION);\r\n    }\r\n\r\n    private getLineCustomFields() {\r\n        for (const line of this.order.lines) {\r\n            const formGroup = new UntypedFormGroup({});\r\n            const result = this.orderLineCustomFields\r\n                .map(config => {\r\n                    const value = (line as any).customFields[config.name];\r\n                    formGroup.addControl(config.name, new UntypedFormControl(value));\r\n                    return {\r\n                        config,\r\n                        formGroup,\r\n                        value,\r\n                    };\r\n                })\r\n                .filter(field => this.orderLineCustomFieldsVisible ? true : field.value != null);\r\n            this.customFieldsForLine[line.id] = result;\r\n        }\r\n    }\r\n\r\n    getPromotionLink(promotion: OrderDetailFragment['discounts'][number]): any[] {\r\n        const id = promotion.adjustmentSource.split(':')[1];\r\n        return ['/marketing', 'promotions', id];\r\n    }\r\n\r\n    getCouponCodeForAdjustment(\r\n        order: OrderDetailFragment,\r\n        promotionAdjustment: OrderDetailFragment['discounts'][number],\r\n    ): string | undefined {\r\n        const id = promotionAdjustment.adjustmentSource.split(':')[1];\r\n        const promotion = order.promotions.find(p => p.id === id);\r\n        if (promotion) {\r\n            return promotion.couponCode || undefined;\r\n        }\r\n    }\r\n\r\n    getShippingNames(order: OrderDetailFragment) {\r\n        if (order.shippingLines.length) {\r\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n","<vdr-order-data-table id=\"order-detail-list\" [items]=\"order.lines\" [order]=\"order\">\r\n    <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-line=\"item\">\r\n            {{ line.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n            id=\"created-at\"\r\n            [heading]=\"'common.created-at' | translate\"\r\n            [hiddenByDefault]=\"true\"\r\n    >\r\n        <ng-template let-line=\"item\">\r\n            {{ line.createdAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n            id=\"updated-at\"\r\n            [heading]=\"'common.updated-at' | translate\"\r\n            [hiddenByDefault]=\"true\"\r\n    >\r\n        <ng-template let-line=\"item\">\r\n            {{ line.updatedAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n        <ng-template let-line=\"item\">\r\n            <div class=\"image-placeholder\">\r\n                <img\r\n                    *ngIf=\"line.featuredAsset as asset; else imagePlaceholder\"\r\n                    [src]=\"asset | assetPreview : 'tiny'\"\r\n                />\r\n                <ng-template #imagePlaceholder>\r\n                    <div class=\"placeholder\">\r\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.product-name' | translate\" id=\"product-name\">\r\n        <ng-template let-line=\"item\">\r\n            {{ line.productVariant.name }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.product-sku' | translate\" id=\"product-sku\" [optional]=\"false\">\r\n        <ng-template let-line=\"item\">\r\n            {{ line.productVariant.sku }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.unit-price' | translate\" id=\"unit-price\">\r\n        <ng-template let-line=\"item\">\r\n            <div class=\"unit-price\">\r\n                {{ line.unitPriceWithTax | localeCurrency : order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ line.unitPrice | localeCurrency : order.currencyCode }}\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.quantity' | translate\" id=\"quantity\" [optional]=\"false\">\r\n        <ng-template let-line=\"item\">\r\n            <ng-container *ngIf=\"!isDraft; else draft\">\r\n                <div class=\"flex\">\r\n                    <div\r\n                        *ngIf=\"line.orderPlacedQuantity && line.quantity !== line.orderPlacedQuantity\"\r\n                        class=\"order-placed-quantity\"\r\n                        [title]=\"'order.original-quantity-at-checkout' | translate\"\r\n                    >\r\n                        {{ line.orderPlacedQuantity }}\r\n                    </div>\r\n                    <div>{{ line.quantity }}</div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-template #draft>\r\n                <div class=\"flex\">\r\n                    <input\r\n                        class=\"draft-qty\"\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        #qtyInput\r\n                        [value]=\"line.quantity\"\r\n                        (blur)=\"draftInputBlur(line, qtyInput.valueAsNumber)\"\r\n                    />\r\n                    <button class=\"icon-button\" (click)=\"remove.emit({ lineId: line.id })\">\r\n                        <clr-icon shape=\"trash\"></clr-icon>\r\n                    </button>\r\n                </div>\r\n            </ng-template>\r\n            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n            <vdr-line-fulfillment\r\n                [line]=\"line\"\r\n                [orderState]=\"order.state\"\r\n                [allOrderFulfillments]=\"order.fulfillments\"\r\n            ></vdr-line-fulfillment>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-custom-field-column\r\n        *ngFor=\"let customField of orderLineCustomFields\"\r\n        [customField]=\"customField\"\r\n    />\r\n    <vdr-order-total-column [heading]=\"'order.total' | translate\" id=\"total\" [optional]=\"false\">\r\n        <ng-template let-line=\"item\">\r\n            <div class=\"unit-price\">\r\n                {{ line.linePriceWithTax | localeCurrency : order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ line.linePrice | localeCurrency : order.currencyCode }}\r\n                </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\r\n                <vdr-dropdown *ngIf=\"discounts.length\">\r\n                    <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                        {{ 'order.promotions-applied' | translate }}\r\n                    </div>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                            <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\r\n                                discount.description\r\n                            }}</a>\r\n                            <div class=\"promotion-amount\">\r\n                                {{ discount.amountWithTax | localeCurrency : order.currencyCode }}\r\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                    {{ discount.amount | localeCurrency : order.currencyCode }}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-container>\r\n        </ng-template>\r\n    </vdr-order-total-column>\r\n</vdr-order-data-table>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\r\nimport { CurrencyCode, CustomFieldConfig, DataService, GetProductVariantQuery } from '@vendure/admin-ui/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-draft-order-variant-selector',\r\n    templateUrl: './draft-order-variant-selector.component.html',\r\n    styleUrls: ['./draft-order-variant-selector.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DraftOrderVariantSelectorComponent implements OnInit {\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Input() orderLineCustomFields: CustomFieldConfig[];\r\n    @Output() addItem = new EventEmitter<{ productVariantId: string; quantity: number; customFields: any }>();\r\n    customFieldsFormGroup = new UntypedFormGroup({});\r\n    selectedVariant$: Observable<GetProductVariantQuery['productVariant']>;\r\n    selectedVariantId$ = new Subject<string | undefined>();\r\n    quantity = 1;\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.selectedVariant$ = this.selectedVariantId$.pipe(\r\n            switchMap(id => {\r\n                if (id) {\r\n                    return this.dataService.product\r\n                        .getProductVariant(id)\r\n                        .mapSingle(({ productVariant }) => productVariant);\r\n                } else {\r\n                    return [undefined];\r\n                }\r\n            }),\r\n        );\r\n        for (const customField of this.orderLineCustomFields) {\r\n            this.customFieldsFormGroup.addControl(customField.name, new UntypedFormControl(''));\r\n        }\r\n    }\r\n\r\n    addItemClick(selectedVariant: GetProductVariantQuery['productVariant']) {\r\n        if (selectedVariant) {\r\n            this.addItem.emit({\r\n                productVariantId: selectedVariant.id,\r\n                quantity: this.quantity,\r\n                customFields: this.orderLineCustomFields.length\r\n                    ? this.customFieldsFormGroup.value\r\n                    : undefined,\r\n            });\r\n            this.selectedVariantId$.next(undefined);\r\n            this.customFieldsFormGroup.reset();\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-block\">\r\n        <h4 class=\"card-title\">{{ 'order.add-item-to-order' | translate }}</h4>\r\n        <vdr-product-variant-selector\r\n            (productSelected)=\"selectedVariantId$.next($event.productVariantId)\"\r\n        ></vdr-product-variant-selector>\r\n    </div>\r\n    <div class=\"card-block\" *ngIf=\"selectedVariant$ | async as selectedVariant\">\r\n        <div class=\"variant-details\">\r\n            <img class=\"mr-2\" [src]=\"selectedVariant.featuredAsset || selectedVariant.product.featuredAsset | assetPreview: 32\">\r\n            <div class=\"details\">\r\n                <div>{{ selectedVariant?.name }}</div>\r\n                <div class=\"small\">{{ selectedVariant?.sku }}</div>\r\n            </div>\r\n            <div class=\"details ml-4\">\r\n                <div class=\"small\">\r\n                    {{ 'catalog.stock-on-hand' | translate }}: {{ selectedVariant.stockOnHand }}\r\n                </div>\r\n                <div class=\"small\">\r\n                    {{ 'catalog.stock-allocated' | translate }}: {{ selectedVariant.stockAllocated }}\r\n                </div>\r\n            </div>\r\n            <div class=\"flex-spacer\"></div>\r\n            <div class=\"details\">\r\n                <div>{{ selectedVariant?.priceWithTax | localeCurrency: currencyCode }}</div>\r\n                <div class=\"small\" [title]=\"'order.net-price' | translate\">\r\n                    {{ selectedVariant?.price | localeCurrency: currencyCode }}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <input [disabled]=\"!selectedVariant\" type=\"number\" min=\"0\" [(ngModel)]=\"quantity\" />\r\n            </div>\r\n            <button\r\n                [disabled]=\"!selectedVariant\"\r\n                class=\"btn btn-small btn-primary\"\r\n                (click)=\"addItemClick(selectedVariant)\"\r\n            >\r\n                {{ 'order.add-item-to-order' | translate }}\r\n            </button>\r\n        </div>\r\n        <ng-container *ngIf=\"orderLineCustomFields.length\">\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Order\"\r\n                [customFields]=\"orderLineCustomFields\"\r\n                [customFieldsFormGroup]=\"customFieldsFormGroup\"\r\n            ></vdr-tabbed-custom-fields>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    AddressFragment,\r\n    CreateAddressInput,\r\n    DataService,\r\n    DeletionResult,\r\n    DraftOrderEligibleShippingMethodsQuery,\r\n    GetCustomerAddressesDocument,\r\n    ModalService,\r\n    NotificationService,\r\n    Order,\r\n    OrderDetailFragment,\r\n    OrderDetailQueryDocument,\r\n    TypedBaseDetailComponent,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, forkJoin, Observable, of, Subject } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport { SelectAddressDialogComponent } from '../select-address-dialog/select-address-dialog.component';\r\nimport { SelectCustomerDialogComponent } from '../select-customer-dialog/select-customer-dialog.component';\r\nimport { SelectShippingMethodDialogComponent } from '../select-shipping-method-dialog/select-shipping-method-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-draft-order-detail',\r\n    templateUrl: './draft-order-detail.component.html',\r\n    styleUrls: ['./draft-order-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DraftOrderDetailComponent\r\n    extends TypedBaseDetailComponent<typeof OrderDetailQueryDocument, 'order'>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields = this.getCustomFieldConfig('Order');\r\n    orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n    detailForm = new UntypedFormGroup({});\r\n    eligibleShippingMethods$: Observable<\r\n        DraftOrderEligibleShippingMethodsQuery['eligibleShippingMethodsForDraftOrder']\r\n    >;\r\n    nextStates$: Observable<string[]>;\r\n    fetchHistory = new Subject<void>();\r\n    displayCouponCodeInput = false;\r\n\r\n    constructor(\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.eligibleShippingMethods$ = this.entity$.pipe(\r\n            switchMap(order =>\r\n                this.dataService.order\r\n                    .getDraftOrderEligibleShippingMethods(order.id)\r\n                    .mapSingle(\r\n                        ({ eligibleShippingMethodsForDraftOrder }) => eligibleShippingMethodsForDraftOrder,\r\n                    ),\r\n            ),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    addItemToOrder(event: { productVariantId: string; quantity: number; customFields: any }) {\r\n        this.dataService.order.addItemToDraftOrder(this.id, event).subscribe(result => {\r\n            if (result.addItemToDraftOrder.__typename !== 'Order') {\r\n                this.notificationService.error((result.addItemToDraftOrder as any).message);\r\n            }\r\n        });\r\n    }\r\n\r\n    adjustOrderLine(event: { lineId: string; quantity: number }) {\r\n        this.dataService.order\r\n            .adjustDraftOrderLine(this.id, { orderLineId: event.lineId, quantity: event.quantity })\r\n            .subscribe(result => {\r\n                if (result.adjustDraftOrderLine.__typename !== 'Order') {\r\n                    this.notificationService.error((result.adjustDraftOrderLine as any).message);\r\n                }\r\n            });\r\n    }\r\n\r\n    removeOrderLine(event: { lineId: string }) {\r\n        this.dataService.order.removeDraftOrderLine(this.id, event.lineId).subscribe(result => {\r\n            if (result.removeDraftOrderLine.__typename !== 'Order') {\r\n                this.notificationService.error((result.removeDraftOrderLine as any).message);\r\n            }\r\n        });\r\n    }\r\n\r\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\r\n        if (!orderAddress) {\r\n            return [];\r\n        }\r\n        return Object.values(orderAddress)\r\n            .filter(val => val !== 'OrderAddress')\r\n            .filter(line => !!line);\r\n    }\r\n\r\n    setCustomer() {\r\n        this.modalService.fromComponent(SelectCustomerDialogComponent).subscribe(result => {\r\n            if (this.hasId(result)) {\r\n                this.dataService.order\r\n                    .setCustomerForDraftOrder(this.id, { customerId: result.id })\r\n                    .pipe(\r\n                        switchMap(() => {\r\n                            return this.dataService.query(GetCustomerAddressesDocument, {\r\n                                customerId: result.id,\r\n                            }).single$;\r\n                        }),\r\n                        switchMap(({ customer }) => {\r\n                            const defaultShippingAddress = customer?.addresses?.find(\r\n                                addr => addr.defaultShippingAddress,\r\n                            );\r\n                            const defaultBillingAddress = customer?.addresses?.find(\r\n                                addr => addr.defaultBillingAddress,\r\n                            );\r\n\r\n                            return forkJoin([\r\n                                defaultShippingAddress\r\n                                    ? this.dataService.order.setDraftOrderShippingAddress(\r\n                                          this.id,\r\n                                          this.mapToAddressInput(defaultShippingAddress),\r\n                                      )\r\n                                    : this.dataService.order.unsetDraftOrderShippingAddress(this.id),\r\n                                defaultBillingAddress\r\n                                    ? this.dataService.order.setDraftOrderBillingAddress(\r\n                                          this.id,\r\n                                          this.mapToAddressInput(defaultBillingAddress),\r\n                                      )\r\n                                    : this.dataService.order.unsetDraftOrderBillingAddress(this.id),\r\n                            ]);\r\n                        }),\r\n                    )\r\n                    .subscribe();\r\n            } else if (result) {\r\n                const { note, ...input } = result;\r\n                this.dataService.order.setCustomerForDraftOrder(this.id, { input }).subscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n    private mapToAddressInput(address: AddressFragment): CreateAddressInput {\r\n        return {\r\n            fullName: address.fullName,\r\n            company: address.company,\r\n            streetLine1: address.streetLine1,\r\n            streetLine2: address.streetLine2,\r\n            city: address.city,\r\n            province: address.province,\r\n            postalCode: address.postalCode,\r\n            countryCode: address.country.code,\r\n            phoneNumber: address.phoneNumber,\r\n            defaultShippingAddress: address.defaultShippingAddress,\r\n            defaultBillingAddress: address.defaultBillingAddress,\r\n        };\r\n    }\r\n\r\n    setShippingAddress() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order =>\r\n                    this.modalService.fromComponent(SelectAddressDialogComponent, {\r\n                        locals: {\r\n                            customerId: order.customer?.id,\r\n                            currentAddress: order.shippingAddress ?? undefined,\r\n                        },\r\n                    }),\r\n                ),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.dataService.order.setDraftOrderShippingAddress(this.id, result).subscribe();\r\n                }\r\n            });\r\n    }\r\n\r\n    setBillingAddress() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order =>\r\n                    this.modalService.fromComponent(SelectAddressDialogComponent, {\r\n                        locals: {\r\n                            customerId: order.customer?.id,\r\n                            currentAddress: order.billingAddress ?? undefined,\r\n                        },\r\n                    }),\r\n                ),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.dataService.order.setDraftOrderBillingAddress(this.id, result).subscribe();\r\n                }\r\n            });\r\n    }\r\n\r\n    applyCouponCode(couponCode: string) {\r\n        this.dataService.order.applyCouponCodeToDraftOrder(this.id, couponCode).subscribe();\r\n    }\r\n\r\n    removeCouponCode(couponCode: string) {\r\n        this.dataService.order.removeCouponCodeFromDraftOrder(this.id, couponCode).subscribe();\r\n    }\r\n\r\n    setShippingMethod() {\r\n        combineLatest(this.entity$, this.eligibleShippingMethods$)\r\n            .pipe(\r\n                take(1),\r\n                switchMap(([order, methods]) =>\r\n                    this.modalService.fromComponent(SelectShippingMethodDialogComponent, {\r\n                        locals: {\r\n                            eligibleShippingMethods: methods,\r\n                            currencyCode: order.currencyCode,\r\n                            currentSelectionId: order.shippingLines?.[0]?.shippingMethod.id,\r\n                        },\r\n                    }),\r\n                ),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.dataService.order.setDraftOrderShippingMethod(this.id, result).subscribe();\r\n                }\r\n            });\r\n    }\r\n\r\n    updateCustomFields(customFieldsValue: any) {\r\n        this.dataService.order\r\n            .updateOrderCustomFields({\r\n                id: this.id,\r\n                customFields: customFieldsValue,\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    deleteOrder() {\r\n        this.dataService.order.deleteDraftOrder(this.id).subscribe(({ deleteDraftOrder }) => {\r\n            if (deleteDraftOrder.result === DeletionResult.DELETED) {\r\n                this.notificationService.success(_('common.notify-delete-success'), {\r\n                    entity: 'Order',\r\n                });\r\n                this.router.navigate(['/orders']);\r\n            } else if (deleteDraftOrder.message) {\r\n                this.notificationService.error(deleteDraftOrder.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    completeOrder() {\r\n        this.dataService.order\r\n            .transitionToState(this.id, 'ArrangingPayment')\r\n            .subscribe(({ transitionOrderToState }) => {\r\n                if (transitionOrderToState?.__typename === 'Order') {\r\n                    this.router.navigate(['/orders', this.id]);\r\n                } else if (transitionOrderToState?.__typename === 'OrderStateTransitionError') {\r\n                    this.notificationService.error(transitionOrderToState.transitionError);\r\n                }\r\n            });\r\n    }\r\n\r\n    private hasId<T extends { id: string }>(input: T | any): input is { id: string } {\r\n        return typeof input === 'object' && !!input.id;\r\n    }\r\n\r\n    protected setFormValues(entity: OrderDetailFragment): void {\r\n        // empty\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n        <vdr-ab-left>\r\n            <div class=\"flex clr-align-items-center\">\r\n                <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n            </div>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"draft-order-detail\" />\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"completeOrder()\"\r\n                [disabled]=\"!order.customer || !order.lines.length || !order.shippingLines.length\"\r\n            >\r\n                <clr-icon shape=\"check\"></clr-icon>\r\n                {{ 'order.complete-draft-order' | translate }}\r\n            </button>\r\n            <vdr-action-bar-dropdown-menu [alwaysShow]=\"true\" locationId=\"draft-order-detail\">\r\n                <button type=\"button\" vdrDropdownItem (click)=\"deleteOrder()\">\r\n                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                    {{ 'order.delete-draft-order' | translate }}\r\n                </button>\r\n            </vdr-action-bar-dropdown-menu>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<vdr-page-detail-layout *ngIf=\"entity$ | async as order\">\r\n    <vdr-page-detail-sidebar>\r\n        <vdr-card [title]=\"'order.customer' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <clr-icon *ngIf=\"!order.customer\" shape=\"unknown-status\" class=\"is-warning\"></clr-icon>\r\n                <clr-icon *ngIf=\"order.customer\" shape=\"check\" class=\"is-success\"></clr-icon>\r\n            </ng-template>\r\n            <vdr-customer-label\r\n                class=\"block mb-2\"\r\n                *ngIf=\"order.customer\"\r\n                [customer]=\"order.customer\"\r\n            ></vdr-customer-label>\r\n            <button class=\"button-small\" (click)=\"setCustomer()\">\r\n                {{ 'order.set-customer-for-order' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.billing-address' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <clr-icon\r\n                    *ngIf=\"!order.billingAddress.streetLine1\"\r\n                    shape=\"unknown-status\"\r\n                    class=\"is-warning\"\r\n                ></clr-icon>\r\n                <clr-icon\r\n                    *ngIf=\"order.billingAddress.streetLine1\"\r\n                    shape=\"check\"\r\n                    class=\"is-success\"\r\n                ></clr-icon>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                class=\"block mb-2\"\r\n                *ngIf=\"order.billingAddress\"\r\n                [address]=\"order.billingAddress\"\r\n            ></vdr-formatted-address>\r\n            <button class=\"button-small\" (click)=\"setBillingAddress()\">\r\n                {{ 'order.set-billing-address' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.shipping' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <clr-icon\r\n                    *ngIf=\"!order.shippingAddress.streetLine1 || !order.shippingLines.length\"\r\n                    shape=\"unknown-status\"\r\n                    class=\"is-warning\"\r\n                ></clr-icon>\r\n                <clr-icon\r\n                    *ngIf=\"order.shippingAddress.streetLine1 && order.shippingLines.length\"\r\n                    shape=\"check\"\r\n                    class=\"is-success\"\r\n                ></clr-icon>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                class=\"block mb-2\"\r\n                *ngIf=\"order.shippingAddress\"\r\n                [address]=\"order.shippingAddress\"\r\n            ></vdr-formatted-address>\r\n            <button class=\"button-small mr-2\" (click)=\"setShippingAddress()\">\r\n                {{ 'order.set-shipping-address' | translate }}\r\n            </button>\r\n\r\n            <div *ngFor=\"let shippingLine of order.shippingLines\">\r\n                {{ shippingLine.shippingMethod.name }}\r\n            </div>\r\n            <button class=\"button-small\" (click)=\"setShippingMethod()\">\r\n                {{ 'order.set-shipping-method' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-card>\r\n            <button\r\n                *ngIf=\"order.couponCodes.length === 0 && !displayCouponCodeInput\"\r\n                class=\"button-small\"\r\n                (click)=\"displayCouponCodeInput = !displayCouponCodeInput\"\r\n            >\r\n                {{ 'order.set-coupon-codes' | translate }}\r\n            </button>\r\n            <div *ngIf=\"order.couponCodes.length || displayCouponCodeInput\">\r\n                <label>{{ 'order.set-coupon-codes' | translate }}</label>\r\n                <vdr-coupon-code-selector\r\n                    [couponCodes]=\"order.couponCodes\"\r\n                    (addCouponCode)=\"applyCouponCode($event)\"\r\n                    (removeCouponCode)=\"removeCouponCode($event)\"\r\n                ></vdr-coupon-code-selector>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card>\r\n            <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n        </vdr-card>\r\n    </vdr-page-detail-sidebar>\r\n    <vdr-page-block>\r\n        <vdr-card>\r\n            <vdr-draft-order-variant-selector\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n                [currencyCode]=\"order.currencyCode\"\r\n                (addItem)=\"addItemToOrder($event)\"\r\n            ></vdr-draft-order-variant-selector>\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n                [isDraft]=\"true\"\r\n                (adjust)=\"adjustOrderLine($event)\"\r\n                (remove)=\"removeOrderLine($event)\"\r\n            ></vdr-order-table>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.tax-summary' | translate\">\r\n            <ng-container *ngIf=\"order.taxSummary.length\">\r\n                <table class=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>{{ 'common.description' | translate }}</th>\r\n                            <th>{{ 'order.tax-rate' | translate }}</th>\r\n                            <th>{{ 'order.tax-base' | translate }}</th>\r\n                            <th>{{ 'order.tax-total' | translate }}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let row of order.taxSummary\">\r\n                            <td>{{ row.description }}</td>\r\n                            <td>{{ row.taxRate / 100 | percent }}</td>\r\n                            <td>{{ row.taxBase | localeCurrency : order.currencyCode }}</td>\r\n                            <td>{{ row.taxTotal | localeCurrency : order.currencyCode }}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </ng-container>\r\n        </vdr-card>\r\n        <vdr-custom-detail-component-host\r\n            locationId=\"draft-order-detail\"\r\n            [entity$]=\"entity$\"\r\n            [detailForm]=\"detailForm\"\r\n        ></vdr-custom-detail-component-host>\r\n\r\n        <vdr-order-custom-fields-card\r\n            [customFieldsConfig]=\"customFields\"\r\n            [customFieldValues]=\"order.customFields\"\r\n            (updateClick)=\"updateCustomFields($event)\"\r\n        ></vdr-order-custom-fields-card>\r\n    </vdr-page-block>\r\n</vdr-page-detail-layout>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport {\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    configurableOperationValueIsValid,\r\n    DataService,\r\n    Dialog,\r\n    FulfillOrderInput,\r\n    GlobalFlag,\r\n    OrderDetailFragment,\r\n    toConfigurableOperationInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfill-order-dialog',\r\n    templateUrl: './fulfill-order-dialog.component.html',\r\n    styleUrls: ['./fulfill-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillOrderDialogComponent implements Dialog<FulfillOrderInput>, OnInit {\r\n    resolveWith: (result?: FulfillOrderInput) => void;\r\n    fulfillmentHandlerDef: ConfigurableOperationDefinition;\r\n    fulfillmentHandler: ConfigurableOperation;\r\n    fulfillmentHandlerControl = new UntypedFormControl();\r\n    fulfillmentQuantities: { [lineId: string]: { fulfillCount: number; max: number } } = {};\r\n\r\n    // Provided by modalService.fromComponent() call\r\n    order: OrderDetailFragment;\r\n\r\n    constructor(private dataService: DataService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit(): void {\r\n        this.dataService.settings.getGlobalSettings().single$.subscribe(({ globalSettings }) => {\r\n            this.fulfillmentQuantities = this.order.lines.reduce((result, line) => {\r\n                const fulfillCount = this.getFulfillableCount(line, globalSettings.trackInventory);\r\n                return {\r\n                    ...result,\r\n                    [line.id]: { fulfillCount, max: fulfillCount },\r\n                };\r\n            }, {});\r\n            this.changeDetector.markForCheck();\r\n        });\r\n\r\n        this.dataService.shippingMethod\r\n            .getShippingMethodOperations()\r\n            .mapSingle(data => data.fulfillmentHandlers)\r\n            .subscribe(handlers => {\r\n                this.fulfillmentHandlerDef =\r\n                    handlers.find(\r\n                        h => h.code === this.order.shippingLines[0]?.shippingMethod?.fulfillmentHandlerCode,\r\n                    ) || handlers[0];\r\n                this.fulfillmentHandler = configurableDefinitionToInstance(this.fulfillmentHandlerDef);\r\n                this.fulfillmentHandlerControl.patchValue(this.fulfillmentHandler);\r\n                this.changeDetector.markForCheck();\r\n            });\r\n    }\r\n\r\n    getFulfillableCount(line: OrderDetailFragment['lines'][number], globalTrackInventory: boolean): number {\r\n        const { trackInventory, stockOnHand } = line.productVariant;\r\n        const effectiveTracInventory =\r\n            trackInventory === GlobalFlag.INHERIT ? globalTrackInventory : trackInventory === GlobalFlag.TRUE;\r\n\r\n        const unfulfilledCount = this.getUnfulfilledCount(line);\r\n        return effectiveTracInventory ? Math.min(unfulfilledCount, stockOnHand) : unfulfilledCount;\r\n    }\r\n\r\n    getUnfulfilledCount(line: OrderDetailFragment['lines'][number]): number {\r\n        const fulfilled =\r\n            this.order.fulfillments\r\n                ?.filter(f => f.state !== 'Cancelled')\r\n                .map(f => f.lines)\r\n                .flat()\r\n                .filter(row => row.orderLineId === line.id)\r\n                .reduce((sum, row) => sum + row.quantity, 0) ?? 0;\r\n        return line.quantity - fulfilled;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        const totalCount = Object.values(this.fulfillmentQuantities).reduce(\r\n            (total, { fulfillCount }) => total + fulfillCount,\r\n            0,\r\n        );\r\n        const fulfillmentQuantityIsValid = Object.values(this.fulfillmentQuantities).every(\r\n            ({ fulfillCount, max }) => fulfillCount <= max,\r\n        );\r\n        const formIsValid =\r\n            configurableOperationValueIsValid(\r\n                this.fulfillmentHandlerDef,\r\n                this.fulfillmentHandlerControl.value,\r\n            ) && this.fulfillmentHandlerControl.valid;\r\n        return formIsValid && 0 < totalCount && fulfillmentQuantityIsValid;\r\n    }\r\n\r\n    select() {\r\n        const lines = Object.entries(this.fulfillmentQuantities).map(([orderLineId, { fulfillCount }]) => ({\r\n            orderLineId,\r\n            quantity: fulfillCount,\r\n        }));\r\n        this.resolveWith({\r\n            lines,\r\n            handler: toConfigurableOperationInput(\r\n                this.fulfillmentHandler,\r\n                this.fulfillmentHandlerControl.value,\r\n            ),\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\r\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                    <th>{{ 'order.fulfill' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\r\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\r\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\r\n                        type=\"number\"\r\n                        [max]=\"fulfillmentQuantities[line.id].max\"\r\n                        min=\"0\"\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"shipping-details\">\r\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\r\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\r\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\r\n        <vdr-configurable-input\r\n            [operationDefinition]=\"fulfillmentHandlerDef\"\r\n            [operation]=\"fulfillmentHandler\"\r\n            [formControl]=\"fulfillmentHandlerControl\"\r\n            [removable]=\"false\"\r\n        ></vdr-configurable-input>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        {{ 'order.create-fulfillment' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-simple-item-list',\r\n    templateUrl: './simple-item-list.component.html',\r\n    styleUrls: ['./simple-item-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SimpleItemListComponent {\r\n    @Input() items: Array<{ name: string; quantity?: number }>;\r\n}\r\n","<div class=\"items-list\">\r\n    <ul>\r\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\r\n            <div class=\"quantity\" *ngIf=\"item.quantity != null\">{{ item.quantity }}</div>\r\n            <clr-icon shape=\"times\" size=\"12\" *ngIf=\"item.quantity != null\"></clr-icon>\r\n            {{ item.name }}\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, OrderDetailFragment, ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { isObject } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-detail',\r\n    templateUrl: './fulfillment-detail.component.html',\r\n    styleUrls: ['./fulfillment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentDetailComponent implements OnInit, OnChanges {\r\n    @Input() fulfillmentId: string;\r\n    @Input() order: OrderDetailFragment;\r\n\r\n    customFieldConfig: CustomFieldConfig[] = [];\r\n    customFieldFormGroup = new UntypedFormGroup({});\r\n\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldConfig = this.serverConfigService.getCustomFieldsFor('Fulfillment');\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.buildCustomFieldsFormGroup();\r\n    }\r\n\r\n    get fulfillment(): NonNullable<OrderDetailFragment['fulfillments']>[number] | undefined | null {\r\n        return this.order.fulfillments && this.order.fulfillments.find(f => f.id === this.fulfillmentId);\r\n    }\r\n\r\n    get items(): Array<{ name: string; quantity: number }> {\r\n        return (\r\n            this.fulfillment?.lines.map(row => ({\r\n                name: this.order.lines.find(line => line.id === row.orderLineId)?.productVariant.name ?? '',\r\n                quantity: row.quantity,\r\n            })) ?? []\r\n        );\r\n    }\r\n\r\n    buildCustomFieldsFormGroup() {\r\n        const customFields = (this.fulfillment as any).customFields;\r\n        for (const fieldDef of this.serverConfigService.getCustomFieldsFor('Fulfillment')) {\r\n            this.customFieldFormGroup.addControl(\r\n                fieldDef.name,\r\n                new UntypedFormControl(customFields[fieldDef.name]),\r\n            );\r\n        }\r\n    }\r\n\r\n    customFieldIsObject(customField: unknown) {\r\n        return Array.isArray(customField) || isObject(customField);\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n    {{ fulfillment?.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\r\n    {{ fulfillment?.trackingCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<ng-container *ngFor=\"let customField of customFieldConfig\">\r\n    <vdr-custom-field-control\r\n        *ngIf=\"customFieldFormGroup.get(customField.name)\"\r\n        [readonly]=\"true\"\r\n        [compact]=\"true\"\r\n        [customField]=\"customField\"\r\n        [customFieldsFormGroup]=\"customFieldFormGroup\"\r\n    ></vdr-custom-field-control>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-state-label',\r\n    templateUrl: './fulfillment-state-label.component.html',\r\n    styleUrls: ['./fulfillment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n            case 'Shipped':\r\n                return 'warning';\r\n            case 'Delivered':\r\n                return 'success';\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FulfillmentFragment, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-card',\r\n    templateUrl: './fulfillment-card.component.html',\r\n    styleUrls: ['./fulfillment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentCardComponent {\r\n    @Input() fulfillment: FulfillmentFragment | undefined;\r\n    @Input() order: OrderDetailFragment;\r\n    @Output() transitionState = new EventEmitter<string>();\r\n\r\n    nextSuggestedState(): string | undefined {\r\n        if (!this.fulfillment) {\r\n            return;\r\n        }\r\n        const { nextStates } = this.fulfillment;\r\n        const namedStateOrDefault = (targetState: string) =>\r\n            nextStates.includes(targetState) ? targetState : nextStates[0];\r\n        switch (this.fulfillment?.state) {\r\n            case 'Pending':\r\n                return namedStateOrDefault('Shipped');\r\n            case 'Shipped':\r\n                return namedStateOrDefault('Delivered');\r\n            default:\r\n                return nextStates.find(s => s !== 'Cancelled');\r\n        }\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.fulfillment) {\r\n            return [];\r\n        }\r\n        const suggested = this.nextSuggestedState();\r\n        return this.fulfillment.nextStates.filter(s => s !== suggested);\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header fulfillment-header\">\r\n        <div>{{ 'order.fulfillment' | translate }}</div>\r\n        <div class=\"fulfillment-state\">\r\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-fulfillment-detail\r\n            *ngIf=\"!!fulfillment\"\r\n            [fulfillmentId]=\"fulfillment?.id\"\r\n            [order]=\"order\"\r\n        ></vdr-fulfillment-detail>\r\n    </div>\r\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\r\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\r\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\r\n            </button>\r\n        </ng-container>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionState.emit(nextState)\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-fulfillment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-modification-detail',\r\n    templateUrl: './modification-detail.component.html',\r\n    styleUrls: ['./modification-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ModificationDetailComponent implements OnChanges {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() modification: OrderDetailFragment['modifications'][number];\r\n    private addedItems = new Map<OrderDetailFragment['lines'][number], number>();\r\n    private removedItems = new Map<OrderDetailFragment['lines'][number], number>();\r\n    private modifiedItems = new Set<OrderDetailFragment['lines'][number]>();\r\n\r\n    ngOnChanges(): void {\r\n        const { added, removed, modified } = this.getModifiedLines();\r\n        this.addedItems = added;\r\n        this.removedItems = removed;\r\n        this.modifiedItems = modified;\r\n    }\r\n\r\n    getSurcharge(id: string) {\r\n        return this.order.surcharges.find(m => m.id === id);\r\n    }\r\n\r\n    getAddedItems() {\r\n        return [...this.addedItems.entries()].map(([line, count]) => ({\r\n            name: line.productVariant.name,\r\n            quantity: count,\r\n        }));\r\n    }\r\n\r\n    getRemovedItems() {\r\n        return [...this.removedItems.entries()].map(([line, count]) => ({\r\n            name: line.productVariant.name,\r\n            quantity: count,\r\n        }));\r\n    }\r\n\r\n    getModifiedItems() {\r\n        return [...this.modifiedItems].map(line => ({\r\n            name: line.productVariant.name,\r\n        }));\r\n    }\r\n\r\n    private getModifiedLines() {\r\n        const added = new Map<OrderDetailFragment['lines'][number], number>();\r\n        const removed = new Map<OrderDetailFragment['lines'][number], number>();\r\n        const modified = new Set<OrderDetailFragment['lines'][number]>();\r\n        for (const modificationLine of this.modification.lines || []) {\r\n            const line = this.order.lines.find(l => l.id === modificationLine.orderLineId);\r\n            if (!line) {\r\n                continue;\r\n            }\r\n            if (modificationLine.quantity === 0) {\r\n                modified.add(line);\r\n            } else if (modificationLine.quantity < 0) {\r\n                removed.set(line, -modificationLine.quantity);\r\n            } else {\r\n                added.set(line, modificationLine.quantity);\r\n            }\r\n        }\r\n        return { added, removed, modified };\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\r\n    modification.note\r\n}}</vdr-labeled-data>\r\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\r\n    {{ getSurcharge(surcharge.id)?.description }}\r\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\r\n>\r\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getModifiedItems().length\" [label]=\"'order.modified-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getModifiedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n","export const NODE_HEIGHT = 72;\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-node',\r\n    templateUrl: './order-process-node.component.html',\r\n    styleUrls: ['./order-process-node.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessNodeComponent implements OnChanges {\r\n    @Input() node: StateNode;\r\n    @Input() index: number;\r\n    @Input() active: boolean;\r\n    active$ = new BehaviorSubject<boolean>(false);\r\n    activeTarget$ = new BehaviorSubject<boolean>(false);\r\n    isCancellable = false;\r\n    // We use a class field here to prevent the\r\n    // i18n extractor from extracting a \"Cancelled\" key\r\n    cancelledState = 'Cancelled';\r\n\r\n    constructor(private elementRef: ElementRef<HTMLDivElement>) {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.isCancellable = !!this.node.to.find((s) => s.name === 'Cancelled');\r\n        if (changes.active) {\r\n            this.active$.next(this.active);\r\n        }\r\n    }\r\n\r\n    getPos(origin: 'top' | 'bottom' = 'top'): { x: number; y: number } {\r\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\r\n        const nodeHeight =\r\n            this.elementRef.nativeElement.querySelector('.node')?.getBoundingClientRect().height ?? 0;\r\n        return {\r\n            x: 10,\r\n            y: this.index * NODE_HEIGHT + (origin === 'bottom' ? nodeHeight : 0),\r\n        };\r\n    }\r\n\r\n    getStyle() {\r\n        const pos = this.getPos();\r\n        return {\r\n            'top.px': pos.y,\r\n            'left.px': pos.x,\r\n        };\r\n    }\r\n}\r\n","<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\r\n    <div\r\n        class=\"node\"\r\n        [class.active-target]=\"activeTarget$ | async\"\r\n    >\r\n        {{ node.name | stateI18nToken | translate }}\r\n    </div>\r\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\r\n        <div class=\"cancelled-edge\">\r\n        </div>\r\n        <clr-icon shape=\"dot-circle\"></clr-icon>\r\n        <div class=\"cancelled-node\">\r\n            {{ cancelledState | stateI18nToken | translate }}\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-edge',\r\n    templateUrl: './order-process-edge.component.html',\r\n    styleUrls: ['./order-process-edge.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessEdgeComponent implements OnInit {\r\n    @Input() from: OrderProcessNodeComponent;\r\n    @Input() to: OrderProcessNodeComponent;\r\n    @Input() index: number;\r\n    active$: Observable<boolean>;\r\n\r\n    ngOnInit() {\r\n        this.active$ = this.from.active$\r\n            .asObservable()\r\n            .pipe(tap((active) => this.to.activeTarget$.next(active)));\r\n    }\r\n\r\n    getStyle() {\r\n        const direction = this.from.index < this.to.index ? 'down' : 'up';\r\n        const startPos = this.from.getPos(direction === 'down' ? 'bottom' : 'top');\r\n        const endPos = this.to.getPos(direction === 'down' ? 'top' : 'bottom');\r\n        const dX = Math.abs(startPos.x - endPos.x);\r\n        const dY = Math.abs(startPos.y - endPos.y);\r\n        const length = Math.sqrt(dX ** 2 + dY ** 2);\r\n        return {\r\n            'top.px': startPos.y,\r\n            'left.px': startPos.x + (direction === 'down' ? 10 : 40) + this.index * 12,\r\n            'height.px': length,\r\n            'width.px': 1,\r\n            ...(direction === 'up'\r\n                ? {\r\n                      transform: 'rotateZ(180deg)',\r\n                      'transform-origin': 'top',\r\n                  }\r\n                : {}),\r\n        };\r\n    }\r\n}\r\n","<div\r\n    [attr.data-from]=\"from.node.name\"\r\n    [attr.data-to]=\"to.node.name\"\r\n    [ngStyle]=\"getStyle()\"\r\n    [class.active]=\"active$ | async\"\r\n    class=\"edge\">\r\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\r\n</div>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    HostBinding,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    QueryList,\r\n    SimpleChanges,\r\n    ViewChildren,\r\n} from '@angular/core';\r\nimport { OrderProcessState } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph',\r\n    templateUrl: './order-process-graph.component.html',\r\n    styleUrls: ['./order-process-graph.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphComponent implements OnInit, OnChanges, AfterViewInit {\r\n    @Input() states: OrderProcessState[];\r\n    @Input() initialState?: string;\r\n    setActiveState$ = new BehaviorSubject<string | undefined>(undefined);\r\n    activeState$: Observable<string | undefined>;\r\n    nodes: StateNode[] = [];\r\n    edges: Array<{ from: OrderProcessNodeComponent; to: OrderProcessNodeComponent; index: number }> = [];\r\n\r\n    @ViewChildren(OrderProcessNodeComponent) nodeComponents: QueryList<OrderProcessNodeComponent>;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    @HostBinding('style.height.px')\r\n    get outerHeight(): number {\r\n        return this.nodes.length * NODE_HEIGHT;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setActiveState$.next(this.initialState);\r\n        this.activeState$ = this.setActiveState$.pipe(debounceTime(150));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.populateNodes();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.populateEdges());\r\n    }\r\n\r\n    onMouseOver(stateName: string) {\r\n        this.setActiveState$.next(stateName);\r\n    }\r\n\r\n    onMouseOut() {\r\n        this.setActiveState$.next(this.initialState);\r\n    }\r\n\r\n    getNodeFor(state: string): OrderProcessNodeComponent | undefined {\r\n        if (this.nodeComponents) {\r\n            return this.nodeComponents.find((n) => n.node.name === state);\r\n        }\r\n    }\r\n\r\n    private populateNodes() {\r\n        const stateNodeMap = new Map<string, StateNode>();\r\n        for (const state of this.states) {\r\n            stateNodeMap.set(state.name, {\r\n                name: state.name,\r\n                to: [],\r\n            });\r\n        }\r\n\r\n        for (const [name, stateNode] of stateNodeMap.entries()) {\r\n            const targets = this.states.find((s) => s.name === name)?.to ?? [];\r\n            for (const target of targets) {\r\n                const targetNode = stateNodeMap.get(target);\r\n                if (targetNode) {\r\n                    stateNode.to.push(targetNode);\r\n                }\r\n            }\r\n        }\r\n        this.nodes = [...stateNodeMap.values()].filter((n) => n.name !== 'Cancelled');\r\n    }\r\n\r\n    private populateEdges() {\r\n        for (const node of this.nodes) {\r\n            const nodeCmp = this.getNodeFor(node.name);\r\n            let index = 0;\r\n            for (const to of node.to) {\r\n                const toCmp = this.getNodeFor(to.name);\r\n                if (nodeCmp && toCmp && nodeCmp !== toCmp) {\r\n                    this.edges.push({\r\n                        to: toCmp,\r\n                        from: nodeCmp,\r\n                        index,\r\n                    });\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n        this.edges = [...this.edges];\r\n        this.changeDetector.markForCheck();\r\n    }\r\n}\r\n","<ng-container *ngFor=\"let state of nodes; let i = index\">\r\n    <vdr-order-process-node\r\n        [node]=\"state\"\r\n        [index]=\"i\"\r\n        [active]=\"(activeState$ | async) === state.name\"\r\n        (mouseenter)=\"onMouseOver(state.name)\"\r\n        (mouseleave)=\"onMouseOut()\"\r\n    ></vdr-order-process-node>\r\n</ng-container>\r\n<ng-container *ngFor=\"let edge of edges\">\r\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport {\r\n    CancelOrderInput,\r\n    DataService,\r\n    Dialog,\r\n    OrderProcessState,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph-dialog',\r\n    templateUrl: './order-process-graph-dialog.component.html',\r\n    styleUrls: ['./order-process-graph-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphDialogComponent implements OnInit, Dialog<void> {\r\n    activeState: string;\r\n    states: OrderProcessState[] = [];\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.states = this.serverConfigService.getOrderProcessStates();\r\n    }\r\n\r\n    resolveWith: (result: void | undefined) => void;\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\r\n\r\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { OrderDetailFragment } from '@vendure/admin-ui/core';\r\nimport { RefundablePayment } from '../../common/get-refundable-payments';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-for-refund-selector',\r\n    templateUrl: './payment-for-refund-selector.component.html',\r\n    styleUrls: ['./payment-for-refund-selector.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class PaymentForRefundSelectorComponent {\r\n    @Input() refundablePayments: RefundablePayment[];\r\n    @Input() order: OrderDetailFragment;\r\n    @Output() paymentSelected = new EventEmitter<{ payment: RefundablePayment; selected: boolean }>();\r\n}\r\n","<vdr-card\r\n        [title]=\"'order.payment' | translate\"\r\n        [class.selected]=\"payment.selected\"\r\n        [class.unselected]=\"!payment.selected\"\r\n        *ngFor=\"let payment of refundablePayments\"\r\n>\r\n    <ng-template vdrCardControls>\r\n        <vdr-select-toggle\r\n                size=\"small\"\r\n                [title]=\"'order.refund-this-payment' | translate\"\r\n                [label]=\"'order.refund-this-payment' | translate\"\r\n                [disabled]=\"refundablePayments.length === 1\"\r\n                [(selected)]=\"payment.selected\"\r\n                (selectedChange)=\"paymentSelected.emit({ payment: payment, selected: $event })\"\r\n        ></vdr-select-toggle>\r\n    </ng-template>\r\n    <div class=\"form-grid\">\r\n        <vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n            {{ payment.method }}\r\n        </vdr-labeled-data>\r\n        <vdr-labeled-data [label]=\"'order.transaction-id' | translate\">\r\n            {{ payment.transactionId }}\r\n        </vdr-labeled-data>\r\n        <vdr-labeled-data [label]=\"'order.payment-amount' | translate\">\r\n            {{ payment.amount | localeCurrency : order.currencyCode }}\r\n        </vdr-labeled-data>\r\n        <vdr-labeled-data [label]=\"'order.refundable-amount' | translate\">\r\n            {{ payment.refundableAmount | localeCurrency : order.currencyCode }}\r\n        </vdr-labeled-data>\r\n    </div>\r\n    <vdr-form-field [label]=\"'order.refund-amount' | translate\">\r\n        <vdr-currency-input\r\n                [readonly]=\"!payment.selected\"\r\n                [currencyCode]=\"order.currencyCode\"\r\n                [formControl]=\"payment.amountToRefundControl\"\r\n        ></vdr-currency-input>\r\n    </vdr-form-field>\r\n</vdr-card>","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CancelOrderInput,\r\n    Dialog,\r\n    getAppConfig,\r\n    I18nService,\r\n    OrderDetailFragment,\r\n    OrderLineInput,\r\n    PaymentWithRefundsFragment,\r\n    RefundOrderInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { summate } from '@vendure/common/lib/shared-utils';\r\nimport { getRefundablePayments, RefundablePayment } from '../../common/get-refundable-payments';\r\n\r\ntype SelectionLine = { quantity: number; cancel: boolean };\r\n\r\n@Component({\r\n    selector: 'vdr-refund-order-dialog',\r\n    templateUrl: './refund-order-dialog.component.html',\r\n    styleUrls: ['./refund-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundOrderDialogComponent\r\n    implements OnInit, Dialog<{ cancel: CancelOrderInput; refunds: RefundOrderInput[] }>\r\n{\r\n    order: OrderDetailFragment;\r\n    resolveWith: (result?: { cancel: CancelOrderInput; refunds: RefundOrderInput[] }) => void;\r\n    reason: string;\r\n    lineQuantities: { [lineId: string]: SelectionLine } = {};\r\n    refundablePayments: RefundablePayment[] = [];\r\n    refundShippingLineIds: string[] = [];\r\n    reasons = getAppConfig().cancellationReasons ?? [\r\n        _('order.refund-reason-customer-request'),\r\n        _('order.refund-reason-not-available'),\r\n    ];\r\n    manuallySetRefundTotal = false;\r\n    refundTotal = 0;\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    get totalRefundableAmount(): number {\r\n        return summate(this.refundablePayments, 'refundableAmount');\r\n    }\r\n\r\n    get amountToRefundTotal(): number {\r\n        return this.refundablePayments.reduce(\r\n            (total, payment) => total + payment.amountToRefundControl.value,\r\n            0,\r\n        );\r\n    }\r\n\r\n    lineCanBeRefundedOrCancelled(line: OrderDetailFragment['lines'][number]): boolean {\r\n        const refundedCount =\r\n            this.order.payments\r\n                ?.reduce(\r\n                    (all, payment) => [...all, ...payment.refunds],\r\n                    [] as PaymentWithRefundsFragment['refunds'],\r\n                )\r\n                .filter(refund => refund.state !== 'Failed')\r\n                .reduce(\r\n                    (all, refund) => [...all, ...refund.lines],\r\n                    [] as Array<{ orderLineId: string; quantity: number }>,\r\n                )\r\n                .filter(refundLine => refundLine.orderLineId === line.id)\r\n                .reduce((sum, refundLine) => sum + refundLine.quantity, 0) ?? 0;\r\n\r\n        return refundedCount < line.orderPlacedQuantity;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce(\r\n            (result, line) => ({\r\n                ...result,\r\n                [line.id]: {\r\n                    quantity: 0,\r\n                    refund: true,\r\n                    cancel: false,\r\n                },\r\n            }),\r\n            {},\r\n        );\r\n        this.refundablePayments = getRefundablePayments(this.order.payments);\r\n    }\r\n\r\n    updateRefundTotal() {\r\n        if (!this.manuallySetRefundTotal) {\r\n            const itemTotal = this.order.lines.reduce((total, line) => {\r\n                const lineRef = this.lineQuantities[line.id];\r\n                const refundCount = lineRef.quantity || 0;\r\n                return total + line.proratedUnitPriceWithTax * refundCount;\r\n            }, 0);\r\n            const shippingTotal = this.order.shippingLines.reduce((total, line) => {\r\n                if (this.refundShippingLineIds.includes(line.id)) {\r\n                    return total + line.discountedPriceWithTax;\r\n                } else {\r\n                    return total;\r\n                }\r\n            }, 0);\r\n            this.refundTotal = itemTotal + shippingTotal;\r\n        }\r\n\r\n        // allocate the refund total across the refundable payments\r\n        const refundablePayments = this.refundablePayments.filter(p => p.selected);\r\n        let refundsAllocated = 0;\r\n        for (const payment of refundablePayments) {\r\n            const amountToRefund = Math.min(payment.refundableAmount, this.refundTotal - refundsAllocated);\r\n            payment.amountToRefundControl.setValue(amountToRefund);\r\n            refundsAllocated += amountToRefund;\r\n        }\r\n    }\r\n\r\n    toggleShippingRefund(lineId: string) {\r\n        const index = this.refundShippingLineIds.indexOf(lineId);\r\n        if (index === -1) {\r\n            this.refundShippingLineIds.push(lineId);\r\n        } else {\r\n            this.refundShippingLineIds.splice(index, 1);\r\n        }\r\n        this.updateRefundTotal();\r\n    }\r\n\r\n    onRefundQuantityChange(orderLineId: string, quantity: number) {\r\n        this.manuallySetRefundTotal = false;\r\n        const selectionLine = this.lineQuantities[orderLineId];\r\n        if (selectionLine) {\r\n            const previousQuantity = selectionLine.quantity;\r\n            if (quantity === 0) {\r\n                selectionLine.cancel = false;\r\n            } else if (previousQuantity === 0 && quantity > 0) {\r\n                selectionLine.cancel = true;\r\n            }\r\n            selectionLine.quantity = quantity;\r\n            this.updateRefundTotal();\r\n        }\r\n    }\r\n\r\n    onPaymentSelected(payment: RefundablePayment, selected: boolean) {\r\n        if (selected) {\r\n            const outstandingRefundAmount =\r\n                this.refundTotal -\r\n                this.refundablePayments\r\n                    .filter(p => p.id !== payment.id)\r\n                    .reduce((total, p) => total + p.amountToRefundControl.value, 0);\r\n            if (0 < outstandingRefundAmount) {\r\n                payment.amountToRefundControl.setValue(\r\n                    Math.min(outstandingRefundAmount, payment.refundableAmount),\r\n                );\r\n            }\r\n        } else {\r\n            payment.amountToRefundControl.setValue(0);\r\n        }\r\n    }\r\n\r\n    isRefunding(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce(\r\n            (isRefunding, line) => isRefunding || 0 < line.quantity,\r\n            false,\r\n        );\r\n        return result;\r\n    }\r\n\r\n    isCancelling(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce(\r\n            (isCancelling, line) => isCancelling || (0 < line.quantity && line.cancel),\r\n            false,\r\n        );\r\n        return result;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        return 0 < this.refundTotal && this.amountToRefundTotal === this.refundTotal && !!this.reason;\r\n    }\r\n\r\n    select() {\r\n        const refundLines = this.getOrderLineInput(() => true);\r\n        const cancelLines = this.getOrderLineInput(line => line.cancel);\r\n\r\n        this.resolveWith({\r\n            refunds: this.refundablePayments\r\n                .filter(rp => rp.selected && 0 < rp.amountToRefundControl.value)\r\n                .map(payment => {\r\n                    return {\r\n                        lines: refundLines,\r\n                        reason: this.reason,\r\n                        paymentId: payment.id,\r\n                        amount: payment.amountToRefundControl.value,\r\n                        shipping: 0,\r\n                        adjustment: 0,\r\n                    };\r\n                }),\r\n            cancel: {\r\n                lines: cancelLines,\r\n                orderId: this.order.id,\r\n                reason: this.reason,\r\n                cancelShipping: this.refundShippingLineIds.length > 0,\r\n            },\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getOrderLineInput(filterFn: (line: SelectionLine) => boolean): OrderLineInput[] {\r\n        return Object.entries(this.lineQuantities)\r\n            .filter(([orderLineId, line]) => 0 < line.quantity && filterFn(line))\r\n            .map(([orderLineId, line]) => ({\r\n                orderLineId,\r\n                quantity: line.quantity,\r\n            }));\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"refund-wrapper\">\r\n    <vdr-data-table-2 id=\"refund-order\" [items]=\"order.lines\">\r\n        <!-- Here we define all the available columns -->\r\n        <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.id }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"created-at\" [heading]=\"'common.created-at' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.createdAt | localeDate : 'short' }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"updated-at\" [heading]=\"'common.updated-at' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.updatedAt | localeDate : 'short' }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n            <ng-template let-line=\"item\">\r\n                <div class=\"image-placeholder\">\r\n                    <img\r\n                        *ngIf=\"line.featuredAsset as asset; else imagePlaceholder\"\r\n                        [src]=\"asset | assetPreview : 'tiny'\"\r\n                    />\r\n                    <ng-template #imagePlaceholder>\r\n                        <div class=\"placeholder\">\r\n                            <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                        </div>\r\n                    </ng-template>\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"product-name\" [heading]=\"'order.product-name' | translate\" [optional]=\"false\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.productVariant.name }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"product-sku\" [heading]=\"'order.product-sku' | translate\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.productVariant.sku }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"unit-price\" [heading]=\"'order.unit-price' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.unitPriceWithTax | localeCurrency : order.currencyCode }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"prorated-unit-price\" [heading]=\"'order.prorated-unit-price' | translate\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.proratedUnitPriceWithTax | localeCurrency : order.currencyCode }}\r\n                <ng-container *ngIf=\"line.discounts as discounts\">\r\n                    <vdr-dropdown *ngIf=\"discounts.length\">\r\n                        <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                            <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\r\n                        </div>\r\n                        <vdr-dropdown-menu>\r\n                            <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                {{ discount.description }}\r\n                                <div class=\"promotion-amount\">\r\n                                    {{\r\n                                        discount.amount / 100 / line.quantity\r\n                                            | number : '1.0-2'\r\n                                            | currency : order.currencyCode\r\n                                    }}\r\n                                </div>\r\n                            </div>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </ng-container>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"quantity\" [heading]=\"'order.quantity' | translate\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.quantity }}\r\n                <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"refund-quantity\" [heading]=\"'order.refund' | translate\" [optional]=\"false\">\r\n            <ng-template let-line=\"item\">\r\n                <input\r\n                    *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                    [ngModel]=\"lineQuantities[line.id].quantity\"\r\n                    type=\"number\"\r\n                    [max]=\"line.quantity\"\r\n                    min=\"0\"\r\n                    (ngModelChange)=\"onRefundQuantityChange(line.id, $event)\"\r\n                />\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"cancel\" [heading]=\"'order.return-to-stock' | translate\" [optional]=\"false\">\r\n            <ng-template let-line=\"item\">\r\n                <div class=\"cancel-checkbox-wrapper\">\r\n                    <label class=\"flex center\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\r\n                        />\r\n                        <span class=\"ml-1\">{{ 'order.return-to-stock' | translate }}</span></label\r\n                    >\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n    </vdr-data-table-2>\r\n\r\n    <div class=\"refund-details mt-4\">\r\n        <div>\r\n            <vdr-card>\r\n                <label class=\"flex mb-2\" *ngFor=\"let shippingLine of order.shippingLines\">\r\n                    <input type=\"checkbox\" clrCheckbox (change)=\"toggleShippingRefund(shippingLine.id)\" />\r\n                    <div class=\"ml-1\">\r\n                        {{ 'order.refund-shipping' | translate }}\r\n                        <span>{{ shippingLine.shippingMethod.name }}:</span>\r\n                        <span class=\"ml-1\"\r\n                            >{{ shippingLine.discountedPriceWithTax | localeCurrency : order.currencyCode }}\r\n                        </span>\r\n                    </div></label\r\n                >\r\n                <vdr-form-field [label]=\"'order.refund-cancellation-reason' | translate\" class=\"mb-2\">\r\n                    <ng-select\r\n                        [items]=\"reasons\"\r\n                        bindLabel=\"name\"\r\n                        autofocus\r\n                        [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\r\n                        bindValue=\"id\"\r\n                        [addTag]=\"true\"\r\n                        [(ngModel)]=\"reason\"\r\n                    ></ng-select>\r\n                </vdr-form-field>\r\n                <vdr-form-field\r\n                    [label]=\"'order.refund-total' | translate\"\r\n                    [readOnlyToggle]=\"true\"\r\n                    (readOnlyToggleChange)=\"manuallySetRefundTotal = !$event\"\r\n                >\r\n                    <vdr-currency-input\r\n                        [readonly]=\"!manuallySetRefundTotal\"\r\n                        [currencyCode]=\"order.currencyCode\"\r\n                        [(ngModel)]=\"refundTotal\"\r\n                        (ngModelChange)=\"updateRefundTotal()\"\r\n                    ></vdr-currency-input>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n        </div>\r\n        <div class=\"\">\r\n            <vdr-payment-for-refund-selector\r\n                [refundablePayments]=\"refundablePayments\"\r\n                (paymentSelected)=\"onPaymentSelected($event.payment, $event.selected)\"\r\n                [order]=\"order\"\r\n            ></vdr-payment-for-refund-selector>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <div>\r\n        <div class=\"errors\">\r\n            <clr-alert\r\n                *ngIf=\"refundTotal < 0 || totalRefundableAmount < refundTotal\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{\r\n                        'order.refund-total-error'\r\n                            | translate\r\n                                : {\r\n                                      min: 0 | currency : order.currencyCode,\r\n                                      max: totalRefundableAmount | localeCurrency : order.currencyCode\r\n                                  }\r\n                    }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <clr-alert\r\n                *ngIf=\"amountToRefundTotal < refundTotal || refundTotal < amountToRefundTotal\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <clr-alert\r\n                *ngIf=\"amountToRefundTotal && !reason\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-cancellation-reason-required' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n        </div>\r\n        <div class=\"modal-buttons\">\r\n            <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n            <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n                {{\r\n                    'order.refund-with-amount'\r\n                        | translate : { amount: amountToRefundTotal | localeCurrency : order.currencyCode }\r\n                }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-settle-refund-dialog',\r\n    templateUrl: './settle-refund-dialog.component.html',\r\n    styleUrls: ['./settle-refund-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SettleRefundDialogComponent implements Dialog<string> {\r\n    resolveWith: (result?: string) => void;\r\n    transactionId = '';\r\n    refund: NonNullable<OrderDetailFragment['payments']>[number]['refunds'][number];\r\n\r\n    submit() {\r\n        this.resolveWith(this.transactionId);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\r\n<p class=\"instruction\">\r\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\r\n</p>\r\n<clr-input-container>\r\n    <label>{{ 'order.transaction-id' | translate }}</label>\r\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\r\n</clr-input-container>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\r\n        {{ 'order.settle-refund' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-state-label',\r\n    templateUrl: './payment-state-label.component.html',\r\n    styleUrls: ['./payment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Authorized':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Declined':\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-refund-state-label',\r\n    templateUrl: './refund-state-label.component.html',\r\n    styleUrls: ['./refund-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Failed':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CurrencyCode, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-detail',\r\n    templateUrl: './payment-detail.component.html',\r\n    styleUrls: ['./payment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentDetailComponent {\r\n    @Input() payment: NonNullable<OrderDetailFragment['payments']>[number];\r\n    @Input() currencyCode: CurrencyCode;\r\n}\r\n","<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n    {{ payment.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ payment.amount | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\r\n    {{ payment.errorMessage }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ payment.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CurrencyCode, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\ntype Payment = NonNullable<OrderDetailFragment['payments']>[number];\r\n\r\n@Component({\r\n    selector: 'vdr-order-payment-card',\r\n    templateUrl: './order-payment-card.component.html',\r\n    styleUrls: ['./order-payment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderPaymentCardComponent {\r\n    @Input() payment: Payment;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() settlePayment = new EventEmitter<Payment>();\r\n    @Output() transitionPaymentState = new EventEmitter<{ payment: Payment; state: string }>();\r\n    @Output() settleRefund = new EventEmitter<Payment['refunds'][number]>();\r\n\r\n    refundHasMetadata(refund?: Payment['refunds'][number]): boolean {\r\n        return !!refund && Object.keys(refund.metadata).length > 0;\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.payment) {\r\n            return [];\r\n        }\r\n        return this.payment.nextStates.filter(s => s !== 'Settled' && s !== 'Error');\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header payment-header\">\r\n        <div>\r\n            {{ 'order.payment' | translate }}\r\n            <ng-container *ngIf=\"payment.amount\">{{ payment.amount | localeCurrency : currencyCode }}</ng-container>\r\n        </div>\r\n        <div class=\"payment-state\">\r\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\r\n    </div>\r\n    <ng-container *ngFor=\"let refund of payment.refunds\">\r\n        <div class=\"refund-wrapper card-block\">\r\n            <div class=\"card-header payment-header refund-header\">\r\n                <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\r\n                {{ 'order.refund' | translate }} #{{ refund.id }}\r\n                <div class=\"clr-flex-fill\"></div>\r\n                <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                    {{ refund.createdAt | localeDate : 'medium' }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\r\n                    {{ refund.total | localeCurrency : currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\r\n                    {{ refund.transactionId }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\r\n                    {{ refund.reason }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data\r\n                    [label]=\"'order.refund-metadata' | translate\"\r\n                    *ngIf=\"refundHasMetadata(refund)\"\r\n                >\r\n                    <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\r\n                <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\r\n                    {{ 'order.settle-refund' | translate }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            *ngIf=\"payment.nextStates.includes('Settled')\"\r\n            (click)=\"settlePayment.emit(payment)\"\r\n        >\r\n            {{ 'order.settle-payment' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{\r\n                                'order.transition-to-state'\r\n                                    | translate : { state: (nextState | stateI18nToken | translate) }\r\n                            }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-payment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import {\r\n    Component,\r\n    ComponentRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    Type,\r\n    ViewChild,\r\n    ViewContainerRef,\r\n} from '@angular/core';\r\nimport {\r\n    HistoryEntryComponentService,\r\n    OrderDetailFragment,\r\n    OrderHistoryEntryComponent,\r\n    TimelineHistoryEntry,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-history-entry-host',\r\n    template: `<vdr-timeline-entry\r\n        [displayType]=\"instance.getDisplayType(entry)\"\r\n        [iconShape]=\"instance.getIconShape && instance.getIconShape(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"instance.getName && instance.getName(entry)\"\r\n        [featured]=\"instance.isFeatured(entry)\"\r\n        [collapsed]=\"!expanded && !instance.isFeatured(entry)\"\r\n        (expandClick)=\"expandClick.emit()\"\r\n    >\r\n        <div #portal></div>\r\n    </vdr-timeline-entry>`,\r\n    exportAs: 'historyEntry',\r\n})\r\nexport class OrderHistoryEntryHostComponent implements OnInit, OnDestroy {\r\n    @Input() entry: TimelineHistoryEntry;\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() expanded: boolean;\r\n    @Output() expandClick = new EventEmitter<void>();\r\n    @ViewChild('portal', { static: true, read: ViewContainerRef }) portalRef: ViewContainerRef;\r\n    instance: OrderHistoryEntryComponent;\r\n    private componentRef: ComponentRef<OrderHistoryEntryComponent>;\r\n\r\n    constructor(private historyEntryComponentService: HistoryEntryComponentService) {}\r\n\r\n    ngOnInit(): void {\r\n        const componentType = this.historyEntryComponentService.getComponent(\r\n            this.entry.type,\r\n        ) as Type<OrderHistoryEntryComponent>;\r\n\r\n        const componentRef = this.portalRef.createComponent(componentType);\r\n        componentRef.instance.entry = this.entry;\r\n        componentRef.instance.order = this.order;\r\n        this.instance = componentRef.instance;\r\n        this.componentRef = componentRef;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.componentRef?.destroy();\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport {\r\n    HistoryEntryComponentService,\r\n    HistoryEntryType,\r\n    OrderDetailFragment,\r\n    TimelineDisplayType,\r\n    TimelineHistoryEntry,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-history',\r\n    templateUrl: './order-history.component.html',\r\n    styleUrls: ['./order-history.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderHistoryComponent {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() history: TimelineHistoryEntry[];\r\n    @Output() addNote = new EventEmitter<{ note: string; isPublic: boolean }>();\r\n    @Output() updateNote = new EventEmitter<TimelineHistoryEntry>();\r\n    @Output() deleteNote = new EventEmitter<TimelineHistoryEntry>();\r\n    note = '';\r\n    noteIsPrivate = true;\r\n    expanded = false;\r\n    readonly type = HistoryEntryType;\r\n\r\n    constructor(private historyEntryComponentService: HistoryEntryComponentService) {}\r\n\r\n    hasCustomComponent(type: string): boolean {\r\n        return !!this.historyEntryComponentService.getComponent(type);\r\n    }\r\n\r\n    getDisplayType(entry: TimelineHistoryEntry): TimelineDisplayType {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Declined' || entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_CANCELLATION) {\r\n            return 'warning';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {\r\n            return 'warning';\r\n        }\r\n        return 'default';\r\n    }\r\n\r\n    getTimelineIcon(entry: TimelineHistoryEntry) {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return ['success-standard', 'is-solid'];\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'ban';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Settled') {\r\n                return 'credit-card';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {\r\n            if (entry.data.to === 'Settled') {\r\n                return 'credit-card';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_NOTE) {\r\n            return 'note';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_MODIFIED) {\r\n            return 'pencil';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_CUSTOMER_UPDATED) {\r\n            return 'switch';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Shipped') {\r\n                return 'truck';\r\n            }\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'truck';\r\n            }\r\n        }\r\n    }\r\n\r\n    isFeatured(entry: TimelineHistoryEntry): boolean {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.ORDER_STATE_TRANSITION: {\r\n                return (\r\n                    entry.data.to === 'Delivered' ||\r\n                    entry.data.to === 'Cancelled' ||\r\n                    entry.data.to === 'Settled'\r\n                );\r\n            }\r\n            case HistoryEntryType.ORDER_REFUND_TRANSITION:\r\n                return entry.data.to === 'Settled';\r\n            case HistoryEntryType.ORDER_PAYMENT_TRANSITION:\r\n                return entry.data.to === 'Settled' || entry.data.to === 'Cancelled';\r\n            case HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:\r\n                return entry.data.to === 'Delivered' || entry.data.to === 'Shipped';\r\n            case HistoryEntryType.ORDER_NOTE:\r\n            case HistoryEntryType.ORDER_MODIFIED:\r\n            case HistoryEntryType.ORDER_CUSTOMER_UPDATED:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getFulfillment(\r\n        entry: TimelineHistoryEntry,\r\n    ): NonNullable<OrderDetailFragment['fulfillments']>[number] | undefined {\r\n        if (\r\n            (entry.type === HistoryEntryType.ORDER_FULFILLMENT ||\r\n                entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) &&\r\n            this.order.fulfillments\r\n        ) {\r\n            return this.order.fulfillments.find(f => f.id === entry.data.fulfillmentId);\r\n        }\r\n    }\r\n\r\n    getPayment(\r\n        entry: TimelineHistoryEntry,\r\n    ): NonNullable<OrderDetailFragment['payments']>[number] | undefined {\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION && this.order.payments) {\r\n            return this.order.payments.find(p => p.id === entry.data.paymentId);\r\n        }\r\n    }\r\n\r\n    getRefund(\r\n        entry: TimelineHistoryEntry,\r\n    ): NonNullable<OrderDetailFragment['payments']>[number]['refunds'][number] | undefined {\r\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION && this.order.payments) {\r\n            const allRefunds = this.order.payments.reduce(\r\n                (refunds, payment) => refunds.concat(payment.refunds),\r\n                [] as NonNullable<OrderDetailFragment['payments']>[number]['refunds'],\r\n            );\r\n            return allRefunds.find(r => r.id === entry.data.refundId);\r\n        }\r\n    }\r\n\r\n    getCancelledQuantity(entry: TimelineHistoryEntry): number {\r\n        return entry.data.lines.reduce((total, line) => total + line.quantity, 0);\r\n    }\r\n\r\n    getCancelledItems(\r\n        cancellationLines: Array<{ orderLineId: string; quantity: number }>,\r\n    ): Array<{ name: string; quantity: number }> {\r\n        const itemMap = new Map<string, number>();\r\n        for (const line of this.order.lines) {\r\n            const cancellationLine = cancellationLines.find(l => l.orderLineId === line.id);\r\n            if (cancellationLine) {\r\n                const count = itemMap.get(line.productVariant.name);\r\n                itemMap.set(line.productVariant.name, cancellationLine.quantity);\r\n            }\r\n        }\r\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\r\n    }\r\n\r\n    getModification(id: string) {\r\n        return this.order.modifications.find(m => m.id === id);\r\n    }\r\n\r\n    getName(entry: TimelineHistoryEntry): string {\r\n        const { administrator } = entry;\r\n        if (administrator) {\r\n            return `${administrator.firstName} ${administrator.lastName}`;\r\n        } else {\r\n            const customer = this.order.customer;\r\n            if (customer) {\r\n                return `${customer.firstName} ${customer.lastName}`;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    addNoteToOrder() {\r\n        this.addNote.emit({ note: this.note, isPublic: !this.noteIsPrivate });\r\n        this.note = '';\r\n        this.noteIsPrivate = true;\r\n    }\r\n}\r\n","<div class=\"entry-list\" [class.expanded]=\"expanded\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\" [isFirst]=\"true\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\r\n                {{ 'common.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n        <div class=\"visibility-select\">\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\r\n                <label>{{ 'order.note-is-private' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\r\n                {{ 'order.note-only-visible-to-administrators' | translate }}\r\n            </span>\r\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\r\n                {{ 'order.note-visible-to-customer' | translate }}\r\n            </span>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <ng-container *ngFor=\"let entry of history\">\r\n        <vdr-order-history-entry-host\r\n            *ngIf=\"hasCustomComponent(entry.type); else defaultComponents\"\r\n            [order]=\"order\"\r\n            [entry]=\"entry\"\r\n            [expanded]=\"expanded\"\r\n            (expandClick)=\"expanded = !expanded\"\r\n        ></vdr-order-history-entry-host>\r\n        <ng-template #defaultComponents>\r\n            <vdr-timeline-entry\r\n                [displayType]=\"getDisplayType(entry)\"\r\n                [iconShape]=\"getTimelineIcon(entry)\"\r\n                [createdAt]=\"entry.createdAt\"\r\n                [name]=\"getName(entry)\"\r\n                [featured]=\"isFeatured(entry)\"\r\n                [collapsed]=\"!expanded && !isFeatured(entry)\"\r\n                (expandClick)=\"expanded = !expanded\"\r\n            >\r\n                <ng-container [ngSwitch]=\"entry.type\">\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\r\n                        <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\r\n                            {{ 'order.history-order-fulfilled' | translate }}\r\n                        </div>\r\n                        <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\r\n                            {{ 'order.history-order-cancelled' | translate }}\r\n                        </div>\r\n                        <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\r\n                            {{\r\n                                'order.history-order-transition'\r\n                                    | translate : { from: entry.data.from, to: entry.data.to }\r\n                            }}\r\n                        </ng-template>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\r\n                        <div class=\"title\">\r\n                            {{ 'order.history-order-modified' | translate }}\r\n                        </div>\r\n                        <div\r\n                            class=\"flex items-center\"\r\n                            *ngIf=\"getModification(entry.data.modificationId) as modification\"\r\n                        >\r\n                            {{ 'order.modify-order-price-difference' | translate }}:\r\n                            <strong>{{\r\n                                modification.priceChange | localeCurrency : order.currencyCode\r\n                            }}</strong>\r\n                            <vdr-chip colorType=\"success\" class=\"mx-1\" *ngIf=\"modification.isSettled\">{{\r\n                                'order.modification-settled' | translate\r\n                            }}</vdr-chip>\r\n                            <vdr-chip colorType=\"error\" class=\"mx-1\" *ngIf=\"!modification.isSettled\">{{\r\n                                'order.modification-not-settled' | translate\r\n                            }}</vdr-chip>\r\n                            <vdr-history-entry-detail>\r\n                                <vdr-modification-detail\r\n                                    [order]=\"order\"\r\n                                    [modification]=\"modification\"\r\n                                ></vdr-modification-detail>\r\n                            </vdr-history-entry-detail>\r\n                        </div>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\r\n                        <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\r\n                            <div class=\"title\">\r\n                                {{ 'order.history-payment-settled' | translate }}\r\n                            </div>\r\n                            <div class=\"flex items-center\">\r\n                                <vdr-chip *ngIf=\"getPayment(entry) as payment\" class=\"mr-1\">{{\r\n                                    payment.amount | localeCurrency : order.currencyCode\r\n                                }}</vdr-chip>\r\n                                <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\r\n                                    <vdr-payment-detail\r\n                                        [payment]=\"payment\"\r\n                                        [currencyCode]=\"order.currencyCode\"\r\n                                    ></vdr-payment-detail>\r\n                                </vdr-history-entry-detail>\r\n                            </div>\r\n                        </ng-container>\r\n                        <ng-template #regularPaymentTransition>\r\n                            {{\r\n                                'order.history-payment-transition'\r\n                                    | translate\r\n                                        : {\r\n                                              from: entry.data.from,\r\n                                              to: entry.data.to,\r\n                                              id: getPayment(entry)?.transactionId\r\n                                          }\r\n                            }}\r\n                        </ng-template>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\r\n                        <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularRefundTransition\">\r\n                            <ng-container *ngIf=\"getRefund(entry) as refund\">\r\n                                <div class=\"title\">{{ 'order.refund' | translate }} #{{ refund.id }}</div>\r\n                                <div class=\"flex items-center\">\r\n                                    <vdr-chip colorType=\"warning\" class=\"mr-1\">{{\r\n                                        refund.total | localeCurrency : order.currencyCode\r\n                                    }}</vdr-chip>\r\n                                    <vdr-history-entry-detail>\r\n                                        <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                                            {{ entry.data.reason }}\r\n                                        </vdr-labeled-data>\r\n                                        <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                                            <vdr-simple-item-list\r\n                                                [items]=\"getCancelledItems(refund.lines)\"\r\n                                            ></vdr-simple-item-list>\r\n                                        </vdr-labeled-data>\r\n                                    </vdr-history-entry-detail>\r\n                                </div>\r\n                            </ng-container>\r\n                        </ng-container>\r\n                        <ng-template #regularRefundTransition>\r\n                            {{\r\n                                'order.history-refund-transition'\r\n                                    | translate\r\n                                        : {\r\n                                              from: entry.data.from,\r\n                                              to: entry.data.to,\r\n                                              id: entry.data.refundId\r\n                                          }\r\n                            }}\r\n                        </ng-template>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\r\n                        {{\r\n                            'order.history-items-cancelled'\r\n                                | translate : { count: getCancelledQuantity(entry) }\r\n                        }}\r\n                        <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry.data.lines) as items\">\r\n                            <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                                {{ entry.data.reason }}\r\n                            </vdr-labeled-data>\r\n                            <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                                <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n                            </vdr-labeled-data>\r\n                            <vdr-labeled-data [label]=\"'order.shipping-cancelled' | translate\">\r\n                                {{ entry.data.shippingCancelled }}\r\n                            </vdr-labeled-data>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\r\n                        {{ 'order.history-fulfillment-created' | translate }}\r\n                        <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                            <vdr-fulfillment-detail\r\n                                [fulfillmentId]=\"fulfillment.id\"\r\n                                [order]=\"order\"\r\n                            ></vdr-fulfillment-detail>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\r\n                        <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\r\n                            <div class=\"title\">\r\n                                {{ 'order.history-fulfillment-delivered' | translate }}\r\n                            </div>\r\n                            {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\r\n                            <div class=\"title\">\r\n                                {{ 'order.history-fulfillment-shipped' | translate }}\r\n                            </div>\r\n                            {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\r\n                            {{\r\n                                'order.history-fulfillment-transition'\r\n                                    | translate : { from: entry.data.from, to: entry.data.to }\r\n                            }}\r\n                        </ng-container>\r\n                        <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                            <vdr-fulfillment-detail\r\n                                [fulfillmentId]=\"fulfillment.id\"\r\n                                [order]=\"order\"\r\n                            ></vdr-fulfillment-detail>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\r\n                        <div class=\"flex\">\r\n                            <div class=\"note-text\">\r\n                                <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\r\n                                    'common.public' | translate\r\n                                }}</span>\r\n                                <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\r\n                                    'common.private' | translate\r\n                                }}</span>\r\n                                {{ entry.data.note }}\r\n                            </div>\r\n                            <div class=\"flex-spacer\"></div>\r\n                            <vdr-dropdown>\r\n                                <button class=\"button-small ml-1\" vdrDropdownTrigger>\r\n                                    <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\r\n                                </button>\r\n                                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                    <button\r\n                                        vdrDropdownItem\r\n                                        (click)=\"updateNote.emit(entry)\"\r\n                                        [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                                    >\r\n                                        <clr-icon shape=\"edit\"></clr-icon>\r\n                                        {{ 'common.edit' | translate }}\r\n                                    </button>\r\n                                    <div class=\"dropdown-divider\"></div>\r\n                                    <button\r\n                                        vdrDropdownItem\r\n                                        (click)=\"deleteNote.emit(entry)\"\r\n                                        [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                                    >\r\n                                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                        {{ 'common.delete' | translate }}\r\n                                    </button>\r\n                                </vdr-dropdown-menu>\r\n                            </vdr-dropdown>\r\n                        </div>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\r\n                        {{ 'order.history-coupon-code-applied' | translate }}:\r\n                        <vdr-chip>\r\n                            <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\r\n                                entry.data.couponCode\r\n                            }}</a>\r\n                        </vdr-chip>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\r\n                        {{ 'order.history-coupon-code-removed' | translate }}:\r\n                        <vdr-chip\r\n                            ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\r\n                        >\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_CUSTOMER_UPDATED\">\r\n                        <div class=\"title\">\r\n                            {{\r\n                                'order.history-customer-updated'\r\n                                    | translate : { newCustomerName: entry.data.newCustomerName }\r\n                            }}\r\n                        </div>\r\n                        <div class=\"flex\">\r\n                            <div class=\"note-text\">\r\n                                {{ entry.data.note }}\r\n                            </div>\r\n                            <div class=\"flex-spacer\"></div>\r\n                            <vdr-history-entry-detail>\r\n                                <vdr-labeled-data [label]=\"'order.previous-customer' | translate\">\r\n                                    <a\r\n                                        *ngIf=\"entry.data.previousCustomerId\"\r\n                                        class=\"button-ghost\"\r\n                                        [routerLink]=\"[\r\n                                            '/customer',\r\n                                            'customers',\r\n                                            entry.data.previousCustomerId\r\n                                        ]\"\r\n                                    >\r\n                                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon>\r\n                                        <span>{{ entry.data.previousCustomerName }}</span>\r\n                                        <clr-icon shape=\"arrow right\"></clr-icon>\r\n                                    </a>\r\n                                </vdr-labeled-data>\r\n                                <vdr-labeled-data [label]=\"'order.new-customer' | translate\">\r\n                                    <a\r\n                                        *ngIf=\"entry.data.newCustomerId\"\r\n                                        class=\"button-ghost\"\r\n                                        [routerLink]=\"['/customer', 'customers', entry.data.newCustomerId]\"\r\n                                    >\r\n                                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon>\r\n                                        <span>{{ entry.data.newCustomerName }}</span>\r\n                                        <clr-icon shape=\"arrow right\"></clr-icon>\r\n                                    </a>\r\n                                </vdr-labeled-data>\r\n                            </vdr-history-entry-detail>\r\n                        </div>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchDefault>\r\n                        <div class=\"title\">\r\n                            {{ entry.type | translate }}\r\n                        </div>\r\n                        <vdr-history-entry-detail *ngIf=\"entry.data\">\r\n                            <vdr-object-tree [value]=\"entry.data\"></vdr-object-tree>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </vdr-timeline-entry>\r\n        </ng-template>\r\n    </ng-container>\r\n\r\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\r\n        <div class=\"title\">\r\n            {{ 'order.history-order-created' | translate }}\r\n        </div>\r\n    </vdr-timeline-entry>\r\n</div>\r\n","import { gql } from 'apollo-angular';\r\n\r\nexport const GET_SELLER_ORDERS = gql`\r\n    query GetSellerOrders($orderId: ID!) {\r\n        order(id: $orderId) {\r\n            id\r\n            sellerOrders {\r\n                id\r\n                code\r\n                state\r\n                orderPlacedAt\r\n                currencyCode\r\n                totalWithTax\r\n                channels {\r\n                    id\r\n                    code\r\n                    seller {\r\n                        id\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n    ChannelService,\r\n    DataService,\r\n    GetSellerOrdersQuery,\r\n    GetSellerOrdersQueryVariables,\r\n} from '@vendure/admin-ui/core';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { GET_SELLER_ORDERS } from './seller-orders-card.graphql';\r\n\r\ntype SellerOrder = NonNullable<NonNullable<GetSellerOrdersQuery['order']>['sellerOrders']>[number];\r\n\r\n@Component({\r\n    selector: 'vdr-seller-orders-card',\r\n    templateUrl: './seller-orders-card.component.html',\r\n    styleUrls: ['./seller-orders-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SellerOrdersCardComponent implements OnInit {\r\n    @Input() orderId: string;\r\n\r\n    sellerOrders$: Observable<SellerOrder[]>;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private dataService: DataService,\r\n        private channelService: ChannelService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.sellerOrders$ = this.dataService\r\n            .query<GetSellerOrdersQuery, GetSellerOrdersQueryVariables>(GET_SELLER_ORDERS, {\r\n                orderId: this.orderId,\r\n            })\r\n            .mapSingle(({ order }) => order?.sellerOrders ?? []);\r\n    }\r\n\r\n    getSeller(order: SellerOrder) {\r\n        const sellerChannel = order.channels.find(channel => channel.code !== DEFAULT_CHANNEL_CODE);\r\n        return sellerChannel?.seller;\r\n    }\r\n\r\n    navigateToSellerOrder(order: SellerOrder) {\r\n        this.router.navigate(['/orders', order.id]);\r\n    }\r\n}\r\n","<vdr-card [title]=\"'order.seller-orders' | translate\">\r\n    <div class=\"form-grid\">\r\n        <div *ngFor=\"let order of sellerOrders$ | async\">\r\n            <a [routerLink]=\"['seller-orders', order.id]\" class=\"button-ghost mb-1\"\r\n                >{{ order.code }} <clr-icon shape=\"arrow right\"></clr-icon\r\n            ></a>\r\n            <vdr-labeled-data [label]=\"'order.state' | translate\">\r\n                <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'common.seller' | translate\">\r\n                {{ seller.name }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'order.total' | translate\">\r\n                {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </div>\r\n</vdr-card>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    EditNoteDialogComponent,\r\n    FulfillmentFragment,\r\n    getCustomFieldsDefaults,\r\n    GetOrderHistoryQuery,\r\n    GetOrderQuery,\r\n    ModalService,\r\n    NotificationService,\r\n    ORDER_DETAIL_FRAGMENT,\r\n    OrderDetailFragment,\r\n    OrderDetailQueryDocument,\r\n    Refund,\r\n    SetOrderCustomerDocument,\r\n    SortOrder,\r\n    TimelineHistoryEntry,\r\n    TypedBaseDetailComponent,\r\n} from '@vendure/admin-ui/core';\r\nimport { assertNever, summate } from '@vendure/common/lib/shared-utils';\r\nimport { gql } from 'apollo-angular';\r\nimport { EMPTY, forkJoin, Observable, of, Subject } from 'rxjs';\r\nimport { map, mapTo, startWith, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport { AddManualPaymentDialogComponent } from '../add-manual-payment-dialog/add-manual-payment-dialog.component';\r\nimport { CancelOrderDialogComponent } from '../cancel-order-dialog/cancel-order-dialog.component';\r\nimport { FulfillOrderDialogComponent } from '../fulfill-order-dialog/fulfill-order-dialog.component';\r\nimport { OrderProcessGraphDialogComponent } from '../order-process-graph-dialog/order-process-graph-dialog.component';\r\nimport { RefundOrderDialogComponent } from '../refund-order-dialog/refund-order-dialog.component';\r\nimport { SelectCustomerDialogComponent } from '../select-customer-dialog/select-customer-dialog.component';\r\nimport { SettleRefundDialogComponent } from '../settle-refund-dialog/settle-refund-dialog.component';\r\n\r\ntype Payment = NonNullable<OrderDetailFragment['payments']>[number];\r\n\r\nexport const ORDER_DETAIL_QUERY = gql`\r\n    query OrderDetailQuery($id: ID!) {\r\n        order(id: $id) {\r\n            ...OrderDetail\r\n        }\r\n    }\r\n    ${ORDER_DETAIL_FRAGMENT}\r\n`;\r\n\r\nexport const SET_ORDER_CUSTOMER_MUTATION = gql`\r\n    mutation SetOrderCustomer($input: SetOrderCustomerInput!) {\r\n        setOrderCustomer(input: $input) {\r\n            id\r\n            customer {\r\n                id\r\n                firstName\r\n                lastName\r\n                emailAddress\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n@Component({\r\n    selector: 'vdr-order-detail',\r\n    templateUrl: './order-detail.component.html',\r\n    styleUrls: ['./order-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderDetailComponent\r\n    extends TypedBaseDetailComponent<typeof OrderDetailQueryDocument, 'order'>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields = this.getCustomFieldConfig('Order');\r\n    orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n    detailForm = new FormGroup({\r\n        customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\r\n    });\r\n    history$: Observable<NonNullable<GetOrderHistoryQuery['order']>['history']['items'] | undefined>;\r\n    nextStates$: Observable<string[]>;\r\n    fetchHistory = new Subject<void>();\r\n    private readonly defaultStates = [\r\n        'AddingItems',\r\n        'ArrangingPayment',\r\n        'PaymentAuthorized',\r\n        'PaymentSettled',\r\n        'PartiallyShipped',\r\n        'Shipped',\r\n        'PartiallyDelivered',\r\n        'Delivered',\r\n        'Cancelled',\r\n        'Modifying',\r\n        'ArrangingAdditionalPayment',\r\n    ];\r\n\r\n    constructor(\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n        private formBuilder: FormBuilder,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.entity$.pipe(take(1)).subscribe(order => {\r\n            if (order.state === 'Modifying') {\r\n                this.router.navigate(['./', 'modify'], { relativeTo: this.route });\r\n            }\r\n        });\r\n        this.history$ = this.fetchHistory.pipe(\r\n            startWith(null),\r\n            switchMap(() =>\r\n                this.dataService.order\r\n                    .getOrderHistory(this.id, {\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    })\r\n                    .mapStream(data => data.order?.history.items),\r\n            ),\r\n        );\r\n        this.nextStates$ = this.entity$.pipe(\r\n            map(order => {\r\n                const isInCustomState = !this.defaultStates.includes(order.state);\r\n                return isInCustomState\r\n                    ? order.nextStates\r\n                    : order.nextStates.filter(s => !this.defaultStates.includes(s));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    openStateDiagram() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order =>\r\n                    this.modalService.fromComponent(OrderProcessGraphDialogComponent, {\r\n                        closable: true,\r\n                        locals: {\r\n                            activeState: order.state,\r\n                        },\r\n                    }),\r\n                ),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    setOrderCustomer() {\r\n        this.modalService\r\n            .fromComponent(SelectCustomerDialogComponent, {\r\n                locals: {\r\n                    canCreateNew: false,\r\n                    includeNoteInput: true,\r\n                    title: _('order.assign-order-to-another-customer'),\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    function isExisting(input: any): input is { id: string } {\r\n                        return typeof input === 'object' && !!input.id;\r\n                    }\r\n                    if (isExisting(result)) {\r\n                        return this.dataService.mutate(SetOrderCustomerDocument, {\r\n                            input: {\r\n                                customerId: result.id,\r\n                                orderId: this.id,\r\n                                note: result.note,\r\n                            },\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.set-customer-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    transitionToState(state: string) {\r\n        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {\r\n            switch (transitionOrderToState?.__typename) {\r\n                case 'Order':\r\n                    this.notificationService.success(_('order.transitioned-to-state-success'), { state });\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                    this.notificationService.error(transitionOrderToState.transitionError);\r\n            }\r\n        });\r\n    }\r\n\r\n    manuallyTransitionToState(order: OrderDetailFragment) {\r\n        this.orderTransitionService\r\n            .manuallyTransitionToState({\r\n                orderId: order.id,\r\n                nextStates: order.nextStates,\r\n                cancellable: true,\r\n                message: _('order.manually-transition-to-state-message'),\r\n                retry: 0,\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    transitionToModifying() {\r\n        this.dataService.order\r\n            .transitionToState(this.id, 'Modifying')\r\n            .subscribe(({ transitionOrderToState }) => {\r\n                switch (transitionOrderToState?.__typename) {\r\n                    case 'Order':\r\n                        this.router.navigate(['./modify'], { relativeTo: this.route });\r\n                        break;\r\n                    case 'OrderStateTransitionError':\r\n                        this.notificationService.error(transitionOrderToState.transitionError);\r\n                }\r\n            });\r\n    }\r\n\r\n    updateCustomFields() {\r\n        this.dataService.order\r\n            .updateOrderCustomFields({\r\n                id: this.id,\r\n                customFields: this.detailForm.value.customFields,\r\n            })\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('common.notify-update-success'), { entity: 'Order' });\r\n            });\r\n    }\r\n\r\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\r\n        if (!orderAddress) {\r\n            return [];\r\n        }\r\n        return Object.values(orderAddress)\r\n            .filter(val => val !== 'OrderAddress')\r\n            .filter(line => !!line);\r\n    }\r\n\r\n    settlePayment(payment: Payment) {\r\n        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {\r\n            switch (settlePayment.__typename) {\r\n                case 'Payment':\r\n                    if (settlePayment.state === 'Settled') {\r\n                        this.notificationService.success(_('order.settle-payment-success'));\r\n                    } else {\r\n                        this.notificationService.error(_('order.settle-payment-error'));\r\n                    }\r\n                    this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                case 'PaymentStateTransitionError':\r\n                case 'SettlePaymentError':\r\n                    this.notificationService.error(settlePayment.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    transitionPaymentState({ payment, state }: { payment: Payment; state: string }) {\r\n        if (state === 'Cancelled') {\r\n            this.dataService.order.cancelPayment(payment.id).subscribe(({ cancelPayment }) => {\r\n                switch (cancelPayment.__typename) {\r\n                    case 'Payment':\r\n                        this.notificationService.success(_('order.transitioned-payment-to-state-success'), {\r\n                            state,\r\n                        });\r\n                        this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                        this.fetchHistory.next();\r\n                        break;\r\n                    case 'PaymentStateTransitionError':\r\n                        this.notificationService.error(cancelPayment.transitionError);\r\n                        break;\r\n                    case 'CancelPaymentError':\r\n                        this.notificationService.error(cancelPayment.paymentErrorMessage);\r\n                        break;\r\n                }\r\n            });\r\n        } else {\r\n            this.dataService.order\r\n                .transitionPaymentToState(payment.id, state)\r\n                .subscribe(({ transitionPaymentToState }) => {\r\n                    switch (transitionPaymentToState.__typename) {\r\n                        case 'Payment':\r\n                            this.notificationService.success(\r\n                                _('order.transitioned-payment-to-state-success'),\r\n                                {\r\n                                    state,\r\n                                },\r\n                            );\r\n                            this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                            this.fetchHistory.next();\r\n                            break;\r\n                        case 'PaymentStateTransitionError':\r\n                            this.notificationService.error(transitionPaymentToState.message);\r\n                            break;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    canAddFulfillment(order: OrderDetailFragment): boolean {\r\n        const allFulfillmentLines: FulfillmentFragment['lines'] = (order.fulfillments ?? [])\r\n            .filter(fulfillment => fulfillment.state !== 'Cancelled')\r\n            .reduce((all, fulfillment) => [...all, ...fulfillment.lines], [] as FulfillmentFragment['lines']);\r\n        let allItemsFulfilled = true;\r\n        for (const line of order.lines) {\r\n            const totalFulfilledCount = allFulfillmentLines\r\n                .filter(row => row.orderLineId === line.id)\r\n                .reduce((sum, row) => sum + row.quantity, 0);\r\n            if (totalFulfilledCount < line.quantity) {\r\n                allItemsFulfilled = false;\r\n            }\r\n        }\r\n        return (\r\n            !allItemsFulfilled &&\r\n            !this.hasUnsettledModifications(order) &&\r\n            this.outstandingPaymentAmount(order) === 0 &&\r\n            (order.nextStates.includes('Shipped') ||\r\n                order.nextStates.includes('PartiallyShipped') ||\r\n                order.nextStates.includes('Delivered'))\r\n        );\r\n    }\r\n\r\n    hasUnsettledModifications(order: OrderDetailFragment): boolean {\r\n        return 0 < order.modifications.filter(m => !m.isSettled).length;\r\n    }\r\n\r\n    getOutstandingModificationAmount(order: OrderDetailFragment): number {\r\n        return summate(\r\n            order.modifications.filter(m => !m.isSettled),\r\n            'priceChange',\r\n        );\r\n    }\r\n\r\n    outstandingPaymentAmount(order: OrderDetailFragment): number {\r\n        const paymentIsValid = (p: Payment): boolean =>\r\n            p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';\r\n\r\n        let amountCovered = 0;\r\n        for (const payment of order.payments?.filter(paymentIsValid) ?? []) {\r\n            const refunds = payment.refunds.filter(r => r.state !== 'Failed') ?? [];\r\n            const refundsTotal = summate(refunds as Array<Required<Refund>>, 'total');\r\n            amountCovered += payment.amount - refundsTotal;\r\n        }\r\n        return order.totalWithTax - amountCovered;\r\n    }\r\n\r\n    addManualPayment(order: OrderDetailFragment) {\r\n        const priorState = order.state;\r\n        this.modalService\r\n            .fromComponent(AddManualPaymentDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    outstandingAmount: this.outstandingPaymentAmount(order),\r\n                    currencyCode: order.currencyCode,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.addManualPaymentToOrder({\r\n                            orderId: this.id,\r\n                            transactionId: result.transactionId,\r\n                            method: result.method,\r\n                            metadata: result.metadata || {},\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n                switchMap(({ addManualPaymentToOrder }) => {\r\n                    switch (addManualPaymentToOrder.__typename) {\r\n                        case 'Order':\r\n                            this.notificationService.success(_('order.add-payment-to-order-success'));\r\n                            if (priorState === 'ArrangingAdditionalPayment') {\r\n                                return this.orderTransitionService.transitionToPreModifyingState(\r\n                                    order.id,\r\n                                    order.nextStates,\r\n                                );\r\n                            } else {\r\n                                return of('PaymentSettled');\r\n                            }\r\n                        case 'ManualPaymentStateError':\r\n                            this.notificationService.error(addManualPaymentToOrder.message);\r\n                            return EMPTY;\r\n                        default:\r\n                            return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.refetchOrder({ result });\r\n                }\r\n            });\r\n    }\r\n\r\n    fulfillOrder() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order =>\r\n                    this.modalService.fromComponent(FulfillOrderDialogComponent, {\r\n                        size: 'xl',\r\n                        locals: {\r\n                            order,\r\n                        },\r\n                    }),\r\n                ),\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.createFulfillment(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result).pipe(mapTo(result))),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    const { addFulfillmentToOrder } = result;\r\n                    switch (addFulfillmentToOrder.__typename) {\r\n                        case 'Fulfillment':\r\n                            this.notificationService.success(_('order.create-fulfillment-success'));\r\n                            break;\r\n                        case 'EmptyOrderLineSelectionError':\r\n                        case 'InsufficientStockOnHandError':\r\n                        case 'ItemsAlreadyFulfilledError':\r\n                        case 'InvalidFulfillmentHandlerError':\r\n                            this.notificationService.error(addFulfillmentToOrder.message);\r\n                            break;\r\n                        case 'FulfillmentStateTransitionError':\r\n                            this.notificationService.error(addFulfillmentToOrder.transitionError);\r\n                            break;\r\n                        case 'CreateFulfillmentError':\r\n                            this.notificationService.error(addFulfillmentToOrder.fulfillmentHandlerError);\r\n                            break;\r\n                        case undefined:\r\n                            this.notificationService.error(JSON.stringify(addFulfillmentToOrder));\r\n                            break;\r\n                        default:\r\n                            assertNever(addFulfillmentToOrder);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    transitionFulfillment(id: string, state: string) {\r\n        this.dataService.order\r\n            .transitionFulfillmentToState(id, state)\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('order.successfully-updated-fulfillment'));\r\n            });\r\n    }\r\n\r\n    cancelOrRefund(order: OrderDetailFragment) {\r\n        const isRefundable = this.orderHasSettledPayments(order);\r\n        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {\r\n            this.cancelOrder(order);\r\n        } else {\r\n            this.refundOrder(order);\r\n        }\r\n    }\r\n\r\n    settleRefund(refund: Payment['refunds'][number]) {\r\n        this.modalService\r\n            .fromComponent(SettleRefundDialogComponent, {\r\n                size: 'md',\r\n                locals: {\r\n                    refund,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(transactionId => {\r\n                    if (transactionId) {\r\n                        return this.dataService.order.settleRefund(\r\n                            {\r\n                                transactionId,\r\n                                id: refund.id,\r\n                            },\r\n                            this.id,\r\n                        );\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                // switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.settle-refund-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    addNote(event: { note: string; isPublic: boolean }) {\r\n        const { note, isPublic } = event;\r\n        this.dataService.order\r\n            .addNoteToOrder({\r\n                id: this.id,\r\n                note,\r\n                isPublic,\r\n            })\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(result => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    updateNote(entry: TimelineHistoryEntry) {\r\n        this.modalService\r\n            .fromComponent(EditNoteDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    displayPrivacyControls: true,\r\n                    note: entry.data.note,\r\n                    noteIsPrivate: !entry.isPublic,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.updateOrderNote({\r\n                            noteId: entry.id,\r\n                            isPublic: !result.isPrivate,\r\n                            note: result.note,\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-update-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    deleteNote(entry: TimelineHistoryEntry) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('common.confirm-delete-note'),\r\n                body: entry.data.note,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))\r\n            .subscribe(() => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-delete-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    orderHasSettledPayments(order: OrderDetailFragment): boolean {\r\n        return !!order.payments?.find(p => p.state === 'Settled');\r\n    }\r\n\r\n    private cancelOrder(order: OrderDetailFragment) {\r\n        this.modalService\r\n            .fromComponent(CancelOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.cancelOrder(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.cancelled-order-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    private refundOrder(order: OrderDetailFragment) {\r\n        this.modalService\r\n            .fromComponent(RefundOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (!input) {\r\n                        return of(undefined);\r\n                    }\r\n\r\n                    if (input.cancel.lines?.length) {\r\n                        return this.dataService.order.cancelOrder(input.cancel).pipe(\r\n                            map(res => {\r\n                                const result = res.cancelOrder;\r\n                                switch (result.__typename) {\r\n                                    case 'Order':\r\n                                        this.refetchOrder(result).subscribe();\r\n                                        this.notificationService.success(\r\n                                            _('order.cancelled-order-items-success'),\r\n                                            {\r\n                                                count: summate(input.cancel.lines, 'quantity'),\r\n                                            },\r\n                                        );\r\n                                        return input;\r\n                                    case 'CancelActiveOrderError':\r\n                                    case 'QuantityTooGreatError':\r\n                                    case 'MultipleOrderError':\r\n                                    case 'OrderStateTransitionError':\r\n                                    case 'EmptyOrderLineSelectionError':\r\n                                        this.notificationService.error(result.message);\r\n                                        return undefined;\r\n                                }\r\n                            }),\r\n                        );\r\n                    } else {\r\n                        return [input];\r\n                    }\r\n                }),\r\n                switchMap(input => {\r\n                    if (!input) {\r\n                        return of(undefined);\r\n                    }\r\n                    if (input.refunds.length) {\r\n                        return forkJoin(\r\n                            input.refunds.map(refund =>\r\n                                this.dataService.order.refundOrder(refund).pipe(map(res => res.refundOrder)),\r\n                            ),\r\n                        );\r\n                    } else {\r\n                        return [undefined];\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(results => {\r\n                for (const result of results ?? []) {\r\n                    if (result) {\r\n                        switch (result.__typename) {\r\n                            case 'Refund':\r\n                                if (result.state === 'Failed') {\r\n                                    this.notificationService.error(_('order.refund-order-failed'));\r\n                                } else {\r\n                                    this.notificationService.success(_('order.refund-order-success'));\r\n                                }\r\n                                break;\r\n                            case 'AlreadyRefundedError':\r\n                            case 'NothingToRefundError':\r\n                            case 'PaymentOrderMismatchError':\r\n                            case 'RefundOrderStateError':\r\n                            case 'RefundStateTransitionError':\r\n                                this.notificationService.error(result.message);\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                this.refetchOrder(results?.[0]).subscribe();\r\n            });\r\n    }\r\n\r\n    private refetchOrder(result: object | undefined): Observable<GetOrderQuery | undefined> {\r\n        this.fetchHistory.next();\r\n        if (result) {\r\n            return this.dataService.order.getOrder(this.id).single$;\r\n        } else {\r\n            return of(undefined);\r\n        }\r\n    }\r\n\r\n    protected setFormValues(entity: OrderDetailFragment): void {\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);\r\n        }\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n        <vdr-ab-left> </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"button primary mr-1\"\r\n                *ngIf=\"\r\n                    order.type !== 'Aggregate' &&\r\n                    (order.state === 'ArrangingPayment' || order.state === 'ArrangingAdditionalPayment') &&\r\n                    (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\r\n                \"\r\n                (click)=\"addManualPayment(order)\"\r\n            >\r\n                {{ 'order.add-payment-to-order' | translate }}\r\n                ({{ outstandingPaymentAmount(order) | localeCurrency : order.currencyCode }})\r\n            </button>\r\n            <button\r\n                class=\"button primary mr-1\"\r\n                *ngIf=\"\r\n                    order.type !== 'Aggregate' &&\r\n                    order.active === false &&\r\n                    order.state !== 'ArrangingAdditionalPayment' &&\r\n                    order.state !== 'ArrangingPayment' &&\r\n                    0 < outstandingPaymentAmount(order)\r\n                \"\r\n                (click)=\"transitionToState('ArrangingAdditionalPayment')\"\r\n            >\r\n                {{ 'order.arrange-additional-payment' | translate }}\r\n            </button>\r\n            <button\r\n                *ngIf=\"order.type !== 'Aggregate'\"\r\n                class=\"button primary mr-1\"\r\n                (click)=\"fulfillOrder()\"\r\n                [disabled]=\"!canAddFulfillment(order)\"\r\n            >\r\n                {{ 'order.fulfill-order' | translate }}\r\n            </button>\r\n            <vdr-action-bar-dropdown-menu [alwaysShow]=\"true\" locationId=\"order-detail\">\r\n                <ng-container *ngIf=\"order.type !== 'Aggregate' && order.nextStates.includes('Modifying')\">\r\n                    <button type=\"button\" vdrDropdownItem (click)=\"transitionToModifying()\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'order.modify-order' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                </ng-container>\r\n                <button\r\n                    type=\"button\"\r\n                    vdrDropdownItem\r\n                    *ngIf=\"order.type !== 'Aggregate' && order.nextStates.includes('Cancelled')\"\r\n                    (click)=\"cancelOrRefund(order)\"\r\n                >\r\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\r\n                        {{ 'order.refund-and-cancel-order' | translate }}\r\n                    </ng-container>\r\n                    <ng-template #cancelOnly>\r\n                        {{ 'order.cancel-order' | translate }}\r\n                    </ng-template>\r\n                </button>\r\n\r\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        *ngFor=\"let nextState of nextStates$ | async\"\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionToState(nextState)\"\r\n                    >\r\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                        {{\r\n                            'order.transition-to-state'\r\n                                | translate : { state: (nextState | stateI18nToken | translate) }\r\n                        }}\r\n                    </button>\r\n                </ng-container>\r\n                <div class=\"dropdown-divider\"></div>\r\n                <button type=\"button\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\r\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\r\n                    {{ 'order.manually-transition-to-state' | translate }}\r\n                </button>\r\n            </vdr-action-bar-dropdown-menu>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<vdr-page-detail-layout *ngIf=\"entity$ | async as order\">\r\n    <vdr-page-detail-sidebar>\r\n        <vdr-card [title]=\"'order.state' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    class=\"button-small\"\r\n                    (click)=\"openStateDiagram()\"\r\n                    [title]=\"'order.order-state-diagram' | translate\"\r\n                >\r\n                    <clr-icon shape=\"list\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.customer' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    *vdrIfPermissions=\"['UpdateOrder', 'ReadCustomer']\"\r\n                    class=\"button-small\"\r\n                    (click)=\"setOrderCustomer()\"\r\n                    [title]=\"'order.assign-order-to-another-customer' | translate\"\r\n                >\r\n                    <clr-icon shape=\"switch\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n            <vdr-labeled-data\r\n                class=\"mt-2\"\r\n                [label]=\"'order.shipping-address' | translate\"\r\n                *ngIf=\"getOrderAddressLines(order.shippingAddress).length\"\r\n            >\r\n                <vdr-formatted-address [address]=\"order.shippingAddress\" class=\"mt-1\"></vdr-formatted-address>\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                [label]=\"'order.billing-address' | translate\"\r\n                *ngIf=\"getOrderAddressLines(order.billingAddress).length\"\r\n            >\r\n                <vdr-formatted-address [address]=\"order.billingAddress\" class=\"mt-1\"></vdr-formatted-address>\r\n            </vdr-labeled-data>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.payments' | translate\" *ngIf=\"order.payments?.length\">\r\n            <vdr-order-payment-card\r\n                *ngFor=\"let payment of order.payments\"\r\n                [currencyCode]=\"order.currencyCode\"\r\n                [payment]=\"payment\"\r\n                (settlePayment)=\"settlePayment($event)\"\r\n                (transitionPaymentState)=\"transitionPaymentState($event)\"\r\n                (settleRefund)=\"settleRefund($event)\"\r\n            ></vdr-order-payment-card>\r\n        </vdr-card>\r\n        <vdr-card *ngIf=\"order.fulfillments?.length\">\r\n            <vdr-fulfillment-card\r\n                *ngFor=\"let fulfillment of order.fulfillments\"\r\n                [fulfillment]=\"fulfillment\"\r\n                [order]=\"order\"\r\n                (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\r\n            ></vdr-fulfillment-card>\r\n        </vdr-card>\r\n        <vdr-card>\r\n            <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n        </vdr-card>\r\n    </vdr-page-detail-sidebar>\r\n\r\n    <vdr-page-block>\r\n        <vdr-seller-orders-card\r\n            class=\"mb-2\"\r\n            *ngIf=\"order.sellerOrders.length\"\r\n            [orderId]=\"order.id\"\r\n        ></vdr-seller-orders-card>\r\n        <vdr-card [paddingX]=\"false\">\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n            ></vdr-order-table>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.tax-summary' | translate\" [paddingX]=\"false\">\r\n            <table class=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>{{ 'common.description' | translate }}</th>\r\n                        <th>{{ 'order.tax-rate' | translate }}</th>\r\n                        <th>{{ 'order.tax-base' | translate }}</th>\r\n                        <th>{{ 'order.tax-total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let row of order.taxSummary\">\r\n                        <td>{{ row.description }}</td>\r\n                        <td>{{ row.taxRate / 100 | percent : '0.0-3' }}</td>\r\n                        <td>{{ row.taxBase | localeCurrency : order.currencyCode }}</td>\r\n                        <td>{{ row.taxTotal | localeCurrency : order.currencyCode }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Order\"\r\n                [customFields]=\"customFields\"\r\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                [readonly]=\"!('UpdateOrder' | hasPermission)\"\r\n            />\r\n            <button\r\n                class=\"button primary\"\r\n                (click)=\"updateCustomFields()\"\r\n                [disabled]=\"\r\n                    detailForm.get('customFields')?.pristine || detailForm.get('customFields')?.invalid\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-custom-detail-component-host\r\n            locationId=\"order-detail\"\r\n            [entity$]=\"entity$\"\r\n            [detailForm]=\"detailForm\"\r\n        ></vdr-custom-detail-component-host>\r\n\r\n        <vdr-card [title]=\"'order.order-history' | translate\">\r\n            <vdr-order-history\r\n                [order]=\"order\"\r\n                [history]=\"history$ | async\"\r\n                (addNote)=\"addNote($event)\"\r\n                (updateNote)=\"updateNote($event)\"\r\n                (deleteNote)=\"deleteNote($event)\"\r\n            ></vdr-order-history>\r\n        </vdr-card>\r\n    </vdr-page-block>\r\n</vdr-page-detail-layout>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport type { OrderEditorComponent } from '../order-editor/order-editor.component';\r\nimport { AddedLine, ModifyOrderData, OrderSnapshot } from '../../common/modify-order-types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-modification-summary',\r\n    templateUrl: './order-modification-summary.component.html',\r\n    styleUrls: ['./order-modification-summary.component.css'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderModificationSummaryComponent {\r\n    @Input() orderSnapshot: OrderSnapshot;\r\n    @Input() modifyOrderInput: ModifyOrderData;\r\n    @Input() addedLines: AddedLine[];\r\n    @Input() shippingAddressForm: OrderEditorComponent['shippingAddressForm'];\r\n    @Input() billingAddressForm: OrderEditorComponent['billingAddressForm'];\r\n    @Input() updatedShippingMethods: OrderEditorComponent['updatedShippingMethods'];\r\n    @Input() couponCodesControl: FormControl<string[] | null>;\r\n\r\n    get adjustedLines(): string[] {\r\n        return (this.modifyOrderInput.adjustOrderLines || [])\r\n            .map(l => {\r\n                const line = this.orderSnapshot.lines.find(line => line.id === l.orderLineId);\r\n                if (line) {\r\n                    const delta = l.quantity - line.quantity;\r\n                    const sign = delta === 0 ? '' : delta > 0 ? '+' : '-';\r\n                    return delta\r\n                        ? `${sign}${Math.abs(delta)} ${line.productVariant.name}`\r\n                        : line.productVariant.name;\r\n                }\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    getModifiedFields(formGroup: FormGroup): string {\r\n        if (!formGroup.dirty) {\r\n            return '';\r\n        }\r\n        return Object.entries(formGroup.controls)\r\n            .map(([key, control]) => {\r\n                if (control.dirty) {\r\n                    return key;\r\n                }\r\n            })\r\n            .filter(notNullOrUndefined)\r\n            .join(', ');\r\n    }\r\n\r\n    getUpdatedShippingMethodLines() {\r\n        return Object.entries(this.updatedShippingMethods || {})\r\n            .map(([lineId, shippingMethod]) => {\r\n                const previousMethod = this.orderSnapshot.shippingLines.find(l => l.id === lineId);\r\n                if (!previousMethod) {\r\n                    return;\r\n                }\r\n                const previousName = previousMethod.shippingMethod.name || previousMethod.shippingMethod.code;\r\n                const newName = shippingMethod.name || shippingMethod.code;\r\n                return `${previousName} -> ${newName}`;\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    get couponCodeChanges(): string[] {\r\n        const originalCodes = this.orderSnapshot.couponCodes || [];\r\n        const newCodes = this.couponCodesControl.value || [];\r\n        const addedCodes = newCodes.filter(c => !originalCodes.includes(c)).map(c => `+ ${c}`);\r\n        const removedCodes = originalCodes.filter(c => !newCodes.includes(c)).map(c => `- ${c}`);\r\n        return [...addedCodes, ...removedCodes];\r\n    }\r\n}\r\n","<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.adjustOrderLines?.length\"\r\n        [label]=\"\r\n                    'order.modification-adjusting-lines'\r\n                        | translate : { count: modifyOrderInput.adjustOrderLines?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let line of adjustedLines\" class=\"mb-1\">\r\n        {{ line }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.addItems?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-items'\r\n                        | translate : { count: modifyOrderInput.addItems?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let item of addedLines\">\r\n        {{ item.productVariant.name }} x {{ item.quantity }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.surcharges?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-surcharges'\r\n                        | translate : { count: modifyOrderInput.surcharges?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let surcharge of modifyOrderInput.surcharges\" class=\"mb-1\">\r\n        {{ surcharge.description }}: {{ surcharge.price | localeCurrency : orderSnapshot.currencyCode }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(shippingAddressForm) as updatedShippingFields\"\r\n        [label]=\"'order.modification-updating-shipping-address' | translate\"\r\n>\r\n    {{ updatedShippingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(billingAddressForm) as updatedBillingFields\"\r\n        [label]=\"'order.modification-updating-billing-address' | translate\"\r\n>\r\n    {{ updatedBillingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"couponCodeChanges.length\" [label]=\"'order.set-coupon-codes' | translate\">\r\n    <div *ngFor=\"let change of couponCodeChanges\" class=\"mb-1\">{{ change }}</div>\r\n</vdr-labeled-data>\r\n<ng-container *ngIf=\"getUpdatedShippingMethodLines() as updatedShippingMethods\">\r\n    <vdr-labeled-data *ngIf=\"updatedShippingMethods.length\" [label]=\"'order.shipping-method' | translate\">\r\n        <div *ngFor=\"let change of updatedShippingMethods\" class=\"mb-1\">{{ change }}</div>\r\n    </vdr-labeled-data>\r\n</ng-container>","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport {\r\n    AdministratorRefundInput,\r\n    CustomFieldConfig,\r\n    Dialog,\r\n    ModifyOrderInput,\r\n    OrderDetailFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { getRefundablePayments, RefundablePayment } from '../../common/get-refundable-payments';\r\nimport { AddedLine, OrderSnapshot } from '../../common/modify-order-types';\r\nimport { OrderEditorComponent } from '../order-editor/order-editor.component';\r\n\r\nexport enum OrderEditResultType {\r\n    Refund,\r\n    Payment,\r\n    PriceUnchanged,\r\n    Cancel,\r\n}\r\n\r\ninterface OrderEditsRefundResult {\r\n    result: OrderEditResultType.Refund;\r\n    refunds: AdministratorRefundInput[];\r\n}\r\ninterface OrderEditsPaymentResult {\r\n    result: OrderEditResultType.Payment;\r\n}\r\ninterface OrderEditsPriceUnchangedResult {\r\n    result: OrderEditResultType.PriceUnchanged;\r\n}\r\ninterface OrderEditsCancelResult {\r\n    result: OrderEditResultType.Cancel;\r\n}\r\ntype OrderEditResult =\r\n    | OrderEditsRefundResult\r\n    | OrderEditsPaymentResult\r\n    | OrderEditsPriceUnchangedResult\r\n    | OrderEditsCancelResult;\r\n\r\n@Component({\r\n    selector: 'vdr-order-edits-preview-dialog',\r\n    templateUrl: './order-edits-preview-dialog.component.html',\r\n    styleUrls: ['./order-edits-preview-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditsPreviewDialogComponent implements OnInit, Dialog<OrderEditResult> {\r\n    // Passed in via the modalService\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    order: OrderDetailFragment;\r\n    orderSnapshot: OrderSnapshot;\r\n    modifyOrderInput: ModifyOrderInput;\r\n    addedLines: AddedLine[];\r\n    shippingAddressForm: OrderEditorComponent['shippingAddressForm'];\r\n    billingAddressForm: OrderEditorComponent['billingAddressForm'];\r\n    updatedShippingMethods: OrderEditorComponent['updatedShippingMethods'];\r\n    couponCodesControl: FormControl<string[] | null>;\r\n\r\n    refundablePayments: RefundablePayment[];\r\n    refundNote: string;\r\n    resolveWith: (result?: OrderEditResult) => void;\r\n\r\n    get priceDifference(): number {\r\n        return this.order.totalWithTax - this.orderSnapshot.totalWithTax;\r\n    }\r\n\r\n    get amountToRefundTotal(): number {\r\n        return this.refundablePayments.reduce(\r\n            (total, payment) => total + payment.amountToRefundControl.value,\r\n            0,\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.refundNote = this.modifyOrderInput.note || '';\r\n        this.refundablePayments = getRefundablePayments(this.order.payments || []);\r\n        this.refundablePayments.forEach(rp => {\r\n            rp.amountToRefundControl.addValidators(Validators.max(this.priceDifference * -1));\r\n        });\r\n        if (this.priceDifference < 0 && this.refundablePayments.length) {\r\n            this.onPaymentSelected(this.refundablePayments[0], true);\r\n        }\r\n    }\r\n\r\n    onPaymentSelected(payment: RefundablePayment, selected: boolean) {\r\n        if (selected) {\r\n            const outstandingRefundAmount =\r\n                this.priceDifference * -1 -\r\n                this.refundablePayments\r\n                    .filter(p => p.id !== payment.id)\r\n                    .reduce((total, p) => total + p.amountToRefundControl.value, 0);\r\n            if (0 < outstandingRefundAmount) {\r\n                payment.amountToRefundControl.setValue(\r\n                    Math.min(outstandingRefundAmount, payment.refundableAmount),\r\n                );\r\n            }\r\n        } else {\r\n            payment.amountToRefundControl.setValue(0);\r\n        }\r\n    }\r\n\r\n    refundsCoverDifference(): boolean {\r\n        return this.priceDifference * -1 === this.amountToRefundTotal;\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith({\r\n            result: OrderEditResultType.Cancel,\r\n        });\r\n    }\r\n\r\n    submit() {\r\n        if (0 < this.priceDifference) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Payment,\r\n            });\r\n        } else if (this.priceDifference < 0) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Refund,\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                refunds: this.refundablePayments\r\n                    .filter(rp => rp.selected && 0 < rp.amountToRefundControl.value)\r\n                    .map(payment => {\r\n                        return {\r\n                            reason: this.refundNote || this.modifyOrderInput.note,\r\n                            paymentId: payment.id,\r\n                            amount: payment.amountToRefundControl.value,\r\n                        };\r\n                    }),\r\n            });\r\n        } else {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.PriceUnchanged,\r\n            });\r\n        }\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table\r\n    [order]=\"order\"\r\n    [orderLineCustomFields]=\"orderLineCustomFields\"\r\n    class=\"order-edits-preview-table\"\r\n></vdr-order-table>\r\n<div class=\"payments-wrapper mb-2\">\r\n    <div class=\"flex-spacer\">\r\n        <vdr-payment-for-refund-selector\r\n            *ngIf=\"priceDifference < 0\"\r\n            class=\"\"\r\n            [refundablePayments]=\"refundablePayments\"\r\n            (paymentSelected)=\"onPaymentSelected($event.payment, $event.selected)\"\r\n            [order]=\"order\"\r\n        ></vdr-payment-for-refund-selector>\r\n    </div>\r\n    <div class=\"flex-spacer\">\r\n        <vdr-card [title]=\"'order.modify-order' | translate\">\r\n            <vdr-order-modification-summary\r\n                [orderSnapshot]=\"orderSnapshot\"\r\n                [modifyOrderInput]=\"modifyOrderInput\"\r\n                [addedLines]=\"addedLines\"\r\n                [shippingAddressForm]=\"shippingAddressForm\"\r\n                [billingAddressForm]=\"billingAddressForm\"\r\n                [couponCodesControl]=\"couponCodesControl\"\r\n                [updatedShippingMethods]=\"updatedShippingMethods\"\r\n            ></vdr-order-modification-summary>\r\n            <vdr-labeled-data [label]=\"'order.note' | translate\">\r\n                {{ modifyOrderInput.note || '-' }}\r\n            </vdr-labeled-data>\r\n            <vdr-form-field\r\n                [label]=\"'order.refund-cancellation-reason' | translate\"\r\n                *ngIf=\"priceDifference < 0\"\r\n            >\r\n                <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" required></textarea>\r\n            </vdr-form-field>\r\n        </vdr-card>\r\n    </div>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <div>\r\n        <div class=\"errors\">\r\n            <clr-alert\r\n                class=\"mb-1\"\r\n                *ngIf=\"priceDifference < 0 && !refundsCoverDifference()\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n        </div>\r\n        <div class=\"modal-buttons\">\r\n            <clr-alert class=\"\" [clrAlertType]=\"'primary'\" [clrAlertClosable]=\"false\">\r\n                <clr-alert-item>\r\n                    {{ 'order.modify-order-price-difference' | translate }}\r\n                    {{ 0 < priceDifference ? '+' : ''\r\n                    }}{{ priceDifference | localeCurrency : order.currencyCode }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <button type=\"button\" class=\"btn\" (click)=\"cancel()\">\r\n                {{ 'common.cancel' | translate }}\r\n            </button>\r\n            <button\r\n                type=\"submit\"\r\n                (click)=\"submit()\"\r\n                [disabled]=\"priceDifference < 0 ? !refundsCoverDifference() : false\"\r\n                class=\"btn btn-primary\"\r\n            >\r\n                {{ 'common.confirm' | translate }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n    FormControl,\r\n    FormGroup,\r\n    UntypedFormArray,\r\n    UntypedFormControl,\r\n    UntypedFormGroup,\r\n    Validators,\r\n} from '@angular/forms';\r\nimport {\r\n    CustomFieldConfig,\r\n    DataService,\r\n    DraftOrderEligibleShippingMethodsQuery,\r\n    ErrorResult,\r\n    GetAvailableCountriesQuery,\r\n    HistoryEntryType,\r\n    LanguageCode,\r\n    ModalService,\r\n    ModifyOrderInput,\r\n    NotificationService,\r\n    OrderAddressFragment,\r\n    OrderDetailFragment,\r\n    OrderDetailQueryDocument,\r\n    SortOrder,\r\n    SurchargeInput,\r\n    transformRelationCustomFieldInputs,\r\n    TypedBaseDetailComponent,\r\n} from '@vendure/admin-ui/core';\r\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { simpleDeepClone } from '@vendure/common/lib/simple-deep-clone';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport { map, mapTo, shareReplay, switchMap, take, takeUntil } from 'rxjs/operators';\r\nimport {\r\n    AddedLine,\r\n    ModifyOrderData,\r\n    OrderSnapshot,\r\n    ProductSelectorItem,\r\n} from '../../common/modify-order-types';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport {\r\n    OrderEditResultType,\r\n    OrderEditsPreviewDialogComponent,\r\n} from '../order-edits-preview-dialog/order-edits-preview-dialog.component';\r\nimport { SelectShippingMethodDialogComponent } from '../select-shipping-method-dialog/select-shipping-method-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-editor',\r\n    templateUrl: './order-editor.component.html',\r\n    styleUrls: ['./order-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditorComponent\r\n    extends TypedBaseDetailComponent<typeof OrderDetailQueryDocument, 'order'>\r\n    implements OnInit, OnDestroy\r\n{\r\n    availableCountries$: Observable<GetAvailableCountriesQuery['countries']['items']>;\r\n    addressCustomFields: CustomFieldConfig[];\r\n    uiLanguage$: Observable<LanguageCode>;\r\n    detailForm = new UntypedFormGroup({});\r\n    couponCodesControl = new FormControl<string[]>([]);\r\n    orderLineCustomFieldsFormArray: UntypedFormArray;\r\n    addItemCustomFieldsFormArray: UntypedFormArray;\r\n    addItemCustomFieldsForm: UntypedFormGroup;\r\n    addItemSelectedVariant: ProductSelectorItem | undefined;\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    orderSnapshot: OrderSnapshot;\r\n    modifyOrderInput: ModifyOrderData = {\r\n        dryRun: true,\r\n        orderId: '',\r\n        addItems: [],\r\n        adjustOrderLines: [],\r\n        surcharges: [],\r\n        note: '',\r\n        refunds: [],\r\n        updateShippingAddress: {},\r\n        updateBillingAddress: {},\r\n    };\r\n    surchargeForm = new FormGroup({\r\n        description: new FormControl('', Validators.minLength(1)),\r\n        sku: new FormControl(''),\r\n        price: new FormControl(0),\r\n        priceIncludesTax: new FormControl(true),\r\n        taxRate: new FormControl(0),\r\n        taxDescription: new FormControl(''),\r\n    });\r\n    shippingAddressForm = new FormGroup({\r\n        fullName: new FormControl(''),\r\n        company: new FormControl(''),\r\n        streetLine1: new FormControl(''),\r\n        streetLine2: new FormControl(''),\r\n        city: new FormControl(''),\r\n        province: new FormControl(''),\r\n        postalCode: new FormControl(''),\r\n        countryCode: new FormControl(''),\r\n        phoneNumber: new FormControl(''),\r\n    });\r\n    billingAddressForm = new FormGroup({\r\n        fullName: new FormControl(''),\r\n        company: new FormControl(''),\r\n        streetLine1: new FormControl(''),\r\n        streetLine2: new FormControl(''),\r\n        city: new FormControl(''),\r\n        province: new FormControl(''),\r\n        postalCode: new FormControl(''),\r\n        countryCode: new FormControl(''),\r\n        phoneNumber: new FormControl(''),\r\n    });\r\n    note = '';\r\n    recalculateShipping = true;\r\n    previousState: string;\r\n    editingShippingAddress = false;\r\n    editingBillingAddress = false;\r\n    updatedShippingMethods: {\r\n        [\r\n            shippingLineId: string\r\n        ]: DraftOrderEligibleShippingMethodsQuery['eligibleShippingMethodsForDraftOrder'][number];\r\n    } = {};\r\n    private addedVariants = new Map<string, ProductSelectorItem>();\r\n\r\n    constructor(\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n        private changeDetectorRef: ChangeDetectorRef,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.init();\r\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\r\n        this.modifyOrderInput.orderId = this.route.snapshot.paramMap.get('id') as string;\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.entity$.pipe(take(1)).subscribe(order => {\r\n            this.orderSnapshot = this.createOrderSnapshot(order);\r\n            if (order.couponCodes.length) {\r\n                this.couponCodesControl.setValue(order.couponCodes);\r\n            }\r\n            this.surchargeForm.reset();\r\n            for (const [name, control] of Object.entries(this.shippingAddressForm.controls)) {\r\n                control.setValue(order.shippingAddress?.[name]);\r\n            }\r\n            this.addAddressCustomFieldsFormGroup(this.shippingAddressForm, order.shippingAddress);\r\n            for (const [name, control] of Object.entries(this.billingAddressForm.controls)) {\r\n                control.setValue(order.billingAddress?.[name]);\r\n            }\r\n            this.addAddressCustomFieldsFormGroup(this.billingAddressForm, order.billingAddress);\r\n            this.orderLineCustomFieldsFormArray = new UntypedFormArray([]);\r\n            for (const line of order.lines) {\r\n                const formGroup = new UntypedFormGroup({});\r\n                for (const { name } of this.orderLineCustomFields) {\r\n                    formGroup.addControl(name, new UntypedFormControl((line as any).customFields[name]));\r\n                }\r\n                formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                    let modifyRow = this.modifyOrderInput.adjustOrderLines.find(\r\n                        l => l.orderLineId === line.id,\r\n                    );\r\n                    if (!modifyRow) {\r\n                        modifyRow = {\r\n                            orderLineId: line.id,\r\n                            quantity: line.quantity,\r\n                        };\r\n                        this.modifyOrderInput.adjustOrderLines.push(modifyRow);\r\n                    }\r\n                    if (this.orderLineCustomFields.length) {\r\n                        modifyRow.customFields = value;\r\n                    }\r\n                });\r\n                this.orderLineCustomFieldsFormArray.push(formGroup);\r\n            }\r\n        });\r\n\r\n        this.addItemCustomFieldsFormArray = new UntypedFormArray([]);\r\n        this.addItemCustomFieldsForm = new UntypedFormGroup({});\r\n        for (const customField of this.orderLineCustomFields) {\r\n            this.addItemCustomFieldsForm.addControl(customField.name, new UntypedFormControl());\r\n        }\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items)\r\n            .pipe(shareReplay(1));\r\n        this.dataService.order\r\n            .getOrderHistory(this.id, {\r\n                take: 1,\r\n                sort: {\r\n                    createdAt: SortOrder.DESC,\r\n                },\r\n                filter: { type: { eq: HistoryEntryType.ORDER_STATE_TRANSITION } },\r\n            })\r\n            .single$.subscribe(({ order }) => {\r\n                this.previousState = order?.history.items[0].data.from;\r\n            });\r\n        this.uiLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .stream$.pipe(map(({ uiState }) => uiState.language));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    get addedLines(): AddedLine[] {\r\n        const getSinglePriceValue = (price: ProductSelectorItem['price']) =>\r\n            price.__typename === 'SinglePrice' ? price.value : 0;\r\n        return (this.modifyOrderInput.addItems || [])\r\n            .map(row => {\r\n                const variantInfo = this.addedVariants.get(row.productVariantId);\r\n                if (variantInfo) {\r\n                    return {\r\n                        id: this.getIdForAddedItem(row),\r\n                        featuredAsset: variantInfo.productAsset,\r\n                        productVariant: {\r\n                            id: variantInfo.productVariantId,\r\n                            name: variantInfo.productVariantName,\r\n                            sku: variantInfo.sku,\r\n                        },\r\n                        unitPrice: getSinglePriceValue(variantInfo.price),\r\n                        unitPriceWithTax: getSinglePriceValue(variantInfo.priceWithTax),\r\n                        quantity: row.quantity,\r\n                    };\r\n                }\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    private getIdForAddedItem(row: ModifyOrderData['addItems'][number]) {\r\n        return `added-${row.productVariantId}-${JSON.stringify(row.customFields || {})}`;\r\n    }\r\n\r\n    transitionToPriorState(order: OrderDetailFragment) {\r\n        this.orderTransitionService\r\n            .transitionToPreModifyingState(order.id, order.nextStates)\r\n            .subscribe(result => {\r\n                this.router.navigate(['..'], { relativeTo: this.route });\r\n            });\r\n    }\r\n\r\n    hasModifications(): boolean {\r\n        const { addItems, adjustOrderLines, surcharges } = this.modifyOrderInput;\r\n        return (\r\n            !!addItems?.length ||\r\n            !!surcharges?.length ||\r\n            !!adjustOrderLines?.length ||\r\n            (this.shippingAddressForm.dirty && this.shippingAddressForm.valid) ||\r\n            (this.billingAddressForm.dirty && this.billingAddressForm.valid) ||\r\n            this.couponCodesControl.dirty ||\r\n            Object.entries(this.updatedShippingMethods).length > 0\r\n        );\r\n    }\r\n\r\n    isLineModified(line: OrderDetailFragment['lines'][number]): boolean {\r\n        return !!this.modifyOrderInput.adjustOrderLines?.find(\r\n            l => l.orderLineId === line.id && l.quantity !== line.quantity,\r\n        );\r\n    }\r\n\r\n    getInitialLineQuantity(lineId: string): number {\r\n        const adjustedLine = this.modifyOrderInput.adjustOrderLines?.find(l => l.orderLineId === lineId);\r\n        if (adjustedLine) {\r\n            return adjustedLine.quantity;\r\n        }\r\n        const addedLine = this.modifyOrderInput.addItems?.find(l => this.getIdForAddedItem(l) === lineId);\r\n        if (addedLine) {\r\n            return addedLine.quantity ?? 1;\r\n        }\r\n        const line = this.orderSnapshot.lines.find(l => l.id === lineId);\r\n        return line ? line.quantity : 1;\r\n    }\r\n\r\n    updateLineQuantity(line: OrderDetailFragment['lines'][number] | AddedLine, quantity: string) {\r\n        const { adjustOrderLines } = this.modifyOrderInput;\r\n        if (this.isAddedLine(line)) {\r\n            const row = this.modifyOrderInput.addItems?.find(\r\n                l => l.productVariantId === line.productVariant.id,\r\n            );\r\n            if (row) {\r\n                row.quantity = +quantity;\r\n            }\r\n        } else {\r\n            let row = adjustOrderLines?.find(l => l.orderLineId === line.id);\r\n            if (row && +quantity === line.quantity) {\r\n                // Remove the modification if the quantity is the same as\r\n                // the original order\r\n                adjustOrderLines?.splice(adjustOrderLines?.indexOf(row), 1);\r\n            }\r\n            if (!row) {\r\n                row = { orderLineId: line.id, quantity: +quantity };\r\n                adjustOrderLines?.push(row);\r\n            }\r\n            row.quantity = +quantity;\r\n        }\r\n    }\r\n\r\n    isAddedLine(line: OrderDetailFragment['lines'][number] | AddedLine): line is AddedLine {\r\n        return (line as AddedLine).id.startsWith('added-');\r\n    }\r\n\r\n    updateAddedItemQuantity(item: AddedLine, quantity: string) {\r\n        const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === item.productVariant.id);\r\n        if (row) {\r\n            row.quantity = +quantity;\r\n        }\r\n    }\r\n\r\n    trackByProductVariantId(index: number, item: AddedLine) {\r\n        return item.productVariant.id;\r\n    }\r\n\r\n    getSelectedItemPrice(result: ProductSelectorItem | undefined): number {\r\n        switch (result?.priceWithTax.__typename) {\r\n            case 'SinglePrice':\r\n                return result.priceWithTax.value;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    addItemToOrder(result: ProductSelectorItem | undefined) {\r\n        if (!result) {\r\n            return;\r\n        }\r\n        const customFields = this.orderLineCustomFields.length\r\n            ? this.addItemCustomFieldsForm.value\r\n            : undefined;\r\n        let row = this.modifyOrderInput.addItems?.find(l =>\r\n            this.isMatchingAddItemRow(l, result, customFields),\r\n        );\r\n        if (!row) {\r\n            row = { productVariantId: result.productVariantId, quantity: 1 };\r\n            if (customFields) {\r\n                row.customFields = customFields;\r\n            }\r\n            this.modifyOrderInput.addItems?.push(row);\r\n        } else {\r\n            row.quantity++;\r\n        }\r\n        if (customFields) {\r\n            const formGroup = new UntypedFormGroup({});\r\n            for (const [key, value] of Object.entries(customFields)) {\r\n                formGroup.addControl(key, new UntypedFormControl(value));\r\n            }\r\n            this.addItemCustomFieldsFormArray.push(formGroup);\r\n            formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                if (row) {\r\n                    row.customFields = value;\r\n                }\r\n            });\r\n        }\r\n        this.addItemCustomFieldsForm.reset({});\r\n        this.addItemSelectedVariant = undefined;\r\n        this.addedVariants.set(result.productVariantId, result);\r\n    }\r\n\r\n    getShippingLineDetails(shippingLine: OrderDetailFragment['shippingLines'][number]): {\r\n        name: string;\r\n        price: number;\r\n    } {\r\n        const updatedMethod = this.updatedShippingMethods[shippingLine.id];\r\n        if (updatedMethod) {\r\n            return {\r\n                name: updatedMethod.name || updatedMethod.code,\r\n                price: updatedMethod.priceWithTax,\r\n            };\r\n        } else {\r\n            return {\r\n                name: shippingLine.shippingMethod.name || shippingLine.shippingMethod.code,\r\n                price: shippingLine.discountedPriceWithTax,\r\n            };\r\n        }\r\n    }\r\n\r\n    setShippingMethod(shippingLineId: string) {\r\n        const currentShippingMethod =\r\n            this.updatedShippingMethods[shippingLineId] ??\r\n            this.entity?.shippingLines.find(l => l.id === shippingLineId)?.shippingMethod;\r\n        if (!currentShippingMethod) {\r\n            return;\r\n        }\r\n        this.dataService.order\r\n            .getDraftOrderEligibleShippingMethods(this.id)\r\n            .mapSingle(({ eligibleShippingMethodsForDraftOrder }) => eligibleShippingMethodsForDraftOrder)\r\n            .pipe(\r\n                switchMap(methods =>\r\n                    this.modalService\r\n                        .fromComponent(SelectShippingMethodDialogComponent, {\r\n                            locals: {\r\n                                eligibleShippingMethods: methods,\r\n                                currencyCode: this.entity?.currencyCode,\r\n                                currentSelectionId: currentShippingMethod.id,\r\n                            },\r\n                        })\r\n                        .pipe(\r\n                            map(result => {\r\n                                if (result) {\r\n                                    return methods.find(method => method.id === result);\r\n                                }\r\n                            }),\r\n                        ),\r\n                ),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.updatedShippingMethods[shippingLineId] = result;\r\n                    this.changeDetectorRef.markForCheck();\r\n                }\r\n            });\r\n    }\r\n\r\n    private isMatchingAddItemRow(\r\n        row: ModifyOrderData['addItems'][number],\r\n        result: ProductSelectorItem,\r\n        customFields: any,\r\n    ): boolean {\r\n        return (\r\n            row.productVariantId === result.productVariantId &&\r\n            JSON.stringify(row.customFields) === JSON.stringify(customFields)\r\n        );\r\n    }\r\n\r\n    removeAddedItem(id: string) {\r\n        this.modifyOrderInput.addItems = this.modifyOrderInput.addItems?.filter(l => {\r\n            const itemId = this.getIdForAddedItem(l);\r\n            return itemId !== id;\r\n        });\r\n    }\r\n\r\n    getSurchargePrices(surcharge: SurchargeInput) {\r\n        const priceWithTax = surcharge.priceIncludesTax\r\n            ? surcharge.price\r\n            : Math.round(surcharge.price * ((100 + (surcharge.taxRate || 0)) / 100));\r\n        const price = surcharge.priceIncludesTax\r\n            ? Math.round(surcharge.price / ((100 + (surcharge.taxRate || 0)) / 100))\r\n            : surcharge.price;\r\n        return {\r\n            price,\r\n            priceWithTax,\r\n        };\r\n    }\r\n\r\n    addSurcharge(value: any) {\r\n        this.modifyOrderInput.surcharges?.push(value);\r\n        this.surchargeForm.reset({\r\n            price: 0,\r\n            priceIncludesTax: true,\r\n            taxRate: 0,\r\n        });\r\n    }\r\n\r\n    removeSurcharge(index: number) {\r\n        this.modifyOrderInput.surcharges?.splice(index, 1);\r\n    }\r\n\r\n    previewAndModify(order: OrderDetailFragment) {\r\n        const modifyOrderInput: ModifyOrderData = {\r\n            ...this.modifyOrderInput,\r\n            adjustOrderLines: this.modifyOrderInput.adjustOrderLines.map(line =>\r\n                transformRelationCustomFieldInputs(simpleDeepClone(line), this.orderLineCustomFields),\r\n            ),\r\n        };\r\n        const input: ModifyOrderInput = {\r\n            ...modifyOrderInput,\r\n            ...(this.billingAddressForm.dirty ? { updateBillingAddress: this.billingAddressForm.value } : {}),\r\n            ...(this.shippingAddressForm.dirty\r\n                ? { updateShippingAddress: this.shippingAddressForm.value }\r\n                : {}),\r\n            dryRun: true,\r\n            couponCodes: this.couponCodesControl.dirty ? this.couponCodesControl.value : undefined,\r\n            note: this.note ?? '',\r\n            options: {\r\n                recalculateShipping: this.recalculateShipping,\r\n            },\r\n        };\r\n        if (Object.entries(this.updatedShippingMethods).length) {\r\n            input.shippingMethodIds = order.shippingLines.map(l =>\r\n                this.updatedShippingMethods[l.id]\r\n                    ? this.updatedShippingMethods[l.id].id\r\n                    : l.shippingMethod.id,\r\n            );\r\n        }\r\n        this.dataService.order\r\n            .modifyOrder(input)\r\n            .pipe(\r\n                switchMap(({ modifyOrder }) => {\r\n                    switch (modifyOrder.__typename) {\r\n                        case 'Order':\r\n                            return this.modalService.fromComponent(OrderEditsPreviewDialogComponent, {\r\n                                size: 'xl',\r\n                                closable: false,\r\n                                locals: {\r\n                                    order: modifyOrder,\r\n                                    orderSnapshot: this.orderSnapshot,\r\n                                    orderLineCustomFields: this.orderLineCustomFields,\r\n                                    modifyOrderInput: input,\r\n                                    addedLines: this.addedLines,\r\n                                    shippingAddressForm: this.shippingAddressForm,\r\n                                    billingAddressForm: this.billingAddressForm,\r\n                                    couponCodesControl: this.couponCodesControl,\r\n                                    updatedShippingMethods: this.updatedShippingMethods,\r\n                                },\r\n                            });\r\n                        case 'InsufficientStockError':\r\n                        case 'NegativeQuantityError':\r\n                        case 'NoChangesSpecifiedError':\r\n                        case 'OrderLimitError':\r\n                        case 'OrderModificationStateError':\r\n                        case 'PaymentMethodMissingError':\r\n                        case 'RefundPaymentIdMissingError':\r\n                        case 'CouponCodeLimitError':\r\n                        case 'CouponCodeExpiredError':\r\n                        case 'IneligibleShippingMethodError':\r\n                        case 'CouponCodeInvalidError': {\r\n                            this.notificationService.error(modifyOrder.message);\r\n                            return of(false as const);\r\n                        }\r\n                        case null:\r\n                        case undefined:\r\n                            return of(false as const);\r\n                        default:\r\n                            assertNever(modifyOrder);\r\n                    }\r\n                }),\r\n                switchMap(result => {\r\n                    if (!result || result.result === OrderEditResultType.Cancel) {\r\n                        // re-fetch so that the preview values get overwritten in the cache.\r\n                        return this.dataService.order.getOrder(this.id).mapSingle(() => false);\r\n                    } else {\r\n                        // Do the modification\r\n                        const wetRunInput = {\r\n                            ...input,\r\n                            dryRun: false,\r\n                        };\r\n                        if (result.result === OrderEditResultType.Refund) {\r\n                            wetRunInput.refunds = result.refunds;\r\n                        }\r\n                        return this.dataService.order.modifyOrder(wetRunInput).pipe(\r\n                            switchMap(({ modifyOrder }) => {\r\n                                if (modifyOrder.__typename === 'Order') {\r\n                                    const priceDelta =\r\n                                        modifyOrder.totalWithTax - this.orderSnapshot.totalWithTax;\r\n                                    const nextState =\r\n                                        0 < priceDelta ? 'ArrangingAdditionalPayment' : this.previousState;\r\n\r\n                                    return this.dataService.order\r\n                                        .transitionToState(order.id, nextState)\r\n                                        .pipe(mapTo(true));\r\n                                } else {\r\n                                    this.notificationService.error((modifyOrder as ErrorResult).message);\r\n                                    return EMPTY;\r\n                                }\r\n                            }),\r\n                        );\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.router.navigate(['../'], { relativeTo: this.route });\r\n                }\r\n            });\r\n    }\r\n\r\n    private addAddressCustomFieldsFormGroup(\r\n        parentFormGroup: UntypedFormGroup,\r\n        address?: OrderAddressFragment | null,\r\n    ) {\r\n        if (address && this.addressCustomFields.length) {\r\n            const addressCustomFieldsFormGroup = new UntypedFormGroup({});\r\n            for (const customFieldDef of this.addressCustomFields) {\r\n                const name = customFieldDef.name;\r\n                const value = (address as any).customFields?.[name];\r\n                addressCustomFieldsFormGroup.addControl(name, new UntypedFormControl(value));\r\n            }\r\n            parentFormGroup.addControl('customFields', addressCustomFieldsFormGroup);\r\n        }\r\n    }\r\n\r\n    private createOrderSnapshot(order: OrderDetailFragment): OrderSnapshot {\r\n        return {\r\n            totalWithTax: order.totalWithTax,\r\n            currencyCode: order.currencyCode,\r\n            couponCodes: order.couponCodes,\r\n            lines: [...order.lines].map(line => ({ ...line })),\r\n            shippingLines: [...order.shippingLines].map(line => ({ ...line })),\r\n        };\r\n    }\r\n\r\n    protected setFormValues(entity: OrderDetailFragment, languageCode: LanguageCode): void {\r\n        /* not used */\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n        <vdr-ab-left>\r\n            <div class=\"flex clr-align-items-center\"></div>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\r\n                {{ 'order.cancel-modification' | translate }}\r\n            </button>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<vdr-page-detail-layout *ngIf=\"entity as order\">\r\n    <vdr-page-detail-sidebar>\r\n        <vdr-card [title]=\"'order.modification-summary' | translate\">\r\n            <vdr-order-modification-summary\r\n                [orderSnapshot]=\"orderSnapshot\"\r\n                [modifyOrderInput]=\"modifyOrderInput\"\r\n                [addedLines]=\"addedLines\"\r\n                [shippingAddressForm]=\"shippingAddressForm\"\r\n                [billingAddressForm]=\"billingAddressForm\"\r\n                [couponCodesControl]=\"couponCodesControl\"\r\n                [updatedShippingMethods]=\"updatedShippingMethods\"\r\n            ></vdr-order-modification-summary>\r\n\r\n            <div *ngIf=\"!hasModifications()\" class=\"no-modifications\">\r\n                {{ 'order.no-modifications-made' | translate }}\r\n            </div>\r\n\r\n            <div class=\"summary-controls\">\r\n                <vdr-form-field [label]=\"'order.note' | translate\">\r\n                    <textarea\r\n                        [(ngModel)]=\"note\"\r\n                        name=\"note\"\r\n                        required\r\n                        [disabled]=\"!hasModifications()\"\r\n                    ></textarea>\r\n                </vdr-form-field>\r\n                <label class=\"flex items-center\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        [(ngModel)]=\"recalculateShipping\"\r\n                        [disabled]=\"!hasModifications()\"\r\n                    />\r\n                    <div class=\"ml-1\">{{ 'order.modification-recalculate-shipping' | translate }}</div>\r\n                </label>\r\n                <button\r\n                    class=\"btn btn-primary mt-2\"\r\n                    [disabled]=\"!hasModifications()\"\r\n                    (click)=\"previewAndModify(order)\"\r\n                >\r\n                    {{ 'order.preview-changes' | translate }}\r\n                </button>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.set-coupon-codes' | translate\">\r\n            <vdr-coupon-code-selector [control]=\"couponCodesControl\"></vdr-coupon-code-selector>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.shipping-address' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    class=\"button-small\"\r\n                    [title]=\"'order.edit-shipping-address' | translate\"\r\n                    (click)=\"editingShippingAddress = !editingShippingAddress\"\r\n                >\r\n                    <clr-icon shape=\"edit\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                *ngIf=\"!editingShippingAddress\"\r\n                [address]=\"shippingAddressForm.value\"\r\n            ></vdr-formatted-address>\r\n            <vdr-address-form\r\n                *ngIf=\"editingShippingAddress\"\r\n                [formGroup]=\"shippingAddressForm\"\r\n                [availableCountries]=\"availableCountries$ | async\"\r\n                [customFields]=\"addressCustomFields\"\r\n            ></vdr-address-form>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.billing-address' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    class=\"button-small\"\r\n                    [title]=\"'order.edit-billing-address' | translate\"\r\n                    (click)=\"editingBillingAddress = !editingBillingAddress\"\r\n                >\r\n                    <clr-icon shape=\"edit\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                *ngIf=\"!editingBillingAddress\"\r\n                [address]=\"billingAddressForm.value\"\r\n            ></vdr-formatted-address>\r\n            <vdr-address-form\r\n                *ngIf=\"editingBillingAddress\"\r\n                [formGroup]=\"billingAddressForm\"\r\n                [availableCountries]=\"availableCountries$ | async\"\r\n                [customFields]=\"addressCustomFields\"\r\n            ></vdr-address-form>\r\n        </vdr-card>\r\n    </vdr-page-detail-sidebar>\r\n\r\n    <vdr-page-block>\r\n        <vdr-card [paddingX]=\"false\">\r\n            <vdr-data-table-2 id=\"modify-order\" class=\"order-table\" [items]=\"order.lines.concat(addedLines)\">\r\n                <!-- Here we define all the available columns -->\r\n                <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.id }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    id=\"created-at\"\r\n                    [heading]=\"'common.created-at' | translate\"\r\n                    [hiddenByDefault]=\"true\"\r\n                >\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.createdAt | localeDate : 'short' }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    id=\"updated-at\"\r\n                    [heading]=\"'common.updated-at' | translate\"\r\n                    [hiddenByDefault]=\"true\"\r\n                >\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.updatedAt | localeDate : 'short' }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n                    <ng-template let-line=\"item\">\r\n                        <div class=\"image-placeholder\">\r\n                            <img\r\n                                *ngIf=\"line.featuredAsset as asset; else imagePlaceholder\"\r\n                                [src]=\"asset | assetPreview : 'tiny'\"\r\n                            />\r\n                            <ng-template #imagePlaceholder>\r\n                                <div class=\"placeholder\">\r\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                                </div>\r\n                            </ng-template>\r\n                        </div>\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    id=\"product-name\"\r\n                    [heading]=\"'order.product-name' | translate\"\r\n                    [optional]=\"false\"\r\n                >\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.productVariant.name }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column id=\"product-sku\" [heading]=\"'order.product-sku' | translate\">\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.productVariant.sku }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column id=\"unit-price\" [heading]=\"'order.unit-price' | translate\">\r\n                    <ng-template let-line=\"item\">\r\n                        <div class=\"text-center\">\r\n                            <div>{{ line.unitPriceWithTax | localeCurrency : order.currencyCode }}</div>\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.unitPrice | localeCurrency : order.currencyCode }}\r\n                            </div>\r\n                        </div>\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column id=\"quantity\" [heading]=\"'order.quantity' | translate\" [optional]=\"false\">\r\n                    <ng-template let-line=\"item\">\r\n                        <input\r\n                            type=\"number\"\r\n                            class=\"draft-qty mr-1\"\r\n                            min=\"0\"\r\n                            [value]=\"getInitialLineQuantity(line.id)\"\r\n                            (input)=\"updateLineQuantity(line, $event.target.value)\"\r\n                        />\r\n                        <button\r\n                            class=\"button-small\"\r\n                            *ngIf=\"isAddedLine(line)\"\r\n                            (click)=\"removeAddedItem(line.id)\"\r\n                        >\r\n                            <clr-icon shape=\"trash\"></clr-icon>\r\n                        </button>\r\n                        <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                        <vdr-line-fulfillment\r\n                            [line]=\"line\"\r\n                            [allOrderFulfillments]=\"order.fulfillments\"\r\n                            [orderState]=\"order.state\"\r\n                        ></vdr-line-fulfillment>\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    *ngFor=\"let customField of orderLineCustomFields\"\r\n                    [id]=\"customField.name\"\r\n                    [heading]=\"customField | customFieldLabel : (uiLanguage$ | async)\"\r\n                    [hiddenByDefault]=\"true\"\r\n                >\r\n                    <ng-template let-line=\"item\" let-index=\"index\">\r\n                        <vdr-custom-field-control\r\n                            [compact]=\"true\"\r\n                            [entityName]=\"'OrderLine'\"\r\n                            [customField]=\"customField\"\r\n                            [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.at(index)\"\r\n                        />\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n            </vdr-data-table-2>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.add-item-to-order' | translate\">\r\n            <vdr-product-variant-selector class=\"mb-4\" (productSelected)=\"addItemSelectedVariant = $event\">\r\n            </vdr-product-variant-selector>\r\n            <div class=\"flex\">\r\n                <div>\r\n                    <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb-4\">\r\n                        <img\r\n                            *ngIf=\"addItemSelectedVariant.productAsset as asset\"\r\n                            [src]=\"asset | assetPreview : 'tiny'\"\r\n                            class=\"mr-4 add-item-thumb\"\r\n                        />\r\n                        <div>\r\n                            <strong class=\"mr-4\">{{ addItemSelectedVariant.productVariantName }}</strong>\r\n                            <small>{{ addItemSelectedVariant.sku }}</small>\r\n                            <div>\r\n                                {{\r\n                                    getSelectedItemPrice(addItemSelectedVariant)\r\n                                        | localeCurrency : order.currencyCode\r\n                                }}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf=\"addItemSelectedVariant\">\r\n                        <vdr-tabbed-custom-fields\r\n                            entityName=\"Order\"\r\n                            [customFields]=\"orderLineCustomFields\"\r\n                            [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\r\n                        ></vdr-tabbed-custom-fields>\r\n                    </div>\r\n                </div>\r\n                <div class=\"flex-spacer\"></div>\r\n                <div>\r\n                    <button\r\n                        *ngIf=\"addItemSelectedVariant\"\r\n                        class=\"btn btn-secondary\"\r\n                        [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\r\n                        (click)=\"addItemToOrder(addItemSelectedVariant)\"\r\n                    >\r\n                        {{ 'order.add-item-to-order' | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.shipping' | translate\">\r\n            <div *ngFor=\"let shippingLine of order.shippingLines\" class=\"flex items-center\">\r\n                <ng-container *ngIf=\"getShippingLineDetails(shippingLine) as details\">\r\n                    <div>{{ details.name }}:</div>\r\n                    <div class=\"mx-1\">\r\n                        {{ details.price | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                    <button class=\"button-small\" (click)=\"setShippingMethod(shippingLine.id)\">\r\n                        {{ 'order.set-shipping-method' | translate }}\r\n                    </button>\r\n                </ng-container>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.add-surcharge' | translate\">\r\n            <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\r\n                        ><input id=\"description\" type=\"text\" formControlName=\"description\"\r\n                    /></vdr-form-field>\r\n                    <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\r\n                        ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\r\n                    /></vdr-form-field>\r\n                    <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\">\r\n                        <vdr-currency-input\r\n                            [currencyCode]=\"order.currencyCode\"\r\n                            id=\"price\"\r\n                            formControlName=\"price\"\r\n                        ></vdr-currency-input>\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        [label]=\"\r\n                            'catalog.price-includes-tax-at'\r\n                                | translate : { rate: surchargeForm.get('taxRate')?.value ?? 0 }\r\n                        \"\r\n                        for=\"priceIncludesTax\"\r\n                        ><input\r\n                            id=\"priceIncludesTax\"\r\n                            type=\"checkbox\"\r\n                            clrCheckbox\r\n                            formControlName=\"priceIncludesTax\"\r\n                    /></vdr-form-field>\r\n                    <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\">\r\n                        <vdr-affixed-input suffix=\"%\"\r\n                            ><input id=\"taxRate\" type=\"number\" min=\"0\" max=\"100\" formControlName=\"taxRate\"\r\n                        /></vdr-affixed-input>\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\r\n                        ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\r\n                    /></vdr-form-field>\r\n                </div>\r\n                <button\r\n                    class=\"btn btn-secondary mt-2\"\r\n                    [disabled]=\"\r\n                        surchargeForm.invalid ||\r\n                        surchargeForm.pristine ||\r\n                        surchargeForm.get('price')?.value === 0 ||\r\n                        !surchargeForm.get('description')?.value\r\n                    \"\r\n                >\r\n                    {{ 'order.add-surcharge' | translate }}\r\n                </button>\r\n            </form>\r\n        </vdr-card>\r\n    </vdr-page-block>\r\n</vdr-page-detail-layout>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    ChannelService,\r\n    GetOrderListDocument,\r\n    getOrderStateTranslationToken,\r\n    LogicalOperator,\r\n    OrderListOptions,\r\n    OrderType,\r\n    ServerConfigService,\r\n    TypedBaseListComponent,\r\n} from '@vendure/admin-ui/core';\r\nimport { Order } from '@vendure/common/lib/generated-types';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-order-list',\r\n    templateUrl: './order-list.component.html',\r\n    styleUrls: ['./order-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderListComponent\r\n    extends TypedBaseListComponent<typeof GetOrderListDocument, 'orders'>\r\n    implements OnInit\r\n{\r\n    dataTableListId = 'order-list';\r\n    orderStates = this.serverConfigService.getOrderProcessStates().map(item => item.name);\r\n    readonly OrderType = OrderType;\r\n    readonly customFields = this.getCustomFieldConfig('Order');\r\n    readonly filters = this.createFilterCollection()\r\n        .addIdFilter()\r\n        .addDateFilters()\r\n        .addFilter({\r\n            name: 'active',\r\n            type: { kind: 'boolean' },\r\n            label: _('order.filter-is-active'),\r\n            filterField: 'active',\r\n        })\r\n        .addFilter({\r\n            name: 'totalWithTax',\r\n            type: { kind: 'number', inputType: 'currency', currencyCode: 'USD' },\r\n            label: _('order.total'),\r\n            filterField: 'totalWithTax',\r\n        })\r\n        .addFilter({\r\n            name: 'state',\r\n            type: {\r\n                kind: 'select',\r\n                options: this.orderStates.map(s => ({ value: s, label: getOrderStateTranslationToken(s) })),\r\n            },\r\n            label: _('order.state'),\r\n            filterField: 'state',\r\n        })\r\n        .addFilter({\r\n            name: 'type',\r\n            type: {\r\n                kind: 'select',\r\n                options: [\r\n                    { value: OrderType.Regular, label: _('order.order-type-regular') },\r\n                    { value: OrderType.Aggregate, label: _('order.order-type-aggregate') },\r\n                    { value: OrderType.Seller, label: _('order.order-type-seller') },\r\n                ],\r\n            },\r\n            label: _('order.order-type'),\r\n            filterField: 'type',\r\n        })\r\n        .addFilter({\r\n            name: 'orderPlacedAt',\r\n            type: { kind: 'dateRange' },\r\n            label: _('order.placed-at'),\r\n            filterField: 'orderPlacedAt',\r\n        })\r\n        .addFilter({\r\n            name: 'customerLastName',\r\n            type: { kind: 'text' },\r\n            label: _('customer.last-name'),\r\n            filterField: 'customerLastName',\r\n        })\r\n        .addFilter({\r\n            name: 'transactionId',\r\n            type: { kind: 'text' },\r\n            label: _('order.transaction-id'),\r\n            filterField: 'transactionId',\r\n        })\r\n        .addCustomFieldFilters(this.customFields)\r\n        .connectToRoute(this.route);\r\n\r\n    readonly sorts = this.createSortCollection()\r\n        .defaultSort('updatedAt', 'DESC')\r\n        .addSort({ name: 'id' })\r\n        .addSort({ name: 'createdAt' })\r\n        .addSort({ name: 'updatedAt' })\r\n        .addSort({ name: 'orderPlacedAt' })\r\n        .addSort({ name: 'customerLastName' })\r\n        .addSort({ name: 'state' })\r\n        .addSort({ name: 'totalWithTax' })\r\n        .addCustomFieldSorts(this.customFields)\r\n        .connectToRoute(this.route);\r\n\r\n    canCreateDraftOrder = false;\r\n    private activeChannelIsDefaultChannel = false;\r\n\r\n    constructor(\r\n        protected serverConfigService: ServerConfigService,\r\n        private channelService: ChannelService,\r\n    ) {\r\n        super();\r\n        super.configure({\r\n            document: GetOrderListDocument,\r\n            getItems: result => result.orders,\r\n            setVariables: (skip, take) => this.createQueryOptions(skip, take, this.searchTermControl.value),\r\n            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],\r\n        });\r\n\r\n        this.canCreateDraftOrder = !!this.serverConfigService\r\n            .getOrderProcessStates()\r\n            .find(state => state.name === 'Created')\r\n            ?.to.includes('Draft');\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        const isDefaultChannel$ = this.channelService.defaultChannelIsActive$.pipe(\r\n            tap(isDefault => (this.activeChannelIsDefaultChannel = isDefault)),\r\n        );\r\n        super.refreshListOnChanges(this.filters.valueChanges, this.sorts.valueChanges, isDefaultChannel$);\r\n    }\r\n\r\n    private createQueryOptions(\r\n        // eslint-disable-next-line @typescript-eslint/no-shadow\r\n        skip: number,\r\n        take: number,\r\n        searchTerm: string | null,\r\n    ): { options: OrderListOptions } {\r\n        let filterInput = this.filters.createFilterInput();\r\n        if (this.activeChannelIsDefaultChannel) {\r\n            filterInput = {\r\n                ...(filterInput ?? {}),\r\n            };\r\n        }\r\n        if (searchTerm) {\r\n            filterInput = {\r\n                code: {\r\n                    contains: searchTerm,\r\n                },\r\n                customerLastName: {\r\n                    contains: searchTerm,\r\n                },\r\n                transactionId: {\r\n                    contains: searchTerm,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            options: {\r\n                skip,\r\n                take,\r\n                filter: {\r\n                    ...(filterInput ?? {}),\r\n                },\r\n                filterOperator: searchTerm ? LogicalOperator.OR : LogicalOperator.AND,\r\n                sort: this.sorts.createSortInput(),\r\n            },\r\n        };\r\n    }\r\n\r\n    getShippingNames(order: Order) {\r\n        if (order.shippingLines.length) {\r\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"order-list\" />\r\n            <ng-container *ngIf=\"canCreateDraftOrder\">\r\n                <a class=\"btn\" *vdrIfPermissions=\"['CreateOrder']\" [routerLink]=\"['./draft/create']\">\r\n                    <clr-icon shape=\"plus\"></clr-icon>\r\n                    {{ 'catalog.create-draft-order' | translate }}\r\n                </a>\r\n            </ng-container>\r\n            <vdr-action-bar-dropdown-menu locationId=\"order-list\" />\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<vdr-data-table-2\r\n    class=\"mt-2\"\r\n    [id]=\"dataTableListId\"\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    [filters]=\"filters\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\r\n>\r\n    <vdr-bulk-action-menu\r\n        locationId=\"order-list\"\r\n        [hostComponent]=\"this\"\r\n        [selectionManager]=\"selectionManager\"\r\n    ></vdr-bulk-action-menu>\r\n    <vdr-dt2-search\r\n        [searchTermControl]=\"searchTermControl\"\r\n        [searchTermPlaceholder]=\"'order.search-by-order-filters' | translate\"\r\n    />\r\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.createdAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\">\r\n        <ng-template let-order=\"item\">\r\n            <a class=\"button-ghost\" [routerLink]=\"order.state === 'Draft' ? ['./draft', order.id] : ['./', order.id]\"\r\n                ><span>{{ order.code }}</span>\r\n                <clr-icon shape=\"arrow right\"></clr-icon>\r\n            </a>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.customer' | translate\" id=\"customer\" [sort]=\"sorts.get('customerLastName')\">\r\n        <ng-template let-order=\"item\">\r\n            <vdr-customer-label\r\n                [customer]=\"order.customer\"\r\n                (click)=\"$event.stopPropagation()\"\r\n            ></vdr-customer-label>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.order-type' | translate\" id=\"order-type\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-order=\"item\">\r\n            <vdr-chip *ngIf=\"order.type === OrderType.Regular\">{{ 'order.order-type-regular' | translate }}</vdr-chip>\r\n            <vdr-chip *ngIf=\"order.type === OrderType.Aggregate\">{{ 'order.order-type-aggregate' | translate }}</vdr-chip>\r\n            <vdr-chip *ngIf=\"order.type === OrderType.Seller\">{{ 'order.order-type-seller' | translate }}</vdr-chip>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.state' | translate\" id=\"state\" [sort]=\"sorts.get('state')\">\r\n        <ng-template let-order=\"item\">\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.total' | translate\" id=\"total\" [sort]=\"sorts.get('totalWithTax')\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.updatedAt | timeAgo }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.placed-at' | translate\" id=\"placed-at\" [sort]=\"sorts.get('orderPlacedAt')\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.orderPlacedAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.shipping' | translate\" id=\"shipping\">\r\n        <ng-template let-order=\"item\">\r\n            {{ getShippingNames(order) }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-custom-field-column\r\n        *ngFor=\"let customField of customFields\"\r\n        [customField]=\"customField\"\r\n        [sorts]=\"sorts\"\r\n    />\r\n</vdr-data-table-2>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CurrencyCode, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-refund-detail',\r\n    templateUrl: './refund-detail.component.html',\r\n    styleUrls: ['./refund-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundDetailComponent {\r\n    @Input() refund: NonNullable<OrderDetailFragment['payments']>[number]['refunds'][number];\r\n    @Input() currencyCode: CurrencyCode;\r\n}\r\n","<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ refund.total | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"refund.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ refund.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n","import { ADDRESS_FRAGMENT } from '@vendure/admin-ui/core';\r\nimport { gql } from 'apollo-angular';\r\n\r\nexport const GET_CUSTOMER_ADDRESSES = gql`\r\n    query GetCustomerAddresses($customerId: ID!) {\r\n        customer(id: $customerId) {\r\n            id\r\n            addresses {\r\n                ...Address\r\n            }\r\n        }\r\n    }\r\n    ${ADDRESS_FRAGMENT}\r\n`;\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { DataService, GetOrderStateQuery, GetOrderStateQueryVariables } from '@vendure/admin-ui/core';\r\nimport { gql } from 'apollo-angular';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport const GET_ORDER_STATE = gql`\r\n    query GetOrderState($id: ID!) {\r\n        order(id: $id) {\r\n            id\r\n            state\r\n        }\r\n    }\r\n`;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrderGuard {\r\n    constructor(private dataService: DataService, private router: Router) {}\r\n\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot,\r\n    ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n        const isDraft = state.url.includes('orders/draft');\r\n        const isModifying = state.url.includes('/modify');\r\n        const id = route.paramMap.get('id');\r\n        if (isDraft) {\r\n            if (id === 'create') {\r\n                return this.dataService.order\r\n                    .createDraftOrder()\r\n                    .pipe(\r\n                        map(({ createDraftOrder }) =>\r\n                            this.router.parseUrl(`/orders/draft/${createDraftOrder.id}`),\r\n                        ),\r\n                    );\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return (\r\n                this.dataService\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    .query<GetOrderStateQuery, GetOrderStateQueryVariables>(GET_ORDER_STATE, { id: id! })\r\n                    .single$.pipe(\r\n                        map(({ order }) => {\r\n                            if (order?.state === 'Modifying' && !isModifying) {\r\n                                return this.router.parseUrl(`/orders/${id}/modify`);\r\n                            } else {\r\n                                return true;\r\n                            }\r\n                        }),\r\n                    )\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { PageComponent, PageService } from '@vendure/admin-ui/core';\nimport { OrderGuard } from './providers/routing/order.guard';\n\nexport const createRoutes = (pageService: PageService): Route[] => [\n    {\n        path: '',\n        component: PageComponent,\n        data: {\n            locationId: 'order-list',\n            breadcrumb: _('breadcrumb.orders'),\n        },\n        children: pageService.getPageTabRoutes('order-list'),\n    },\n    {\n        path: 'draft/:id',\n        component: PageComponent,\n        canActivate: [OrderGuard],\n        data: {\n            locationId: 'draft-order-detail',\n            breadcrumb: { label: _('breadcrumb.orders'), link: ['../'] },\n        },\n        children: pageService.getPageTabRoutes('draft-order-detail'),\n    },\n    {\n        path: ':id',\n        component: PageComponent,\n        canActivate: [OrderGuard],\n        data: {\n            locationId: 'order-detail',\n            breadcrumb: { label: _('breadcrumb.orders'), link: ['../'] },\n        },\n        children: pageService.getPageTabRoutes('order-detail'),\n    },\n    {\n        path: ':aggregateOrderId/seller-orders/:id',\n        component: PageComponent,\n        canActivate: [OrderGuard],\n        data: {\n            locationId: 'order-detail',\n            breadcrumb: { label: _('breadcrumb.orders'), link: ['../'] },\n        },\n        children: pageService.getPageTabRoutes('order-detail'),\n    },\n    {\n        path: ':id/modify',\n        component: PageComponent,\n        canActivate: [OrderGuard],\n        data: {\n            locationId: 'modify-order',\n            breadcrumb: { label: _('breadcrumb.orders'), link: ['../'] },\n        },\n        children: pageService.getPageTabRoutes('modify-order'),\n    },\n];\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, ROUTES } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    detailComponentWithResolver,\r\n    OrderDetailQueryDocument,\r\n    OrderType,\r\n    PageService,\r\n    SharedModule,\r\n} from '@vendure/admin-ui/core';\r\n\r\nimport { AddManualPaymentDialogComponent } from './components/add-manual-payment-dialog/add-manual-payment-dialog.component';\r\nimport { CancelOrderDialogComponent } from './components/cancel-order-dialog/cancel-order-dialog.component';\r\nimport { CouponCodeSelectorComponent } from './components/coupon-code-selector/coupon-code-selector.component';\r\nimport { DraftOrderDetailComponent } from './components/draft-order-detail/draft-order-detail.component';\r\nimport { DraftOrderVariantSelectorComponent } from './components/draft-order-variant-selector/draft-order-variant-selector.component';\r\nimport { FulfillOrderDialogComponent } from './components/fulfill-order-dialog/fulfill-order-dialog.component';\r\nimport { FulfillmentCardComponent } from './components/fulfillment-card/fulfillment-card.component';\r\nimport { FulfillmentDetailComponent } from './components/fulfillment-detail/fulfillment-detail.component';\r\nimport { FulfillmentStateLabelComponent } from './components/fulfillment-state-label/fulfillment-state-label.component';\r\nimport { LineFulfillmentComponent } from './components/line-fulfillment/line-fulfillment.component';\r\nimport { LineRefundsComponent } from './components/line-refunds/line-refunds.component';\r\nimport { ModificationDetailComponent } from './components/modification-detail/modification-detail.component';\r\nimport { OrderCustomFieldsCardComponent } from './components/order-custom-fields-card/order-custom-fields-card.component';\r\nimport { OrderTotalColumnComponent } from './components/order-data-table/order-total-column.component';\r\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\r\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\r\nimport { OrderEditsPreviewDialogComponent } from './components/order-edits-preview-dialog/order-edits-preview-dialog.component';\r\nimport { OrderHistoryEntryHostComponent } from './components/order-history/order-history-entry-host.component';\r\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\r\nimport { OrderListComponent } from './components/order-list/order-list.component';\r\nimport { OrderPaymentCardComponent } from './components/order-payment-card/order-payment-card.component';\r\nimport { OrderProcessGraphDialogComponent } from './components/order-process-graph-dialog/order-process-graph-dialog.component';\r\nimport { OrderProcessEdgeComponent } from './components/order-process-graph/order-process-edge.component';\r\nimport { OrderProcessGraphComponent } from './components/order-process-graph/order-process-graph.component';\r\nimport { OrderProcessNodeComponent } from './components/order-process-graph/order-process-node.component';\r\nimport { OrderStateSelectDialogComponent } from './components/order-state-select-dialog/order-state-select-dialog.component';\r\nimport { OrderTableComponent } from './components/order-table/order-table.component';\r\nimport { PaymentDetailComponent } from './components/payment-detail/payment-detail.component';\r\nimport { PaymentStateLabelComponent } from './components/payment-state-label/payment-state-label.component';\r\nimport { RefundDetailComponent } from './components/refund-detail/refund-detail.component';\r\nimport { RefundOrderDialogComponent } from './components/refund-order-dialog/refund-order-dialog.component';\r\nimport { RefundStateLabelComponent } from './components/refund-state-label/refund-state-label.component';\r\nimport { SelectAddressDialogComponent } from './components/select-address-dialog/select-address-dialog.component';\r\nimport { SelectCustomerDialogComponent } from './components/select-customer-dialog/select-customer-dialog.component';\r\nimport { SelectShippingMethodDialogComponent } from './components/select-shipping-method-dialog/select-shipping-method-dialog.component';\r\nimport { SellerOrdersCardComponent } from './components/seller-orders-card/seller-orders-card.component';\r\nimport { SettleRefundDialogComponent } from './components/settle-refund-dialog/settle-refund-dialog.component';\r\nimport { SimpleItemListComponent } from './components/simple-item-list/simple-item-list.component';\r\nimport { createRoutes } from './order.routes';\r\nimport { OrderDataTableComponent } from './components/order-data-table/order-data-table.component';\r\nimport { PaymentForRefundSelectorComponent } from './components/payment-for-refund-selector/payment-for-refund-selector.component';\r\nimport { OrderModificationSummaryComponent } from './components/order-modification-summary/order-modification-summary.component';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild([])],\r\n    providers: [\r\n        {\r\n            provide: ROUTES,\r\n            useFactory: (pageService: PageService) => createRoutes(pageService),\r\n            multi: true,\r\n            deps: [PageService],\r\n        },\r\n    ],\r\n    declarations: [\r\n        OrderListComponent,\r\n        OrderDetailComponent,\r\n        FulfillOrderDialogComponent,\r\n        LineFulfillmentComponent,\r\n        RefundOrderDialogComponent,\r\n        CancelOrderDialogComponent,\r\n        PaymentStateLabelComponent,\r\n        LineRefundsComponent,\r\n        OrderPaymentCardComponent,\r\n        RefundStateLabelComponent,\r\n        SettleRefundDialogComponent,\r\n        OrderHistoryComponent,\r\n        FulfillmentDetailComponent,\r\n        PaymentDetailComponent,\r\n        SimpleItemListComponent,\r\n        OrderCustomFieldsCardComponent,\r\n        OrderProcessGraphComponent,\r\n        OrderProcessNodeComponent,\r\n        OrderProcessEdgeComponent,\r\n        OrderProcessGraphDialogComponent,\r\n        FulfillmentStateLabelComponent,\r\n        FulfillmentCardComponent,\r\n        OrderEditorComponent,\r\n        OrderTableComponent,\r\n        OrderEditsPreviewDialogComponent,\r\n        ModificationDetailComponent,\r\n        AddManualPaymentDialogComponent,\r\n        OrderStateSelectDialogComponent,\r\n        DraftOrderDetailComponent,\r\n        DraftOrderVariantSelectorComponent,\r\n        SelectCustomerDialogComponent,\r\n        SelectAddressDialogComponent,\r\n        CouponCodeSelectorComponent,\r\n        SelectShippingMethodDialogComponent,\r\n        OrderHistoryEntryHostComponent,\r\n        SellerOrdersCardComponent,\r\n        OrderDataTableComponent,\r\n        OrderTotalColumnComponent,\r\n        PaymentForRefundSelectorComponent,\r\n        OrderModificationSummaryComponent,\r\n        RefundDetailComponent,\r\n    ],\r\n    exports: [OrderCustomFieldsCardComponent],\r\n})\r\nexport class OrderModule {\r\n    private static hasRegisteredTabsAndBulkActions = false;\r\n\r\n    constructor(pageService: PageService) {\r\n        if (OrderModule.hasRegisteredTabsAndBulkActions) {\r\n            return;\r\n        }\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'order-list',\r\n            tab: _('order.orders'),\r\n            route: '',\r\n            component: OrderListComponent,\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'order-detail',\r\n            tab: _('order.order'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: OrderDetailComponent,\r\n                query: OrderDetailQueryDocument,\r\n                entityKey: 'order',\r\n                getBreadcrumbs: entity =>\r\n                    entity?.type !== OrderType.Seller || !entity?.aggregateOrder\r\n                        ? [\r\n                              {\r\n                                  label: `${entity?.code}`,\r\n                                  link: [entity?.id],\r\n                              },\r\n                          ]\r\n                        : [\r\n                              {\r\n                                  label: `${entity?.aggregateOrder?.code}`,\r\n                                  link: ['/orders/', entity?.aggregateOrder?.id],\r\n                              },\r\n                              {\r\n                                  label: _('breadcrumb.seller-orders'),\r\n                                  link: ['/orders/', entity?.aggregateOrder?.id],\r\n                              },\r\n                              {\r\n                                  label: `${entity?.code}`,\r\n                                  link: [entity?.id],\r\n                              },\r\n                          ],\r\n            }),\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'draft-order-detail',\r\n            tab: _('order.order'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: DraftOrderDetailComponent,\r\n                query: OrderDetailQueryDocument,\r\n                entityKey: 'order',\r\n                getBreadcrumbs: entity => [\r\n                    {\r\n                        label: _('order.draft-order'),\r\n                        link: [entity?.id],\r\n                    },\r\n                ],\r\n            }),\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'modify-order',\r\n            tab: _('order.order'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: OrderEditorComponent,\r\n                query: OrderDetailQueryDocument,\r\n                entityKey: 'order',\r\n                getBreadcrumbs: entity => [\r\n                    {\r\n                        label: entity?.code || 'order',\r\n                        link: ['/orders/', entity?.id],\r\n                    },\r\n                    {\r\n                        label: _('breadcrumb.modifying-order'),\r\n                        link: [entity?.id],\r\n                    },\r\n                ],\r\n            }),\r\n        });\r\n        OrderModule.hasRegisteredTabsAndBulkActions = true;\r\n    }\r\n}\r\n","// This file was generated by the build-public-api.ts script\nexport * from './common/get-refundable-payments';\nexport * from './common/modify-order-types';\nexport * from './components/add-manual-payment-dialog/add-manual-payment-dialog.component';\nexport * from './components/cancel-order-dialog/cancel-order-dialog.component';\nexport * from './components/coupon-code-selector/coupon-code-selector.component';\nexport * from './components/draft-order-detail/draft-order-detail.component';\nexport * from './components/draft-order-variant-selector/draft-order-variant-selector.component';\nexport * from './components/fulfill-order-dialog/fulfill-order-dialog.component';\nexport * from './components/fulfillment-card/fulfillment-card.component';\nexport * from './components/fulfillment-detail/fulfillment-detail.component';\nexport * from './components/fulfillment-state-label/fulfillment-state-label.component';\nexport * from './components/line-fulfillment/line-fulfillment.component';\nexport * from './components/line-refunds/line-refunds.component';\nexport * from './components/modification-detail/modification-detail.component';\nexport * from './components/order-custom-fields-card/order-custom-fields-card.component';\nexport * from './components/order-data-table/order-data-table.component';\nexport * from './components/order-data-table/order-total-column.component';\nexport * from './components/order-detail/order-detail.component';\nexport * from './components/order-editor/order-editor.component';\nexport * from './components/order-edits-preview-dialog/order-edits-preview-dialog.component';\nexport * from './components/order-history/order-history-entry-host.component';\nexport * from './components/order-history/order-history.component';\nexport * from './components/order-list/order-list.component';\nexport * from './components/order-modification-summary/order-modification-summary.component';\nexport * from './components/order-payment-card/order-payment-card.component';\nexport * from './components/order-process-graph/constants';\nexport * from './components/order-process-graph/order-process-edge.component';\nexport * from './components/order-process-graph/order-process-graph.component';\nexport * from './components/order-process-graph/order-process-node.component';\nexport * from './components/order-process-graph/types';\nexport * from './components/order-process-graph-dialog/order-process-graph-dialog.component';\nexport * from './components/order-state-select-dialog/order-state-select-dialog.component';\nexport * from './components/order-table/order-table.component';\nexport * from './components/payment-detail/payment-detail.component';\nexport * from './components/payment-for-refund-selector/payment-for-refund-selector.component';\nexport * from './components/payment-state-label/payment-state-label.component';\nexport * from './components/refund-detail/refund-detail.component';\nexport * from './components/refund-order-dialog/refund-order-dialog.component';\nexport * from './components/refund-state-label/refund-state-label.component';\nexport * from './components/select-address-dialog/select-address-dialog.component';\nexport * from './components/select-address-dialog/select-address-dialog.graphql';\nexport * from './components/select-customer-dialog/select-customer-dialog.component';\nexport * from './components/select-shipping-method-dialog/select-shipping-method-dialog.component';\nexport * from './components/seller-orders-card/seller-orders-card.component';\nexport * from './components/seller-orders-card/seller-orders-card.graphql';\nexport * from './components/settle-refund-dialog/settle-refund-dialog.component';\nexport * from './components/simple-item-list/simple-item-list.component';\nexport * from './order.module';\nexport * from './order.routes';\nexport * from './providers/order-transition.service';\nexport * from './providers/routing/order.guard';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i3","i4","i5","_","i2","i6","i1","i5.LineFulfillmentComponent","i6.LineRefundsComponent","i7.OrderDataTableComponent","i8.OrderTotalColumnComponent","i9","i2.OrderTransitionService","i5.OrderCustomFieldsCardComponent","i6.OrderTableComponent","i7.DraftOrderVariantSelectorComponent","i8.CouponCodeSelectorComponent","i3.SimpleItemListComponent","i4.FulfillmentDetailComponent","i5.FulfillmentStateLabelComponent","i2.OrderProcessNodeComponent","i3.OrderProcessEdgeComponent","i2.OrderProcessGraphComponent","i7.PaymentForRefundSelectorComponent","i8","i5.PaymentStateLabelComponent","i6.RefundStateLabelComponent","i7.PaymentDetailComponent","i6.FulfillmentDetailComponent","i8.SimpleItemListComponent","i9.ModificationDetailComponent","i10.OrderHistoryEntryHostComponent","i11","i6.OrderPaymentCardComponent","i7.OrderHistoryComponent","i8.FulfillmentCardComponent","i9.OrderTableComponent","i10.SellerOrdersCardComponent","i5.OrderTableComponent","i6.PaymentForRefundSelectorComponent","i7.OrderModificationSummaryComponent","i6.LineFulfillmentComponent","i7.LineRefundsComponent","i9.OrderModificationSummaryComponent","i10"],"mappings":"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"}