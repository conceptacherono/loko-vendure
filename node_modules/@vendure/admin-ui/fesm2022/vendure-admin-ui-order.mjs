import * as i2 from '@angular/forms';
import { FormControl, Validators, UntypedFormGroup, UntypedFormControl, FormGroup, UntypedFormArray } from '@angular/forms';
import { summate, notNullOrUndefined, isObject, assertNever } from '@vendure/common/lib/shared-utils';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, EventEmitter, Input, Output, Injectable, ContentChildren, ViewChildren, HostBinding, ViewContainerRef, ViewChild, NgModule } from '@angular/core';
import * as i1 from '@vendure/admin-ui/core';
import { GetAddManualPaymentMethodListDocument, getAppConfig, GetCouponCodeSelectorPromotionListDocument, GetCustomerAddressesDocument, HistoryEntryType, SortOrder, DataTable2ColumnComponent, DataTable2Component, AdjustmentType, TypedBaseDetailComponent, DeletionResult, configurableDefinitionToInstance, GlobalFlag, configurableOperationValueIsValid, toConfigurableOperationInput, ORDER_DETAIL_FRAGMENT, getCustomFieldsDefaults, SetOrderCustomerDocument, EditNoteDialogComponent, transformRelationCustomFieldInputs, TypedBaseListComponent, OrderType, getOrderStateTranslationToken, GetOrderListDocument, LogicalOperator, ADDRESS_FRAGMENT, PageComponent, detailComponentWithResolver, OrderDetailQueryDocument, SharedModule, PageService } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import * as i5 from '@ng-select/ng-select';
import * as i2$1 from '@angular/common';
import * as i4 from '@ngx-translate/core';
import { marker } from '@biesbjerg/ngx-translate-extract-marker';
import * as i3 from '@clr/angular';
import { Subject, concat, of, EMPTY, forkJoin, combineLatest, BehaviorSubject } from 'rxjs';
import { debounceTime, distinctUntilChanged, switchMap, map, startWith, tap, catchError, retryWhen, delay, take, mapTo, takeUntil, shareReplay } from 'rxjs/operators';
import { pick } from '@vendure/common/lib/pick';
import * as i1$1 from '@angular/router';
import { ROUTES, RouterModule } from '@angular/router';
import * as i3$1 from '@angular/cdk/bidi';
import * as i5$1 from 'ngx-pagination';
import { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';
import { simpleDeepClone } from '@vendure/common/lib/simple-deep-clone';

function getRefundablePayments(payments) {
    const settledPayments = (payments || []).filter(p => p.state === 'Settled');
    return settledPayments.map((payment, index) => {
        const refundableAmount = payment.amount -
            summate(payment.refunds.filter(r => r.state !== 'Failed'), 'total');
        return {
            ...payment,
            refundableAmount,
            amountToRefundControl: new FormControl(0, {
                nonNullable: true,
                validators: [Validators.min(0), Validators.max(refundableAmount)],
            }),
            selected: index === 0,
        };
    });
}

const GET_PAYMENT_METHODS_FOR_MANUAL_ADD = gql `
    query GetAddManualPaymentMethodList($options: PaymentMethodListOptions!) {
        paymentMethods(options: $options) {
            items {
                id
                createdAt
                updatedAt
                name
                code
                description
                enabled
            }
            totalItems
        }
    }
`;
class AddManualPaymentDialogComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.form = new UntypedFormGroup({
            method: new UntypedFormControl('', Validators.required),
            transactionId: new UntypedFormControl('', Validators.required),
        });
    }
    ngOnInit() {
        this.paymentMethods$ = this.dataService
            .query(GetAddManualPaymentMethodListDocument, {
            options: {
                take: 999,
            },
        })
            .mapSingle(data => data.paymentMethods.items);
    }
    submit() {
        const formValue = this.form.value;
        this.resolveWith({
            method: formValue.method,
            transactionId: formValue.transactionId,
        });
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AddManualPaymentDialogComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: AddManualPaymentDialogComponent, selector: "vdr-add-manual-payment-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\r\n        <ng-select\r\n            [items]=\"paymentMethods$ | async\"\r\n            bindLabel=\"code\"\r\n            appendTo=\"body\"\r\n            autofocus\r\n            bindValue=\"code\"\r\n            [addTag]=\"true\"\r\n            formControlName=\"method\"\r\n        ></ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\r\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\r\n    </vdr-form-field>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\r\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\r\n    </button>\r\n</ng-template>\r\n", styles: [".ng-select{min-width:100%}\n"], dependencies: [{ kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i5.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AddManualPaymentDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-add-manual-payment-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\r\n        <ng-select\r\n            [items]=\"paymentMethods$ | async\"\r\n            bindLabel=\"code\"\r\n            appendTo=\"body\"\r\n            autofocus\r\n            bindValue=\"code\"\r\n            [addTag]=\"true\"\r\n            formControlName=\"method\"\r\n        ></ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\r\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\r\n    </vdr-form-field>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\r\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\r\n    </button>\r\n</ng-template>\r\n", styles: [".ng-select{min-width:100%}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }] });

class CancelOrderDialogComponent {
    get selectionCount() {
        return Object.values(this.lineQuantities).reduce((sum, n) => sum + n, 0);
    }
    constructor(i18nService) {
        this.i18nService = i18nService;
        this.cancelAll = true;
        this.lineQuantities = {};
        this.reasons = getAppConfig().cancellationReasons ?? [
            marker('order.cancel-reason-customer-request'),
            marker('order.cancel-reason-not-available'),
        ];
        this.reasons = this.reasons.map(r => this.i18nService.translate(r));
    }
    ngOnInit() {
        this.lineQuantities = this.order.lines.reduce((result, line) => ({ ...result, [line.id]: line.quantity }), {});
    }
    radioChanged() {
        if (this.cancelAll) {
            for (const line of this.order.lines) {
                this.lineQuantities[line.id] = line.quantity;
            }
        }
        else {
            for (const line of this.order.lines) {
                this.lineQuantities[line.id] = 0;
            }
        }
    }
    checkIfAllSelected() {
        for (const [lineId, quantity] of Object.entries(this.lineQuantities)) {
            const quantityInOrder = this.order.lines.find(line => line.id === lineId)?.quantity;
            if (quantityInOrder && quantity < quantityInOrder) {
                return;
            }
        }
        // If we got here, all of the selected quantities are equal to the order
        // line quantities, i.e. everything is selected.
        this.cancelAll = true;
    }
    select() {
        this.resolveWith({
            orderId: this.order.id,
            lines: this.getLineInputs(),
            reason: this.reason,
            cancelShipping: this.cancelAll,
        });
    }
    cancel() {
        this.resolveWith();
    }
    getLineInputs() {
        if (this.order.active) {
            return;
        }
        return Object.entries(this.lineQuantities)
            .map(([orderLineId, quantity]) => ({
            orderLineId,
            quantity,
        }))
            .filter(l => 0 < l.quantity);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CancelOrderDialogComponent, deps: [{ token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: CancelOrderDialogComponent, selector: "vdr-cancel-order-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-lines\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.is-disabled]=\"cancelAll\"\r\n                [class.is-cancelled]=\"line.quantity === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\r\n                        [(ngModel)]=\"lineQuantities[line.id]\"\r\n                        (input)=\"checkIfAllSelected()\"\r\n                        [disabled]=\"cancelAll\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                    />\r\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"cancellation-details\">\r\n        <ng-container *ngIf=\"order.active !== true\">\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"true\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-entire-order' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"false\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-specified-items' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n        </ng-container>\r\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\r\n        <ng-select\r\n            [items]=\"reasons\"\r\n            bindLabel=\"name\"\r\n            autofocus\r\n            bindValue=\"id\"\r\n            [addTag]=\"true\"\r\n            [(ngModel)]=\"reason\"\r\n        ></ng-select>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        <ng-container *ngIf=\"!order.active\">\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"order.active\">\r\n            {{ 'order.cancel-order' | translate }}\r\n        </ng-container>\r\n    </button>\r\n</ng-template>\r\n", styles: [":host{height:100%;display:flex;min-height:64vh}.fulfillment-wrapper{flex:1}@media screen and (min-width: 768px){.fulfillment-wrapper{display:flex;flex-direction:row}}@media screen and (min-width: 768px){.fulfillment-wrapper .cancellation-details{margin-top:0;margin-inline-start:24px;width:250px}}.fulfillment-wrapper .order-lines{flex:1;overflow-y:auto}.fulfillment-wrapper .order-lines table{margin-top:0}.fulfillment-wrapper tr.ignore{color:var(--color-grey-300)}.fulfillment-wrapper .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}.fulfillment-wrapper .is-disabled td,.fulfillment-wrapper .is-disabled td input{background-color:var(--color-component-bg-200)}\n"], dependencies: [{ kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i3.ClrRadio, selector: "[clrRadio]" }, { kind: "component", type: i3.ClrRadioWrapper, selector: "clr-radio-wrapper" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i5.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.AssetPreviewPipe, name: "assetPreview" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CancelOrderDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-cancel-order-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-lines\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.is-disabled]=\"cancelAll\"\r\n                [class.is-cancelled]=\"line.quantity === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\r\n                        [(ngModel)]=\"lineQuantities[line.id]\"\r\n                        (input)=\"checkIfAllSelected()\"\r\n                        [disabled]=\"cancelAll\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                    />\r\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"cancellation-details\">\r\n        <ng-container *ngIf=\"order.active !== true\">\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"true\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-entire-order' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"false\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-specified-items' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n        </ng-container>\r\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\r\n        <ng-select\r\n            [items]=\"reasons\"\r\n            bindLabel=\"name\"\r\n            autofocus\r\n            bindValue=\"id\"\r\n            [addTag]=\"true\"\r\n            [(ngModel)]=\"reason\"\r\n        ></ng-select>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        <ng-container *ngIf=\"!order.active\">\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"order.active\">\r\n            {{ 'order.cancel-order' | translate }}\r\n        </ng-container>\r\n    </button>\r\n</ng-template>\r\n", styles: [":host{height:100%;display:flex;min-height:64vh}.fulfillment-wrapper{flex:1}@media screen and (min-width: 768px){.fulfillment-wrapper{display:flex;flex-direction:row}}@media screen and (min-width: 768px){.fulfillment-wrapper .cancellation-details{margin-top:0;margin-inline-start:24px;width:250px}}.fulfillment-wrapper .order-lines{flex:1;overflow-y:auto}.fulfillment-wrapper .order-lines table{margin-top:0}.fulfillment-wrapper tr.ignore{color:var(--color-grey-300)}.fulfillment-wrapper .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}.fulfillment-wrapper .is-disabled td,.fulfillment-wrapper .is-disabled td input{background-color:var(--color-component-bg-200)}\n"] }]
        }], ctorParameters: () => [{ type: i1.I18nService }] });

const GET_COUPON_CODE_SELECTOR_PROMOTION_LIST = gql `
    query GetCouponCodeSelectorPromotionList($options: PromotionListOptions) {
        promotions(options: $options) {
            items {
                id
                name
                couponCode
            }
            totalItems
        }
    }
`;
class CouponCodeSelectorComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.addCouponCode = new EventEmitter();
        this.removeCouponCode = new EventEmitter();
        this.couponCodeInput$ = new Subject();
    }
    ngOnInit() {
        this.availableCouponCodes$ = concat(this.couponCodeInput$.pipe(debounceTime(200), distinctUntilChanged(), switchMap(term => this.dataService.query(GetCouponCodeSelectorPromotionListDocument, {
            options: {
                take: 10,
                skip: 0,
                filter: {
                    couponCode: { contains: term },
                },
            },
        }).single$), map(({ promotions }) => 
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        promotions.items.map(p => ({ code: p.couponCode, promotionName: p.name }))), startWith([])));
        if (!this.control) {
            this.control = new UntypedFormControl(this.couponCodes ?? []);
        }
    }
    remove(code) {
        this.removeCouponCode.emit(code);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CouponCodeSelectorComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: CouponCodeSelectorComponent, selector: "vdr-coupon-code-selector", inputs: { couponCodes: "couponCodes", control: "control" }, outputs: { addCouponCode: "addCouponCode", removeCouponCode: "removeCouponCode" }, ngImport: i0, template: "<ng-select\r\n    [items]=\"availableCouponCodes$ | async\"\r\n    appendTo=\"body\"\r\n    bindLabel=\"code\"\r\n    bindValue=\"code\"\r\n    [addTag]=\"false\"\r\n    [multiple]=\"true\"\r\n    [hideSelected]=\"true\"\r\n    [minTermLength]=\"2\"\r\n    typeToSearchText=\"\"\r\n    [typeahead]=\"couponCodeInput$\"\r\n    [formControl]=\"control\"\r\n    (add)=\"addCouponCode.emit($event.code)\"\r\n    (remove)=\"remove($event.code)\"\r\n>\r\n    <ng-template ng-option-tmp let-item=\"item\">\r\n        <div class=\"flex items-center\">\r\n            <vdr-chip class=\"mr-1\">{{ item.code }}</vdr-chip>\r\n            <span>{{ item.promotionName }}</span>\r\n        </div>\r\n    </ng-template>\r\n</ng-select>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i5.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i5.NgOptionTemplateDirective, selector: "[ng-option-tmp]" }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CouponCodeSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-coupon-code-selector', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-select\r\n    [items]=\"availableCouponCodes$ | async\"\r\n    appendTo=\"body\"\r\n    bindLabel=\"code\"\r\n    bindValue=\"code\"\r\n    [addTag]=\"false\"\r\n    [multiple]=\"true\"\r\n    [hideSelected]=\"true\"\r\n    [minTermLength]=\"2\"\r\n    typeToSearchText=\"\"\r\n    [typeahead]=\"couponCodeInput$\"\r\n    [formControl]=\"control\"\r\n    (add)=\"addCouponCode.emit($event.code)\"\r\n    (remove)=\"remove($event.code)\"\r\n>\r\n    <ng-template ng-option-tmp let-item=\"item\">\r\n        <div class=\"flex items-center\">\r\n            <vdr-chip class=\"mr-1\">{{ item.code }}</vdr-chip>\r\n            <span>{{ item.promotionName }}</span>\r\n        </div>\r\n    </ng-template>\r\n</ng-select>\r\n" }]
        }], ctorParameters: () => [{ type: i1.DataService }], propDecorators: { couponCodes: [{
                type: Input
            }], control: [{
                type: Input
            }], addCouponCode: [{
                type: Output
            }], removeCouponCode: [{
                type: Output
            }] } });

class SelectAddressDialogComponent {
    constructor(dataService, formBuilder) {
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.useExisting = true;
        this.createNew = false;
    }
    ngOnInit() {
        this.addressForm = this.formBuilder.group({
            fullName: [this.currentAddress?.fullName ?? ''],
            company: [this.currentAddress?.company ?? ''],
            streetLine1: [this.currentAddress?.streetLine1 ?? '', Validators.required],
            streetLine2: [this.currentAddress?.streetLine2 ?? ''],
            city: [this.currentAddress?.city ?? '', Validators.required],
            province: [this.currentAddress?.province ?? ''],
            postalCode: [this.currentAddress?.postalCode ?? '', Validators.required],
            countryCode: [this.currentAddress?.countryCode ?? '', Validators.required],
            phoneNumber: [this.currentAddress?.phoneNumber ?? ''],
        });
        this.useExisting = !!this.customerId;
        this.addresses$ = this.customerId
            ? this.dataService
                .query(GetCustomerAddressesDocument, { customerId: this.customerId })
                .mapSingle(({ customer }) => customer?.addresses ?? [])
                .pipe(tap(addresses => {
                if (this.currentAddress) {
                    this.selectedAddress = addresses.find(a => a.streetLine1 === this.currentAddress?.streetLine1 &&
                        a.postalCode === this.currentAddress?.postalCode);
                }
                if (addresses.length === 0) {
                    this.createNew = true;
                    this.useExisting = false;
                }
            }))
            : of([]);
        this.availableCountries$ = this.dataService.settings
            .getAvailableCountries()
            .mapSingle(({ countries }) => countries.items);
    }
    trackByFn(item) {
        return item.id;
    }
    addressIdFn(item) {
        return item.streetLine1 + item.postalCode;
    }
    cancel() {
        this.resolveWith();
    }
    select() {
        if (this.useExisting && this.selectedAddress) {
            this.resolveWith({
                ...pick(this.selectedAddress, [
                    'fullName',
                    'company',
                    'streetLine1',
                    'streetLine2',
                    'city',
                    'province',
                    'phoneNumber',
                    'postalCode',
                ]),
                countryCode: this.selectedAddress.country.code,
            });
        }
        if (this.createNew && this.addressForm.valid) {
            const formValue = this.addressForm.value;
            this.resolveWith(formValue);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SelectAddressDialogComponent, deps: [{ token: i1.DataService }, { token: i2.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: SelectAddressDialogComponent, selector: "vdr-select-address-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.select-address' | translate }}</ng-template>\r\n\r\n<clr-tabs *ngIf=\"addresses$ | async as addresses\">\r\n    <clr-tab *ngIf=\"customerId && addresses.length\">\r\n        <button clrTabLink>{{ 'order.existing-address' | translate }}</button>\r\n        <ng-template [(clrIfActive)]=\"useExisting\">\r\n            <clr-tab-content>\r\n                <vdr-radio-card-fieldset\r\n                    class=\"block mt-4\"\r\n                    [idFn]=\"addressIdFn\"\r\n                    [selectedItemId]=\"selectedAddress && addressIdFn(selectedAddress)\"\r\n                    (selectItem)=\"selectedAddress = $event\"\r\n                >\r\n                    <vdr-radio-card *ngFor=\"let address of addresses\" [item]=\"address\">\r\n                        <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\r\n                    </vdr-radio-card>\r\n                </vdr-radio-card-fieldset>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n    <clr-tab>\r\n        <button clrTabLink>{{ 'customer.create-new-address' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"createNew\">\r\n            <clr-tab-content>\r\n                <vdr-address-form\r\n                    [formGroup]=\"addressForm\"\r\n                    [availableCountries]=\"availableCountries$ | async\"\r\n                ></vdr-address-form>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n</clr-tabs>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"(useExisting && !selectedAddress) || (createNew && addressForm.invalid)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIfActive, selector: "[clrIfActive]", inputs: ["clrIfActive"], outputs: ["clrIfActiveChange"] }, { kind: "component", type: i3.ClrTabContent, selector: "clr-tab-content", inputs: ["id"] }, { kind: "component", type: i3.ClrTab, selector: "clr-tab" }, { kind: "component", type: i3.ClrTabs, selector: "clr-tabs", inputs: ["clrLayout"] }, { kind: "directive", type: i3.ClrTabLink, selector: "[clrTabLink]", inputs: ["id", "clrTabLinkInOverflow"] }, { kind: "directive", type: i3.ÇlrTabsWillyWonka, selector: "clr-tabs" }, { kind: "directive", type: i3.ÇlrActiveOompaLoompa, selector: "[clrTabLink], clr-tab-content" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.FormattedAddressComponent, selector: "vdr-formatted-address", inputs: ["address"] }, { kind: "component", type: i1.AddressFormComponent, selector: "vdr-address-form", inputs: ["customFields", "formGroup", "availableCountries"] }, { kind: "component", type: i1.RadioCardComponent, selector: "vdr-radio-card", inputs: ["item"], exportAs: ["VdrRadioCard"] }, { kind: "component", type: i1.RadioCardFieldsetComponent, selector: "vdr-radio-card-fieldset", inputs: ["selectedItemId", "idFn"], outputs: ["selectItem"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SelectAddressDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-select-address-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.select-address' | translate }}</ng-template>\r\n\r\n<clr-tabs *ngIf=\"addresses$ | async as addresses\">\r\n    <clr-tab *ngIf=\"customerId && addresses.length\">\r\n        <button clrTabLink>{{ 'order.existing-address' | translate }}</button>\r\n        <ng-template [(clrIfActive)]=\"useExisting\">\r\n            <clr-tab-content>\r\n                <vdr-radio-card-fieldset\r\n                    class=\"block mt-4\"\r\n                    [idFn]=\"addressIdFn\"\r\n                    [selectedItemId]=\"selectedAddress && addressIdFn(selectedAddress)\"\r\n                    (selectItem)=\"selectedAddress = $event\"\r\n                >\r\n                    <vdr-radio-card *ngFor=\"let address of addresses\" [item]=\"address\">\r\n                        <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\r\n                    </vdr-radio-card>\r\n                </vdr-radio-card-fieldset>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n    <clr-tab>\r\n        <button clrTabLink>{{ 'customer.create-new-address' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"createNew\">\r\n            <clr-tab-content>\r\n                <vdr-address-form\r\n                    [formGroup]=\"addressForm\"\r\n                    [availableCountries]=\"availableCountries$ | async\"\r\n                ></vdr-address-form>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n</clr-tabs>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"(useExisting && !selectedAddress) || (createNew && addressForm.invalid)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n" }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i2.UntypedFormBuilder }] });

class SelectCustomerDialogComponent {
    constructor(dataService, formBuilder) {
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        // populated by the dialog service
        this.canCreateNew = true;
        this.includeNoteInput = false;
        this.title = marker('order.set-customer-for-order');
        this.isLoading = false;
        this.input$ = new Subject();
        this.selectedCustomer = [];
        this.useExisting = true;
        this.createNew = false;
        this.note = '';
        this.customerForm = this.formBuilder.group({
            title: '',
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            phoneNumber: '',
            emailAddress: ['', [Validators.required, Validators.email]],
        });
    }
    ngOnInit() {
        this.customers$ = concat(of([]), // default items
        this.input$.pipe(debounceTime(200), distinctUntilChanged(), tap(() => (this.isLoading = true)), switchMap(term => this.dataService.customer
            .getCustomerList(10, 0, term)
            .mapStream(({ customers }) => customers.items)
            .pipe(catchError(() => of([])), // empty list on error
        tap(() => (this.isLoading = false))))));
    }
    trackByFn(item) {
        return item.id;
    }
    cancel() {
        this.resolveWith();
    }
    select() {
        if (this.useExisting && this.selectedCustomer.length === 1) {
            this.resolveWith({ ...this.selectedCustomer[0], note: this.note });
        }
        else if (this.createNew && this.customerForm.valid) {
            const formValue = this.customerForm.value;
            this.resolveWith({ ...formValue, note: this.note });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SelectCustomerDialogComponent, deps: [{ token: i1.DataService }, { token: i2.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: SelectCustomerDialogComponent, selector: "vdr-select-customer-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ title | translate }}</ng-template>\r\n\r\n<ng-container *ngIf=\"!canCreateNew\">\r\n    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n    <vdr-form-field [label]=\"'common.add-note' | translate\" *ngIf=\"includeNoteInput\" class=\"mt-4\">\r\n        <textarea [(ngModel)]=\"note\"></textarea>\r\n    </vdr-form-field>\r\n</ng-container>\r\n\r\n<clr-tabs *ngIf=\"canCreateNew\" class=\"pt-1\">\r\n    <clr-tab>\r\n        <button clrTabLink>{{ 'order.existing-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"useExisting\">\r\n            <clr-tab-content>\r\n                <div class=\"mt-4\">\r\n                    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n                </div>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n    <clr-tab *ngIf=\"canCreateNew\">\r\n        <button clrTabLink>{{ 'customer.create-new-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"createNew\">\r\n            <clr-tab-content>\r\n                <form [formGroup]=\"customerForm\">\r\n                    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\">\r\n                        <input id=\"title\" type=\"text\" formControlName=\"title\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.first-name' | translate\" for=\"firstName\">\r\n                        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.last-name' | translate\" for=\"lastName\">\r\n                        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.email-address' | translate\" for=\"emailAddress\">\r\n                        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.phone-number' | translate\" for=\"phoneNumber\">\r\n                        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\r\n                    </vdr-form-field>\r\n                </form>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n</clr-tabs>\r\n\r\n<ng-template #customerSelect>\r\n    <ng-select\r\n        [items]=\"customers$ | async\"\r\n        appendTo=\"body\"\r\n        bindLabel=\"name\"\r\n        [addTag]=\"false\"\r\n        [multiple]=\"true\"\r\n        [hideSelected]=\"true\"\r\n        [trackByFn]=\"trackByFn\"\r\n        [minTermLength]=\"2\"\r\n        [loading]=\"isLoading\"\r\n        [typeahead]=\"input$\"\r\n        [(ngModel)]=\"selectedCustomer\"\r\n    >\r\n        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n        <ng-template ng-option-tmp let-item=\"item\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n    </ng-select>\r\n</ng-template>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"(useExisting && selectedCustomer.length === 0) || (createNew && customerForm.invalid)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [".item-row{display:flex;align-items:center}clr-tabs{display:block}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrIfActive, selector: "[clrIfActive]", inputs: ["clrIfActive"], outputs: ["clrIfActiveChange"] }, { kind: "component", type: i3.ClrTabContent, selector: "clr-tab-content", inputs: ["id"] }, { kind: "component", type: i3.ClrTab, selector: "clr-tab" }, { kind: "component", type: i3.ClrTabs, selector: "clr-tabs", inputs: ["clrLayout"] }, { kind: "directive", type: i3.ClrTabLink, selector: "[clrTabLink]", inputs: ["id", "clrTabLinkInOverflow"] }, { kind: "directive", type: i3.ÇlrTabsWillyWonka, selector: "clr-tabs" }, { kind: "directive", type: i3.ÇlrActiveOompaLoompa, selector: "[clrTabLink], clr-tab-content" }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i5.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i5.NgOptionTemplateDirective, selector: "[ng-option-tmp]" }, { kind: "directive", type: i5.NgLabelTemplateDirective, selector: "[ng-label-tmp]" }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SelectCustomerDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-select-customer-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ title | translate }}</ng-template>\r\n\r\n<ng-container *ngIf=\"!canCreateNew\">\r\n    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n    <vdr-form-field [label]=\"'common.add-note' | translate\" *ngIf=\"includeNoteInput\" class=\"mt-4\">\r\n        <textarea [(ngModel)]=\"note\"></textarea>\r\n    </vdr-form-field>\r\n</ng-container>\r\n\r\n<clr-tabs *ngIf=\"canCreateNew\" class=\"pt-1\">\r\n    <clr-tab>\r\n        <button clrTabLink>{{ 'order.existing-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"useExisting\">\r\n            <clr-tab-content>\r\n                <div class=\"mt-4\">\r\n                    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n                </div>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n    <clr-tab *ngIf=\"canCreateNew\">\r\n        <button clrTabLink>{{ 'customer.create-new-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"createNew\">\r\n            <clr-tab-content>\r\n                <form [formGroup]=\"customerForm\">\r\n                    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\">\r\n                        <input id=\"title\" type=\"text\" formControlName=\"title\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.first-name' | translate\" for=\"firstName\">\r\n                        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.last-name' | translate\" for=\"lastName\">\r\n                        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.email-address' | translate\" for=\"emailAddress\">\r\n                        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.phone-number' | translate\" for=\"phoneNumber\">\r\n                        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\r\n                    </vdr-form-field>\r\n                </form>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n</clr-tabs>\r\n\r\n<ng-template #customerSelect>\r\n    <ng-select\r\n        [items]=\"customers$ | async\"\r\n        appendTo=\"body\"\r\n        bindLabel=\"name\"\r\n        [addTag]=\"false\"\r\n        [multiple]=\"true\"\r\n        [hideSelected]=\"true\"\r\n        [trackByFn]=\"trackByFn\"\r\n        [minTermLength]=\"2\"\r\n        [loading]=\"isLoading\"\r\n        [typeahead]=\"input$\"\r\n        [(ngModel)]=\"selectedCustomer\"\r\n    >\r\n        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n        <ng-template ng-option-tmp let-item=\"item\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n    </ng-select>\r\n</ng-template>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"(useExisting && selectedCustomer.length === 0) || (createNew && customerForm.invalid)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [".item-row{display:flex;align-items:center}clr-tabs{display:block}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i2.UntypedFormBuilder }] });

class SelectShippingMethodDialogComponent {
    ngOnInit() {
        if (this.currentSelectionId) {
            this.selectedMethod = this.eligibleShippingMethods.find(m => m.id === this.currentSelectionId);
        }
    }
    methodIdFn(item) {
        return item.id;
    }
    cancel() {
        this.resolveWith();
    }
    select() {
        if (this.selectedMethod) {
            this.resolveWith(this.selectedMethod.id);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SelectShippingMethodDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: SelectShippingMethodDialogComponent, selector: "vdr-select-shipping-method-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.select-shipping-method' | translate }}</ng-template>\r\n<vdr-radio-card-fieldset\r\n    [idFn]=\"methodIdFn\"\r\n    [selectedItemId]=\"selectedMethod?.id\"\r\n    (selectItem)=\"selectedMethod = $event\"\r\n>\r\n    <vdr-radio-card *ngFor=\"let quote of eligibleShippingMethods\" [item]=\"quote\">\r\n        <div class=\"result-details\">\r\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\r\n                {{ quote.name }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\r\n                    {{ quote.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\r\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\r\n        </div>\r\n    </vdr-radio-card>\r\n</vdr-radio-card-fieldset>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!selectedMethod\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.ObjectTreeComponent, selector: "vdr-object-tree", inputs: ["value", "isArrayItem"] }, { kind: "component", type: i1.RadioCardComponent, selector: "vdr-radio-card", inputs: ["item"], exportAs: ["VdrRadioCard"] }, { kind: "component", type: i1.RadioCardFieldsetComponent, selector: "vdr-radio-card-fieldset", inputs: ["selectedItemId", "idFn"], outputs: ["selectItem"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SelectShippingMethodDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-select-shipping-method-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.select-shipping-method' | translate }}</ng-template>\r\n<vdr-radio-card-fieldset\r\n    [idFn]=\"methodIdFn\"\r\n    [selectedItemId]=\"selectedMethod?.id\"\r\n    (selectItem)=\"selectedMethod = $event\"\r\n>\r\n    <vdr-radio-card *ngFor=\"let quote of eligibleShippingMethods\" [item]=\"quote\">\r\n        <div class=\"result-details\">\r\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\r\n                {{ quote.name }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\r\n                    {{ quote.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\r\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\r\n        </div>\r\n    </vdr-radio-card>\r\n</vdr-radio-card-fieldset>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!selectedMethod\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n" }]
        }] });

class OrderStateSelectDialogComponent {
    constructor() {
        this.nextStates = [];
        this.message = '';
        this.selectedState = '';
    }
    select() {
        if (this.selectedState) {
            this.resolveWith(this.selectedState);
        }
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderStateSelectDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderStateSelectDialogComponent, selector: "vdr-order-state-select-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\r\n<p>{{ message | translate }}</p>\r\n<vdr-form-field>\r\n    <select name=\"state\" [(ngModel)]=\"selectedState\">\r\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\r\n            {{ state | stateI18nToken | translate }}\r\n        </option>\r\n    </select>\r\n</vdr-form-field>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\r\n        {{ 'common.cancel' | translate }}\r\n    </button>\r\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\r\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\r\n    </button>\r\n</ng-template>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.StateI18nTokenPipe, name: "stateI18nToken" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderStateSelectDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-state-select-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\r\n<p>{{ message | translate }}</p>\r\n<vdr-form-field>\r\n    <select name=\"state\" [(ngModel)]=\"selectedState\">\r\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\r\n            {{ state | stateI18nToken | translate }}\r\n        </option>\r\n    </select>\r\n</vdr-form-field>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\r\n        {{ 'common.cancel' | translate }}\r\n    </button>\r\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\r\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\r\n    </button>\r\n</ng-template>\r\n" }]
        }] });

class OrderTransitionService {
    constructor(dataService, modalService, notificationService, i18nService) {
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.i18nService = i18nService;
    }
    /**
     * Attempts to transition the Order to the last state it was in before it was transitioned
     * to the "Modifying" state. If this fails, a manual prompt is used.
     */
    transitionToPreModifyingState(orderId, nextStates) {
        return this.getPreModifyingState(orderId).pipe(switchMap(state => {
            const manualTransitionOptions = {
                orderId,
                nextStates,
                message: this.i18nService.translate(marker('order.unable-to-transition-to-state-try-another'), { state }),
                cancellable: false,
                retry: 10,
            };
            if (state) {
                return this.transitionToStateOrThrow(orderId, state).pipe(catchError(err => this.manuallyTransitionToState(manualTransitionOptions)));
            }
            else {
                return this.manuallyTransitionToState(manualTransitionOptions);
            }
        }));
    }
    /**
     * Displays a modal for manually selecting the next state.
     */
    manuallyTransitionToState(options) {
        return this.modalService
            .fromComponent(OrderStateSelectDialogComponent, {
            locals: {
                nextStates: options.nextStates,
                cancellable: options.cancellable,
                message: options.message,
            },
            closable: false,
            size: 'md',
        })
            .pipe(switchMap(result => {
            if (result) {
                return this.transitionToStateOrThrow(options.orderId, result);
            }
            else {
                if (!options.cancellable) {
                    throw new Error(`An order state must be selected`);
                }
                else {
                    return EMPTY;
                }
            }
        }), retryWhen(errors => errors.pipe(delay(2000), take(options.retry))));
    }
    /**
     * Attempts to get the last state the Order was in before it was transitioned
     * to the "Modifying" state.
     */
    getPreModifyingState(orderId) {
        return this.dataService.order
            .getOrderHistory(orderId, {
            filter: {
                type: {
                    eq: HistoryEntryType.ORDER_STATE_TRANSITION,
                },
            },
            sort: {
                createdAt: SortOrder.DESC,
            },
        })
            .mapSingle(result => result.order)
            .pipe(map(result => {
            const item = result?.history.items.find(i => i.data.to === 'Modifying');
            if (item) {
                return item.data.from;
            }
            else {
                return;
            }
        }));
    }
    transitionToStateOrThrow(orderId, state) {
        return this.dataService.order.transitionToState(orderId, state).pipe(map(({ transitionOrderToState }) => {
            switch (transitionOrderToState?.__typename) {
                case 'Order':
                    return transitionOrderToState?.state;
                case 'OrderStateTransitionError':
                    this.notificationService.error(transitionOrderToState?.transitionError);
                    throw new Error(transitionOrderToState?.transitionError);
            }
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderTransitionService, deps: [{ token: i1.DataService }, { token: i1.ModalService }, { token: i1.NotificationService }, { token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderTransitionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderTransitionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1.ModalService }, { type: i1.NotificationService }, { type: i1.I18nService }] });

class OrderCustomFieldsCardComponent {
    constructor(formBuilder, modalService) {
        this.formBuilder = formBuilder;
        this.modalService = modalService;
        this.customFieldsConfig = [];
        this.customFieldValues = {};
        this.updateClick = new EventEmitter();
        this.editable = false;
    }
    ngOnInit() {
        this.customFieldForm = this.formBuilder.group({});
        for (const field of this.customFieldsConfig) {
            this.customFieldForm.addControl(field.name, this.formBuilder.control(this.customFieldValues[field.name]));
        }
    }
    onUpdateClick() {
        this.updateClick.emit(this.customFieldForm.value);
        this.customFieldForm.markAsPristine();
        this.editable = false;
    }
    onCancelClick() {
        if (this.customFieldForm.dirty) {
            this.modalService
                .dialog({
                title: marker('catalog.confirm-cancel'),
                buttons: [
                    { type: 'secondary', label: marker('common.keep-editing') },
                    { type: 'danger', label: marker('common.discard-changes'), returnValue: true },
                ],
            })
                .subscribe(result => {
                if (result) {
                    this.customFieldForm.reset();
                    this.customFieldForm.markAsPristine();
                    this.editable = false;
                }
            });
        }
        else {
            this.editable = false;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderCustomFieldsCardComponent, deps: [{ token: i2.UntypedFormBuilder }, { token: i1.ModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderCustomFieldsCardComponent, selector: "vdr-order-custom-fields-card", inputs: { customFieldsConfig: "customFieldsConfig", customFieldValues: "customFieldValues" }, outputs: { updateClick: "updateClick" }, ngImport: i0, template: "<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\r\n    <div class=\"card-header\">\r\n        {{ 'common.custom-fields' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Order\"\r\n                [customFields]=\"customFieldsConfig\"\r\n                [customFieldsFormGroup]=\"customFieldForm\"\r\n                [readonly]=\"!editable\"\r\n                [compact]=\"true\"\r\n            ></vdr-tabbed-custom-fields>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\r\n            <clr-icon shape=\"pencil\"></clr-icon>\r\n            {{ 'common.edit' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            (click)=\"onUpdateClick()\"\r\n            *ngIf=\"editable\"\r\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\r\n        >\r\n            <clr-icon shape=\"check\"></clr-icon>\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-secondary\"\r\n            (click)=\"onCancelClick()\"\r\n            *ngIf=\"editable\"\r\n        >\r\n            <clr-icon shape=\"times\"></clr-icon>\r\n            {{ 'common.cancel' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n", styles: ["vdr-custom-field-control{margin-bottom:6px;display:block}.custom-field-form ::ng-deep .clr-control-label{color:var(--color-grey-400)}.custom-field-form.editable ::ng-deep .clr-control-label{color:inherit}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderCustomFieldsCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-custom-fields-card', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\r\n    <div class=\"card-header\">\r\n        {{ 'common.custom-fields' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Order\"\r\n                [customFields]=\"customFieldsConfig\"\r\n                [customFieldsFormGroup]=\"customFieldForm\"\r\n                [readonly]=\"!editable\"\r\n                [compact]=\"true\"\r\n            ></vdr-tabbed-custom-fields>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\r\n            <clr-icon shape=\"pencil\"></clr-icon>\r\n            {{ 'common.edit' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            (click)=\"onUpdateClick()\"\r\n            *ngIf=\"editable\"\r\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\r\n        >\r\n            <clr-icon shape=\"check\"></clr-icon>\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-secondary\"\r\n            (click)=\"onCancelClick()\"\r\n            *ngIf=\"editable\"\r\n        >\r\n            <clr-icon shape=\"times\"></clr-icon>\r\n            {{ 'common.cancel' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n", styles: ["vdr-custom-field-control{margin-bottom:6px;display:block}.custom-field-form ::ng-deep .clr-control-label{color:var(--color-grey-400)}.custom-field-form.editable ::ng-deep .clr-control-label{color:inherit}\n"] }]
        }], ctorParameters: () => [{ type: i2.UntypedFormBuilder }, { type: i1.ModalService }], propDecorators: { customFieldsConfig: [{
                type: Input
            }], customFieldValues: [{
                type: Input
            }], updateClick: [{
                type: Output
            }] } });

class LineFulfillmentComponent {
    constructor() {
        this.fulfilledCount = 0;
        this.fulfillments = [];
    }
    ngOnChanges(changes) {
        if (this.line) {
            this.fulfilledCount = this.getDeliveredCount(this.line);
            this.fulfillmentStatus = this.getFulfillmentStatus(this.fulfilledCount, this.line.quantity);
            this.fulfillments = this.getFulfillments(this.line);
        }
    }
    /**
     * Returns the number of items in an OrderLine which are fulfilled.
     */
    getDeliveredCount(line) {
        return (line.fulfillmentLines?.reduce((sum, fulfillmentLine) => sum + fulfillmentLine.quantity, 0) ?? 0);
    }
    getFulfillmentStatus(fulfilledCount, lineQuantity) {
        if (fulfilledCount === lineQuantity) {
            return 'full';
        }
        if (0 < fulfilledCount && fulfilledCount < lineQuantity) {
            return 'partial';
        }
        return 'none';
    }
    getFulfillments(line) {
        return (line.fulfillmentLines
            ?.map(fulfillmentLine => {
            const fulfillment = this.allOrderFulfillments?.find(f => f.id === fulfillmentLine.fulfillmentId);
            if (!fulfillment) {
                return;
            }
            return {
                count: fulfillmentLine.quantity,
                fulfillment,
            };
        })
            .filter(notNullOrUndefined) ?? []);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: LineFulfillmentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: LineFulfillmentComponent, selector: "vdr-line-fulfillment", inputs: { line: "line", allOrderFulfillments: "allOrderFulfillments", orderState: "orderState" }, usesOnChanges: true, ngImport: i0, template: "<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\r\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'partial'\"\r\n            class=\"item-partially-fulfilled\"\r\n            shape=\"check-circle\"\r\n        ></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'none'\"\r\n            class=\"item-not-fulfilled\"\r\n            shape=\"exclamation-circle\"\r\n        ></clr-icon>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\r\n            {{ 'order.line-fulfillment-all' | translate }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\r\n            {{\r\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\r\n            }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\r\n            {{ 'order.line-fulfillment-none' | translate }}\r\n        </label>\r\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\r\n            <div class=\"fulfillment-title\">\r\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\r\n                    'order.item-count' | translate: { count: item.count }\r\n                }})\r\n            </div>\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n                {{ item.fulfillment.method }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                *ngIf=\"item.fulfillment.trackingCode\"\r\n                [label]=\"'order.tracking-code' | translate\"\r\n            >\r\n                {{ item.fulfillment.trackingCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n", styles: [".item-fulfilled{color:var(--color-success-700)}.item-partially-fulfilled{color:var(--color-warning-700)}.item-not-fulfilled{color:var(--color-error-700)}.fulfillment-detail{margin:6px 12px}.fulfillment-detail:not(:last-of-type){border-bottom:1px dashed var(--color-component-border-200)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: LineFulfillmentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-line-fulfillment', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\r\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'partial'\"\r\n            class=\"item-partially-fulfilled\"\r\n            shape=\"check-circle\"\r\n        ></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'none'\"\r\n            class=\"item-not-fulfilled\"\r\n            shape=\"exclamation-circle\"\r\n        ></clr-icon>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\r\n            {{ 'order.line-fulfillment-all' | translate }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\r\n            {{\r\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\r\n            }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\r\n            {{ 'order.line-fulfillment-none' | translate }}\r\n        </label>\r\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\r\n            <div class=\"fulfillment-title\">\r\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\r\n                    'order.item-count' | translate: { count: item.count }\r\n                }})\r\n            </div>\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n                {{ item.fulfillment.method }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                *ngIf=\"item.fulfillment.trackingCode\"\r\n                [label]=\"'order.tracking-code' | translate\"\r\n            >\r\n                {{ item.fulfillment.trackingCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n", styles: [".item-fulfilled{color:var(--color-success-700)}.item-partially-fulfilled{color:var(--color-warning-700)}.item-not-fulfilled{color:var(--color-error-700)}.fulfillment-detail{margin:6px 12px}.fulfillment-detail:not(:last-of-type){border-bottom:1px dashed var(--color-component-border-200)}\n"] }]
        }], propDecorators: { line: [{
                type: Input
            }], allOrderFulfillments: [{
                type: Input
            }], orderState: [{
                type: Input
            }] } });

class LineRefundsComponent {
    getRefundedCount() {
        const refundLines = this.payments
            ?.reduce((all, payment) => [...all, ...payment.refunds], [])
            .filter(refund => refund.state !== 'Failed')
            .reduce((all, refund) => [...all, ...refund.lines], []) ?? [];
        return refundLines
            .filter(i => i.orderLineId === this.line.id)
            .reduce((sum, i) => sum + i.quantity, 0);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: LineRefundsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: LineRefundsComponent, selector: "vdr-line-refunds", inputs: { line: "line", payments: "payments" }, ngImport: i0, template: "<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\r\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\r\n</span>\r\n", styles: [":host{color:var(--color-error-500)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.Dir, selector: "[dir]", inputs: ["dir"], outputs: ["dirChange"], exportAs: ["dir"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: LineRefundsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-line-refunds', changeDetection: ChangeDetectionStrategy.OnPush, template: "<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\r\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\r\n</span>\r\n", styles: [":host{color:var(--color-error-500)}\n"] }]
        }], propDecorators: { line: [{
                type: Input
            }], payments: [{
                type: Input
            }] } });

class OrderTotalColumnComponent extends DataTable2ColumnComponent {
    constructor() {
        super(...arguments);
        this.orderable = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderTotalColumnComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderTotalColumnComponent, selector: "vdr-order-total-column", exportAs: ["row"], usesInheritance: true, ngImport: i0, template: ``, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderTotalColumnComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'vdr-order-total-column',
                    template: ``,
                    exportAs: 'row',
                }]
        }] });

class OrderDataTableComponent extends DataTable2Component {
    get allColumns() {
        return [...(this.columns ?? []), ...(this.customFieldColumns ?? []), ...(this.totalColumns ?? [])];
    }
    getPromotionLink(promotion) {
        const id = promotion.adjustmentSource.split(':')[1];
        return ['/marketing', 'promotions', id];
    }
    getCouponCodeForAdjustment(order, promotionAdjustment) {
        const id = promotionAdjustment.adjustmentSource.split(':')[1];
        const promotion = order.promotions.find(p => p.id === id);
        if (promotion) {
            return promotion.couponCode || undefined;
        }
    }
    getShippingNames(order) {
        if (order.shippingLines.length) {
            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');
        }
        else {
            return '';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderDataTableComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderDataTableComponent, selector: "vdr-order-data-table", inputs: { order: "order" }, queries: [{ propertyName: "totalColumns", predicate: OrderTotalColumnComponent }], usesInheritance: true, ngImport: i0, template: "<div class=\"bulk-actions\">\r\n    <ng-content select=\"vdr-bulk-action-menu\"></ng-content>\r\n</div>\r\n<div class=\"table-wrapper\">\r\n    <table\r\n        class=\"\"\r\n        [class.no-select]=\"disableSelect\"\r\n    >\r\n        <thead [class.items-selected]=\"selectionManager?.selection.length\">\r\n            <tr class=\"heading-row\">\r\n                <th *ngIf=\"selectionManager\" class=\"selection-col\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrCheckbox\r\n                        [checked]=\"selectionManager?.areAllCurrentItemsSelected()\"\r\n                        (change)=\"onToggleAllClick()\"\r\n                    />\r\n                </th>\r\n                <th\r\n                    *ngFor=\"let column of visibleSortedColumns; last as isLast\"\r\n                    [class.expand]=\"column.expand\"\r\n                >\r\n                    <div class=\"cell-content\" [ngClass]=\"column.align\">\r\n                        <vdr-ui-extension-point\r\n                            [locationId]=\"id\"\r\n                            [metadata]=\"column.id\"\r\n                            api=\"dataTable\"\r\n                            [topPx]=\"-6\"\r\n                            [leftPx]=\"-24\"\r\n                            display=\"block\"\r\n                        >\r\n                            <span>{{ column.heading }}</span>\r\n                        </vdr-ui-extension-point>\r\n                        <div *ngIf=\"column.sort as sort\" class=\"sort-toggle\">\r\n                            <button (click)=\"sort.toggleSortOrder()\" [class.active]=\"sort.sortOrder\">\r\n                                <clr-icon *ngIf=\"!sort.sortOrder\" shape=\"two-way-arrows left\"></clr-icon>\r\n                                <clr-icon *ngIf=\"sort.sortOrder === 'ASC'\" shape=\"arrow up\"></clr-icon>\r\n                                <clr-icon *ngIf=\"sort.sortOrder === 'DESC'\" shape=\"arrow down\"></clr-icon>\r\n                            </button>\r\n                            <div class=\"sort-label\" *ngIf=\"sort.sortOrder\">{{ sort.sortOrder }}</div>\r\n                        </div>\r\n                    </div>\r\n                </th>\r\n                <th>\r\n                    <div class=\"column-picker\">\r\n                        <vdr-data-table-colum-picker\r\n                            [uiLanguage]=\"uiLanguage$ | async\"\r\n                            [columns]=\"sortedColumns\"\r\n                            (reorder)=\"onColumnReorder($event)\"\r\n                            (resetColumns)=\"onColumnsReset()\"\r\n                        ></vdr-data-table-colum-picker>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n            <tr *ngIf=\"searchComponent || customSearchTemplate || filters?.length\">\r\n                <th\r\n                    [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\"\r\n                    class=\"filter-row\"\r\n                    [class.active]=\"showSearchFilterRow\"\r\n                >\r\n                    <button\r\n                        class=\"button-ghost toggle-search-filter-row\"\r\n                        [class.active]=\"showSearchFilterRow\"\r\n                        (click)=\"toggleSearchFilterRow()\"\r\n                        [title]=\"'common.search-and-filter-list' | translate\"\r\n                    >\r\n                        <clr-icon shape=\"search\"></clr-icon>\r\n                    </button>\r\n                    <div class=\"filter-row-wrapper\" [class.hidden]=\"!showSearchFilterRow\">\r\n                        <ng-container *ngTemplateOutlet=\"searchComponent?.template\"></ng-container>\r\n                        <ng-container *ngTemplateOutlet=\"customSearchTemplate\"></ng-container>\r\n                        <ng-container *ngIf=\"filters\">\r\n                            <div class=\"filters\">\r\n                                <vdr-data-table-filters\r\n                                    *ngFor=\"let activeFilter of filters.activeFilters\"\r\n                                    [filterWithValue]=\"activeFilter\"\r\n                                    [filters]=\"filters\"\r\n                                    class=\"mt-1\"\r\n                                ></vdr-data-table-filters>\r\n                                <vdr-data-table-filters\r\n                                    *ngIf=\"filters.length\"\r\n                                    [filters]=\"filters\"\r\n                                    class=\"mt-1\"\r\n                                ></vdr-data-table-filters>\r\n                            </div>\r\n                        </ng-container>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr\r\n                *ngFor=\"\r\n                    let item of items\r\n                        | paginate\r\n                            : {\r\n                                  id: id,\r\n                                  itemsPerPage: itemsPerPage,\r\n                                  currentPage: currentPage,\r\n                                  totalItems: totalItems\r\n                              };\r\n                    index as i;\r\n                    trackBy: trackByFn\r\n                \"\r\n            >\r\n                <td *ngIf=\"selectionManager\" class=\"selection-col\" [class.active]=\"activeIndex === i\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrCheckbox\r\n                        [checked]=\"selectionManager?.isSelected(item)\"\r\n                        (click)=\"onRowClick(item, $event)\"\r\n                    />\r\n                </td>\r\n                <td *ngFor=\"let column of visibleSortedColumns\" [class.active]=\"activeIndex === i\">\r\n                    <div class=\"cell-content\" [ngClass]=\"column.align\">\r\n                        <ng-container\r\n                            *ngIf=\"customComponents.get(column.id) as componentConfig; else defaultComponent\"\r\n                        >\r\n                            <ng-container\r\n                                *ngComponentOutlet=\"\r\n                                    componentConfig.config.component;\r\n                                    inputs: { rowItem: item };\r\n                                    injector: componentConfig.injector\r\n                                \"\r\n                            ></ng-container>\r\n                        </ng-container>\r\n                        <ng-template #defaultComponent>\r\n                            <ng-container\r\n                                *ngTemplateOutlet=\"column.template; context: { item: item, index: i }\"\r\n                            ></ng-container>\r\n                        </ng-template>\r\n                    </div>\r\n                </td>\r\n                <td [class.active]=\"activeIndex === i\"><!-- column select --></td>\r\n            </tr>\r\n            <ng-container>\r\n                <tr *ngIf=\"!items?.length\">\r\n                    <td [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\">\r\n                        <vdr-empty-placeholder [emptyStateLabel]=\"'order.order-is-empty' | translate\"></vdr-empty-placeholder>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n            <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n                <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n                <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                <td class=\"align-middle\" [attr.colspan]=\"visibleSortedColumns.length - 4\"></td>\r\n                <td class=\"align-middle total\">\r\n                    {{ surcharge.priceWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ surcharge.price | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n            <ng-container *ngFor=\"let discount of order.discounts\">\r\n                <tr class=\"order-adjustment\" *ngIf=\"discount.type !== 'OTHER'\">\r\n                    <td [attr.colspan]=\"visibleSortedColumns.length - 1\" class=\"\">\r\n                        <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\r\n                        <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\r\n                            couponCode\r\n                        }}</vdr-chip>\r\n                    </td>\r\n                    <td class=\"\">\r\n                        {{ discount.amountWithTax | localeCurrency : order.currencyCode }}\r\n                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                            {{ discount.amount | localeCurrency : order.currencyCode }}\r\n                        </div>\r\n                    </td>\r\n                    <td><!-- column select --></td>\r\n                </tr>\r\n            </ng-container>\r\n            <tr class=\"sub-total\">\r\n                <td class=\"\">{{ 'order.sub-total' | translate }}</td>\r\n                <td [attr.colspan]=\"visibleSortedColumns.length - 2\"></td>\r\n                <td class=\"clr-align-middle\">\r\n                    {{ order.subTotalWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ order.subTotal | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n            <tr class=\"shipping\">\r\n                <td class=\"\">{{ 'order.shipping' | translate }}</td>\r\n                <td [attr.colspan]=\"visibleSortedColumns.length - 2\">\r\n                    <vdr-chip *ngFor=\"let shippingLine of order.shippingLines\" class=\"shipping-method-name\">\r\n                        {{ shippingLine.shippingMethod.name }}\r\n                    </vdr-chip>\r\n                </td>\r\n                <td class=\"clr-align-middle\">\r\n                    {{ order.shippingWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ order.shipping | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n            <tr class=\"total\">\r\n                <td class=\"\">{{ 'order.total' | translate }}</td>\r\n                <td [attr.colspan]=\"visibleSortedColumns.length - 2\"></td>\r\n                <td class=\"clr-align-middle\">\r\n                    {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ order.total | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n", styles: [":host{display:block;max-width:100%;position:relative;margin-bottom:calc(var(--space-unit) * 4);container-type:inline-size}th{border-bottom:1px solid var(--color-table-header-border);color:var(--color-weight-700);font-size:var(--font-size-xs);font-weight:600;text-transform:uppercase;position:relative;white-space:nowrap;background-color:transparent}th,td{padding:calc(var(--space-unit) * 1.5) calc(var(--space-unit) * 1);color:var(--color-text-100)}tr td:first-of-type,tr th:first-of-type{text-align:center}@media screen and (min-width: 992px){tr td:first-of-type,tr th:first-of-type{padding-inline-start:var(--surface-margin-left);text-align:start}}th:last-of-type,td:last-of-type{border-inline-end:1px solid var(--color-table-header-border)}tr:first-of-type th:last-of-type{border-image:linear-gradient(0deg,var(--color-table-header-border),transparent) 1}tr:last-of-type td:last-of-type{border-image:linear-gradient(180deg,var(--color-table-header-border),transparent) 1}tbody td{border-bottom:1px solid var(--color-table-row-separator)}tbody tr:hover{background-color:var(--color-table-row-hover-bg)}.bulk-actions{margin-inline-start:calc(var(--space-unit) * 5);background-color:var(--color-surface-bg);z-index:10;display:flex;position:absolute;top:5px;height:40px}@media screen and (min-width: 992px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 8.5)}}@media screen and (min-width: 1280px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 10.5)}}.table-wrapper{display:block;overflow-y:hidden;overflow-x:auto;position:relative;width:100%;max-width:var(--surface-width)}table{width:100%}table.no-select{-webkit-user-select:none;user-select:none}.column-picker{width:24px}.sort-toggle{display:flex;align-items:center;margin-inline-start:calc(var(--space-unit) * .5)}.sort-toggle button{border:0;border-radius:var(--border-radius-lg);color:var(--color-weight-500);padding:0 2px;cursor:pointer;background-color:transparent}.sort-toggle button.active{color:var(--color-primary-700)}.sort-toggle .sort-label{margin-inline-start:calc(var(--space-unit) * .5);font-size:10px;color:var(--color-primary-600);font-weight:400}.toggle-search-filter-row{position:absolute;top:-12px;left:4px}@media screen and (min-width: 1280px){.toggle-search-filter-row{left:8px}}.toggle-search-filter-row.active{background-color:var(--color-primary-700);color:var(--color-primary-100);border-color:var(--color-primary-700)}th.filter-row{position:relative;font-size:var(--font-size-base);font-weight:400;background-color:var(--color-weight-100);box-shadow:var(--data-table-filter-box-shadow);border-left-width:0;border-right-width:0;text-align:initial;padding:0}th.filter-row input{width:100%}th.filter-row.active{border-bottom:1px solid var(--color-table-header-border)}th.filter-row .filters{margin-top:calc(var(--space-unit) * 1);display:flex;flex-wrap:wrap;gap:calc(var(--space-unit) * .5)}.filter-row-wrapper{padding:calc(var(--space-unit) * 4);padding-inline-start:0;max-height:150px;transition:max-height .2s,padding .2s,opacity .2s}.filter-row-wrapper.hidden{max-height:0px;padding-top:0;padding-bottom:0;overflow:hidden;opacity:0}.cell-link{display:block;width:100%;height:100%}td.active{background-color:var(--color-table-row-active-bg)}.cell-content{display:flex;align-items:center;line-height:var(--font-size-sm);color:var(--color-weight-700)}.cell-content.left{justify-content:flex-start}.cell-content.center{justify-content:center}.cell-content.right{justify-content:flex-end}.selection-col{width:calc(var(--space-unit) * 8)}vdr-empty-placeholder{width:100%}.table-footer{display:flex;align-items:baseline;justify-content:space-between;margin-top:var(--space-unit);margin-inline-start:var(--surface-margin-left);margin-inline-end:var(--space-unit)}.total-items-count{font-size:var(--font-size-xs)}@container (max-width: 500px){.total-items-count{display:none}}\n", ":host .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}:host .sub-total td{border-top:1px dashed var(--color-component-border-200)}:host .total td{font-weight:700;border-top:1px dashed var(--color-component-border-200)}:host td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}:host img{border-radius:var(--border-radius-img)}:host .order-line-custom-fields{display:flex;flex-wrap:wrap}:host .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-inline-end:18px}:host .draft-qty{max-width:48px}:host .order-line-custom-field{background-color:var(--color-component-bg-100)}:host .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}:host .net-price{font-size:11px;color:var(--color-text-300);line-height:14px}:host .promotions-label{text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}:host .thumb img{width:50px;height:50px}:host .shipping-method-name{font-size:var(--font-size-xs);margin-inline-end:2px}:host .order-placed-quantity{text-decoration:line-through;color:var(--color-text-300);margin-inline-end:2px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "directive", type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2$1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.EmptyPlaceholderComponent, selector: "vdr-empty-placeholder", inputs: ["emptyStateLabel"] }, { kind: "component", type: i1.UiExtensionPointComponent, selector: "vdr-ui-extension-point", inputs: ["locationId", "metadata", "topPx", "leftPx", "display", "api"] }, { kind: "component", type: i1.DataTableFiltersComponent, selector: "vdr-data-table-filters", inputs: ["filters", "filterWithValue"] }, { kind: "component", type: i1.DataTableColumnPickerComponent, selector: "vdr-data-table-colum-picker", inputs: ["columns", "uiLanguage"], outputs: ["reorder", "resetColumns"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5$1.PaginatePipe, name: "paginate" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderDataTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-data-table', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"bulk-actions\">\r\n    <ng-content select=\"vdr-bulk-action-menu\"></ng-content>\r\n</div>\r\n<div class=\"table-wrapper\">\r\n    <table\r\n        class=\"\"\r\n        [class.no-select]=\"disableSelect\"\r\n    >\r\n        <thead [class.items-selected]=\"selectionManager?.selection.length\">\r\n            <tr class=\"heading-row\">\r\n                <th *ngIf=\"selectionManager\" class=\"selection-col\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrCheckbox\r\n                        [checked]=\"selectionManager?.areAllCurrentItemsSelected()\"\r\n                        (change)=\"onToggleAllClick()\"\r\n                    />\r\n                </th>\r\n                <th\r\n                    *ngFor=\"let column of visibleSortedColumns; last as isLast\"\r\n                    [class.expand]=\"column.expand\"\r\n                >\r\n                    <div class=\"cell-content\" [ngClass]=\"column.align\">\r\n                        <vdr-ui-extension-point\r\n                            [locationId]=\"id\"\r\n                            [metadata]=\"column.id\"\r\n                            api=\"dataTable\"\r\n                            [topPx]=\"-6\"\r\n                            [leftPx]=\"-24\"\r\n                            display=\"block\"\r\n                        >\r\n                            <span>{{ column.heading }}</span>\r\n                        </vdr-ui-extension-point>\r\n                        <div *ngIf=\"column.sort as sort\" class=\"sort-toggle\">\r\n                            <button (click)=\"sort.toggleSortOrder()\" [class.active]=\"sort.sortOrder\">\r\n                                <clr-icon *ngIf=\"!sort.sortOrder\" shape=\"two-way-arrows left\"></clr-icon>\r\n                                <clr-icon *ngIf=\"sort.sortOrder === 'ASC'\" shape=\"arrow up\"></clr-icon>\r\n                                <clr-icon *ngIf=\"sort.sortOrder === 'DESC'\" shape=\"arrow down\"></clr-icon>\r\n                            </button>\r\n                            <div class=\"sort-label\" *ngIf=\"sort.sortOrder\">{{ sort.sortOrder }}</div>\r\n                        </div>\r\n                    </div>\r\n                </th>\r\n                <th>\r\n                    <div class=\"column-picker\">\r\n                        <vdr-data-table-colum-picker\r\n                            [uiLanguage]=\"uiLanguage$ | async\"\r\n                            [columns]=\"sortedColumns\"\r\n                            (reorder)=\"onColumnReorder($event)\"\r\n                            (resetColumns)=\"onColumnsReset()\"\r\n                        ></vdr-data-table-colum-picker>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n            <tr *ngIf=\"searchComponent || customSearchTemplate || filters?.length\">\r\n                <th\r\n                    [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\"\r\n                    class=\"filter-row\"\r\n                    [class.active]=\"showSearchFilterRow\"\r\n                >\r\n                    <button\r\n                        class=\"button-ghost toggle-search-filter-row\"\r\n                        [class.active]=\"showSearchFilterRow\"\r\n                        (click)=\"toggleSearchFilterRow()\"\r\n                        [title]=\"'common.search-and-filter-list' | translate\"\r\n                    >\r\n                        <clr-icon shape=\"search\"></clr-icon>\r\n                    </button>\r\n                    <div class=\"filter-row-wrapper\" [class.hidden]=\"!showSearchFilterRow\">\r\n                        <ng-container *ngTemplateOutlet=\"searchComponent?.template\"></ng-container>\r\n                        <ng-container *ngTemplateOutlet=\"customSearchTemplate\"></ng-container>\r\n                        <ng-container *ngIf=\"filters\">\r\n                            <div class=\"filters\">\r\n                                <vdr-data-table-filters\r\n                                    *ngFor=\"let activeFilter of filters.activeFilters\"\r\n                                    [filterWithValue]=\"activeFilter\"\r\n                                    [filters]=\"filters\"\r\n                                    class=\"mt-1\"\r\n                                ></vdr-data-table-filters>\r\n                                <vdr-data-table-filters\r\n                                    *ngIf=\"filters.length\"\r\n                                    [filters]=\"filters\"\r\n                                    class=\"mt-1\"\r\n                                ></vdr-data-table-filters>\r\n                            </div>\r\n                        </ng-container>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr\r\n                *ngFor=\"\r\n                    let item of items\r\n                        | paginate\r\n                            : {\r\n                                  id: id,\r\n                                  itemsPerPage: itemsPerPage,\r\n                                  currentPage: currentPage,\r\n                                  totalItems: totalItems\r\n                              };\r\n                    index as i;\r\n                    trackBy: trackByFn\r\n                \"\r\n            >\r\n                <td *ngIf=\"selectionManager\" class=\"selection-col\" [class.active]=\"activeIndex === i\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrCheckbox\r\n                        [checked]=\"selectionManager?.isSelected(item)\"\r\n                        (click)=\"onRowClick(item, $event)\"\r\n                    />\r\n                </td>\r\n                <td *ngFor=\"let column of visibleSortedColumns\" [class.active]=\"activeIndex === i\">\r\n                    <div class=\"cell-content\" [ngClass]=\"column.align\">\r\n                        <ng-container\r\n                            *ngIf=\"customComponents.get(column.id) as componentConfig; else defaultComponent\"\r\n                        >\r\n                            <ng-container\r\n                                *ngComponentOutlet=\"\r\n                                    componentConfig.config.component;\r\n                                    inputs: { rowItem: item };\r\n                                    injector: componentConfig.injector\r\n                                \"\r\n                            ></ng-container>\r\n                        </ng-container>\r\n                        <ng-template #defaultComponent>\r\n                            <ng-container\r\n                                *ngTemplateOutlet=\"column.template; context: { item: item, index: i }\"\r\n                            ></ng-container>\r\n                        </ng-template>\r\n                    </div>\r\n                </td>\r\n                <td [class.active]=\"activeIndex === i\"><!-- column select --></td>\r\n            </tr>\r\n            <ng-container>\r\n                <tr *ngIf=\"!items?.length\">\r\n                    <td [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\">\r\n                        <vdr-empty-placeholder [emptyStateLabel]=\"'order.order-is-empty' | translate\"></vdr-empty-placeholder>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n            <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n                <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n                <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                <td class=\"align-middle\" [attr.colspan]=\"visibleSortedColumns.length - 4\"></td>\r\n                <td class=\"align-middle total\">\r\n                    {{ surcharge.priceWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ surcharge.price | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n            <ng-container *ngFor=\"let discount of order.discounts\">\r\n                <tr class=\"order-adjustment\" *ngIf=\"discount.type !== 'OTHER'\">\r\n                    <td [attr.colspan]=\"visibleSortedColumns.length - 1\" class=\"\">\r\n                        <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\r\n                        <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\r\n                            couponCode\r\n                        }}</vdr-chip>\r\n                    </td>\r\n                    <td class=\"\">\r\n                        {{ discount.amountWithTax | localeCurrency : order.currencyCode }}\r\n                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                            {{ discount.amount | localeCurrency : order.currencyCode }}\r\n                        </div>\r\n                    </td>\r\n                    <td><!-- column select --></td>\r\n                </tr>\r\n            </ng-container>\r\n            <tr class=\"sub-total\">\r\n                <td class=\"\">{{ 'order.sub-total' | translate }}</td>\r\n                <td [attr.colspan]=\"visibleSortedColumns.length - 2\"></td>\r\n                <td class=\"clr-align-middle\">\r\n                    {{ order.subTotalWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ order.subTotal | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n            <tr class=\"shipping\">\r\n                <td class=\"\">{{ 'order.shipping' | translate }}</td>\r\n                <td [attr.colspan]=\"visibleSortedColumns.length - 2\">\r\n                    <vdr-chip *ngFor=\"let shippingLine of order.shippingLines\" class=\"shipping-method-name\">\r\n                        {{ shippingLine.shippingMethod.name }}\r\n                    </vdr-chip>\r\n                </td>\r\n                <td class=\"clr-align-middle\">\r\n                    {{ order.shippingWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ order.shipping | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n            <tr class=\"total\">\r\n                <td class=\"\">{{ 'order.total' | translate }}</td>\r\n                <td [attr.colspan]=\"visibleSortedColumns.length - 2\"></td>\r\n                <td class=\"clr-align-middle\">\r\n                    {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ order.total | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td><!-- column select --></td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n", styles: [":host{display:block;max-width:100%;position:relative;margin-bottom:calc(var(--space-unit) * 4);container-type:inline-size}th{border-bottom:1px solid var(--color-table-header-border);color:var(--color-weight-700);font-size:var(--font-size-xs);font-weight:600;text-transform:uppercase;position:relative;white-space:nowrap;background-color:transparent}th,td{padding:calc(var(--space-unit) * 1.5) calc(var(--space-unit) * 1);color:var(--color-text-100)}tr td:first-of-type,tr th:first-of-type{text-align:center}@media screen and (min-width: 992px){tr td:first-of-type,tr th:first-of-type{padding-inline-start:var(--surface-margin-left);text-align:start}}th:last-of-type,td:last-of-type{border-inline-end:1px solid var(--color-table-header-border)}tr:first-of-type th:last-of-type{border-image:linear-gradient(0deg,var(--color-table-header-border),transparent) 1}tr:last-of-type td:last-of-type{border-image:linear-gradient(180deg,var(--color-table-header-border),transparent) 1}tbody td{border-bottom:1px solid var(--color-table-row-separator)}tbody tr:hover{background-color:var(--color-table-row-hover-bg)}.bulk-actions{margin-inline-start:calc(var(--space-unit) * 5);background-color:var(--color-surface-bg);z-index:10;display:flex;position:absolute;top:5px;height:40px}@media screen and (min-width: 992px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 8.5)}}@media screen and (min-width: 1280px){.bulk-actions{margin-inline-start:calc(var(--space-unit) * 10.5)}}.table-wrapper{display:block;overflow-y:hidden;overflow-x:auto;position:relative;width:100%;max-width:var(--surface-width)}table{width:100%}table.no-select{-webkit-user-select:none;user-select:none}.column-picker{width:24px}.sort-toggle{display:flex;align-items:center;margin-inline-start:calc(var(--space-unit) * .5)}.sort-toggle button{border:0;border-radius:var(--border-radius-lg);color:var(--color-weight-500);padding:0 2px;cursor:pointer;background-color:transparent}.sort-toggle button.active{color:var(--color-primary-700)}.sort-toggle .sort-label{margin-inline-start:calc(var(--space-unit) * .5);font-size:10px;color:var(--color-primary-600);font-weight:400}.toggle-search-filter-row{position:absolute;top:-12px;left:4px}@media screen and (min-width: 1280px){.toggle-search-filter-row{left:8px}}.toggle-search-filter-row.active{background-color:var(--color-primary-700);color:var(--color-primary-100);border-color:var(--color-primary-700)}th.filter-row{position:relative;font-size:var(--font-size-base);font-weight:400;background-color:var(--color-weight-100);box-shadow:var(--data-table-filter-box-shadow);border-left-width:0;border-right-width:0;text-align:initial;padding:0}th.filter-row input{width:100%}th.filter-row.active{border-bottom:1px solid var(--color-table-header-border)}th.filter-row .filters{margin-top:calc(var(--space-unit) * 1);display:flex;flex-wrap:wrap;gap:calc(var(--space-unit) * .5)}.filter-row-wrapper{padding:calc(var(--space-unit) * 4);padding-inline-start:0;max-height:150px;transition:max-height .2s,padding .2s,opacity .2s}.filter-row-wrapper.hidden{max-height:0px;padding-top:0;padding-bottom:0;overflow:hidden;opacity:0}.cell-link{display:block;width:100%;height:100%}td.active{background-color:var(--color-table-row-active-bg)}.cell-content{display:flex;align-items:center;line-height:var(--font-size-sm);color:var(--color-weight-700)}.cell-content.left{justify-content:flex-start}.cell-content.center{justify-content:center}.cell-content.right{justify-content:flex-end}.selection-col{width:calc(var(--space-unit) * 8)}vdr-empty-placeholder{width:100%}.table-footer{display:flex;align-items:baseline;justify-content:space-between;margin-top:var(--space-unit);margin-inline-start:var(--surface-margin-left);margin-inline-end:var(--space-unit)}.total-items-count{font-size:var(--font-size-xs)}@container (max-width: 500px){.total-items-count{display:none}}\n", ":host .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}:host .sub-total td{border-top:1px dashed var(--color-component-border-200)}:host .total td{font-weight:700;border-top:1px dashed var(--color-component-border-200)}:host td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}:host img{border-radius:var(--border-radius-img)}:host .order-line-custom-fields{display:flex;flex-wrap:wrap}:host .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-inline-end:18px}:host .draft-qty{max-width:48px}:host .order-line-custom-field{background-color:var(--color-component-bg-100)}:host .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}:host .net-price{font-size:11px;color:var(--color-text-300);line-height:14px}:host .promotions-label{text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}:host .thumb img{width:50px;height:50px}:host .shipping-method-name{font-size:var(--font-size-xs);margin-inline-end:2px}:host .order-placed-quantity{text-decoration:line-through;color:var(--color-text-300);margin-inline-end:2px}\n"] }]
        }], propDecorators: { totalColumns: [{
                type: ContentChildren,
                args: [OrderTotalColumnComponent]
            }], order: [{
                type: Input
            }] } });

class OrderTableComponent {
    constructor() {
        this.isDraft = false;
        this.adjust = new EventEmitter();
        this.remove = new EventEmitter();
        this.orderLineCustomFieldsVisible = false;
        this.customFieldsForLine = {};
    }
    get visibleOrderLineCustomFields() {
        return this.orderLineCustomFieldsVisible ? this.orderLineCustomFields : [];
    }
    get showElided() {
        return !this.orderLineCustomFieldsVisible && 0 < this.orderLineCustomFields.length;
    }
    ngOnInit() {
        this.orderLineCustomFieldsVisible = this.orderLineCustomFields.length < 2;
        this.getLineCustomFields();
    }
    draftInputBlur(line, quantity) {
        if (line.quantity !== quantity) {
            this.adjust.emit({ lineId: line.id, quantity });
        }
    }
    toggleOrderLineCustomFields() {
        this.orderLineCustomFieldsVisible = !this.orderLineCustomFieldsVisible;
    }
    getLineDiscounts(line) {
        return line.discounts.filter(a => a.type === AdjustmentType.PROMOTION);
    }
    getLineCustomFields() {
        for (const line of this.order.lines) {
            const formGroup = new UntypedFormGroup({});
            const result = this.orderLineCustomFields
                .map(config => {
                const value = line.customFields[config.name];
                formGroup.addControl(config.name, new UntypedFormControl(value));
                return {
                    config,
                    formGroup,
                    value,
                };
            })
                .filter(field => this.orderLineCustomFieldsVisible ? true : field.value != null);
            this.customFieldsForLine[line.id] = result;
        }
    }
    getPromotionLink(promotion) {
        const id = promotion.adjustmentSource.split(':')[1];
        return ['/marketing', 'promotions', id];
    }
    getCouponCodeForAdjustment(order, promotionAdjustment) {
        const id = promotionAdjustment.adjustmentSource.split(':')[1];
        const promotion = order.promotions.find(p => p.id === id);
        if (promotion) {
            return promotion.couponCode || undefined;
        }
    }
    getShippingNames(order) {
        if (order.shippingLines.length) {
            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');
        }
        else {
            return '';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderTableComponent, selector: "vdr-order-table", inputs: { order: "order", orderLineCustomFields: "orderLineCustomFields", isDraft: "isDraft" }, outputs: { adjust: "adjust", remove: "remove" }, ngImport: i0, template: "<vdr-order-data-table id=\"order-detail-list\" [items]=\"order.lines\" [order]=\"order\">\r\n    <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-line=\"item\">\r\n            {{ line.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n            id=\"created-at\"\r\n            [heading]=\"'common.created-at' | translate\"\r\n            [hiddenByDefault]=\"true\"\r\n    >\r\n        <ng-template let-line=\"item\">\r\n            {{ line.createdAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n            id=\"updated-at\"\r\n            [heading]=\"'common.updated-at' | translate\"\r\n            [hiddenByDefault]=\"true\"\r\n    >\r\n        <ng-template let-line=\"item\">\r\n            {{ line.updatedAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n        <ng-template let-line=\"item\">\r\n            <div class=\"image-placeholder\">\r\n                <img\r\n                    *ngIf=\"line.featuredAsset as asset; else imagePlaceholder\"\r\n                    [src]=\"asset | assetPreview : 'tiny'\"\r\n                />\r\n                <ng-template #imagePlaceholder>\r\n                    <div class=\"placeholder\">\r\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.product-name' | translate\" id=\"product-name\">\r\n        <ng-template let-line=\"item\">\r\n            {{ line.productVariant.name }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.product-sku' | translate\" id=\"product-sku\" [optional]=\"false\">\r\n        <ng-template let-line=\"item\">\r\n            {{ line.productVariant.sku }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.unit-price' | translate\" id=\"unit-price\">\r\n        <ng-template let-line=\"item\">\r\n            <div class=\"unit-price\">\r\n                {{ line.unitPriceWithTax | localeCurrency : order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ line.unitPrice | localeCurrency : order.currencyCode }}\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.quantity' | translate\" id=\"quantity\" [optional]=\"false\">\r\n        <ng-template let-line=\"item\">\r\n            <ng-container *ngIf=\"!isDraft; else draft\">\r\n                <div class=\"flex\">\r\n                    <div\r\n                        *ngIf=\"line.orderPlacedQuantity && line.quantity !== line.orderPlacedQuantity\"\r\n                        class=\"order-placed-quantity\"\r\n                        [title]=\"'order.original-quantity-at-checkout' | translate\"\r\n                    >\r\n                        {{ line.orderPlacedQuantity }}\r\n                    </div>\r\n                    <div>{{ line.quantity }}</div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-template #draft>\r\n                <div class=\"flex\">\r\n                    <input\r\n                        class=\"draft-qty\"\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        #qtyInput\r\n                        [value]=\"line.quantity\"\r\n                        (blur)=\"draftInputBlur(line, qtyInput.valueAsNumber)\"\r\n                    />\r\n                    <button class=\"icon-button\" (click)=\"remove.emit({ lineId: line.id })\">\r\n                        <clr-icon shape=\"trash\"></clr-icon>\r\n                    </button>\r\n                </div>\r\n            </ng-template>\r\n            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n            <vdr-line-fulfillment\r\n                [line]=\"line\"\r\n                [orderState]=\"order.state\"\r\n                [allOrderFulfillments]=\"order.fulfillments\"\r\n            ></vdr-line-fulfillment>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-custom-field-column\r\n        *ngFor=\"let customField of orderLineCustomFields\"\r\n        [customField]=\"customField\"\r\n    />\r\n    <vdr-order-total-column [heading]=\"'order.total' | translate\" id=\"total\" [optional]=\"false\">\r\n        <ng-template let-line=\"item\">\r\n            <div class=\"unit-price\">\r\n                {{ line.linePriceWithTax | localeCurrency : order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ line.linePrice | localeCurrency : order.currencyCode }}\r\n                </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\r\n                <vdr-dropdown *ngIf=\"discounts.length\">\r\n                    <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                        {{ 'order.promotions-applied' | translate }}\r\n                    </div>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                            <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\r\n                                discount.description\r\n                            }}</a>\r\n                            <div class=\"promotion-amount\">\r\n                                {{ discount.amountWithTax | localeCurrency : order.currencyCode }}\r\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                    {{ discount.amount | localeCurrency : order.currencyCode }}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-container>\r\n        </ng-template>\r\n    </vdr-order-total-column>\r\n</vdr-order-data-table>\r\n", styles: [":host .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}:host .sub-total td{border-top:1px dashed var(--color-component-border-200)}:host .total td{font-weight:700;border-top:1px dashed var(--color-component-border-200)}:host td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}:host img{border-radius:var(--border-radius-img)}:host .order-line-custom-fields{display:flex;flex-wrap:wrap}:host .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-inline-end:18px}:host .draft-qty{max-width:48px}:host .order-line-custom-field{background-color:var(--color-component-bg-100)}:host .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}:host .net-price{font-size:11px;color:var(--color-text-300);line-height:14px}:host .promotions-label{text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}:host .thumb img{width:50px;height:50px}:host .shipping-method-name{font-size:var(--font-size-xs);margin-inline-end:2px}:host .order-placed-quantity{text-decoration:line-through;color:var(--color-text-300);margin-inline-end:2px}::ng-deep .line-promotion{display:flex;justify-content:space-between;padding:6px 12px}::ng-deep .line-promotion .promotion-amount{margin-inline-start:12px}::ng-deep .line-promotion .net-price{font-size:11px;color:var(--color-text-300)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: LineFulfillmentComponent, selector: "vdr-line-fulfillment", inputs: ["line", "allOrderFulfillments", "orderState"] }, { kind: "component", type: LineRefundsComponent, selector: "vdr-line-refunds", inputs: ["line", "payments"] }, { kind: "component", type: OrderDataTableComponent, selector: "vdr-order-data-table", inputs: ["order"] }, { kind: "component", type: OrderTotalColumnComponent, selector: "vdr-order-total-column", exportAs: ["row"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.AssetPreviewPipe, name: "assetPreview" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-table', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-order-data-table id=\"order-detail-list\" [items]=\"order.lines\" [order]=\"order\">\r\n    <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-line=\"item\">\r\n            {{ line.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n            id=\"created-at\"\r\n            [heading]=\"'common.created-at' | translate\"\r\n            [hiddenByDefault]=\"true\"\r\n    >\r\n        <ng-template let-line=\"item\">\r\n            {{ line.createdAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n            id=\"updated-at\"\r\n            [heading]=\"'common.updated-at' | translate\"\r\n            [hiddenByDefault]=\"true\"\r\n    >\r\n        <ng-template let-line=\"item\">\r\n            {{ line.updatedAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n        <ng-template let-line=\"item\">\r\n            <div class=\"image-placeholder\">\r\n                <img\r\n                    *ngIf=\"line.featuredAsset as asset; else imagePlaceholder\"\r\n                    [src]=\"asset | assetPreview : 'tiny'\"\r\n                />\r\n                <ng-template #imagePlaceholder>\r\n                    <div class=\"placeholder\">\r\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.product-name' | translate\" id=\"product-name\">\r\n        <ng-template let-line=\"item\">\r\n            {{ line.productVariant.name }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.product-sku' | translate\" id=\"product-sku\" [optional]=\"false\">\r\n        <ng-template let-line=\"item\">\r\n            {{ line.productVariant.sku }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.unit-price' | translate\" id=\"unit-price\">\r\n        <ng-template let-line=\"item\">\r\n            <div class=\"unit-price\">\r\n                {{ line.unitPriceWithTax | localeCurrency : order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ line.unitPrice | localeCurrency : order.currencyCode }}\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.quantity' | translate\" id=\"quantity\" [optional]=\"false\">\r\n        <ng-template let-line=\"item\">\r\n            <ng-container *ngIf=\"!isDraft; else draft\">\r\n                <div class=\"flex\">\r\n                    <div\r\n                        *ngIf=\"line.orderPlacedQuantity && line.quantity !== line.orderPlacedQuantity\"\r\n                        class=\"order-placed-quantity\"\r\n                        [title]=\"'order.original-quantity-at-checkout' | translate\"\r\n                    >\r\n                        {{ line.orderPlacedQuantity }}\r\n                    </div>\r\n                    <div>{{ line.quantity }}</div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-template #draft>\r\n                <div class=\"flex\">\r\n                    <input\r\n                        class=\"draft-qty\"\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        #qtyInput\r\n                        [value]=\"line.quantity\"\r\n                        (blur)=\"draftInputBlur(line, qtyInput.valueAsNumber)\"\r\n                    />\r\n                    <button class=\"icon-button\" (click)=\"remove.emit({ lineId: line.id })\">\r\n                        <clr-icon shape=\"trash\"></clr-icon>\r\n                    </button>\r\n                </div>\r\n            </ng-template>\r\n            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n            <vdr-line-fulfillment\r\n                [line]=\"line\"\r\n                [orderState]=\"order.state\"\r\n                [allOrderFulfillments]=\"order.fulfillments\"\r\n            ></vdr-line-fulfillment>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-custom-field-column\r\n        *ngFor=\"let customField of orderLineCustomFields\"\r\n        [customField]=\"customField\"\r\n    />\r\n    <vdr-order-total-column [heading]=\"'order.total' | translate\" id=\"total\" [optional]=\"false\">\r\n        <ng-template let-line=\"item\">\r\n            <div class=\"unit-price\">\r\n                {{ line.linePriceWithTax | localeCurrency : order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ line.linePrice | localeCurrency : order.currencyCode }}\r\n                </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\r\n                <vdr-dropdown *ngIf=\"discounts.length\">\r\n                    <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                        {{ 'order.promotions-applied' | translate }}\r\n                    </div>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                            <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\r\n                                discount.description\r\n                            }}</a>\r\n                            <div class=\"promotion-amount\">\r\n                                {{ discount.amountWithTax | localeCurrency : order.currencyCode }}\r\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                    {{ discount.amount | localeCurrency : order.currencyCode }}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-container>\r\n        </ng-template>\r\n    </vdr-order-total-column>\r\n</vdr-order-data-table>\r\n", styles: [":host .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}:host .sub-total td{border-top:1px dashed var(--color-component-border-200)}:host .total td{font-weight:700;border-top:1px dashed var(--color-component-border-200)}:host td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}:host img{border-radius:var(--border-radius-img)}:host .order-line-custom-fields{display:flex;flex-wrap:wrap}:host .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-inline-end:18px}:host .draft-qty{max-width:48px}:host .order-line-custom-field{background-color:var(--color-component-bg-100)}:host .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}:host .net-price{font-size:11px;color:var(--color-text-300);line-height:14px}:host .promotions-label{text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}:host .thumb img{width:50px;height:50px}:host .shipping-method-name{font-size:var(--font-size-xs);margin-inline-end:2px}:host .order-placed-quantity{text-decoration:line-through;color:var(--color-text-300);margin-inline-end:2px}::ng-deep .line-promotion{display:flex;justify-content:space-between;padding:6px 12px}::ng-deep .line-promotion .promotion-amount{margin-inline-start:12px}::ng-deep .line-promotion .net-price{font-size:11px;color:var(--color-text-300)}\n"] }]
        }], propDecorators: { order: [{
                type: Input
            }], orderLineCustomFields: [{
                type: Input
            }], isDraft: [{
                type: Input
            }], adjust: [{
                type: Output
            }], remove: [{
                type: Output
            }] } });

class DraftOrderVariantSelectorComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.addItem = new EventEmitter();
        this.customFieldsFormGroup = new UntypedFormGroup({});
        this.selectedVariantId$ = new Subject();
        this.quantity = 1;
    }
    ngOnInit() {
        this.selectedVariant$ = this.selectedVariantId$.pipe(switchMap(id => {
            if (id) {
                return this.dataService.product
                    .getProductVariant(id)
                    .mapSingle(({ productVariant }) => productVariant);
            }
            else {
                return [undefined];
            }
        }));
        for (const customField of this.orderLineCustomFields) {
            this.customFieldsFormGroup.addControl(customField.name, new UntypedFormControl(''));
        }
    }
    addItemClick(selectedVariant) {
        if (selectedVariant) {
            this.addItem.emit({
                productVariantId: selectedVariant.id,
                quantity: this.quantity,
                customFields: this.orderLineCustomFields.length
                    ? this.customFieldsFormGroup.value
                    : undefined,
            });
            this.selectedVariantId$.next(undefined);
            this.customFieldsFormGroup.reset();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DraftOrderVariantSelectorComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: DraftOrderVariantSelectorComponent, selector: "vdr-draft-order-variant-selector", inputs: { currencyCode: "currencyCode", orderLineCustomFields: "orderLineCustomFields" }, outputs: { addItem: "addItem" }, ngImport: i0, template: "<div class=\"card\">\r\n    <div class=\"card-block\">\r\n        <h4 class=\"card-title\">{{ 'order.add-item-to-order' | translate }}</h4>\r\n        <vdr-product-variant-selector\r\n            (productSelected)=\"selectedVariantId$.next($event.productVariantId)\"\r\n        ></vdr-product-variant-selector>\r\n    </div>\r\n    <div class=\"card-block\" *ngIf=\"selectedVariant$ | async as selectedVariant\">\r\n        <div class=\"variant-details\">\r\n            <img class=\"mr-2\" [src]=\"selectedVariant.featuredAsset || selectedVariant.product.featuredAsset | assetPreview: 32\">\r\n            <div class=\"details\">\r\n                <div>{{ selectedVariant?.name }}</div>\r\n                <div class=\"small\">{{ selectedVariant?.sku }}</div>\r\n            </div>\r\n            <div class=\"details ml-4\">\r\n                <div class=\"small\">\r\n                    {{ 'catalog.stock-on-hand' | translate }}: {{ selectedVariant.stockOnHand }}\r\n                </div>\r\n                <div class=\"small\">\r\n                    {{ 'catalog.stock-allocated' | translate }}: {{ selectedVariant.stockAllocated }}\r\n                </div>\r\n            </div>\r\n            <div class=\"flex-spacer\"></div>\r\n            <div class=\"details\">\r\n                <div>{{ selectedVariant?.priceWithTax | localeCurrency: currencyCode }}</div>\r\n                <div class=\"small\" [title]=\"'order.net-price' | translate\">\r\n                    {{ selectedVariant?.price | localeCurrency: currencyCode }}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <input [disabled]=\"!selectedVariant\" type=\"number\" min=\"0\" [(ngModel)]=\"quantity\" />\r\n            </div>\r\n            <button\r\n                [disabled]=\"!selectedVariant\"\r\n                class=\"btn btn-small btn-primary\"\r\n                (click)=\"addItemClick(selectedVariant)\"\r\n            >\r\n                {{ 'order.add-item-to-order' | translate }}\r\n            </button>\r\n        </div>\r\n        <ng-container *ngIf=\"orderLineCustomFields.length\">\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Order\"\r\n                [customFields]=\"orderLineCustomFields\"\r\n                [customFieldsFormGroup]=\"customFieldsFormGroup\"\r\n            ></vdr-tabbed-custom-fields>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n", styles: [".variant-details{display:flex;align-items:center}.variant-details img{border-radius:var(--border-radius-img);width:32px;height:32px}.variant-details .details{font-size:.65rem;line-height:.7rem}.variant-details input{width:48px;margin:0 6px}.variant-details .small{font-size:11px;color:var(--color-text-300)}\n"], dependencies: [{ kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.ProductVariantSelectorComponent, selector: "vdr-product-variant-selector", outputs: ["productSelected"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.AssetPreviewPipe, name: "assetPreview" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DraftOrderVariantSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-draft-order-variant-selector', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"card\">\r\n    <div class=\"card-block\">\r\n        <h4 class=\"card-title\">{{ 'order.add-item-to-order' | translate }}</h4>\r\n        <vdr-product-variant-selector\r\n            (productSelected)=\"selectedVariantId$.next($event.productVariantId)\"\r\n        ></vdr-product-variant-selector>\r\n    </div>\r\n    <div class=\"card-block\" *ngIf=\"selectedVariant$ | async as selectedVariant\">\r\n        <div class=\"variant-details\">\r\n            <img class=\"mr-2\" [src]=\"selectedVariant.featuredAsset || selectedVariant.product.featuredAsset | assetPreview: 32\">\r\n            <div class=\"details\">\r\n                <div>{{ selectedVariant?.name }}</div>\r\n                <div class=\"small\">{{ selectedVariant?.sku }}</div>\r\n            </div>\r\n            <div class=\"details ml-4\">\r\n                <div class=\"small\">\r\n                    {{ 'catalog.stock-on-hand' | translate }}: {{ selectedVariant.stockOnHand }}\r\n                </div>\r\n                <div class=\"small\">\r\n                    {{ 'catalog.stock-allocated' | translate }}: {{ selectedVariant.stockAllocated }}\r\n                </div>\r\n            </div>\r\n            <div class=\"flex-spacer\"></div>\r\n            <div class=\"details\">\r\n                <div>{{ selectedVariant?.priceWithTax | localeCurrency: currencyCode }}</div>\r\n                <div class=\"small\" [title]=\"'order.net-price' | translate\">\r\n                    {{ selectedVariant?.price | localeCurrency: currencyCode }}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <input [disabled]=\"!selectedVariant\" type=\"number\" min=\"0\" [(ngModel)]=\"quantity\" />\r\n            </div>\r\n            <button\r\n                [disabled]=\"!selectedVariant\"\r\n                class=\"btn btn-small btn-primary\"\r\n                (click)=\"addItemClick(selectedVariant)\"\r\n            >\r\n                {{ 'order.add-item-to-order' | translate }}\r\n            </button>\r\n        </div>\r\n        <ng-container *ngIf=\"orderLineCustomFields.length\">\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Order\"\r\n                [customFields]=\"orderLineCustomFields\"\r\n                [customFieldsFormGroup]=\"customFieldsFormGroup\"\r\n            ></vdr-tabbed-custom-fields>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n", styles: [".variant-details{display:flex;align-items:center}.variant-details img{border-radius:var(--border-radius-img);width:32px;height:32px}.variant-details .details{font-size:.65rem;line-height:.7rem}.variant-details input{width:48px;margin:0 6px}.variant-details .small{font-size:11px;color:var(--color-text-300)}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }], propDecorators: { currencyCode: [{
                type: Input
            }], orderLineCustomFields: [{
                type: Input
            }], addItem: [{
                type: Output
            }] } });

class DraftOrderDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, notificationService, modalService, orderTransitionService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.orderTransitionService = orderTransitionService;
        this.customFields = this.getCustomFieldConfig('Order');
        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');
        this.detailForm = new UntypedFormGroup({});
        this.fetchHistory = new Subject();
        this.displayCouponCodeInput = false;
    }
    ngOnInit() {
        this.init();
        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');
        this.eligibleShippingMethods$ = this.entity$.pipe(switchMap(order => this.dataService.order
            .getDraftOrderEligibleShippingMethods(order.id)
            .mapSingle(({ eligibleShippingMethodsForDraftOrder }) => eligibleShippingMethodsForDraftOrder)));
    }
    ngOnDestroy() {
        this.destroy();
    }
    addItemToOrder(event) {
        this.dataService.order.addItemToDraftOrder(this.id, event).subscribe(result => {
            if (result.addItemToDraftOrder.__typename !== 'Order') {
                this.notificationService.error(result.addItemToDraftOrder.message);
            }
        });
    }
    adjustOrderLine(event) {
        this.dataService.order
            .adjustDraftOrderLine(this.id, { orderLineId: event.lineId, quantity: event.quantity })
            .subscribe(result => {
            if (result.adjustDraftOrderLine.__typename !== 'Order') {
                this.notificationService.error(result.adjustDraftOrderLine.message);
            }
        });
    }
    removeOrderLine(event) {
        this.dataService.order.removeDraftOrderLine(this.id, event.lineId).subscribe(result => {
            if (result.removeDraftOrderLine.__typename !== 'Order') {
                this.notificationService.error(result.removeDraftOrderLine.message);
            }
        });
    }
    getOrderAddressLines(orderAddress) {
        if (!orderAddress) {
            return [];
        }
        return Object.values(orderAddress)
            .filter(val => val !== 'OrderAddress')
            .filter(line => !!line);
    }
    setCustomer() {
        this.modalService.fromComponent(SelectCustomerDialogComponent).subscribe(result => {
            if (this.hasId(result)) {
                this.dataService.order
                    .setCustomerForDraftOrder(this.id, { customerId: result.id })
                    .pipe(switchMap(() => {
                    return this.dataService.query(GetCustomerAddressesDocument, {
                        customerId: result.id,
                    }).single$;
                }), switchMap(({ customer }) => {
                    const defaultShippingAddress = customer?.addresses?.find(addr => addr.defaultShippingAddress);
                    const defaultBillingAddress = customer?.addresses?.find(addr => addr.defaultBillingAddress);
                    return forkJoin([
                        defaultShippingAddress
                            ? this.dataService.order.setDraftOrderShippingAddress(this.id, this.mapToAddressInput(defaultShippingAddress))
                            : this.dataService.order.unsetDraftOrderShippingAddress(this.id),
                        defaultBillingAddress
                            ? this.dataService.order.setDraftOrderBillingAddress(this.id, this.mapToAddressInput(defaultBillingAddress))
                            : this.dataService.order.unsetDraftOrderBillingAddress(this.id),
                    ]);
                }))
                    .subscribe();
            }
            else if (result) {
                const { note, ...input } = result;
                this.dataService.order.setCustomerForDraftOrder(this.id, { input }).subscribe();
            }
        });
    }
    mapToAddressInput(address) {
        return {
            fullName: address.fullName,
            company: address.company,
            streetLine1: address.streetLine1,
            streetLine2: address.streetLine2,
            city: address.city,
            province: address.province,
            postalCode: address.postalCode,
            countryCode: address.country.code,
            phoneNumber: address.phoneNumber,
            defaultShippingAddress: address.defaultShippingAddress,
            defaultBillingAddress: address.defaultBillingAddress,
        };
    }
    setShippingAddress() {
        this.entity$
            .pipe(take(1), switchMap(order => this.modalService.fromComponent(SelectAddressDialogComponent, {
            locals: {
                customerId: order.customer?.id,
                currentAddress: order.shippingAddress ?? undefined,
            },
        })))
            .subscribe(result => {
            if (result) {
                this.dataService.order.setDraftOrderShippingAddress(this.id, result).subscribe();
            }
        });
    }
    setBillingAddress() {
        this.entity$
            .pipe(take(1), switchMap(order => this.modalService.fromComponent(SelectAddressDialogComponent, {
            locals: {
                customerId: order.customer?.id,
                currentAddress: order.billingAddress ?? undefined,
            },
        })))
            .subscribe(result => {
            if (result) {
                this.dataService.order.setDraftOrderBillingAddress(this.id, result).subscribe();
            }
        });
    }
    applyCouponCode(couponCode) {
        this.dataService.order.applyCouponCodeToDraftOrder(this.id, couponCode).subscribe();
    }
    removeCouponCode(couponCode) {
        this.dataService.order.removeCouponCodeFromDraftOrder(this.id, couponCode).subscribe();
    }
    setShippingMethod() {
        combineLatest(this.entity$, this.eligibleShippingMethods$)
            .pipe(take(1), switchMap(([order, methods]) => this.modalService.fromComponent(SelectShippingMethodDialogComponent, {
            locals: {
                eligibleShippingMethods: methods,
                currencyCode: order.currencyCode,
                currentSelectionId: order.shippingLines?.[0]?.shippingMethod.id,
            },
        })))
            .subscribe(result => {
            if (result) {
                this.dataService.order.setDraftOrderShippingMethod(this.id, result).subscribe();
            }
        });
    }
    updateCustomFields(customFieldsValue) {
        this.dataService.order
            .updateOrderCustomFields({
            id: this.id,
            customFields: customFieldsValue,
        })
            .subscribe();
    }
    deleteOrder() {
        this.dataService.order.deleteDraftOrder(this.id).subscribe(({ deleteDraftOrder }) => {
            if (deleteDraftOrder.result === DeletionResult.DELETED) {
                this.notificationService.success(marker('common.notify-delete-success'), {
                    entity: 'Order',
                });
                this.router.navigate(['/orders']);
            }
            else if (deleteDraftOrder.message) {
                this.notificationService.error(deleteDraftOrder.message);
            }
        });
    }
    completeOrder() {
        this.dataService.order
            .transitionToState(this.id, 'ArrangingPayment')
            .subscribe(({ transitionOrderToState }) => {
            if (transitionOrderToState?.__typename === 'Order') {
                this.router.navigate(['/orders', this.id]);
            }
            else if (transitionOrderToState?.__typename === 'OrderStateTransitionError') {
                this.notificationService.error(transitionOrderToState.transitionError);
            }
        });
    }
    hasId(input) {
        return typeof input === 'object' && !!input.id;
    }
    setFormValues(entity) {
        // empty
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DraftOrderDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i1.NotificationService }, { token: i1.ModalService }, { token: OrderTransitionService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: DraftOrderDetailComponent, selector: "vdr-draft-order-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\r\n    <vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n        <vdr-ab-left>\r\n            <div class=\"flex clr-align-items-center\">\r\n                <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n            </div>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"draft-order-detail\" />\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"completeOrder()\"\r\n                [disabled]=\"!order.customer || !order.lines.length || !order.shippingLines.length\"\r\n            >\r\n                <clr-icon shape=\"check\"></clr-icon>\r\n                {{ 'order.complete-draft-order' | translate }}\r\n            </button>\r\n            <vdr-action-bar-dropdown-menu [alwaysShow]=\"true\" locationId=\"draft-order-detail\">\r\n                <button type=\"button\" vdrDropdownItem (click)=\"deleteOrder()\">\r\n                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                    {{ 'order.delete-draft-order' | translate }}\r\n                </button>\r\n            </vdr-action-bar-dropdown-menu>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<vdr-page-detail-layout *ngIf=\"entity$ | async as order\">\r\n    <vdr-page-detail-sidebar>\r\n        <vdr-card [title]=\"'order.customer' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <clr-icon *ngIf=\"!order.customer\" shape=\"unknown-status\" class=\"is-warning\"></clr-icon>\r\n                <clr-icon *ngIf=\"order.customer\" shape=\"check\" class=\"is-success\"></clr-icon>\r\n            </ng-template>\r\n            <vdr-customer-label\r\n                class=\"block mb-2\"\r\n                *ngIf=\"order.customer\"\r\n                [customer]=\"order.customer\"\r\n            ></vdr-customer-label>\r\n            <button class=\"button-small\" (click)=\"setCustomer()\">\r\n                {{ 'order.set-customer-for-order' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.billing-address' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <clr-icon\r\n                    *ngIf=\"!order.billingAddress.streetLine1\"\r\n                    shape=\"unknown-status\"\r\n                    class=\"is-warning\"\r\n                ></clr-icon>\r\n                <clr-icon\r\n                    *ngIf=\"order.billingAddress.streetLine1\"\r\n                    shape=\"check\"\r\n                    class=\"is-success\"\r\n                ></clr-icon>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                class=\"block mb-2\"\r\n                *ngIf=\"order.billingAddress\"\r\n                [address]=\"order.billingAddress\"\r\n            ></vdr-formatted-address>\r\n            <button class=\"button-small\" (click)=\"setBillingAddress()\">\r\n                {{ 'order.set-billing-address' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.shipping' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <clr-icon\r\n                    *ngIf=\"!order.shippingAddress.streetLine1 || !order.shippingLines.length\"\r\n                    shape=\"unknown-status\"\r\n                    class=\"is-warning\"\r\n                ></clr-icon>\r\n                <clr-icon\r\n                    *ngIf=\"order.shippingAddress.streetLine1 && order.shippingLines.length\"\r\n                    shape=\"check\"\r\n                    class=\"is-success\"\r\n                ></clr-icon>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                class=\"block mb-2\"\r\n                *ngIf=\"order.shippingAddress\"\r\n                [address]=\"order.shippingAddress\"\r\n            ></vdr-formatted-address>\r\n            <button class=\"button-small mr-2\" (click)=\"setShippingAddress()\">\r\n                {{ 'order.set-shipping-address' | translate }}\r\n            </button>\r\n\r\n            <div *ngFor=\"let shippingLine of order.shippingLines\">\r\n                {{ shippingLine.shippingMethod.name }}\r\n            </div>\r\n            <button class=\"button-small\" (click)=\"setShippingMethod()\">\r\n                {{ 'order.set-shipping-method' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-card>\r\n            <button\r\n                *ngIf=\"order.couponCodes.length === 0 && !displayCouponCodeInput\"\r\n                class=\"button-small\"\r\n                (click)=\"displayCouponCodeInput = !displayCouponCodeInput\"\r\n            >\r\n                {{ 'order.set-coupon-codes' | translate }}\r\n            </button>\r\n            <div *ngIf=\"order.couponCodes.length || displayCouponCodeInput\">\r\n                <label>{{ 'order.set-coupon-codes' | translate }}</label>\r\n                <vdr-coupon-code-selector\r\n                    [couponCodes]=\"order.couponCodes\"\r\n                    (addCouponCode)=\"applyCouponCode($event)\"\r\n                    (removeCouponCode)=\"removeCouponCode($event)\"\r\n                ></vdr-coupon-code-selector>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card>\r\n            <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n        </vdr-card>\r\n    </vdr-page-detail-sidebar>\r\n    <vdr-page-block>\r\n        <vdr-card>\r\n            <vdr-draft-order-variant-selector\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n                [currencyCode]=\"order.currencyCode\"\r\n                (addItem)=\"addItemToOrder($event)\"\r\n            ></vdr-draft-order-variant-selector>\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n                [isDraft]=\"true\"\r\n                (adjust)=\"adjustOrderLine($event)\"\r\n                (remove)=\"removeOrderLine($event)\"\r\n            ></vdr-order-table>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.tax-summary' | translate\">\r\n            <ng-container *ngIf=\"order.taxSummary.length\">\r\n                <table class=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>{{ 'common.description' | translate }}</th>\r\n                            <th>{{ 'order.tax-rate' | translate }}</th>\r\n                            <th>{{ 'order.tax-base' | translate }}</th>\r\n                            <th>{{ 'order.tax-total' | translate }}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let row of order.taxSummary\">\r\n                            <td>{{ row.description }}</td>\r\n                            <td>{{ row.taxRate / 100 | percent }}</td>\r\n                            <td>{{ row.taxBase | localeCurrency : order.currencyCode }}</td>\r\n                            <td>{{ row.taxTotal | localeCurrency : order.currencyCode }}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </ng-container>\r\n        </vdr-card>\r\n        <vdr-custom-detail-component-host\r\n            locationId=\"draft-order-detail\"\r\n            [entity$]=\"entity$\"\r\n            [detailForm]=\"detailForm\"\r\n        ></vdr-custom-detail-component-host>\r\n\r\n        <vdr-order-custom-fields-card\r\n            [customFieldsConfig]=\"customFields\"\r\n            [customFieldValues]=\"order.customFields\"\r\n            (updateClick)=\"updateCustomFields($event)\"\r\n        ></vdr-order-custom-fields-card>\r\n    </vdr-page-block>\r\n</vdr-page-detail-layout>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.CustomerLabelComponent, selector: "vdr-customer-label", inputs: ["customer"] }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: i1.OrderStateLabelComponent, selector: "vdr-order-state-label", inputs: ["state"] }, { kind: "component", type: i1.FormattedAddressComponent, selector: "vdr-formatted-address", inputs: ["address"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "directive", type: i1.CardControlsDirective, selector: "[vdrCardControls]" }, { kind: "component", type: OrderCustomFieldsCardComponent, selector: "vdr-order-custom-fields-card", inputs: ["customFieldsConfig", "customFieldValues"], outputs: ["updateClick"] }, { kind: "component", type: OrderTableComponent, selector: "vdr-order-table", inputs: ["order", "orderLineCustomFields", "isDraft"], outputs: ["adjust", "remove"] }, { kind: "component", type: DraftOrderVariantSelectorComponent, selector: "vdr-draft-order-variant-selector", inputs: ["currencyCode", "orderLineCustomFields"], outputs: ["addItem"] }, { kind: "component", type: CouponCodeSelectorComponent, selector: "vdr-coupon-code-selector", inputs: ["couponCodes", "control"], outputs: ["addCouponCode", "removeCouponCode"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i2$1.PercentPipe, name: "percent" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DraftOrderDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-draft-order-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-block>\r\n    <vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n        <vdr-ab-left>\r\n            <div class=\"flex clr-align-items-center\">\r\n                <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n            </div>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"draft-order-detail\" />\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"completeOrder()\"\r\n                [disabled]=\"!order.customer || !order.lines.length || !order.shippingLines.length\"\r\n            >\r\n                <clr-icon shape=\"check\"></clr-icon>\r\n                {{ 'order.complete-draft-order' | translate }}\r\n            </button>\r\n            <vdr-action-bar-dropdown-menu [alwaysShow]=\"true\" locationId=\"draft-order-detail\">\r\n                <button type=\"button\" vdrDropdownItem (click)=\"deleteOrder()\">\r\n                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                    {{ 'order.delete-draft-order' | translate }}\r\n                </button>\r\n            </vdr-action-bar-dropdown-menu>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<vdr-page-detail-layout *ngIf=\"entity$ | async as order\">\r\n    <vdr-page-detail-sidebar>\r\n        <vdr-card [title]=\"'order.customer' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <clr-icon *ngIf=\"!order.customer\" shape=\"unknown-status\" class=\"is-warning\"></clr-icon>\r\n                <clr-icon *ngIf=\"order.customer\" shape=\"check\" class=\"is-success\"></clr-icon>\r\n            </ng-template>\r\n            <vdr-customer-label\r\n                class=\"block mb-2\"\r\n                *ngIf=\"order.customer\"\r\n                [customer]=\"order.customer\"\r\n            ></vdr-customer-label>\r\n            <button class=\"button-small\" (click)=\"setCustomer()\">\r\n                {{ 'order.set-customer-for-order' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.billing-address' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <clr-icon\r\n                    *ngIf=\"!order.billingAddress.streetLine1\"\r\n                    shape=\"unknown-status\"\r\n                    class=\"is-warning\"\r\n                ></clr-icon>\r\n                <clr-icon\r\n                    *ngIf=\"order.billingAddress.streetLine1\"\r\n                    shape=\"check\"\r\n                    class=\"is-success\"\r\n                ></clr-icon>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                class=\"block mb-2\"\r\n                *ngIf=\"order.billingAddress\"\r\n                [address]=\"order.billingAddress\"\r\n            ></vdr-formatted-address>\r\n            <button class=\"button-small\" (click)=\"setBillingAddress()\">\r\n                {{ 'order.set-billing-address' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.shipping' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <clr-icon\r\n                    *ngIf=\"!order.shippingAddress.streetLine1 || !order.shippingLines.length\"\r\n                    shape=\"unknown-status\"\r\n                    class=\"is-warning\"\r\n                ></clr-icon>\r\n                <clr-icon\r\n                    *ngIf=\"order.shippingAddress.streetLine1 && order.shippingLines.length\"\r\n                    shape=\"check\"\r\n                    class=\"is-success\"\r\n                ></clr-icon>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                class=\"block mb-2\"\r\n                *ngIf=\"order.shippingAddress\"\r\n                [address]=\"order.shippingAddress\"\r\n            ></vdr-formatted-address>\r\n            <button class=\"button-small mr-2\" (click)=\"setShippingAddress()\">\r\n                {{ 'order.set-shipping-address' | translate }}\r\n            </button>\r\n\r\n            <div *ngFor=\"let shippingLine of order.shippingLines\">\r\n                {{ shippingLine.shippingMethod.name }}\r\n            </div>\r\n            <button class=\"button-small\" (click)=\"setShippingMethod()\">\r\n                {{ 'order.set-shipping-method' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-card>\r\n            <button\r\n                *ngIf=\"order.couponCodes.length === 0 && !displayCouponCodeInput\"\r\n                class=\"button-small\"\r\n                (click)=\"displayCouponCodeInput = !displayCouponCodeInput\"\r\n            >\r\n                {{ 'order.set-coupon-codes' | translate }}\r\n            </button>\r\n            <div *ngIf=\"order.couponCodes.length || displayCouponCodeInput\">\r\n                <label>{{ 'order.set-coupon-codes' | translate }}</label>\r\n                <vdr-coupon-code-selector\r\n                    [couponCodes]=\"order.couponCodes\"\r\n                    (addCouponCode)=\"applyCouponCode($event)\"\r\n                    (removeCouponCode)=\"removeCouponCode($event)\"\r\n                ></vdr-coupon-code-selector>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card>\r\n            <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n        </vdr-card>\r\n    </vdr-page-detail-sidebar>\r\n    <vdr-page-block>\r\n        <vdr-card>\r\n            <vdr-draft-order-variant-selector\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n                [currencyCode]=\"order.currencyCode\"\r\n                (addItem)=\"addItemToOrder($event)\"\r\n            ></vdr-draft-order-variant-selector>\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n                [isDraft]=\"true\"\r\n                (adjust)=\"adjustOrderLine($event)\"\r\n                (remove)=\"removeOrderLine($event)\"\r\n            ></vdr-order-table>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.tax-summary' | translate\">\r\n            <ng-container *ngIf=\"order.taxSummary.length\">\r\n                <table class=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>{{ 'common.description' | translate }}</th>\r\n                            <th>{{ 'order.tax-rate' | translate }}</th>\r\n                            <th>{{ 'order.tax-base' | translate }}</th>\r\n                            <th>{{ 'order.tax-total' | translate }}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let row of order.taxSummary\">\r\n                            <td>{{ row.description }}</td>\r\n                            <td>{{ row.taxRate / 100 | percent }}</td>\r\n                            <td>{{ row.taxBase | localeCurrency : order.currencyCode }}</td>\r\n                            <td>{{ row.taxTotal | localeCurrency : order.currencyCode }}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </ng-container>\r\n        </vdr-card>\r\n        <vdr-custom-detail-component-host\r\n            locationId=\"draft-order-detail\"\r\n            [entity$]=\"entity$\"\r\n            [detailForm]=\"detailForm\"\r\n        ></vdr-custom-detail-component-host>\r\n\r\n        <vdr-order-custom-fields-card\r\n            [customFieldsConfig]=\"customFields\"\r\n            [customFieldValues]=\"order.customFields\"\r\n            (updateClick)=\"updateCustomFields($event)\"\r\n        ></vdr-order-custom-fields-card>\r\n    </vdr-page-block>\r\n</vdr-page-detail-layout>\r\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i1.NotificationService }, { type: i1.ModalService }, { type: OrderTransitionService }] });

class FulfillOrderDialogComponent {
    constructor(dataService, changeDetector) {
        this.dataService = dataService;
        this.changeDetector = changeDetector;
        this.fulfillmentHandlerControl = new UntypedFormControl();
        this.fulfillmentQuantities = {};
    }
    ngOnInit() {
        this.dataService.settings.getGlobalSettings().single$.subscribe(({ globalSettings }) => {
            this.fulfillmentQuantities = this.order.lines.reduce((result, line) => {
                const fulfillCount = this.getFulfillableCount(line, globalSettings.trackInventory);
                return {
                    ...result,
                    [line.id]: { fulfillCount, max: fulfillCount },
                };
            }, {});
            this.changeDetector.markForCheck();
        });
        this.dataService.shippingMethod
            .getShippingMethodOperations()
            .mapSingle(data => data.fulfillmentHandlers)
            .subscribe(handlers => {
            this.fulfillmentHandlerDef =
                handlers.find(h => h.code === this.order.shippingLines[0]?.shippingMethod?.fulfillmentHandlerCode) || handlers[0];
            this.fulfillmentHandler = configurableDefinitionToInstance(this.fulfillmentHandlerDef);
            this.fulfillmentHandlerControl.patchValue(this.fulfillmentHandler);
            this.changeDetector.markForCheck();
        });
    }
    getFulfillableCount(line, globalTrackInventory) {
        const { trackInventory, stockOnHand } = line.productVariant;
        const effectiveTracInventory = trackInventory === GlobalFlag.INHERIT ? globalTrackInventory : trackInventory === GlobalFlag.TRUE;
        const unfulfilledCount = this.getUnfulfilledCount(line);
        return effectiveTracInventory ? Math.min(unfulfilledCount, stockOnHand) : unfulfilledCount;
    }
    getUnfulfilledCount(line) {
        const fulfilled = this.order.fulfillments
            ?.filter(f => f.state !== 'Cancelled')
            .map(f => f.lines)
            .flat()
            .filter(row => row.orderLineId === line.id)
            .reduce((sum, row) => sum + row.quantity, 0) ?? 0;
        return line.quantity - fulfilled;
    }
    canSubmit() {
        const totalCount = Object.values(this.fulfillmentQuantities).reduce((total, { fulfillCount }) => total + fulfillCount, 0);
        const fulfillmentQuantityIsValid = Object.values(this.fulfillmentQuantities).every(({ fulfillCount, max }) => fulfillCount <= max);
        const formIsValid = configurableOperationValueIsValid(this.fulfillmentHandlerDef, this.fulfillmentHandlerControl.value) && this.fulfillmentHandlerControl.valid;
        return formIsValid && 0 < totalCount && fulfillmentQuantityIsValid;
    }
    select() {
        const lines = Object.entries(this.fulfillmentQuantities).map(([orderLineId, { fulfillCount }]) => ({
            orderLineId,
            quantity: fulfillCount,
        }));
        this.resolveWith({
            lines,
            handler: toConfigurableOperationInput(this.fulfillmentHandler, this.fulfillmentHandlerControl.value),
        });
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FulfillOrderDialogComponent, deps: [{ token: i1.DataService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: FulfillOrderDialogComponent, selector: "vdr-fulfill-order-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\r\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                    <th>{{ 'order.fulfill' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\r\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\r\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\r\n                        type=\"number\"\r\n                        [max]=\"fulfillmentQuantities[line.id].max\"\r\n                        min=\"0\"\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"shipping-details\">\r\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\r\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\r\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\r\n        <vdr-configurable-input\r\n            [operationDefinition]=\"fulfillmentHandlerDef\"\r\n            [operation]=\"fulfillmentHandler\"\r\n            [formControl]=\"fulfillmentHandlerControl\"\r\n            [removable]=\"false\"\r\n        ></vdr-configurable-input>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        {{ 'order.create-fulfillment' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [":host{height:100%;display:flex;min-height:64vh}:host .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}:host .sub-total td{border-top:1px dashed var(--color-component-border-200)}:host .total td{font-weight:700;border-top:1px dashed var(--color-component-border-200)}:host td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}:host img{border-radius:var(--border-radius-img)}:host .order-line-custom-fields{display:flex;flex-wrap:wrap}:host .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-inline-end:18px}:host .draft-qty{max-width:48px}:host .order-line-custom-field{background-color:var(--color-component-bg-100)}:host .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}:host .net-price{font-size:11px;color:var(--color-text-300);line-height:14px}:host .promotions-label{text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}:host .thumb img{width:50px;height:50px}:host .shipping-method-name{font-size:var(--font-size-xs);margin-inline-end:2px}:host .order-placed-quantity{text-decoration:line-through;color:var(--color-text-300);margin-inline-end:2px}.fulfillment-wrapper{flex:1}@media screen and (min-width: 768px){.fulfillment-wrapper{display:flex;flex-direction:row}}.fulfillment-wrapper .shipping-details{margin-top:24px}@media screen and (min-width: 768px){.fulfillment-wrapper .shipping-details{margin-top:0;margin-inline-start:24px;width:250px}}.fulfillment-wrapper .shipping-details clr-input-container{margin-top:24px}.fulfillment-wrapper .order-table{flex:1;overflow-y:auto}.fulfillment-wrapper .order-table table{margin-top:0}.fulfillment-wrapper tr.ignore{color:var(--color-grey-300)}\n"], dependencies: [{ kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i1.ConfigurableInputComponent, selector: "vdr-configurable-input", inputs: ["operation", "operationDefinition", "readonly", "removable", "position", "hideDescription"], outputs: ["remove"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.FormattedAddressComponent, selector: "vdr-formatted-address", inputs: ["address"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.AssetPreviewPipe, name: "assetPreview" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FulfillOrderDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-fulfill-order-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\r\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                    <th>{{ 'order.fulfill' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\r\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\r\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\r\n                        type=\"number\"\r\n                        [max]=\"fulfillmentQuantities[line.id].max\"\r\n                        min=\"0\"\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"shipping-details\">\r\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\r\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\r\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\r\n        <vdr-configurable-input\r\n            [operationDefinition]=\"fulfillmentHandlerDef\"\r\n            [operation]=\"fulfillmentHandler\"\r\n            [formControl]=\"fulfillmentHandlerControl\"\r\n            [removable]=\"false\"\r\n        ></vdr-configurable-input>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        {{ 'order.create-fulfillment' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [":host{height:100%;display:flex;min-height:64vh}:host .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}:host .sub-total td{border-top:1px dashed var(--color-component-border-200)}:host .total td{font-weight:700;border-top:1px dashed var(--color-component-border-200)}:host td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}:host img{border-radius:var(--border-radius-img)}:host .order-line-custom-fields{display:flex;flex-wrap:wrap}:host .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-inline-end:18px}:host .draft-qty{max-width:48px}:host .order-line-custom-field{background-color:var(--color-component-bg-100)}:host .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}:host .net-price{font-size:11px;color:var(--color-text-300);line-height:14px}:host .promotions-label{text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}:host .thumb img{width:50px;height:50px}:host .shipping-method-name{font-size:var(--font-size-xs);margin-inline-end:2px}:host .order-placed-quantity{text-decoration:line-through;color:var(--color-text-300);margin-inline-end:2px}.fulfillment-wrapper{flex:1}@media screen and (min-width: 768px){.fulfillment-wrapper{display:flex;flex-direction:row}}.fulfillment-wrapper .shipping-details{margin-top:24px}@media screen and (min-width: 768px){.fulfillment-wrapper .shipping-details{margin-top:0;margin-inline-start:24px;width:250px}}.fulfillment-wrapper .shipping-details clr-input-container{margin-top:24px}.fulfillment-wrapper .order-table{flex:1;overflow-y:auto}.fulfillment-wrapper .order-table table{margin-top:0}.fulfillment-wrapper tr.ignore{color:var(--color-grey-300)}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i0.ChangeDetectorRef }] });

class SimpleItemListComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SimpleItemListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: SimpleItemListComponent, selector: "vdr-simple-item-list", inputs: { items: "items" }, ngImport: i0, template: "<div class=\"items-list\">\r\n    <ul>\r\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\r\n            <div class=\"quantity\" *ngIf=\"item.quantity != null\">{{ item.quantity }}</div>\r\n            <clr-icon shape=\"times\" size=\"12\" *ngIf=\"item.quantity != null\"></clr-icon>\r\n            {{ item.name }}\r\n        </li>\r\n    </ul>\r\n</div>\r\n", styles: [".items-list{font-size:12px}.items-list ul{margin-top:6px;list-style-type:none;margin-inline-start:2px}.items-list ul li{line-height:14px;text-overflow:ellipsis;overflow:hidden}.items-list .quantity{min-width:16px;display:inline-block}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SimpleItemListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-simple-item-list', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"items-list\">\r\n    <ul>\r\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\r\n            <div class=\"quantity\" *ngIf=\"item.quantity != null\">{{ item.quantity }}</div>\r\n            <clr-icon shape=\"times\" size=\"12\" *ngIf=\"item.quantity != null\"></clr-icon>\r\n            {{ item.name }}\r\n        </li>\r\n    </ul>\r\n</div>\r\n", styles: [".items-list{font-size:12px}.items-list ul{margin-top:6px;list-style-type:none;margin-inline-start:2px}.items-list ul li{line-height:14px;text-overflow:ellipsis;overflow:hidden}.items-list .quantity{min-width:16px;display:inline-block}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }] } });

class FulfillmentDetailComponent {
    constructor(serverConfigService) {
        this.serverConfigService = serverConfigService;
        this.customFieldConfig = [];
        this.customFieldFormGroup = new UntypedFormGroup({});
    }
    ngOnInit() {
        this.customFieldConfig = this.serverConfigService.getCustomFieldsFor('Fulfillment');
    }
    ngOnChanges(changes) {
        this.buildCustomFieldsFormGroup();
    }
    get fulfillment() {
        return this.order.fulfillments && this.order.fulfillments.find(f => f.id === this.fulfillmentId);
    }
    get items() {
        return (this.fulfillment?.lines.map(row => ({
            name: this.order.lines.find(line => line.id === row.orderLineId)?.productVariant.name ?? '',
            quantity: row.quantity,
        })) ?? []);
    }
    buildCustomFieldsFormGroup() {
        const customFields = this.fulfillment.customFields;
        for (const fieldDef of this.serverConfigService.getCustomFieldsFor('Fulfillment')) {
            this.customFieldFormGroup.addControl(fieldDef.name, new UntypedFormControl(customFields[fieldDef.name]));
        }
    }
    customFieldIsObject(customField) {
        return Array.isArray(customField) || isObject(customField);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FulfillmentDetailComponent, deps: [{ token: i1.ServerConfigService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: FulfillmentDetailComponent, selector: "vdr-fulfillment-detail", inputs: { fulfillmentId: "fulfillmentId", order: "order" }, usesOnChanges: true, ngImport: i0, template: "<vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n    {{ fulfillment?.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\r\n    {{ fulfillment?.trackingCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<ng-container *ngFor=\"let customField of customFieldConfig\">\r\n    <vdr-custom-field-control\r\n        *ngIf=\"customFieldFormGroup.get(customField.name)\"\r\n        [readonly]=\"true\"\r\n        [compact]=\"true\"\r\n        [customField]=\"customField\"\r\n        [customFieldsFormGroup]=\"customFieldFormGroup\"\r\n    ></vdr-custom-field-control>\r\n</ng-container>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.CustomFieldControlComponent, selector: "vdr-custom-field-control", inputs: ["entityName", "customFieldsFormGroup", "customField", "compact", "showLabel", "readonly"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: SimpleItemListComponent, selector: "vdr-simple-item-list", inputs: ["items"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FulfillmentDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-fulfillment-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n    {{ fulfillment?.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\r\n    {{ fulfillment?.trackingCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<ng-container *ngFor=\"let customField of customFieldConfig\">\r\n    <vdr-custom-field-control\r\n        *ngIf=\"customFieldFormGroup.get(customField.name)\"\r\n        [readonly]=\"true\"\r\n        [compact]=\"true\"\r\n        [customField]=\"customField\"\r\n        [customFieldsFormGroup]=\"customFieldFormGroup\"\r\n    ></vdr-custom-field-control>\r\n</ng-container>\r\n" }]
        }], ctorParameters: () => [{ type: i1.ServerConfigService }], propDecorators: { fulfillmentId: [{
                type: Input
            }], order: [{
                type: Input
            }] } });

class FulfillmentStateLabelComponent {
    get chipColorType() {
        switch (this.state) {
            case 'Pending':
            case 'Shipped':
                return 'warning';
            case 'Delivered':
                return 'success';
            case 'Cancelled':
                return 'error';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FulfillmentStateLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: FulfillmentStateLabelComponent, selector: "vdr-fulfillment-state-label", inputs: { state: "state" }, ngImport: i0, template: "<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n", styles: [":host{font-size:14px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.StateI18nTokenPipe, name: "stateI18nToken" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FulfillmentStateLabelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-fulfillment-state-label', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n", styles: [":host{font-size:14px}\n"] }]
        }], propDecorators: { state: [{
                type: Input
            }] } });

class FulfillmentCardComponent {
    constructor() {
        this.transitionState = new EventEmitter();
    }
    nextSuggestedState() {
        if (!this.fulfillment) {
            return;
        }
        const { nextStates } = this.fulfillment;
        const namedStateOrDefault = (targetState) => nextStates.includes(targetState) ? targetState : nextStates[0];
        switch (this.fulfillment?.state) {
            case 'Pending':
                return namedStateOrDefault('Shipped');
            case 'Shipped':
                return namedStateOrDefault('Delivered');
            default:
                return nextStates.find(s => s !== 'Cancelled');
        }
    }
    nextOtherStates() {
        if (!this.fulfillment) {
            return [];
        }
        const suggested = this.nextSuggestedState();
        return this.fulfillment.nextStates.filter(s => s !== suggested);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FulfillmentCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: FulfillmentCardComponent, selector: "vdr-fulfillment-card", inputs: { fulfillment: "fulfillment", order: "order" }, outputs: { transitionState: "transitionState" }, ngImport: i0, template: "<div class=\"card\">\r\n    <div class=\"card-header fulfillment-header\">\r\n        <div>{{ 'order.fulfillment' | translate }}</div>\r\n        <div class=\"fulfillment-state\">\r\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-fulfillment-detail\r\n            *ngIf=\"!!fulfillment\"\r\n            [fulfillmentId]=\"fulfillment?.id\"\r\n            [order]=\"order\"\r\n        ></vdr-fulfillment-detail>\r\n    </div>\r\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\r\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\r\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\r\n            </button>\r\n        </ng-container>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionState.emit(nextState)\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-fulfillment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n", styles: [".fulfillment-header{display:flex;justify-content:space-between;align-items:center}.card-footer{display:flex;align-items:center;justify-content:flex-end}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: FulfillmentDetailComponent, selector: "vdr-fulfillment-detail", inputs: ["fulfillmentId", "order"] }, { kind: "component", type: FulfillmentStateLabelComponent, selector: "vdr-fulfillment-state-label", inputs: ["state"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.StateI18nTokenPipe, name: "stateI18nToken" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FulfillmentCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-fulfillment-card', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"card\">\r\n    <div class=\"card-header fulfillment-header\">\r\n        <div>{{ 'order.fulfillment' | translate }}</div>\r\n        <div class=\"fulfillment-state\">\r\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-fulfillment-detail\r\n            *ngIf=\"!!fulfillment\"\r\n            [fulfillmentId]=\"fulfillment?.id\"\r\n            [order]=\"order\"\r\n        ></vdr-fulfillment-detail>\r\n    </div>\r\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\r\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\r\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\r\n            </button>\r\n        </ng-container>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionState.emit(nextState)\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-fulfillment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n", styles: [".fulfillment-header{display:flex;justify-content:space-between;align-items:center}.card-footer{display:flex;align-items:center;justify-content:flex-end}\n"] }]
        }], propDecorators: { fulfillment: [{
                type: Input
            }], order: [{
                type: Input
            }], transitionState: [{
                type: Output
            }] } });

class ModificationDetailComponent {
    constructor() {
        this.addedItems = new Map();
        this.removedItems = new Map();
        this.modifiedItems = new Set();
    }
    ngOnChanges() {
        const { added, removed, modified } = this.getModifiedLines();
        this.addedItems = added;
        this.removedItems = removed;
        this.modifiedItems = modified;
    }
    getSurcharge(id) {
        return this.order.surcharges.find(m => m.id === id);
    }
    getAddedItems() {
        return [...this.addedItems.entries()].map(([line, count]) => ({
            name: line.productVariant.name,
            quantity: count,
        }));
    }
    getRemovedItems() {
        return [...this.removedItems.entries()].map(([line, count]) => ({
            name: line.productVariant.name,
            quantity: count,
        }));
    }
    getModifiedItems() {
        return [...this.modifiedItems].map(line => ({
            name: line.productVariant.name,
        }));
    }
    getModifiedLines() {
        const added = new Map();
        const removed = new Map();
        const modified = new Set();
        for (const modificationLine of this.modification.lines || []) {
            const line = this.order.lines.find(l => l.id === modificationLine.orderLineId);
            if (!line) {
                continue;
            }
            if (modificationLine.quantity === 0) {
                modified.add(line);
            }
            else if (modificationLine.quantity < 0) {
                removed.set(line, -modificationLine.quantity);
            }
            else {
                added.set(line, modificationLine.quantity);
            }
        }
        return { added, removed, modified };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ModificationDetailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: ModificationDetailComponent, selector: "vdr-modification-detail", inputs: { order: "order", modification: "modification" }, usesOnChanges: true, ngImport: i0, template: "<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\r\n    modification.note\r\n}}</vdr-labeled-data>\r\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\r\n    {{ getSurcharge(surcharge.id)?.description }}\r\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\r\n>\r\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getModifiedItems().length\" [label]=\"'order.modified-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getModifiedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: SimpleItemListComponent, selector: "vdr-simple-item-list", inputs: ["items"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ModificationDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-modification-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\r\n    modification.note\r\n}}</vdr-labeled-data>\r\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\r\n    {{ getSurcharge(surcharge.id)?.description }}\r\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\r\n>\r\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getModifiedItems().length\" [label]=\"'order.modified-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getModifiedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n" }]
        }], propDecorators: { order: [{
                type: Input
            }], modification: [{
                type: Input
            }] } });

const NODE_HEIGHT = 72;

class OrderProcessNodeComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.active$ = new BehaviorSubject(false);
        this.activeTarget$ = new BehaviorSubject(false);
        this.isCancellable = false;
        // We use a class field here to prevent the
        // i18n extractor from extracting a "Cancelled" key
        this.cancelledState = 'Cancelled';
    }
    ngOnChanges(changes) {
        this.isCancellable = !!this.node.to.find((s) => s.name === 'Cancelled');
        if (changes.active) {
            this.active$.next(this.active);
        }
    }
    getPos(origin = 'top') {
        const rect = this.elementRef.nativeElement.getBoundingClientRect();
        const nodeHeight = this.elementRef.nativeElement.querySelector('.node')?.getBoundingClientRect().height ?? 0;
        return {
            x: 10,
            y: this.index * NODE_HEIGHT + (origin === 'bottom' ? nodeHeight : 0),
        };
    }
    getStyle() {
        const pos = this.getPos();
        return {
            'top.px': pos.y,
            'left.px': pos.x,
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderProcessNodeComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderProcessNodeComponent, selector: "vdr-order-process-node", inputs: { node: "node", index: "index", active: "active" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\r\n    <div\r\n        class=\"node\"\r\n        [class.active-target]=\"activeTarget$ | async\"\r\n    >\r\n        {{ node.name | stateI18nToken | translate }}\r\n    </div>\r\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\r\n        <div class=\"cancelled-edge\">\r\n        </div>\r\n        <clr-icon shape=\"dot-circle\"></clr-icon>\r\n        <div class=\"cancelled-node\">\r\n            {{ cancelledState | stateI18nToken | translate }}\r\n        </div>\r\n    </div>\r\n</div>\r\n", styles: [":host{display:block}.node-wrapper{position:absolute;z-index:1;display:flex;align-items:center}.node{display:inline-block;border:2px solid var(--color-component-border-200);border-radius:3px;padding:3px 6px;z-index:1;background-color:var(--color-component-bg-100);opacity:.7;transition:opacity .2s,background-color .2s,color .2s;cursor:default}.node.active-target{border-color:var(--color-primary-500);opacity:.9}.cancelled-wrapper{display:flex;align-items:center;color:var(--color-grey-300);transition:color .2s,opacity .2s;opacity:.7}.cancelled-edge{width:48px;height:2px;background-color:var(--color-component-bg-300);transition:background-color .2s}clr-icon{margin-inline-start:-1px}.cancelled-node{margin-inline-start:6px}.active .cancelled-wrapper{opacity:1}.active .node{opacity:1;background-color:var(--color-primary-600);border-color:var(--color-primary-600);color:var(--color-primary-100)}.active .cancelled-wrapper{color:var(--color-error-500)}.active .cancelled-edge{background-color:var(--color-error-500)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.StateI18nTokenPipe, name: "stateI18nToken" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderProcessNodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-process-node', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\r\n    <div\r\n        class=\"node\"\r\n        [class.active-target]=\"activeTarget$ | async\"\r\n    >\r\n        {{ node.name | stateI18nToken | translate }}\r\n    </div>\r\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\r\n        <div class=\"cancelled-edge\">\r\n        </div>\r\n        <clr-icon shape=\"dot-circle\"></clr-icon>\r\n        <div class=\"cancelled-node\">\r\n            {{ cancelledState | stateI18nToken | translate }}\r\n        </div>\r\n    </div>\r\n</div>\r\n", styles: [":host{display:block}.node-wrapper{position:absolute;z-index:1;display:flex;align-items:center}.node{display:inline-block;border:2px solid var(--color-component-border-200);border-radius:3px;padding:3px 6px;z-index:1;background-color:var(--color-component-bg-100);opacity:.7;transition:opacity .2s,background-color .2s,color .2s;cursor:default}.node.active-target{border-color:var(--color-primary-500);opacity:.9}.cancelled-wrapper{display:flex;align-items:center;color:var(--color-grey-300);transition:color .2s,opacity .2s;opacity:.7}.cancelled-edge{width:48px;height:2px;background-color:var(--color-component-bg-300);transition:background-color .2s}clr-icon{margin-inline-start:-1px}.cancelled-node{margin-inline-start:6px}.active .cancelled-wrapper{opacity:1}.active .node{opacity:1;background-color:var(--color-primary-600);border-color:var(--color-primary-600);color:var(--color-primary-100)}.active .cancelled-wrapper{color:var(--color-error-500)}.active .cancelled-edge{background-color:var(--color-error-500)}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { node: [{
                type: Input
            }], index: [{
                type: Input
            }], active: [{
                type: Input
            }] } });

class OrderProcessEdgeComponent {
    ngOnInit() {
        this.active$ = this.from.active$
            .asObservable()
            .pipe(tap((active) => this.to.activeTarget$.next(active)));
    }
    getStyle() {
        const direction = this.from.index < this.to.index ? 'down' : 'up';
        const startPos = this.from.getPos(direction === 'down' ? 'bottom' : 'top');
        const endPos = this.to.getPos(direction === 'down' ? 'top' : 'bottom');
        const dX = Math.abs(startPos.x - endPos.x);
        const dY = Math.abs(startPos.y - endPos.y);
        const length = Math.sqrt(dX ** 2 + dY ** 2);
        return {
            'top.px': startPos.y,
            'left.px': startPos.x + (direction === 'down' ? 10 : 40) + this.index * 12,
            'height.px': length,
            'width.px': 1,
            ...(direction === 'up'
                ? {
                    transform: 'rotateZ(180deg)',
                    'transform-origin': 'top',
                }
                : {}),
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderProcessEdgeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderProcessEdgeComponent, selector: "vdr-order-process-edge", inputs: { from: "from", to: "to", index: "index" }, ngImport: i0, template: "<div\r\n    [attr.data-from]=\"from.node.name\"\r\n    [attr.data-to]=\"to.node.name\"\r\n    [ngStyle]=\"getStyle()\"\r\n    [class.active]=\"active$ | async\"\r\n    class=\"edge\">\r\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\r\n</div>\r\n", styles: [".edge{position:absolute;border:1px solid var(--color-component-border-200);background-color:var(--color-component-bg-300);opacity:.3;transition:border .2s,opacity .2s,background-color .2s}.edge.active{border-color:var(--color-primary-500);background-color:var(--color-primary-500);opacity:1}.edge.active .arrow{color:var(--color-primary-500)}.edge .arrow{position:absolute;bottom:-4px;left:-8px;color:var(--color-grey-300)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderProcessEdgeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-process-edge', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\r\n    [attr.data-from]=\"from.node.name\"\r\n    [attr.data-to]=\"to.node.name\"\r\n    [ngStyle]=\"getStyle()\"\r\n    [class.active]=\"active$ | async\"\r\n    class=\"edge\">\r\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\r\n</div>\r\n", styles: [".edge{position:absolute;border:1px solid var(--color-component-border-200);background-color:var(--color-component-bg-300);opacity:.3;transition:border .2s,opacity .2s,background-color .2s}.edge.active{border-color:var(--color-primary-500);background-color:var(--color-primary-500);opacity:1}.edge.active .arrow{color:var(--color-primary-500)}.edge .arrow{position:absolute;bottom:-4px;left:-8px;color:var(--color-grey-300)}\n"] }]
        }], propDecorators: { from: [{
                type: Input
            }], to: [{
                type: Input
            }], index: [{
                type: Input
            }] } });

class OrderProcessGraphComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.setActiveState$ = new BehaviorSubject(undefined);
        this.nodes = [];
        this.edges = [];
    }
    get outerHeight() {
        return this.nodes.length * NODE_HEIGHT;
    }
    ngOnInit() {
        this.setActiveState$.next(this.initialState);
        this.activeState$ = this.setActiveState$.pipe(debounceTime(150));
    }
    ngOnChanges(changes) {
        this.populateNodes();
    }
    ngAfterViewInit() {
        setTimeout(() => this.populateEdges());
    }
    onMouseOver(stateName) {
        this.setActiveState$.next(stateName);
    }
    onMouseOut() {
        this.setActiveState$.next(this.initialState);
    }
    getNodeFor(state) {
        if (this.nodeComponents) {
            return this.nodeComponents.find((n) => n.node.name === state);
        }
    }
    populateNodes() {
        const stateNodeMap = new Map();
        for (const state of this.states) {
            stateNodeMap.set(state.name, {
                name: state.name,
                to: [],
            });
        }
        for (const [name, stateNode] of stateNodeMap.entries()) {
            const targets = this.states.find((s) => s.name === name)?.to ?? [];
            for (const target of targets) {
                const targetNode = stateNodeMap.get(target);
                if (targetNode) {
                    stateNode.to.push(targetNode);
                }
            }
        }
        this.nodes = [...stateNodeMap.values()].filter((n) => n.name !== 'Cancelled');
    }
    populateEdges() {
        for (const node of this.nodes) {
            const nodeCmp = this.getNodeFor(node.name);
            let index = 0;
            for (const to of node.to) {
                const toCmp = this.getNodeFor(to.name);
                if (nodeCmp && toCmp && nodeCmp !== toCmp) {
                    this.edges.push({
                        to: toCmp,
                        from: nodeCmp,
                        index,
                    });
                    index++;
                }
            }
        }
        this.edges = [...this.edges];
        this.changeDetector.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderProcessGraphComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderProcessGraphComponent, selector: "vdr-order-process-graph", inputs: { states: "states", initialState: "initialState" }, host: { properties: { "style.height.px": "this.outerHeight" } }, viewQueries: [{ propertyName: "nodeComponents", predicate: OrderProcessNodeComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ng-container *ngFor=\"let state of nodes; let i = index\">\r\n    <vdr-order-process-node\r\n        [node]=\"state\"\r\n        [index]=\"i\"\r\n        [active]=\"(activeState$ | async) === state.name\"\r\n        (mouseenter)=\"onMouseOver(state.name)\"\r\n        (mouseleave)=\"onMouseOut()\"\r\n    ></vdr-order-process-node>\r\n</ng-container>\r\n<ng-container *ngFor=\"let edge of edges\">\r\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\r\n</ng-container>\r\n", styles: [":host{display:block;border:1px hotpink;margin:20px;padding:12px;position:relative}.state-row{display:flex}\n"], dependencies: [{ kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: OrderProcessNodeComponent, selector: "vdr-order-process-node", inputs: ["node", "index", "active"] }, { kind: "component", type: OrderProcessEdgeComponent, selector: "vdr-order-process-edge", inputs: ["from", "to", "index"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderProcessGraphComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-process-graph', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngFor=\"let state of nodes; let i = index\">\r\n    <vdr-order-process-node\r\n        [node]=\"state\"\r\n        [index]=\"i\"\r\n        [active]=\"(activeState$ | async) === state.name\"\r\n        (mouseenter)=\"onMouseOver(state.name)\"\r\n        (mouseleave)=\"onMouseOut()\"\r\n    ></vdr-order-process-node>\r\n</ng-container>\r\n<ng-container *ngFor=\"let edge of edges\">\r\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\r\n</ng-container>\r\n", styles: [":host{display:block;border:1px hotpink;margin:20px;padding:12px;position:relative}.state-row{display:flex}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { states: [{
                type: Input
            }], initialState: [{
                type: Input
            }], nodeComponents: [{
                type: ViewChildren,
                args: [OrderProcessNodeComponent]
            }], outerHeight: [{
                type: HostBinding,
                args: ['style.height.px']
            }] } });

class OrderProcessGraphDialogComponent {
    constructor(serverConfigService) {
        this.serverConfigService = serverConfigService;
        this.states = [];
    }
    ngOnInit() {
        this.states = this.serverConfigService.getOrderProcessStates();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderProcessGraphDialogComponent, deps: [{ token: i1.ServerConfigService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderProcessGraphDialogComponent, selector: "vdr-order-process-graph-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\r\n\r\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: OrderProcessGraphComponent, selector: "vdr-order-process-graph", inputs: ["states", "initialState"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderProcessGraphDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-process-graph-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\r\n\r\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\r\n" }]
        }], ctorParameters: () => [{ type: i1.ServerConfigService }] });

class PaymentForRefundSelectorComponent {
    constructor() {
        this.paymentSelected = new EventEmitter();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PaymentForRefundSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: PaymentForRefundSelectorComponent, selector: "vdr-payment-for-refund-selector", inputs: { refundablePayments: "refundablePayments", order: "order" }, outputs: { paymentSelected: "paymentSelected" }, ngImport: i0, template: "<vdr-card\r\n        [title]=\"'order.payment' | translate\"\r\n        [class.selected]=\"payment.selected\"\r\n        [class.unselected]=\"!payment.selected\"\r\n        *ngFor=\"let payment of refundablePayments\"\r\n>\r\n    <ng-template vdrCardControls>\r\n        <vdr-select-toggle\r\n                size=\"small\"\r\n                [title]=\"'order.refund-this-payment' | translate\"\r\n                [label]=\"'order.refund-this-payment' | translate\"\r\n                [disabled]=\"refundablePayments.length === 1\"\r\n                [(selected)]=\"payment.selected\"\r\n                (selectedChange)=\"paymentSelected.emit({ payment: payment, selected: $event })\"\r\n        ></vdr-select-toggle>\r\n    </ng-template>\r\n    <div class=\"form-grid\">\r\n        <vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n            {{ payment.method }}\r\n        </vdr-labeled-data>\r\n        <vdr-labeled-data [label]=\"'order.transaction-id' | translate\">\r\n            {{ payment.transactionId }}\r\n        </vdr-labeled-data>\r\n        <vdr-labeled-data [label]=\"'order.payment-amount' | translate\">\r\n            {{ payment.amount | localeCurrency : order.currencyCode }}\r\n        </vdr-labeled-data>\r\n        <vdr-labeled-data [label]=\"'order.refundable-amount' | translate\">\r\n            {{ payment.refundableAmount | localeCurrency : order.currencyCode }}\r\n        </vdr-labeled-data>\r\n    </div>\r\n    <vdr-form-field [label]=\"'order.refund-amount' | translate\">\r\n        <vdr-currency-input\r\n                [readonly]=\"!payment.selected\"\r\n                [currencyCode]=\"order.currencyCode\"\r\n                [formControl]=\"payment.amountToRefundControl\"\r\n        ></vdr-currency-input>\r\n    </vdr-form-field>\r\n</vdr-card>", styles: [":host{display:block}\n"], dependencies: [{ kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i1.CurrencyInputComponent, selector: "vdr-currency-input", inputs: ["disabled", "readonly", "value", "currencyCode"], outputs: ["valueChange"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.SelectToggleComponent, selector: "vdr-select-toggle", inputs: ["size", "selected", "hiddenWhenOff", "disabled", "label"], outputs: ["selectedChange"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "directive", type: i1.CardControlsDirective, selector: "[vdrCardControls]" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PaymentForRefundSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-payment-for-refund-selector', changeDetection: ChangeDetectionStrategy.Default, template: "<vdr-card\r\n        [title]=\"'order.payment' | translate\"\r\n        [class.selected]=\"payment.selected\"\r\n        [class.unselected]=\"!payment.selected\"\r\n        *ngFor=\"let payment of refundablePayments\"\r\n>\r\n    <ng-template vdrCardControls>\r\n        <vdr-select-toggle\r\n                size=\"small\"\r\n                [title]=\"'order.refund-this-payment' | translate\"\r\n                [label]=\"'order.refund-this-payment' | translate\"\r\n                [disabled]=\"refundablePayments.length === 1\"\r\n                [(selected)]=\"payment.selected\"\r\n                (selectedChange)=\"paymentSelected.emit({ payment: payment, selected: $event })\"\r\n        ></vdr-select-toggle>\r\n    </ng-template>\r\n    <div class=\"form-grid\">\r\n        <vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n            {{ payment.method }}\r\n        </vdr-labeled-data>\r\n        <vdr-labeled-data [label]=\"'order.transaction-id' | translate\">\r\n            {{ payment.transactionId }}\r\n        </vdr-labeled-data>\r\n        <vdr-labeled-data [label]=\"'order.payment-amount' | translate\">\r\n            {{ payment.amount | localeCurrency : order.currencyCode }}\r\n        </vdr-labeled-data>\r\n        <vdr-labeled-data [label]=\"'order.refundable-amount' | translate\">\r\n            {{ payment.refundableAmount | localeCurrency : order.currencyCode }}\r\n        </vdr-labeled-data>\r\n    </div>\r\n    <vdr-form-field [label]=\"'order.refund-amount' | translate\">\r\n        <vdr-currency-input\r\n                [readonly]=\"!payment.selected\"\r\n                [currencyCode]=\"order.currencyCode\"\r\n                [formControl]=\"payment.amountToRefundControl\"\r\n        ></vdr-currency-input>\r\n    </vdr-form-field>\r\n</vdr-card>", styles: [":host{display:block}\n"] }]
        }], propDecorators: { refundablePayments: [{
                type: Input
            }], order: [{
                type: Input
            }], paymentSelected: [{
                type: Output
            }] } });

class RefundOrderDialogComponent {
    constructor(i18nService) {
        this.i18nService = i18nService;
        this.lineQuantities = {};
        this.refundablePayments = [];
        this.refundShippingLineIds = [];
        this.reasons = getAppConfig().cancellationReasons ?? [
            marker('order.refund-reason-customer-request'),
            marker('order.refund-reason-not-available'),
        ];
        this.manuallySetRefundTotal = false;
        this.refundTotal = 0;
        this.reasons = this.reasons.map(r => this.i18nService.translate(r));
    }
    get totalRefundableAmount() {
        return summate(this.refundablePayments, 'refundableAmount');
    }
    get amountToRefundTotal() {
        return this.refundablePayments.reduce((total, payment) => total + payment.amountToRefundControl.value, 0);
    }
    lineCanBeRefundedOrCancelled(line) {
        const refundedCount = this.order.payments
            ?.reduce((all, payment) => [...all, ...payment.refunds], [])
            .filter(refund => refund.state !== 'Failed')
            .reduce((all, refund) => [...all, ...refund.lines], [])
            .filter(refundLine => refundLine.orderLineId === line.id)
            .reduce((sum, refundLine) => sum + refundLine.quantity, 0) ?? 0;
        return refundedCount < line.orderPlacedQuantity;
    }
    ngOnInit() {
        this.lineQuantities = this.order.lines.reduce((result, line) => ({
            ...result,
            [line.id]: {
                quantity: 0,
                refund: true,
                cancel: false,
            },
        }), {});
        this.refundablePayments = getRefundablePayments(this.order.payments);
    }
    updateRefundTotal() {
        if (!this.manuallySetRefundTotal) {
            const itemTotal = this.order.lines.reduce((total, line) => {
                const lineRef = this.lineQuantities[line.id];
                const refundCount = lineRef.quantity || 0;
                return total + line.proratedUnitPriceWithTax * refundCount;
            }, 0);
            const shippingTotal = this.order.shippingLines.reduce((total, line) => {
                if (this.refundShippingLineIds.includes(line.id)) {
                    return total + line.discountedPriceWithTax;
                }
                else {
                    return total;
                }
            }, 0);
            this.refundTotal = itemTotal + shippingTotal;
        }
        // allocate the refund total across the refundable payments
        const refundablePayments = this.refundablePayments.filter(p => p.selected);
        let refundsAllocated = 0;
        for (const payment of refundablePayments) {
            const amountToRefund = Math.min(payment.refundableAmount, this.refundTotal - refundsAllocated);
            payment.amountToRefundControl.setValue(amountToRefund);
            refundsAllocated += amountToRefund;
        }
    }
    toggleShippingRefund(lineId) {
        const index = this.refundShippingLineIds.indexOf(lineId);
        if (index === -1) {
            this.refundShippingLineIds.push(lineId);
        }
        else {
            this.refundShippingLineIds.splice(index, 1);
        }
        this.updateRefundTotal();
    }
    onRefundQuantityChange(orderLineId, quantity) {
        this.manuallySetRefundTotal = false;
        const selectionLine = this.lineQuantities[orderLineId];
        if (selectionLine) {
            const previousQuantity = selectionLine.quantity;
            if (quantity === 0) {
                selectionLine.cancel = false;
            }
            else if (previousQuantity === 0 && quantity > 0) {
                selectionLine.cancel = true;
            }
            selectionLine.quantity = quantity;
            this.updateRefundTotal();
        }
    }
    onPaymentSelected(payment, selected) {
        if (selected) {
            const outstandingRefundAmount = this.refundTotal -
                this.refundablePayments
                    .filter(p => p.id !== payment.id)
                    .reduce((total, p) => total + p.amountToRefundControl.value, 0);
            if (0 < outstandingRefundAmount) {
                payment.amountToRefundControl.setValue(Math.min(outstandingRefundAmount, payment.refundableAmount));
            }
        }
        else {
            payment.amountToRefundControl.setValue(0);
        }
    }
    isRefunding() {
        const result = Object.values(this.lineQuantities).reduce((isRefunding, line) => isRefunding || 0 < line.quantity, false);
        return result;
    }
    isCancelling() {
        const result = Object.values(this.lineQuantities).reduce((isCancelling, line) => isCancelling || (0 < line.quantity && line.cancel), false);
        return result;
    }
    canSubmit() {
        return 0 < this.refundTotal && this.amountToRefundTotal === this.refundTotal && !!this.reason;
    }
    select() {
        const refundLines = this.getOrderLineInput(() => true);
        const cancelLines = this.getOrderLineInput(line => line.cancel);
        this.resolveWith({
            refunds: this.refundablePayments
                .filter(rp => rp.selected && 0 < rp.amountToRefundControl.value)
                .map(payment => {
                return {
                    lines: refundLines,
                    reason: this.reason,
                    paymentId: payment.id,
                    amount: payment.amountToRefundControl.value,
                    shipping: 0,
                    adjustment: 0,
                };
            }),
            cancel: {
                lines: cancelLines,
                orderId: this.order.id,
                reason: this.reason,
                cancelShipping: this.refundShippingLineIds.length > 0,
            },
        });
    }
    cancel() {
        this.resolveWith();
    }
    getOrderLineInput(filterFn) {
        return Object.entries(this.lineQuantities)
            .filter(([orderLineId, line]) => 0 < line.quantity && filterFn(line))
            .map(([orderLineId, line]) => ({
            orderLineId,
            quantity: line.quantity,
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: RefundOrderDialogComponent, deps: [{ token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: RefundOrderDialogComponent, selector: "vdr-refund-order-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"refund-wrapper\">\r\n    <vdr-data-table-2 id=\"refund-order\" [items]=\"order.lines\">\r\n        <!-- Here we define all the available columns -->\r\n        <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.id }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"created-at\" [heading]=\"'common.created-at' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.createdAt | localeDate : 'short' }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"updated-at\" [heading]=\"'common.updated-at' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.updatedAt | localeDate : 'short' }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n            <ng-template let-line=\"item\">\r\n                <div class=\"image-placeholder\">\r\n                    <img\r\n                        *ngIf=\"line.featuredAsset as asset; else imagePlaceholder\"\r\n                        [src]=\"asset | assetPreview : 'tiny'\"\r\n                    />\r\n                    <ng-template #imagePlaceholder>\r\n                        <div class=\"placeholder\">\r\n                            <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                        </div>\r\n                    </ng-template>\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"product-name\" [heading]=\"'order.product-name' | translate\" [optional]=\"false\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.productVariant.name }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"product-sku\" [heading]=\"'order.product-sku' | translate\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.productVariant.sku }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"unit-price\" [heading]=\"'order.unit-price' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.unitPriceWithTax | localeCurrency : order.currencyCode }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"prorated-unit-price\" [heading]=\"'order.prorated-unit-price' | translate\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.proratedUnitPriceWithTax | localeCurrency : order.currencyCode }}\r\n                <ng-container *ngIf=\"line.discounts as discounts\">\r\n                    <vdr-dropdown *ngIf=\"discounts.length\">\r\n                        <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                            <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\r\n                        </div>\r\n                        <vdr-dropdown-menu>\r\n                            <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                {{ discount.description }}\r\n                                <div class=\"promotion-amount\">\r\n                                    {{\r\n                                        discount.amount / 100 / line.quantity\r\n                                            | number : '1.0-2'\r\n                                            | currency : order.currencyCode\r\n                                    }}\r\n                                </div>\r\n                            </div>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </ng-container>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"quantity\" [heading]=\"'order.quantity' | translate\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.quantity }}\r\n                <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"refund-quantity\" [heading]=\"'order.refund' | translate\" [optional]=\"false\">\r\n            <ng-template let-line=\"item\">\r\n                <input\r\n                    *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                    [ngModel]=\"lineQuantities[line.id].quantity\"\r\n                    type=\"number\"\r\n                    [max]=\"line.quantity\"\r\n                    min=\"0\"\r\n                    (ngModelChange)=\"onRefundQuantityChange(line.id, $event)\"\r\n                />\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"cancel\" [heading]=\"'order.return-to-stock' | translate\" [optional]=\"false\">\r\n            <ng-template let-line=\"item\">\r\n                <div class=\"cancel-checkbox-wrapper\">\r\n                    <label class=\"flex center\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\r\n                        />\r\n                        <span class=\"ml-1\">{{ 'order.return-to-stock' | translate }}</span></label\r\n                    >\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n    </vdr-data-table-2>\r\n\r\n    <div class=\"refund-details mt-4\">\r\n        <div>\r\n            <vdr-card>\r\n                <label class=\"flex mb-2\" *ngFor=\"let shippingLine of order.shippingLines\">\r\n                    <input type=\"checkbox\" clrCheckbox (change)=\"toggleShippingRefund(shippingLine.id)\" />\r\n                    <div class=\"ml-1\">\r\n                        {{ 'order.refund-shipping' | translate }}\r\n                        <span>{{ shippingLine.shippingMethod.name }}:</span>\r\n                        <span class=\"ml-1\"\r\n                            >{{ shippingLine.discountedPriceWithTax | localeCurrency : order.currencyCode }}\r\n                        </span>\r\n                    </div></label\r\n                >\r\n                <vdr-form-field [label]=\"'order.refund-cancellation-reason' | translate\" class=\"mb-2\">\r\n                    <ng-select\r\n                        [items]=\"reasons\"\r\n                        bindLabel=\"name\"\r\n                        autofocus\r\n                        [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\r\n                        bindValue=\"id\"\r\n                        [addTag]=\"true\"\r\n                        [(ngModel)]=\"reason\"\r\n                    ></ng-select>\r\n                </vdr-form-field>\r\n                <vdr-form-field\r\n                    [label]=\"'order.refund-total' | translate\"\r\n                    [readOnlyToggle]=\"true\"\r\n                    (readOnlyToggleChange)=\"manuallySetRefundTotal = !$event\"\r\n                >\r\n                    <vdr-currency-input\r\n                        [readonly]=\"!manuallySetRefundTotal\"\r\n                        [currencyCode]=\"order.currencyCode\"\r\n                        [(ngModel)]=\"refundTotal\"\r\n                        (ngModelChange)=\"updateRefundTotal()\"\r\n                    ></vdr-currency-input>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n        </div>\r\n        <div class=\"\">\r\n            <vdr-payment-for-refund-selector\r\n                [refundablePayments]=\"refundablePayments\"\r\n                (paymentSelected)=\"onPaymentSelected($event.payment, $event.selected)\"\r\n                [order]=\"order\"\r\n            ></vdr-payment-for-refund-selector>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <div>\r\n        <div class=\"errors\">\r\n            <clr-alert\r\n                *ngIf=\"refundTotal < 0 || totalRefundableAmount < refundTotal\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{\r\n                        'order.refund-total-error'\r\n                            | translate\r\n                                : {\r\n                                      min: 0 | currency : order.currencyCode,\r\n                                      max: totalRefundableAmount | localeCurrency : order.currencyCode\r\n                                  }\r\n                    }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <clr-alert\r\n                *ngIf=\"amountToRefundTotal < refundTotal || refundTotal < amountToRefundTotal\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <clr-alert\r\n                *ngIf=\"amountToRefundTotal && !reason\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-cancellation-reason-required' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n        </div>\r\n        <div class=\"modal-buttons\">\r\n            <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n            <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n                {{\r\n                    'order.refund-with-amount'\r\n                        | translate : { amount: amountToRefundTotal | localeCurrency : order.currencyCode }\r\n                }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n", styles: [":host{height:100%;display:flex;flex-direction:column;min-height:64vh}.refund-wrapper{flex:1;flex-direction:column}.refund-wrapper .order-table{flex:1;overflow-y:auto}.refund-wrapper .order-table table{margin-top:0}.refund-wrapper tr.ignore{color:var(--color-grey-300)}::ng-deep .refund-wrapper .table-wrapper{max-width:initial!important}.quantity-col{background-color:var(--color-warning-100)}.cancel-checkbox-wrapper{display:flex;align-items:center;justify-content:center}clr-checkbox-wrapper{margin-top:12px;margin-bottom:12px;display:block}.refund-details{display:flex;flex-direction:column;padding-bottom:var(--space-unit);gap:calc(var(--space-unit) * 2);justify-content:space-between}@media screen and (min-width: 992px){.refund-details{flex-direction:row}}.refund-details vdr-card.unselected{opacity:.8}.refund-details>*{flex:1}.errors{display:flex;justify-content:flex-end;gap:calc(var(--space-unit) * 2);margin:calc(var(--space-unit) * 2) 0}.prorated-wrapper{display:flex;justify-content:center}.line-promotion{display:flex;justify-content:space-between;font-size:12px;padding:3px 6px}.line-promotion .promotion-amount{margin-inline-start:12px}vdr-card.faded{opacity:.8}.modal-buttons{display:flex;justify-content:flex-end;gap:.6rem;gap:var(--clr-modal-footer-gap, .6rem)}\n"], dependencies: [{ kind: "component", type: i3.ClrAlert, selector: "clr-alert", inputs: ["clrAlertSizeSmall", "clrAlertClosable", "clrAlertAppLevel", "clrCloseButtonAriaLabel", "clrAlertLightweight", "clrAlertType", "clrAlertIcon", "clrAlertClosed"], outputs: ["clrAlertClosedChange"] }, { kind: "component", type: i3.ClrAlertItem, selector: "clr-alert-item" }, { kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i5.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "component", type: i1.CurrencyInputComponent, selector: "vdr-currency-input", inputs: ["disabled", "readonly", "value", "currencyCode"], outputs: ["valueChange"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: LineRefundsComponent, selector: "vdr-line-refunds", inputs: ["line", "payments"] }, { kind: "component", type: PaymentForRefundSelectorComponent, selector: "vdr-payment-for-refund-selector", inputs: ["refundablePayments", "order"], outputs: ["paymentSelected"] }, { kind: "pipe", type: i2$1.DecimalPipe, name: "number" }, { kind: "pipe", type: i2$1.CurrencyPipe, name: "currency" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.AssetPreviewPipe, name: "assetPreview" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: RefundOrderDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-refund-order-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"refund-wrapper\">\r\n    <vdr-data-table-2 id=\"refund-order\" [items]=\"order.lines\">\r\n        <!-- Here we define all the available columns -->\r\n        <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.id }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"created-at\" [heading]=\"'common.created-at' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.createdAt | localeDate : 'short' }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"updated-at\" [heading]=\"'common.updated-at' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.updatedAt | localeDate : 'short' }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n            <ng-template let-line=\"item\">\r\n                <div class=\"image-placeholder\">\r\n                    <img\r\n                        *ngIf=\"line.featuredAsset as asset; else imagePlaceholder\"\r\n                        [src]=\"asset | assetPreview : 'tiny'\"\r\n                    />\r\n                    <ng-template #imagePlaceholder>\r\n                        <div class=\"placeholder\">\r\n                            <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                        </div>\r\n                    </ng-template>\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"product-name\" [heading]=\"'order.product-name' | translate\" [optional]=\"false\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.productVariant.name }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"product-sku\" [heading]=\"'order.product-sku' | translate\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.productVariant.sku }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"unit-price\" [heading]=\"'order.unit-price' | translate\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.unitPriceWithTax | localeCurrency : order.currencyCode }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"prorated-unit-price\" [heading]=\"'order.prorated-unit-price' | translate\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.proratedUnitPriceWithTax | localeCurrency : order.currencyCode }}\r\n                <ng-container *ngIf=\"line.discounts as discounts\">\r\n                    <vdr-dropdown *ngIf=\"discounts.length\">\r\n                        <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                            <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\r\n                        </div>\r\n                        <vdr-dropdown-menu>\r\n                            <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                {{ discount.description }}\r\n                                <div class=\"promotion-amount\">\r\n                                    {{\r\n                                        discount.amount / 100 / line.quantity\r\n                                            | number : '1.0-2'\r\n                                            | currency : order.currencyCode\r\n                                    }}\r\n                                </div>\r\n                            </div>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </ng-container>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"quantity\" [heading]=\"'order.quantity' | translate\">\r\n            <ng-template let-line=\"item\">\r\n                {{ line.quantity }}\r\n                <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"refund-quantity\" [heading]=\"'order.refund' | translate\" [optional]=\"false\">\r\n            <ng-template let-line=\"item\">\r\n                <input\r\n                    *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                    [ngModel]=\"lineQuantities[line.id].quantity\"\r\n                    type=\"number\"\r\n                    [max]=\"line.quantity\"\r\n                    min=\"0\"\r\n                    (ngModelChange)=\"onRefundQuantityChange(line.id, $event)\"\r\n                />\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column id=\"cancel\" [heading]=\"'order.return-to-stock' | translate\" [optional]=\"false\">\r\n            <ng-template let-line=\"item\">\r\n                <div class=\"cancel-checkbox-wrapper\">\r\n                    <label class=\"flex center\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\r\n                        />\r\n                        <span class=\"ml-1\">{{ 'order.return-to-stock' | translate }}</span></label\r\n                    >\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n    </vdr-data-table-2>\r\n\r\n    <div class=\"refund-details mt-4\">\r\n        <div>\r\n            <vdr-card>\r\n                <label class=\"flex mb-2\" *ngFor=\"let shippingLine of order.shippingLines\">\r\n                    <input type=\"checkbox\" clrCheckbox (change)=\"toggleShippingRefund(shippingLine.id)\" />\r\n                    <div class=\"ml-1\">\r\n                        {{ 'order.refund-shipping' | translate }}\r\n                        <span>{{ shippingLine.shippingMethod.name }}:</span>\r\n                        <span class=\"ml-1\"\r\n                            >{{ shippingLine.discountedPriceWithTax | localeCurrency : order.currencyCode }}\r\n                        </span>\r\n                    </div></label\r\n                >\r\n                <vdr-form-field [label]=\"'order.refund-cancellation-reason' | translate\" class=\"mb-2\">\r\n                    <ng-select\r\n                        [items]=\"reasons\"\r\n                        bindLabel=\"name\"\r\n                        autofocus\r\n                        [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\r\n                        bindValue=\"id\"\r\n                        [addTag]=\"true\"\r\n                        [(ngModel)]=\"reason\"\r\n                    ></ng-select>\r\n                </vdr-form-field>\r\n                <vdr-form-field\r\n                    [label]=\"'order.refund-total' | translate\"\r\n                    [readOnlyToggle]=\"true\"\r\n                    (readOnlyToggleChange)=\"manuallySetRefundTotal = !$event\"\r\n                >\r\n                    <vdr-currency-input\r\n                        [readonly]=\"!manuallySetRefundTotal\"\r\n                        [currencyCode]=\"order.currencyCode\"\r\n                        [(ngModel)]=\"refundTotal\"\r\n                        (ngModelChange)=\"updateRefundTotal()\"\r\n                    ></vdr-currency-input>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n        </div>\r\n        <div class=\"\">\r\n            <vdr-payment-for-refund-selector\r\n                [refundablePayments]=\"refundablePayments\"\r\n                (paymentSelected)=\"onPaymentSelected($event.payment, $event.selected)\"\r\n                [order]=\"order\"\r\n            ></vdr-payment-for-refund-selector>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <div>\r\n        <div class=\"errors\">\r\n            <clr-alert\r\n                *ngIf=\"refundTotal < 0 || totalRefundableAmount < refundTotal\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{\r\n                        'order.refund-total-error'\r\n                            | translate\r\n                                : {\r\n                                      min: 0 | currency : order.currencyCode,\r\n                                      max: totalRefundableAmount | localeCurrency : order.currencyCode\r\n                                  }\r\n                    }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <clr-alert\r\n                *ngIf=\"amountToRefundTotal < refundTotal || refundTotal < amountToRefundTotal\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <clr-alert\r\n                *ngIf=\"amountToRefundTotal && !reason\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-cancellation-reason-required' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n        </div>\r\n        <div class=\"modal-buttons\">\r\n            <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n            <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n                {{\r\n                    'order.refund-with-amount'\r\n                        | translate : { amount: amountToRefundTotal | localeCurrency : order.currencyCode }\r\n                }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n", styles: [":host{height:100%;display:flex;flex-direction:column;min-height:64vh}.refund-wrapper{flex:1;flex-direction:column}.refund-wrapper .order-table{flex:1;overflow-y:auto}.refund-wrapper .order-table table{margin-top:0}.refund-wrapper tr.ignore{color:var(--color-grey-300)}::ng-deep .refund-wrapper .table-wrapper{max-width:initial!important}.quantity-col{background-color:var(--color-warning-100)}.cancel-checkbox-wrapper{display:flex;align-items:center;justify-content:center}clr-checkbox-wrapper{margin-top:12px;margin-bottom:12px;display:block}.refund-details{display:flex;flex-direction:column;padding-bottom:var(--space-unit);gap:calc(var(--space-unit) * 2);justify-content:space-between}@media screen and (min-width: 992px){.refund-details{flex-direction:row}}.refund-details vdr-card.unselected{opacity:.8}.refund-details>*{flex:1}.errors{display:flex;justify-content:flex-end;gap:calc(var(--space-unit) * 2);margin:calc(var(--space-unit) * 2) 0}.prorated-wrapper{display:flex;justify-content:center}.line-promotion{display:flex;justify-content:space-between;font-size:12px;padding:3px 6px}.line-promotion .promotion-amount{margin-inline-start:12px}vdr-card.faded{opacity:.8}.modal-buttons{display:flex;justify-content:flex-end;gap:.6rem;gap:var(--clr-modal-footer-gap, .6rem)}\n"] }]
        }], ctorParameters: () => [{ type: i1.I18nService }] });

class SettleRefundDialogComponent {
    constructor() {
        this.transactionId = '';
    }
    submit() {
        this.resolveWith(this.transactionId);
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SettleRefundDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: SettleRefundDialogComponent, selector: "vdr-settle-refund-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\r\n<p class=\"instruction\">\r\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\r\n</p>\r\n<clr-input-container>\r\n    <label>{{ 'order.transaction-id' | translate }}</label>\r\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\r\n</clr-input-container>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\r\n        {{ 'order.settle-refund' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [":host{padding-bottom:32px}.instruction{margin-top:0;margin-bottom:24px}\n"], dependencies: [{ kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i3.ClrInput, selector: "[clrInput]" }, { kind: "component", type: i3.ClrInputContainer, selector: "clr-input-container" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SettleRefundDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-settle-refund-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\r\n<p class=\"instruction\">\r\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\r\n</p>\r\n<clr-input-container>\r\n    <label>{{ 'order.transaction-id' | translate }}</label>\r\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\r\n</clr-input-container>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\r\n        {{ 'order.settle-refund' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [":host{padding-bottom:32px}.instruction{margin-top:0;margin-bottom:24px}\n"] }]
        }] });

class PaymentStateLabelComponent {
    get chipColorType() {
        switch (this.state) {
            case 'Authorized':
                return 'warning';
            case 'Settled':
                return 'success';
            case 'Declined':
            case 'Cancelled':
                return 'error';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PaymentStateLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: PaymentStateLabelComponent, selector: "vdr-payment-state-label", inputs: { state: "state" }, ngImport: i0, template: "<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n", styles: [":host{display:flex;font-size:14px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.StateI18nTokenPipe, name: "stateI18nToken" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PaymentStateLabelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-payment-state-label', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n", styles: [":host{display:flex;font-size:14px}\n"] }]
        }], propDecorators: { state: [{
                type: Input
            }] } });

class RefundStateLabelComponent {
    get chipColorType() {
        switch (this.state) {
            case 'Pending':
                return 'warning';
            case 'Settled':
                return 'success';
            case 'Failed':
                return 'error';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: RefundStateLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: RefundStateLabelComponent, selector: "vdr-refund-state-label", inputs: { state: "state" }, ngImport: i0, template: "<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n", styles: [":host{display:flex;font-size:14px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.StateI18nTokenPipe, name: "stateI18nToken" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: RefundStateLabelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-refund-state-label', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n", styles: [":host{display:flex;font-size:14px}\n"] }]
        }], propDecorators: { state: [{
                type: Input
            }] } });

class PaymentDetailComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PaymentDetailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: PaymentDetailComponent, selector: "vdr-payment-detail", inputs: { payment: "payment", currencyCode: "currencyCode" }, ngImport: i0, template: "<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n    {{ payment.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ payment.amount | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\r\n    {{ payment.errorMessage }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ payment.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.ObjectTreeComponent, selector: "vdr-object-tree", inputs: ["value", "isArrayItem"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PaymentDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-payment-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n    {{ payment.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ payment.amount | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\r\n    {{ payment.errorMessage }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ payment.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n" }]
        }], propDecorators: { payment: [{
                type: Input
            }], currencyCode: [{
                type: Input
            }] } });

class OrderPaymentCardComponent {
    constructor() {
        this.settlePayment = new EventEmitter();
        this.transitionPaymentState = new EventEmitter();
        this.settleRefund = new EventEmitter();
    }
    refundHasMetadata(refund) {
        return !!refund && Object.keys(refund.metadata).length > 0;
    }
    nextOtherStates() {
        if (!this.payment) {
            return [];
        }
        return this.payment.nextStates.filter(s => s !== 'Settled' && s !== 'Error');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderPaymentCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderPaymentCardComponent, selector: "vdr-order-payment-card", inputs: { payment: "payment", currencyCode: "currencyCode" }, outputs: { settlePayment: "settlePayment", transitionPaymentState: "transitionPaymentState", settleRefund: "settleRefund" }, ngImport: i0, template: "<div class=\"card\">\r\n    <div class=\"card-header payment-header\">\r\n        <div>\r\n            {{ 'order.payment' | translate }}\r\n            <ng-container *ngIf=\"payment.amount\">{{ payment.amount | localeCurrency : currencyCode }}</ng-container>\r\n        </div>\r\n        <div class=\"payment-state\">\r\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\r\n    </div>\r\n    <ng-container *ngFor=\"let refund of payment.refunds\">\r\n        <div class=\"refund-wrapper card-block\">\r\n            <div class=\"card-header payment-header refund-header\">\r\n                <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\r\n                {{ 'order.refund' | translate }} #{{ refund.id }}\r\n                <div class=\"clr-flex-fill\"></div>\r\n                <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                    {{ refund.createdAt | localeDate : 'medium' }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\r\n                    {{ refund.total | localeCurrency : currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\r\n                    {{ refund.transactionId }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\r\n                    {{ refund.reason }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data\r\n                    [label]=\"'order.refund-metadata' | translate\"\r\n                    *ngIf=\"refundHasMetadata(refund)\"\r\n                >\r\n                    <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\r\n                <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\r\n                    {{ 'order.settle-refund' | translate }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            *ngIf=\"payment.nextStates.includes('Settled')\"\r\n            (click)=\"settlePayment.emit(payment)\"\r\n        >\r\n            {{ 'order.settle-payment' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{\r\n                                'order.transition-to-state'\r\n                                    | translate : { state: (nextState | stateI18nToken | translate) }\r\n                            }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-payment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n", styles: [":host{display:block}.payment-header{display:flex;justify-content:space-between;align-items:center;line-break:anywhere}.refund-icon{margin-inline-end:6px;color:var(--color-grey-400)}.card-footer{display:flex;align-items:center;justify-content:flex-end}.refund-wrapper{font-size:var(--font-size-xs)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3$1.Dir, selector: "[dir]", inputs: ["dir"], outputs: ["dirChange"], exportAs: ["dir"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.ObjectTreeComponent, selector: "vdr-object-tree", inputs: ["value", "isArrayItem"] }, { kind: "component", type: PaymentStateLabelComponent, selector: "vdr-payment-state-label", inputs: ["state"] }, { kind: "component", type: RefundStateLabelComponent, selector: "vdr-refund-state-label", inputs: ["state"] }, { kind: "component", type: PaymentDetailComponent, selector: "vdr-payment-detail", inputs: ["payment", "currencyCode"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.StateI18nTokenPipe, name: "stateI18nToken" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderPaymentCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-payment-card', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"card\">\r\n    <div class=\"card-header payment-header\">\r\n        <div>\r\n            {{ 'order.payment' | translate }}\r\n            <ng-container *ngIf=\"payment.amount\">{{ payment.amount | localeCurrency : currencyCode }}</ng-container>\r\n        </div>\r\n        <div class=\"payment-state\">\r\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\r\n    </div>\r\n    <ng-container *ngFor=\"let refund of payment.refunds\">\r\n        <div class=\"refund-wrapper card-block\">\r\n            <div class=\"card-header payment-header refund-header\">\r\n                <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\r\n                {{ 'order.refund' | translate }} #{{ refund.id }}\r\n                <div class=\"clr-flex-fill\"></div>\r\n                <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                    {{ refund.createdAt | localeDate : 'medium' }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\r\n                    {{ refund.total | localeCurrency : currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\r\n                    {{ refund.transactionId }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\r\n                    {{ refund.reason }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data\r\n                    [label]=\"'order.refund-metadata' | translate\"\r\n                    *ngIf=\"refundHasMetadata(refund)\"\r\n                >\r\n                    <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\r\n                <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\r\n                    {{ 'order.settle-refund' | translate }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            *ngIf=\"payment.nextStates.includes('Settled')\"\r\n            (click)=\"settlePayment.emit(payment)\"\r\n        >\r\n            {{ 'order.settle-payment' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{\r\n                                'order.transition-to-state'\r\n                                    | translate : { state: (nextState | stateI18nToken | translate) }\r\n                            }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-payment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n", styles: [":host{display:block}.payment-header{display:flex;justify-content:space-between;align-items:center;line-break:anywhere}.refund-icon{margin-inline-end:6px;color:var(--color-grey-400)}.card-footer{display:flex;align-items:center;justify-content:flex-end}.refund-wrapper{font-size:var(--font-size-xs)}\n"] }]
        }], propDecorators: { payment: [{
                type: Input
            }], currencyCode: [{
                type: Input
            }], settlePayment: [{
                type: Output
            }], transitionPaymentState: [{
                type: Output
            }], settleRefund: [{
                type: Output
            }] } });

class OrderHistoryEntryHostComponent {
    constructor(historyEntryComponentService) {
        this.historyEntryComponentService = historyEntryComponentService;
        this.expandClick = new EventEmitter();
    }
    ngOnInit() {
        const componentType = this.historyEntryComponentService.getComponent(this.entry.type);
        const componentRef = this.portalRef.createComponent(componentType);
        componentRef.instance.entry = this.entry;
        componentRef.instance.order = this.order;
        this.instance = componentRef.instance;
        this.componentRef = componentRef;
    }
    ngOnDestroy() {
        this.componentRef?.destroy();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderHistoryEntryHostComponent, deps: [{ token: i1.HistoryEntryComponentService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderHistoryEntryHostComponent, selector: "vdr-order-history-entry-host", inputs: { entry: "entry", order: "order", expanded: "expanded" }, outputs: { expandClick: "expandClick" }, viewQueries: [{ propertyName: "portalRef", first: true, predicate: ["portal"], descendants: true, read: ViewContainerRef, static: true }], exportAs: ["historyEntry"], ngImport: i0, template: `<vdr-timeline-entry
        [displayType]="instance.getDisplayType(entry)"
        [iconShape]="instance.getIconShape && instance.getIconShape(entry)"
        [createdAt]="entry.createdAt"
        [name]="instance.getName && instance.getName(entry)"
        [featured]="instance.isFeatured(entry)"
        [collapsed]="!expanded && !instance.isFeatured(entry)"
        (expandClick)="expandClick.emit()"
    >
        <div #portal></div>
    </vdr-timeline-entry>`, isInline: true, dependencies: [{ kind: "component", type: i1.TimelineEntryComponent, selector: "vdr-timeline-entry", inputs: ["displayType", "createdAt", "name", "featured", "iconShape", "isFirst", "isLast", "collapsed"], outputs: ["expandClick"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderHistoryEntryHostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'vdr-order-history-entry-host',
                    template: `<vdr-timeline-entry
        [displayType]="instance.getDisplayType(entry)"
        [iconShape]="instance.getIconShape && instance.getIconShape(entry)"
        [createdAt]="entry.createdAt"
        [name]="instance.getName && instance.getName(entry)"
        [featured]="instance.isFeatured(entry)"
        [collapsed]="!expanded && !instance.isFeatured(entry)"
        (expandClick)="expandClick.emit()"
    >
        <div #portal></div>
    </vdr-timeline-entry>`,
                    exportAs: 'historyEntry',
                }]
        }], ctorParameters: () => [{ type: i1.HistoryEntryComponentService }], propDecorators: { entry: [{
                type: Input
            }], order: [{
                type: Input
            }], expanded: [{
                type: Input
            }], expandClick: [{
                type: Output
            }], portalRef: [{
                type: ViewChild,
                args: ['portal', { static: true, read: ViewContainerRef }]
            }] } });

class OrderHistoryComponent {
    constructor(historyEntryComponentService) {
        this.historyEntryComponentService = historyEntryComponentService;
        this.addNote = new EventEmitter();
        this.updateNote = new EventEmitter();
        this.deleteNote = new EventEmitter();
        this.note = '';
        this.noteIsPrivate = true;
        this.expanded = false;
        this.type = HistoryEntryType;
    }
    hasCustomComponent(type) {
        return !!this.historyEntryComponentService.getComponent(type);
    }
    getDisplayType(entry) {
        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {
            if (entry.data.to === 'Delivered') {
                return 'success';
            }
            if (entry.data.to === 'Cancelled') {
                return 'error';
            }
        }
        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {
            if (entry.data.to === 'Delivered') {
                return 'success';
            }
        }
        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {
            if (entry.data.to === 'Declined' || entry.data.to === 'Cancelled') {
                return 'error';
            }
        }
        if (entry.type === HistoryEntryType.ORDER_CANCELLATION) {
            return 'warning';
        }
        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {
            return 'warning';
        }
        return 'default';
    }
    getTimelineIcon(entry) {
        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {
            if (entry.data.to === 'Delivered') {
                return ['success-standard', 'is-solid'];
            }
            if (entry.data.to === 'Cancelled') {
                return 'ban';
            }
        }
        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {
            if (entry.data.to === 'Settled') {
                return 'credit-card';
            }
        }
        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {
            if (entry.data.to === 'Settled') {
                return 'credit-card';
            }
        }
        if (entry.type === HistoryEntryType.ORDER_NOTE) {
            return 'note';
        }
        if (entry.type === HistoryEntryType.ORDER_MODIFIED) {
            return 'pencil';
        }
        if (entry.type === HistoryEntryType.ORDER_CUSTOMER_UPDATED) {
            return 'switch';
        }
        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {
            if (entry.data.to === 'Shipped') {
                return 'truck';
            }
            if (entry.data.to === 'Delivered') {
                return 'truck';
            }
        }
    }
    isFeatured(entry) {
        switch (entry.type) {
            case HistoryEntryType.ORDER_STATE_TRANSITION: {
                return (entry.data.to === 'Delivered' ||
                    entry.data.to === 'Cancelled' ||
                    entry.data.to === 'Settled');
            }
            case HistoryEntryType.ORDER_REFUND_TRANSITION:
                return entry.data.to === 'Settled';
            case HistoryEntryType.ORDER_PAYMENT_TRANSITION:
                return entry.data.to === 'Settled' || entry.data.to === 'Cancelled';
            case HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:
                return entry.data.to === 'Delivered' || entry.data.to === 'Shipped';
            case HistoryEntryType.ORDER_NOTE:
            case HistoryEntryType.ORDER_MODIFIED:
            case HistoryEntryType.ORDER_CUSTOMER_UPDATED:
                return true;
            default:
                return false;
        }
    }
    getFulfillment(entry) {
        if ((entry.type === HistoryEntryType.ORDER_FULFILLMENT ||
            entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) &&
            this.order.fulfillments) {
            return this.order.fulfillments.find(f => f.id === entry.data.fulfillmentId);
        }
    }
    getPayment(entry) {
        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION && this.order.payments) {
            return this.order.payments.find(p => p.id === entry.data.paymentId);
        }
    }
    getRefund(entry) {
        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION && this.order.payments) {
            const allRefunds = this.order.payments.reduce((refunds, payment) => refunds.concat(payment.refunds), []);
            return allRefunds.find(r => r.id === entry.data.refundId);
        }
    }
    getCancelledQuantity(entry) {
        return entry.data.lines.reduce((total, line) => total + line.quantity, 0);
    }
    getCancelledItems(cancellationLines) {
        const itemMap = new Map();
        for (const line of this.order.lines) {
            const cancellationLine = cancellationLines.find(l => l.orderLineId === line.id);
            if (cancellationLine) {
                const count = itemMap.get(line.productVariant.name);
                itemMap.set(line.productVariant.name, cancellationLine.quantity);
            }
        }
        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));
    }
    getModification(id) {
        return this.order.modifications.find(m => m.id === id);
    }
    getName(entry) {
        const { administrator } = entry;
        if (administrator) {
            return `${administrator.firstName} ${administrator.lastName}`;
        }
        else {
            const customer = this.order.customer;
            if (customer) {
                return `${customer.firstName} ${customer.lastName}`;
            }
        }
        return '';
    }
    addNoteToOrder() {
        this.addNote.emit({ note: this.note, isPublic: !this.noteIsPrivate });
        this.note = '';
        this.noteIsPrivate = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderHistoryComponent, deps: [{ token: i1.HistoryEntryComponentService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderHistoryComponent, selector: "vdr-order-history", inputs: { order: "order", history: "history" }, outputs: { addNote: "addNote", updateNote: "updateNote", deleteNote: "deleteNote" }, ngImport: i0, template: "<div class=\"entry-list\" [class.expanded]=\"expanded\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\" [isFirst]=\"true\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\r\n                {{ 'common.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n        <div class=\"visibility-select\">\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\r\n                <label>{{ 'order.note-is-private' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\r\n                {{ 'order.note-only-visible-to-administrators' | translate }}\r\n            </span>\r\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\r\n                {{ 'order.note-visible-to-customer' | translate }}\r\n            </span>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <ng-container *ngFor=\"let entry of history\">\r\n        <vdr-order-history-entry-host\r\n            *ngIf=\"hasCustomComponent(entry.type); else defaultComponents\"\r\n            [order]=\"order\"\r\n            [entry]=\"entry\"\r\n            [expanded]=\"expanded\"\r\n            (expandClick)=\"expanded = !expanded\"\r\n        ></vdr-order-history-entry-host>\r\n        <ng-template #defaultComponents>\r\n            <vdr-timeline-entry\r\n                [displayType]=\"getDisplayType(entry)\"\r\n                [iconShape]=\"getTimelineIcon(entry)\"\r\n                [createdAt]=\"entry.createdAt\"\r\n                [name]=\"getName(entry)\"\r\n                [featured]=\"isFeatured(entry)\"\r\n                [collapsed]=\"!expanded && !isFeatured(entry)\"\r\n                (expandClick)=\"expanded = !expanded\"\r\n            >\r\n                <ng-container [ngSwitch]=\"entry.type\">\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\r\n                        <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\r\n                            {{ 'order.history-order-fulfilled' | translate }}\r\n                        </div>\r\n                        <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\r\n                            {{ 'order.history-order-cancelled' | translate }}\r\n                        </div>\r\n                        <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\r\n                            {{\r\n                                'order.history-order-transition'\r\n                                    | translate : { from: entry.data.from, to: entry.data.to }\r\n                            }}\r\n                        </ng-template>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\r\n                        <div class=\"title\">\r\n                            {{ 'order.history-order-modified' | translate }}\r\n                        </div>\r\n                        <div\r\n                            class=\"flex items-center\"\r\n                            *ngIf=\"getModification(entry.data.modificationId) as modification\"\r\n                        >\r\n                            {{ 'order.modify-order-price-difference' | translate }}:\r\n                            <strong>{{\r\n                                modification.priceChange | localeCurrency : order.currencyCode\r\n                            }}</strong>\r\n                            <vdr-chip colorType=\"success\" class=\"mx-1\" *ngIf=\"modification.isSettled\">{{\r\n                                'order.modification-settled' | translate\r\n                            }}</vdr-chip>\r\n                            <vdr-chip colorType=\"error\" class=\"mx-1\" *ngIf=\"!modification.isSettled\">{{\r\n                                'order.modification-not-settled' | translate\r\n                            }}</vdr-chip>\r\n                            <vdr-history-entry-detail>\r\n                                <vdr-modification-detail\r\n                                    [order]=\"order\"\r\n                                    [modification]=\"modification\"\r\n                                ></vdr-modification-detail>\r\n                            </vdr-history-entry-detail>\r\n                        </div>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\r\n                        <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\r\n                            <div class=\"title\">\r\n                                {{ 'order.history-payment-settled' | translate }}\r\n                            </div>\r\n                            <div class=\"flex items-center\">\r\n                                <vdr-chip *ngIf=\"getPayment(entry) as payment\" class=\"mr-1\">{{\r\n                                    payment.amount | localeCurrency : order.currencyCode\r\n                                }}</vdr-chip>\r\n                                <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\r\n                                    <vdr-payment-detail\r\n                                        [payment]=\"payment\"\r\n                                        [currencyCode]=\"order.currencyCode\"\r\n                                    ></vdr-payment-detail>\r\n                                </vdr-history-entry-detail>\r\n                            </div>\r\n                        </ng-container>\r\n                        <ng-template #regularPaymentTransition>\r\n                            {{\r\n                                'order.history-payment-transition'\r\n                                    | translate\r\n                                        : {\r\n                                              from: entry.data.from,\r\n                                              to: entry.data.to,\r\n                                              id: getPayment(entry)?.transactionId\r\n                                          }\r\n                            }}\r\n                        </ng-template>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\r\n                        <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularRefundTransition\">\r\n                            <ng-container *ngIf=\"getRefund(entry) as refund\">\r\n                                <div class=\"title\">{{ 'order.refund' | translate }} #{{ refund.id }}</div>\r\n                                <div class=\"flex items-center\">\r\n                                    <vdr-chip colorType=\"warning\" class=\"mr-1\">{{\r\n                                        refund.total | localeCurrency : order.currencyCode\r\n                                    }}</vdr-chip>\r\n                                    <vdr-history-entry-detail>\r\n                                        <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                                            {{ entry.data.reason }}\r\n                                        </vdr-labeled-data>\r\n                                        <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                                            <vdr-simple-item-list\r\n                                                [items]=\"getCancelledItems(refund.lines)\"\r\n                                            ></vdr-simple-item-list>\r\n                                        </vdr-labeled-data>\r\n                                    </vdr-history-entry-detail>\r\n                                </div>\r\n                            </ng-container>\r\n                        </ng-container>\r\n                        <ng-template #regularRefundTransition>\r\n                            {{\r\n                                'order.history-refund-transition'\r\n                                    | translate\r\n                                        : {\r\n                                              from: entry.data.from,\r\n                                              to: entry.data.to,\r\n                                              id: entry.data.refundId\r\n                                          }\r\n                            }}\r\n                        </ng-template>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\r\n                        {{\r\n                            'order.history-items-cancelled'\r\n                                | translate : { count: getCancelledQuantity(entry) }\r\n                        }}\r\n                        <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry.data.lines) as items\">\r\n                            <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                                {{ entry.data.reason }}\r\n                            </vdr-labeled-data>\r\n                            <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                                <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n                            </vdr-labeled-data>\r\n                            <vdr-labeled-data [label]=\"'order.shipping-cancelled' | translate\">\r\n                                {{ entry.data.shippingCancelled }}\r\n                            </vdr-labeled-data>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\r\n                        {{ 'order.history-fulfillment-created' | translate }}\r\n                        <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                            <vdr-fulfillment-detail\r\n                                [fulfillmentId]=\"fulfillment.id\"\r\n                                [order]=\"order\"\r\n                            ></vdr-fulfillment-detail>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\r\n                        <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\r\n                            <div class=\"title\">\r\n                                {{ 'order.history-fulfillment-delivered' | translate }}\r\n                            </div>\r\n                            {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\r\n                            <div class=\"title\">\r\n                                {{ 'order.history-fulfillment-shipped' | translate }}\r\n                            </div>\r\n                            {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\r\n                            {{\r\n                                'order.history-fulfillment-transition'\r\n                                    | translate : { from: entry.data.from, to: entry.data.to }\r\n                            }}\r\n                        </ng-container>\r\n                        <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                            <vdr-fulfillment-detail\r\n                                [fulfillmentId]=\"fulfillment.id\"\r\n                                [order]=\"order\"\r\n                            ></vdr-fulfillment-detail>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\r\n                        <div class=\"flex\">\r\n                            <div class=\"note-text\">\r\n                                <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\r\n                                    'common.public' | translate\r\n                                }}</span>\r\n                                <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\r\n                                    'common.private' | translate\r\n                                }}</span>\r\n                                {{ entry.data.note }}\r\n                            </div>\r\n                            <div class=\"flex-spacer\"></div>\r\n                            <vdr-dropdown>\r\n                                <button class=\"button-small ml-1\" vdrDropdownTrigger>\r\n                                    <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\r\n                                </button>\r\n                                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                    <button\r\n                                        vdrDropdownItem\r\n                                        (click)=\"updateNote.emit(entry)\"\r\n                                        [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                                    >\r\n                                        <clr-icon shape=\"edit\"></clr-icon>\r\n                                        {{ 'common.edit' | translate }}\r\n                                    </button>\r\n                                    <div class=\"dropdown-divider\"></div>\r\n                                    <button\r\n                                        vdrDropdownItem\r\n                                        (click)=\"deleteNote.emit(entry)\"\r\n                                        [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                                    >\r\n                                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                        {{ 'common.delete' | translate }}\r\n                                    </button>\r\n                                </vdr-dropdown-menu>\r\n                            </vdr-dropdown>\r\n                        </div>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\r\n                        {{ 'order.history-coupon-code-applied' | translate }}:\r\n                        <vdr-chip>\r\n                            <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\r\n                                entry.data.couponCode\r\n                            }}</a>\r\n                        </vdr-chip>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\r\n                        {{ 'order.history-coupon-code-removed' | translate }}:\r\n                        <vdr-chip\r\n                            ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\r\n                        >\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_CUSTOMER_UPDATED\">\r\n                        <div class=\"title\">\r\n                            {{\r\n                                'order.history-customer-updated'\r\n                                    | translate : { newCustomerName: entry.data.newCustomerName }\r\n                            }}\r\n                        </div>\r\n                        <div class=\"flex\">\r\n                            <div class=\"note-text\">\r\n                                {{ entry.data.note }}\r\n                            </div>\r\n                            <div class=\"flex-spacer\"></div>\r\n                            <vdr-history-entry-detail>\r\n                                <vdr-labeled-data [label]=\"'order.previous-customer' | translate\">\r\n                                    <a\r\n                                        *ngIf=\"entry.data.previousCustomerId\"\r\n                                        class=\"button-ghost\"\r\n                                        [routerLink]=\"[\r\n                                            '/customer',\r\n                                            'customers',\r\n                                            entry.data.previousCustomerId\r\n                                        ]\"\r\n                                    >\r\n                                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon>\r\n                                        <span>{{ entry.data.previousCustomerName }}</span>\r\n                                        <clr-icon shape=\"arrow right\"></clr-icon>\r\n                                    </a>\r\n                                </vdr-labeled-data>\r\n                                <vdr-labeled-data [label]=\"'order.new-customer' | translate\">\r\n                                    <a\r\n                                        *ngIf=\"entry.data.newCustomerId\"\r\n                                        class=\"button-ghost\"\r\n                                        [routerLink]=\"['/customer', 'customers', entry.data.newCustomerId]\"\r\n                                    >\r\n                                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon>\r\n                                        <span>{{ entry.data.newCustomerName }}</span>\r\n                                        <clr-icon shape=\"arrow right\"></clr-icon>\r\n                                    </a>\r\n                                </vdr-labeled-data>\r\n                            </vdr-history-entry-detail>\r\n                        </div>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchDefault>\r\n                        <div class=\"title\">\r\n                            {{ entry.type | translate }}\r\n                        </div>\r\n                        <vdr-history-entry-detail *ngIf=\"entry.data\">\r\n                            <vdr-object-tree [value]=\"entry.data\"></vdr-object-tree>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </vdr-timeline-entry>\r\n        </ng-template>\r\n    </ng-container>\r\n\r\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\r\n        <div class=\"title\">\r\n            {{ 'order.history-order-created' | translate }}\r\n        </div>\r\n    </vdr-timeline-entry>\r\n</div>\r\n", styles: [":host{display:block}.entry-list{margin-inline-start:calc(var(--space-unit) * 2)}.note-entry{display:flex;align-items:center}.note-entry .note{flex:1}.note-entry button{margin:0}.visibility-select{display:flex;justify-content:space-between;align-items:baseline}.visibility-select .public{color:var(--color-warning-700)}.visibility-select .private{color:var(--color-success-700)}textarea.note{flex:1;height:36px;border-radius:3px;margin-inline-end:6px}.note-text{color:var(--color-grey-800);white-space:pre-wrap;max-width:580px}.cancelled-coupon-code{text-decoration:line-through}.note-visibility{text-transform:lowercase}.note-visibility.public{color:var(--color-warning-700)}.note-visibility.private{color:var(--color-success-700)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.ObjectTreeComponent, selector: "vdr-object-tree", inputs: ["value", "isArrayItem"] }, { kind: "component", type: i1.TimelineEntryComponent, selector: "vdr-timeline-entry", inputs: ["displayType", "createdAt", "name", "featured", "iconShape", "isFirst", "isLast", "collapsed"], outputs: ["expandClick"] }, { kind: "component", type: i1.HistoryEntryDetailComponent, selector: "vdr-history-entry-detail" }, { kind: "component", type: FulfillmentDetailComponent, selector: "vdr-fulfillment-detail", inputs: ["fulfillmentId", "order"] }, { kind: "component", type: PaymentDetailComponent, selector: "vdr-payment-detail", inputs: ["payment", "currencyCode"] }, { kind: "component", type: SimpleItemListComponent, selector: "vdr-simple-item-list", inputs: ["items"] }, { kind: "component", type: ModificationDetailComponent, selector: "vdr-modification-detail", inputs: ["order", "modification"] }, { kind: "component", type: OrderHistoryEntryHostComponent, selector: "vdr-order-history-entry-host", inputs: ["entry", "order", "expanded"], outputs: ["expandClick"], exportAs: ["historyEntry"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderHistoryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-history', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"entry-list\" [class.expanded]=\"expanded\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\" [isFirst]=\"true\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\r\n                {{ 'common.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n        <div class=\"visibility-select\">\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\r\n                <label>{{ 'order.note-is-private' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\r\n                {{ 'order.note-only-visible-to-administrators' | translate }}\r\n            </span>\r\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\r\n                {{ 'order.note-visible-to-customer' | translate }}\r\n            </span>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <ng-container *ngFor=\"let entry of history\">\r\n        <vdr-order-history-entry-host\r\n            *ngIf=\"hasCustomComponent(entry.type); else defaultComponents\"\r\n            [order]=\"order\"\r\n            [entry]=\"entry\"\r\n            [expanded]=\"expanded\"\r\n            (expandClick)=\"expanded = !expanded\"\r\n        ></vdr-order-history-entry-host>\r\n        <ng-template #defaultComponents>\r\n            <vdr-timeline-entry\r\n                [displayType]=\"getDisplayType(entry)\"\r\n                [iconShape]=\"getTimelineIcon(entry)\"\r\n                [createdAt]=\"entry.createdAt\"\r\n                [name]=\"getName(entry)\"\r\n                [featured]=\"isFeatured(entry)\"\r\n                [collapsed]=\"!expanded && !isFeatured(entry)\"\r\n                (expandClick)=\"expanded = !expanded\"\r\n            >\r\n                <ng-container [ngSwitch]=\"entry.type\">\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\r\n                        <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\r\n                            {{ 'order.history-order-fulfilled' | translate }}\r\n                        </div>\r\n                        <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\r\n                            {{ 'order.history-order-cancelled' | translate }}\r\n                        </div>\r\n                        <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\r\n                            {{\r\n                                'order.history-order-transition'\r\n                                    | translate : { from: entry.data.from, to: entry.data.to }\r\n                            }}\r\n                        </ng-template>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\r\n                        <div class=\"title\">\r\n                            {{ 'order.history-order-modified' | translate }}\r\n                        </div>\r\n                        <div\r\n                            class=\"flex items-center\"\r\n                            *ngIf=\"getModification(entry.data.modificationId) as modification\"\r\n                        >\r\n                            {{ 'order.modify-order-price-difference' | translate }}:\r\n                            <strong>{{\r\n                                modification.priceChange | localeCurrency : order.currencyCode\r\n                            }}</strong>\r\n                            <vdr-chip colorType=\"success\" class=\"mx-1\" *ngIf=\"modification.isSettled\">{{\r\n                                'order.modification-settled' | translate\r\n                            }}</vdr-chip>\r\n                            <vdr-chip colorType=\"error\" class=\"mx-1\" *ngIf=\"!modification.isSettled\">{{\r\n                                'order.modification-not-settled' | translate\r\n                            }}</vdr-chip>\r\n                            <vdr-history-entry-detail>\r\n                                <vdr-modification-detail\r\n                                    [order]=\"order\"\r\n                                    [modification]=\"modification\"\r\n                                ></vdr-modification-detail>\r\n                            </vdr-history-entry-detail>\r\n                        </div>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\r\n                        <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\r\n                            <div class=\"title\">\r\n                                {{ 'order.history-payment-settled' | translate }}\r\n                            </div>\r\n                            <div class=\"flex items-center\">\r\n                                <vdr-chip *ngIf=\"getPayment(entry) as payment\" class=\"mr-1\">{{\r\n                                    payment.amount | localeCurrency : order.currencyCode\r\n                                }}</vdr-chip>\r\n                                <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\r\n                                    <vdr-payment-detail\r\n                                        [payment]=\"payment\"\r\n                                        [currencyCode]=\"order.currencyCode\"\r\n                                    ></vdr-payment-detail>\r\n                                </vdr-history-entry-detail>\r\n                            </div>\r\n                        </ng-container>\r\n                        <ng-template #regularPaymentTransition>\r\n                            {{\r\n                                'order.history-payment-transition'\r\n                                    | translate\r\n                                        : {\r\n                                              from: entry.data.from,\r\n                                              to: entry.data.to,\r\n                                              id: getPayment(entry)?.transactionId\r\n                                          }\r\n                            }}\r\n                        </ng-template>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\r\n                        <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularRefundTransition\">\r\n                            <ng-container *ngIf=\"getRefund(entry) as refund\">\r\n                                <div class=\"title\">{{ 'order.refund' | translate }} #{{ refund.id }}</div>\r\n                                <div class=\"flex items-center\">\r\n                                    <vdr-chip colorType=\"warning\" class=\"mr-1\">{{\r\n                                        refund.total | localeCurrency : order.currencyCode\r\n                                    }}</vdr-chip>\r\n                                    <vdr-history-entry-detail>\r\n                                        <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                                            {{ entry.data.reason }}\r\n                                        </vdr-labeled-data>\r\n                                        <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                                            <vdr-simple-item-list\r\n                                                [items]=\"getCancelledItems(refund.lines)\"\r\n                                            ></vdr-simple-item-list>\r\n                                        </vdr-labeled-data>\r\n                                    </vdr-history-entry-detail>\r\n                                </div>\r\n                            </ng-container>\r\n                        </ng-container>\r\n                        <ng-template #regularRefundTransition>\r\n                            {{\r\n                                'order.history-refund-transition'\r\n                                    | translate\r\n                                        : {\r\n                                              from: entry.data.from,\r\n                                              to: entry.data.to,\r\n                                              id: entry.data.refundId\r\n                                          }\r\n                            }}\r\n                        </ng-template>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\r\n                        {{\r\n                            'order.history-items-cancelled'\r\n                                | translate : { count: getCancelledQuantity(entry) }\r\n                        }}\r\n                        <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry.data.lines) as items\">\r\n                            <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                                {{ entry.data.reason }}\r\n                            </vdr-labeled-data>\r\n                            <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                                <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n                            </vdr-labeled-data>\r\n                            <vdr-labeled-data [label]=\"'order.shipping-cancelled' | translate\">\r\n                                {{ entry.data.shippingCancelled }}\r\n                            </vdr-labeled-data>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\r\n                        {{ 'order.history-fulfillment-created' | translate }}\r\n                        <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                            <vdr-fulfillment-detail\r\n                                [fulfillmentId]=\"fulfillment.id\"\r\n                                [order]=\"order\"\r\n                            ></vdr-fulfillment-detail>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\r\n                        <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\r\n                            <div class=\"title\">\r\n                                {{ 'order.history-fulfillment-delivered' | translate }}\r\n                            </div>\r\n                            {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\r\n                            <div class=\"title\">\r\n                                {{ 'order.history-fulfillment-shipped' | translate }}\r\n                            </div>\r\n                            {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\r\n                            {{\r\n                                'order.history-fulfillment-transition'\r\n                                    | translate : { from: entry.data.from, to: entry.data.to }\r\n                            }}\r\n                        </ng-container>\r\n                        <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                            <vdr-fulfillment-detail\r\n                                [fulfillmentId]=\"fulfillment.id\"\r\n                                [order]=\"order\"\r\n                            ></vdr-fulfillment-detail>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\r\n                        <div class=\"flex\">\r\n                            <div class=\"note-text\">\r\n                                <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\r\n                                    'common.public' | translate\r\n                                }}</span>\r\n                                <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\r\n                                    'common.private' | translate\r\n                                }}</span>\r\n                                {{ entry.data.note }}\r\n                            </div>\r\n                            <div class=\"flex-spacer\"></div>\r\n                            <vdr-dropdown>\r\n                                <button class=\"button-small ml-1\" vdrDropdownTrigger>\r\n                                    <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\r\n                                </button>\r\n                                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                    <button\r\n                                        vdrDropdownItem\r\n                                        (click)=\"updateNote.emit(entry)\"\r\n                                        [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                                    >\r\n                                        <clr-icon shape=\"edit\"></clr-icon>\r\n                                        {{ 'common.edit' | translate }}\r\n                                    </button>\r\n                                    <div class=\"dropdown-divider\"></div>\r\n                                    <button\r\n                                        vdrDropdownItem\r\n                                        (click)=\"deleteNote.emit(entry)\"\r\n                                        [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                                    >\r\n                                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                        {{ 'common.delete' | translate }}\r\n                                    </button>\r\n                                </vdr-dropdown-menu>\r\n                            </vdr-dropdown>\r\n                        </div>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\r\n                        {{ 'order.history-coupon-code-applied' | translate }}:\r\n                        <vdr-chip>\r\n                            <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\r\n                                entry.data.couponCode\r\n                            }}</a>\r\n                        </vdr-chip>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\r\n                        {{ 'order.history-coupon-code-removed' | translate }}:\r\n                        <vdr-chip\r\n                            ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\r\n                        >\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchCase=\"type.ORDER_CUSTOMER_UPDATED\">\r\n                        <div class=\"title\">\r\n                            {{\r\n                                'order.history-customer-updated'\r\n                                    | translate : { newCustomerName: entry.data.newCustomerName }\r\n                            }}\r\n                        </div>\r\n                        <div class=\"flex\">\r\n                            <div class=\"note-text\">\r\n                                {{ entry.data.note }}\r\n                            </div>\r\n                            <div class=\"flex-spacer\"></div>\r\n                            <vdr-history-entry-detail>\r\n                                <vdr-labeled-data [label]=\"'order.previous-customer' | translate\">\r\n                                    <a\r\n                                        *ngIf=\"entry.data.previousCustomerId\"\r\n                                        class=\"button-ghost\"\r\n                                        [routerLink]=\"[\r\n                                            '/customer',\r\n                                            'customers',\r\n                                            entry.data.previousCustomerId\r\n                                        ]\"\r\n                                    >\r\n                                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon>\r\n                                        <span>{{ entry.data.previousCustomerName }}</span>\r\n                                        <clr-icon shape=\"arrow right\"></clr-icon>\r\n                                    </a>\r\n                                </vdr-labeled-data>\r\n                                <vdr-labeled-data [label]=\"'order.new-customer' | translate\">\r\n                                    <a\r\n                                        *ngIf=\"entry.data.newCustomerId\"\r\n                                        class=\"button-ghost\"\r\n                                        [routerLink]=\"['/customer', 'customers', entry.data.newCustomerId]\"\r\n                                    >\r\n                                        <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon>\r\n                                        <span>{{ entry.data.newCustomerName }}</span>\r\n                                        <clr-icon shape=\"arrow right\"></clr-icon>\r\n                                    </a>\r\n                                </vdr-labeled-data>\r\n                            </vdr-history-entry-detail>\r\n                        </div>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchDefault>\r\n                        <div class=\"title\">\r\n                            {{ entry.type | translate }}\r\n                        </div>\r\n                        <vdr-history-entry-detail *ngIf=\"entry.data\">\r\n                            <vdr-object-tree [value]=\"entry.data\"></vdr-object-tree>\r\n                        </vdr-history-entry-detail>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </vdr-timeline-entry>\r\n        </ng-template>\r\n    </ng-container>\r\n\r\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\r\n        <div class=\"title\">\r\n            {{ 'order.history-order-created' | translate }}\r\n        </div>\r\n    </vdr-timeline-entry>\r\n</div>\r\n", styles: [":host{display:block}.entry-list{margin-inline-start:calc(var(--space-unit) * 2)}.note-entry{display:flex;align-items:center}.note-entry .note{flex:1}.note-entry button{margin:0}.visibility-select{display:flex;justify-content:space-between;align-items:baseline}.visibility-select .public{color:var(--color-warning-700)}.visibility-select .private{color:var(--color-success-700)}textarea.note{flex:1;height:36px;border-radius:3px;margin-inline-end:6px}.note-text{color:var(--color-grey-800);white-space:pre-wrap;max-width:580px}.cancelled-coupon-code{text-decoration:line-through}.note-visibility{text-transform:lowercase}.note-visibility.public{color:var(--color-warning-700)}.note-visibility.private{color:var(--color-success-700)}\n"] }]
        }], ctorParameters: () => [{ type: i1.HistoryEntryComponentService }], propDecorators: { order: [{
                type: Input
            }], history: [{
                type: Input
            }], addNote: [{
                type: Output
            }], updateNote: [{
                type: Output
            }], deleteNote: [{
                type: Output
            }] } });

const GET_SELLER_ORDERS = gql `
    query GetSellerOrders($orderId: ID!) {
        order(id: $orderId) {
            id
            sellerOrders {
                id
                code
                state
                orderPlacedAt
                currencyCode
                totalWithTax
                channels {
                    id
                    code
                    seller {
                        id
                        name
                    }
                }
            }
        }
    }
`;

class SellerOrdersCardComponent {
    constructor(router, dataService, channelService) {
        this.router = router;
        this.dataService = dataService;
        this.channelService = channelService;
    }
    ngOnInit() {
        this.sellerOrders$ = this.dataService
            .query(GET_SELLER_ORDERS, {
            orderId: this.orderId,
        })
            .mapSingle(({ order }) => order?.sellerOrders ?? []);
    }
    getSeller(order) {
        const sellerChannel = order.channels.find(channel => channel.code !== DEFAULT_CHANNEL_CODE);
        return sellerChannel?.seller;
    }
    navigateToSellerOrder(order) {
        this.router.navigate(['/orders', order.id]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SellerOrdersCardComponent, deps: [{ token: i1$1.Router }, { token: i1.DataService }, { token: i1.ChannelService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: SellerOrdersCardComponent, selector: "vdr-seller-orders-card", inputs: { orderId: "orderId" }, ngImport: i0, template: "<vdr-card [title]=\"'order.seller-orders' | translate\">\r\n    <div class=\"form-grid\">\r\n        <div *ngFor=\"let order of sellerOrders$ | async\">\r\n            <a [routerLink]=\"['seller-orders', order.id]\" class=\"button-ghost mb-1\"\r\n                >{{ order.code }} <clr-icon shape=\"arrow right\"></clr-icon\r\n            ></a>\r\n            <vdr-labeled-data [label]=\"'order.state' | translate\">\r\n                <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'common.seller' | translate\">\r\n                {{ seller.name }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'order.total' | translate\">\r\n                {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </div>\r\n</vdr-card>\r\n", styles: [":host{display:block}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.OrderStateLabelComponent, selector: "vdr-order-state-label", inputs: ["state"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SellerOrdersCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-seller-orders-card', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-card [title]=\"'order.seller-orders' | translate\">\r\n    <div class=\"form-grid\">\r\n        <div *ngFor=\"let order of sellerOrders$ | async\">\r\n            <a [routerLink]=\"['seller-orders', order.id]\" class=\"button-ghost mb-1\"\r\n                >{{ order.code }} <clr-icon shape=\"arrow right\"></clr-icon\r\n            ></a>\r\n            <vdr-labeled-data [label]=\"'order.state' | translate\">\r\n                <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'common.seller' | translate\">\r\n                {{ seller.name }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'order.total' | translate\">\r\n                {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </div>\r\n</vdr-card>\r\n", styles: [":host{display:block}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.Router }, { type: i1.DataService }, { type: i1.ChannelService }], propDecorators: { orderId: [{
                type: Input
            }] } });

const ORDER_DETAIL_QUERY = gql `
    query OrderDetailQuery($id: ID!) {
        order(id: $id) {
            ...OrderDetail
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
`;
const SET_ORDER_CUSTOMER_MUTATION = gql `
    mutation SetOrderCustomer($input: SetOrderCustomerInput!) {
        setOrderCustomer(input: $input) {
            id
            customer {
                id
                firstName
                lastName
                emailAddress
            }
        }
    }
`;
class OrderDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, notificationService, modalService, orderTransitionService, formBuilder) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.orderTransitionService = orderTransitionService;
        this.formBuilder = formBuilder;
        this.customFields = this.getCustomFieldConfig('Order');
        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');
        this.detailForm = new FormGroup({
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.fetchHistory = new Subject();
        this.defaultStates = [
            'AddingItems',
            'ArrangingPayment',
            'PaymentAuthorized',
            'PaymentSettled',
            'PartiallyShipped',
            'Shipped',
            'PartiallyDelivered',
            'Delivered',
            'Cancelled',
            'Modifying',
            'ArrangingAdditionalPayment',
        ];
    }
    ngOnInit() {
        this.init();
        this.entity$.pipe(take(1)).subscribe(order => {
            if (order.state === 'Modifying') {
                this.router.navigate(['./', 'modify'], { relativeTo: this.route });
            }
        });
        this.history$ = this.fetchHistory.pipe(startWith(null), switchMap(() => this.dataService.order
            .getOrderHistory(this.id, {
            sort: {
                createdAt: SortOrder.DESC,
            },
        })
            .mapStream(data => data.order?.history.items)));
        this.nextStates$ = this.entity$.pipe(map(order => {
            const isInCustomState = !this.defaultStates.includes(order.state);
            return isInCustomState
                ? order.nextStates
                : order.nextStates.filter(s => !this.defaultStates.includes(s));
        }));
    }
    ngOnDestroy() {
        this.destroy();
    }
    openStateDiagram() {
        this.entity$
            .pipe(take(1), switchMap(order => this.modalService.fromComponent(OrderProcessGraphDialogComponent, {
            closable: true,
            locals: {
                activeState: order.state,
            },
        })))
            .subscribe();
    }
    setOrderCustomer() {
        this.modalService
            .fromComponent(SelectCustomerDialogComponent, {
            locals: {
                canCreateNew: false,
                includeNoteInput: true,
                title: marker('order.assign-order-to-another-customer'),
            },
        })
            .pipe(switchMap(result => {
            function isExisting(input) {
                return typeof input === 'object' && !!input.id;
            }
            if (isExisting(result)) {
                return this.dataService.mutate(SetOrderCustomerDocument, {
                    input: {
                        customerId: result.id,
                        orderId: this.id,
                        note: result.note,
                    },
                });
            }
            else {
                return EMPTY;
            }
        }), switchMap(result => this.refetchOrder(result)))
            .subscribe(result => {
            if (result) {
                this.notificationService.success(marker('order.set-customer-success'));
            }
        });
    }
    transitionToState(state) {
        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {
            switch (transitionOrderToState?.__typename) {
                case 'Order':
                    this.notificationService.success(marker('order.transitioned-to-state-success'), { state });
                    this.fetchHistory.next();
                    break;
                case 'OrderStateTransitionError':
                    this.notificationService.error(transitionOrderToState.transitionError);
            }
        });
    }
    manuallyTransitionToState(order) {
        this.orderTransitionService
            .manuallyTransitionToState({
            orderId: order.id,
            nextStates: order.nextStates,
            cancellable: true,
            message: marker('order.manually-transition-to-state-message'),
            retry: 0,
        })
            .subscribe();
    }
    transitionToModifying() {
        this.dataService.order
            .transitionToState(this.id, 'Modifying')
            .subscribe(({ transitionOrderToState }) => {
            switch (transitionOrderToState?.__typename) {
                case 'Order':
                    this.router.navigate(['./modify'], { relativeTo: this.route });
                    break;
                case 'OrderStateTransitionError':
                    this.notificationService.error(transitionOrderToState.transitionError);
            }
        });
    }
    updateCustomFields() {
        this.dataService.order
            .updateOrderCustomFields({
            id: this.id,
            customFields: this.detailForm.value.customFields,
        })
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-update-success'), { entity: 'Order' });
        });
    }
    getOrderAddressLines(orderAddress) {
        if (!orderAddress) {
            return [];
        }
        return Object.values(orderAddress)
            .filter(val => val !== 'OrderAddress')
            .filter(line => !!line);
    }
    settlePayment(payment) {
        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {
            switch (settlePayment.__typename) {
                case 'Payment':
                    if (settlePayment.state === 'Settled') {
                        this.notificationService.success(marker('order.settle-payment-success'));
                    }
                    else {
                        this.notificationService.error(marker('order.settle-payment-error'));
                    }
                    this.dataService.order.getOrder(this.id).single$.subscribe();
                    this.fetchHistory.next();
                    break;
                case 'OrderStateTransitionError':
                case 'PaymentStateTransitionError':
                case 'SettlePaymentError':
                    this.notificationService.error(settlePayment.message);
            }
        });
    }
    transitionPaymentState({ payment, state }) {
        if (state === 'Cancelled') {
            this.dataService.order.cancelPayment(payment.id).subscribe(({ cancelPayment }) => {
                switch (cancelPayment.__typename) {
                    case 'Payment':
                        this.notificationService.success(marker('order.transitioned-payment-to-state-success'), {
                            state,
                        });
                        this.dataService.order.getOrder(this.id).single$.subscribe();
                        this.fetchHistory.next();
                        break;
                    case 'PaymentStateTransitionError':
                        this.notificationService.error(cancelPayment.transitionError);
                        break;
                    case 'CancelPaymentError':
                        this.notificationService.error(cancelPayment.paymentErrorMessage);
                        break;
                }
            });
        }
        else {
            this.dataService.order
                .transitionPaymentToState(payment.id, state)
                .subscribe(({ transitionPaymentToState }) => {
                switch (transitionPaymentToState.__typename) {
                    case 'Payment':
                        this.notificationService.success(marker('order.transitioned-payment-to-state-success'), {
                            state,
                        });
                        this.dataService.order.getOrder(this.id).single$.subscribe();
                        this.fetchHistory.next();
                        break;
                    case 'PaymentStateTransitionError':
                        this.notificationService.error(transitionPaymentToState.message);
                        break;
                }
            });
        }
    }
    canAddFulfillment(order) {
        const allFulfillmentLines = (order.fulfillments ?? [])
            .filter(fulfillment => fulfillment.state !== 'Cancelled')
            .reduce((all, fulfillment) => [...all, ...fulfillment.lines], []);
        let allItemsFulfilled = true;
        for (const line of order.lines) {
            const totalFulfilledCount = allFulfillmentLines
                .filter(row => row.orderLineId === line.id)
                .reduce((sum, row) => sum + row.quantity, 0);
            if (totalFulfilledCount < line.quantity) {
                allItemsFulfilled = false;
            }
        }
        return (!allItemsFulfilled &&
            !this.hasUnsettledModifications(order) &&
            this.outstandingPaymentAmount(order) === 0 &&
            (order.nextStates.includes('Shipped') ||
                order.nextStates.includes('PartiallyShipped') ||
                order.nextStates.includes('Delivered')));
    }
    hasUnsettledModifications(order) {
        return 0 < order.modifications.filter(m => !m.isSettled).length;
    }
    getOutstandingModificationAmount(order) {
        return summate(order.modifications.filter(m => !m.isSettled), 'priceChange');
    }
    outstandingPaymentAmount(order) {
        const paymentIsValid = (p) => p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';
        let amountCovered = 0;
        for (const payment of order.payments?.filter(paymentIsValid) ?? []) {
            const refunds = payment.refunds.filter(r => r.state !== 'Failed') ?? [];
            const refundsTotal = summate(refunds, 'total');
            amountCovered += payment.amount - refundsTotal;
        }
        return order.totalWithTax - amountCovered;
    }
    addManualPayment(order) {
        const priorState = order.state;
        this.modalService
            .fromComponent(AddManualPaymentDialogComponent, {
            closable: true,
            locals: {
                outstandingAmount: this.outstandingPaymentAmount(order),
                currencyCode: order.currencyCode,
            },
        })
            .pipe(switchMap(result => {
            if (result) {
                return this.dataService.order.addManualPaymentToOrder({
                    orderId: this.id,
                    transactionId: result.transactionId,
                    method: result.method,
                    metadata: result.metadata || {},
                });
            }
            else {
                return EMPTY;
            }
        }), switchMap(({ addManualPaymentToOrder }) => {
            switch (addManualPaymentToOrder.__typename) {
                case 'Order':
                    this.notificationService.success(marker('order.add-payment-to-order-success'));
                    if (priorState === 'ArrangingAdditionalPayment') {
                        return this.orderTransitionService.transitionToPreModifyingState(order.id, order.nextStates);
                    }
                    else {
                        return of('PaymentSettled');
                    }
                case 'ManualPaymentStateError':
                    this.notificationService.error(addManualPaymentToOrder.message);
                    return EMPTY;
                default:
                    return EMPTY;
            }
        }))
            .subscribe(result => {
            if (result) {
                this.refetchOrder({ result });
            }
        });
    }
    fulfillOrder() {
        this.entity$
            .pipe(take(1), switchMap(order => this.modalService.fromComponent(FulfillOrderDialogComponent, {
            size: 'xl',
            locals: {
                order,
            },
        })), switchMap(input => {
            if (input) {
                return this.dataService.order.createFulfillment(input);
            }
            else {
                return of(undefined);
            }
        }), switchMap(result => this.refetchOrder(result).pipe(mapTo(result))))
            .subscribe(result => {
            if (result) {
                const { addFulfillmentToOrder } = result;
                switch (addFulfillmentToOrder.__typename) {
                    case 'Fulfillment':
                        this.notificationService.success(marker('order.create-fulfillment-success'));
                        break;
                    case 'EmptyOrderLineSelectionError':
                    case 'InsufficientStockOnHandError':
                    case 'ItemsAlreadyFulfilledError':
                    case 'InvalidFulfillmentHandlerError':
                        this.notificationService.error(addFulfillmentToOrder.message);
                        break;
                    case 'FulfillmentStateTransitionError':
                        this.notificationService.error(addFulfillmentToOrder.transitionError);
                        break;
                    case 'CreateFulfillmentError':
                        this.notificationService.error(addFulfillmentToOrder.fulfillmentHandlerError);
                        break;
                    case undefined:
                        this.notificationService.error(JSON.stringify(addFulfillmentToOrder));
                        break;
                    default:
                        assertNever(addFulfillmentToOrder);
                }
            }
        });
    }
    transitionFulfillment(id, state) {
        this.dataService.order
            .transitionFulfillmentToState(id, state)
            .pipe(switchMap(result => this.refetchOrder(result)))
            .subscribe(() => {
            this.notificationService.success(marker('order.successfully-updated-fulfillment'));
        });
    }
    cancelOrRefund(order) {
        const isRefundable = this.orderHasSettledPayments(order);
        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {
            this.cancelOrder(order);
        }
        else {
            this.refundOrder(order);
        }
    }
    settleRefund(refund) {
        this.modalService
            .fromComponent(SettleRefundDialogComponent, {
            size: 'md',
            locals: {
                refund,
            },
        })
            .pipe(switchMap(transactionId => {
            if (transactionId) {
                return this.dataService.order.settleRefund({
                    transactionId,
                    id: refund.id,
                }, this.id);
            }
            else {
                return of(undefined);
            }
        }))
            .subscribe(result => {
            if (result) {
                this.notificationService.success(marker('order.settle-refund-success'));
            }
        });
    }
    addNote(event) {
        const { note, isPublic } = event;
        this.dataService.order
            .addNoteToOrder({
            id: this.id,
            note,
            isPublic,
        })
            .pipe(switchMap(result => this.refetchOrder(result)))
            .subscribe(result => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Note',
            });
        });
    }
    updateNote(entry) {
        this.modalService
            .fromComponent(EditNoteDialogComponent, {
            closable: true,
            locals: {
                displayPrivacyControls: true,
                note: entry.data.note,
                noteIsPrivate: !entry.isPublic,
            },
        })
            .pipe(switchMap(result => {
            if (result) {
                return this.dataService.order.updateOrderNote({
                    noteId: entry.id,
                    isPublic: !result.isPrivate,
                    note: result.note,
                });
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(result => {
            this.fetchHistory.next();
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Note',
            });
        });
    }
    deleteNote(entry) {
        return this.modalService
            .dialog({
            title: marker('common.confirm-delete-note'),
            body: entry.data.note,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))
            .subscribe(() => {
            this.fetchHistory.next();
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'Note',
            });
        });
    }
    orderHasSettledPayments(order) {
        return !!order.payments?.find(p => p.state === 'Settled');
    }
    cancelOrder(order) {
        this.modalService
            .fromComponent(CancelOrderDialogComponent, {
            size: 'xl',
            locals: {
                order,
            },
        })
            .pipe(switchMap(input => {
            if (input) {
                return this.dataService.order.cancelOrder(input);
            }
            else {
                return of(undefined);
            }
        }), switchMap(result => this.refetchOrder(result)))
            .subscribe(result => {
            if (result) {
                this.notificationService.success(marker('order.cancelled-order-success'));
            }
        });
    }
    refundOrder(order) {
        this.modalService
            .fromComponent(RefundOrderDialogComponent, {
            size: 'xl',
            locals: {
                order,
            },
        })
            .pipe(switchMap(input => {
            if (!input) {
                return of(undefined);
            }
            if (input.cancel.lines?.length) {
                return this.dataService.order.cancelOrder(input.cancel).pipe(map(res => {
                    const result = res.cancelOrder;
                    switch (result.__typename) {
                        case 'Order':
                            this.refetchOrder(result).subscribe();
                            this.notificationService.success(marker('order.cancelled-order-items-success'), {
                                count: summate(input.cancel.lines, 'quantity'),
                            });
                            return input;
                        case 'CancelActiveOrderError':
                        case 'QuantityTooGreatError':
                        case 'MultipleOrderError':
                        case 'OrderStateTransitionError':
                        case 'EmptyOrderLineSelectionError':
                            this.notificationService.error(result.message);
                            return undefined;
                    }
                }));
            }
            else {
                return [input];
            }
        }), switchMap(input => {
            if (!input) {
                return of(undefined);
            }
            if (input.refunds.length) {
                return forkJoin(input.refunds.map(refund => this.dataService.order.refundOrder(refund).pipe(map(res => res.refundOrder))));
            }
            else {
                return [undefined];
            }
        }))
            .subscribe(results => {
            for (const result of results ?? []) {
                if (result) {
                    switch (result.__typename) {
                        case 'Refund':
                            if (result.state === 'Failed') {
                                this.notificationService.error(marker('order.refund-order-failed'));
                            }
                            else {
                                this.notificationService.success(marker('order.refund-order-success'));
                            }
                            break;
                        case 'AlreadyRefundedError':
                        case 'NothingToRefundError':
                        case 'PaymentOrderMismatchError':
                        case 'RefundOrderStateError':
                        case 'RefundStateTransitionError':
                            this.notificationService.error(result.message);
                            break;
                    }
                }
            }
            this.refetchOrder(results?.[0]).subscribe();
        });
    }
    refetchOrder(result) {
        this.fetchHistory.next();
        if (result) {
            return this.dataService.order.getOrder(this.id).single$;
        }
        else {
            return of(undefined);
        }
    }
    setFormValues(entity) {
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i1.NotificationService }, { token: i1.ModalService }, { token: OrderTransitionService }, { token: i2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderDetailComponent, selector: "vdr-order-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\r\n    <vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n        <vdr-ab-left> </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"button primary mr-1\"\r\n                *ngIf=\"\r\n                    order.type !== 'Aggregate' &&\r\n                    (order.state === 'ArrangingPayment' || order.state === 'ArrangingAdditionalPayment') &&\r\n                    (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\r\n                \"\r\n                (click)=\"addManualPayment(order)\"\r\n            >\r\n                {{ 'order.add-payment-to-order' | translate }}\r\n                ({{ outstandingPaymentAmount(order) | localeCurrency : order.currencyCode }})\r\n            </button>\r\n            <button\r\n                class=\"button primary mr-1\"\r\n                *ngIf=\"\r\n                    order.type !== 'Aggregate' &&\r\n                    order.active === false &&\r\n                    order.state !== 'ArrangingAdditionalPayment' &&\r\n                    order.state !== 'ArrangingPayment' &&\r\n                    0 < outstandingPaymentAmount(order)\r\n                \"\r\n                (click)=\"transitionToState('ArrangingAdditionalPayment')\"\r\n            >\r\n                {{ 'order.arrange-additional-payment' | translate }}\r\n            </button>\r\n            <button\r\n                *ngIf=\"order.type !== 'Aggregate'\"\r\n                class=\"button primary mr-1\"\r\n                (click)=\"fulfillOrder()\"\r\n                [disabled]=\"!canAddFulfillment(order)\"\r\n            >\r\n                {{ 'order.fulfill-order' | translate }}\r\n            </button>\r\n            <vdr-action-bar-dropdown-menu [alwaysShow]=\"true\" locationId=\"order-detail\">\r\n                <ng-container *ngIf=\"order.type !== 'Aggregate' && order.nextStates.includes('Modifying')\">\r\n                    <button type=\"button\" vdrDropdownItem (click)=\"transitionToModifying()\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'order.modify-order' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                </ng-container>\r\n                <button\r\n                    type=\"button\"\r\n                    vdrDropdownItem\r\n                    *ngIf=\"order.type !== 'Aggregate' && order.nextStates.includes('Cancelled')\"\r\n                    (click)=\"cancelOrRefund(order)\"\r\n                >\r\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\r\n                        {{ 'order.refund-and-cancel-order' | translate }}\r\n                    </ng-container>\r\n                    <ng-template #cancelOnly>\r\n                        {{ 'order.cancel-order' | translate }}\r\n                    </ng-template>\r\n                </button>\r\n\r\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        *ngFor=\"let nextState of nextStates$ | async\"\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionToState(nextState)\"\r\n                    >\r\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                        {{\r\n                            'order.transition-to-state'\r\n                                | translate : { state: (nextState | stateI18nToken | translate) }\r\n                        }}\r\n                    </button>\r\n                </ng-container>\r\n                <div class=\"dropdown-divider\"></div>\r\n                <button type=\"button\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\r\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\r\n                    {{ 'order.manually-transition-to-state' | translate }}\r\n                </button>\r\n            </vdr-action-bar-dropdown-menu>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<vdr-page-detail-layout *ngIf=\"entity$ | async as order\">\r\n    <vdr-page-detail-sidebar>\r\n        <vdr-card [title]=\"'order.state' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    class=\"button-small\"\r\n                    (click)=\"openStateDiagram()\"\r\n                    [title]=\"'order.order-state-diagram' | translate\"\r\n                >\r\n                    <clr-icon shape=\"list\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.customer' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    *vdrIfPermissions=\"['UpdateOrder', 'ReadCustomer']\"\r\n                    class=\"button-small\"\r\n                    (click)=\"setOrderCustomer()\"\r\n                    [title]=\"'order.assign-order-to-another-customer' | translate\"\r\n                >\r\n                    <clr-icon shape=\"switch\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n            <vdr-labeled-data\r\n                class=\"mt-2\"\r\n                [label]=\"'order.shipping-address' | translate\"\r\n                *ngIf=\"getOrderAddressLines(order.shippingAddress).length\"\r\n            >\r\n                <vdr-formatted-address [address]=\"order.shippingAddress\" class=\"mt-1\"></vdr-formatted-address>\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                [label]=\"'order.billing-address' | translate\"\r\n                *ngIf=\"getOrderAddressLines(order.billingAddress).length\"\r\n            >\r\n                <vdr-formatted-address [address]=\"order.billingAddress\" class=\"mt-1\"></vdr-formatted-address>\r\n            </vdr-labeled-data>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.payments' | translate\" *ngIf=\"order.payments?.length\">\r\n            <vdr-order-payment-card\r\n                *ngFor=\"let payment of order.payments\"\r\n                [currencyCode]=\"order.currencyCode\"\r\n                [payment]=\"payment\"\r\n                (settlePayment)=\"settlePayment($event)\"\r\n                (transitionPaymentState)=\"transitionPaymentState($event)\"\r\n                (settleRefund)=\"settleRefund($event)\"\r\n            ></vdr-order-payment-card>\r\n        </vdr-card>\r\n        <vdr-card *ngIf=\"order.fulfillments?.length\">\r\n            <vdr-fulfillment-card\r\n                *ngFor=\"let fulfillment of order.fulfillments\"\r\n                [fulfillment]=\"fulfillment\"\r\n                [order]=\"order\"\r\n                (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\r\n            ></vdr-fulfillment-card>\r\n        </vdr-card>\r\n        <vdr-card>\r\n            <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n        </vdr-card>\r\n    </vdr-page-detail-sidebar>\r\n\r\n    <vdr-page-block>\r\n        <vdr-seller-orders-card\r\n            class=\"mb-2\"\r\n            *ngIf=\"order.sellerOrders.length\"\r\n            [orderId]=\"order.id\"\r\n        ></vdr-seller-orders-card>\r\n        <vdr-card [paddingX]=\"false\">\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n            ></vdr-order-table>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.tax-summary' | translate\" [paddingX]=\"false\">\r\n            <table class=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>{{ 'common.description' | translate }}</th>\r\n                        <th>{{ 'order.tax-rate' | translate }}</th>\r\n                        <th>{{ 'order.tax-base' | translate }}</th>\r\n                        <th>{{ 'order.tax-total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let row of order.taxSummary\">\r\n                        <td>{{ row.description }}</td>\r\n                        <td>{{ row.taxRate / 100 | percent : '0.0-3' }}</td>\r\n                        <td>{{ row.taxBase | localeCurrency : order.currencyCode }}</td>\r\n                        <td>{{ row.taxTotal | localeCurrency : order.currencyCode }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Order\"\r\n                [customFields]=\"customFields\"\r\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                [readonly]=\"!('UpdateOrder' | hasPermission)\"\r\n            />\r\n            <button\r\n                class=\"button primary\"\r\n                (click)=\"updateCustomFields()\"\r\n                [disabled]=\"\r\n                    detailForm.get('customFields')?.pristine || detailForm.get('customFields')?.invalid\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-custom-detail-component-host\r\n            locationId=\"order-detail\"\r\n            [entity$]=\"entity$\"\r\n            [detailForm]=\"detailForm\"\r\n        ></vdr-custom-detail-component-host>\r\n\r\n        <vdr-card [title]=\"'order.order-history' | translate\">\r\n            <vdr-order-history\r\n                [order]=\"order\"\r\n                [history]=\"history$ | async\"\r\n                (addNote)=\"addNote($event)\"\r\n                (updateNote)=\"updateNote($event)\"\r\n                (deleteNote)=\"deleteNote($event)\"\r\n            ></vdr-order-history>\r\n        </vdr-card>\r\n    </vdr-page-block>\r\n</vdr-page-detail-layout>\r\n", styles: [".shipping-address{list-style-type:none;line-height:1.3em}.order-cards h6{margin-top:6px;color:var(--color-text-200)}vdr-order-payment-card+vdr-order-payment-card{margin-top:calc(var(--space-unit) * 2)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.CustomerLabelComponent, selector: "vdr-customer-label", inputs: ["customer"] }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: i1.OrderStateLabelComponent, selector: "vdr-order-state-label", inputs: ["state"] }, { kind: "component", type: i1.FormattedAddressComponent, selector: "vdr-formatted-address", inputs: ["address"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "directive", type: i1.CardControlsDirective, selector: "[vdrCardControls]" }, { kind: "component", type: OrderPaymentCardComponent, selector: "vdr-order-payment-card", inputs: ["payment", "currencyCode"], outputs: ["settlePayment", "transitionPaymentState", "settleRefund"] }, { kind: "component", type: OrderHistoryComponent, selector: "vdr-order-history", inputs: ["order", "history"], outputs: ["addNote", "updateNote", "deleteNote"] }, { kind: "component", type: FulfillmentCardComponent, selector: "vdr-fulfillment-card", inputs: ["fulfillment", "order"], outputs: ["transitionState"] }, { kind: "component", type: OrderTableComponent, selector: "vdr-order-table", inputs: ["order", "orderLineCustomFields", "isDraft"], outputs: ["adjust", "remove"] }, { kind: "component", type: SellerOrdersCardComponent, selector: "vdr-seller-orders-card", inputs: ["orderId"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i2$1.PercentPipe, name: "percent" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.StateI18nTokenPipe, name: "stateI18nToken" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-block>\r\n    <vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n        <vdr-ab-left> </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"button primary mr-1\"\r\n                *ngIf=\"\r\n                    order.type !== 'Aggregate' &&\r\n                    (order.state === 'ArrangingPayment' || order.state === 'ArrangingAdditionalPayment') &&\r\n                    (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\r\n                \"\r\n                (click)=\"addManualPayment(order)\"\r\n            >\r\n                {{ 'order.add-payment-to-order' | translate }}\r\n                ({{ outstandingPaymentAmount(order) | localeCurrency : order.currencyCode }})\r\n            </button>\r\n            <button\r\n                class=\"button primary mr-1\"\r\n                *ngIf=\"\r\n                    order.type !== 'Aggregate' &&\r\n                    order.active === false &&\r\n                    order.state !== 'ArrangingAdditionalPayment' &&\r\n                    order.state !== 'ArrangingPayment' &&\r\n                    0 < outstandingPaymentAmount(order)\r\n                \"\r\n                (click)=\"transitionToState('ArrangingAdditionalPayment')\"\r\n            >\r\n                {{ 'order.arrange-additional-payment' | translate }}\r\n            </button>\r\n            <button\r\n                *ngIf=\"order.type !== 'Aggregate'\"\r\n                class=\"button primary mr-1\"\r\n                (click)=\"fulfillOrder()\"\r\n                [disabled]=\"!canAddFulfillment(order)\"\r\n            >\r\n                {{ 'order.fulfill-order' | translate }}\r\n            </button>\r\n            <vdr-action-bar-dropdown-menu [alwaysShow]=\"true\" locationId=\"order-detail\">\r\n                <ng-container *ngIf=\"order.type !== 'Aggregate' && order.nextStates.includes('Modifying')\">\r\n                    <button type=\"button\" vdrDropdownItem (click)=\"transitionToModifying()\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'order.modify-order' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                </ng-container>\r\n                <button\r\n                    type=\"button\"\r\n                    vdrDropdownItem\r\n                    *ngIf=\"order.type !== 'Aggregate' && order.nextStates.includes('Cancelled')\"\r\n                    (click)=\"cancelOrRefund(order)\"\r\n                >\r\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\r\n                        {{ 'order.refund-and-cancel-order' | translate }}\r\n                    </ng-container>\r\n                    <ng-template #cancelOnly>\r\n                        {{ 'order.cancel-order' | translate }}\r\n                    </ng-template>\r\n                </button>\r\n\r\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        *ngFor=\"let nextState of nextStates$ | async\"\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionToState(nextState)\"\r\n                    >\r\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                        {{\r\n                            'order.transition-to-state'\r\n                                | translate : { state: (nextState | stateI18nToken | translate) }\r\n                        }}\r\n                    </button>\r\n                </ng-container>\r\n                <div class=\"dropdown-divider\"></div>\r\n                <button type=\"button\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\r\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\r\n                    {{ 'order.manually-transition-to-state' | translate }}\r\n                </button>\r\n            </vdr-action-bar-dropdown-menu>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<vdr-page-detail-layout *ngIf=\"entity$ | async as order\">\r\n    <vdr-page-detail-sidebar>\r\n        <vdr-card [title]=\"'order.state' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    class=\"button-small\"\r\n                    (click)=\"openStateDiagram()\"\r\n                    [title]=\"'order.order-state-diagram' | translate\"\r\n                >\r\n                    <clr-icon shape=\"list\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.customer' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    *vdrIfPermissions=\"['UpdateOrder', 'ReadCustomer']\"\r\n                    class=\"button-small\"\r\n                    (click)=\"setOrderCustomer()\"\r\n                    [title]=\"'order.assign-order-to-another-customer' | translate\"\r\n                >\r\n                    <clr-icon shape=\"switch\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n            <vdr-labeled-data\r\n                class=\"mt-2\"\r\n                [label]=\"'order.shipping-address' | translate\"\r\n                *ngIf=\"getOrderAddressLines(order.shippingAddress).length\"\r\n            >\r\n                <vdr-formatted-address [address]=\"order.shippingAddress\" class=\"mt-1\"></vdr-formatted-address>\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                [label]=\"'order.billing-address' | translate\"\r\n                *ngIf=\"getOrderAddressLines(order.billingAddress).length\"\r\n            >\r\n                <vdr-formatted-address [address]=\"order.billingAddress\" class=\"mt-1\"></vdr-formatted-address>\r\n            </vdr-labeled-data>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.payments' | translate\" *ngIf=\"order.payments?.length\">\r\n            <vdr-order-payment-card\r\n                *ngFor=\"let payment of order.payments\"\r\n                [currencyCode]=\"order.currencyCode\"\r\n                [payment]=\"payment\"\r\n                (settlePayment)=\"settlePayment($event)\"\r\n                (transitionPaymentState)=\"transitionPaymentState($event)\"\r\n                (settleRefund)=\"settleRefund($event)\"\r\n            ></vdr-order-payment-card>\r\n        </vdr-card>\r\n        <vdr-card *ngIf=\"order.fulfillments?.length\">\r\n            <vdr-fulfillment-card\r\n                *ngFor=\"let fulfillment of order.fulfillments\"\r\n                [fulfillment]=\"fulfillment\"\r\n                [order]=\"order\"\r\n                (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\r\n            ></vdr-fulfillment-card>\r\n        </vdr-card>\r\n        <vdr-card>\r\n            <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n        </vdr-card>\r\n    </vdr-page-detail-sidebar>\r\n\r\n    <vdr-page-block>\r\n        <vdr-seller-orders-card\r\n            class=\"mb-2\"\r\n            *ngIf=\"order.sellerOrders.length\"\r\n            [orderId]=\"order.id\"\r\n        ></vdr-seller-orders-card>\r\n        <vdr-card [paddingX]=\"false\">\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n            ></vdr-order-table>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.tax-summary' | translate\" [paddingX]=\"false\">\r\n            <table class=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>{{ 'common.description' | translate }}</th>\r\n                        <th>{{ 'order.tax-rate' | translate }}</th>\r\n                        <th>{{ 'order.tax-base' | translate }}</th>\r\n                        <th>{{ 'order.tax-total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let row of order.taxSummary\">\r\n                        <td>{{ row.description }}</td>\r\n                        <td>{{ row.taxRate / 100 | percent : '0.0-3' }}</td>\r\n                        <td>{{ row.taxBase | localeCurrency : order.currencyCode }}</td>\r\n                        <td>{{ row.taxTotal | localeCurrency : order.currencyCode }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Order\"\r\n                [customFields]=\"customFields\"\r\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                [readonly]=\"!('UpdateOrder' | hasPermission)\"\r\n            />\r\n            <button\r\n                class=\"button primary\"\r\n                (click)=\"updateCustomFields()\"\r\n                [disabled]=\"\r\n                    detailForm.get('customFields')?.pristine || detailForm.get('customFields')?.invalid\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </vdr-card>\r\n        <vdr-custom-detail-component-host\r\n            locationId=\"order-detail\"\r\n            [entity$]=\"entity$\"\r\n            [detailForm]=\"detailForm\"\r\n        ></vdr-custom-detail-component-host>\r\n\r\n        <vdr-card [title]=\"'order.order-history' | translate\">\r\n            <vdr-order-history\r\n                [order]=\"order\"\r\n                [history]=\"history$ | async\"\r\n                (addNote)=\"addNote($event)\"\r\n                (updateNote)=\"updateNote($event)\"\r\n                (deleteNote)=\"deleteNote($event)\"\r\n            ></vdr-order-history>\r\n        </vdr-card>\r\n    </vdr-page-block>\r\n</vdr-page-detail-layout>\r\n", styles: [".shipping-address{list-style-type:none;line-height:1.3em}.order-cards h6{margin-top:6px;color:var(--color-text-200)}vdr-order-payment-card+vdr-order-payment-card{margin-top:calc(var(--space-unit) * 2)}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i1.NotificationService }, { type: i1.ModalService }, { type: OrderTransitionService }, { type: i2.FormBuilder }] });

class OrderModificationSummaryComponent {
    get adjustedLines() {
        return (this.modifyOrderInput.adjustOrderLines || [])
            .map(l => {
            const line = this.orderSnapshot.lines.find(line => line.id === l.orderLineId);
            if (line) {
                const delta = l.quantity - line.quantity;
                const sign = delta === 0 ? '' : delta > 0 ? '+' : '-';
                return delta
                    ? `${sign}${Math.abs(delta)} ${line.productVariant.name}`
                    : line.productVariant.name;
            }
        })
            .filter(notNullOrUndefined);
    }
    getModifiedFields(formGroup) {
        if (!formGroup.dirty) {
            return '';
        }
        return Object.entries(formGroup.controls)
            .map(([key, control]) => {
            if (control.dirty) {
                return key;
            }
        })
            .filter(notNullOrUndefined)
            .join(', ');
    }
    getUpdatedShippingMethodLines() {
        return Object.entries(this.updatedShippingMethods || {})
            .map(([lineId, shippingMethod]) => {
            const previousMethod = this.orderSnapshot.shippingLines.find(l => l.id === lineId);
            if (!previousMethod) {
                return;
            }
            const previousName = previousMethod.shippingMethod.name || previousMethod.shippingMethod.code;
            const newName = shippingMethod.name || shippingMethod.code;
            return `${previousName} -> ${newName}`;
        })
            .filter(notNullOrUndefined);
    }
    get couponCodeChanges() {
        const originalCodes = this.orderSnapshot.couponCodes || [];
        const newCodes = this.couponCodesControl.value || [];
        const addedCodes = newCodes.filter(c => !originalCodes.includes(c)).map(c => `+ ${c}`);
        const removedCodes = originalCodes.filter(c => !newCodes.includes(c)).map(c => `- ${c}`);
        return [...addedCodes, ...removedCodes];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderModificationSummaryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderModificationSummaryComponent, selector: "vdr-order-modification-summary", inputs: { orderSnapshot: "orderSnapshot", modifyOrderInput: "modifyOrderInput", addedLines: "addedLines", shippingAddressForm: "shippingAddressForm", billingAddressForm: "billingAddressForm", updatedShippingMethods: "updatedShippingMethods", couponCodesControl: "couponCodesControl" }, ngImport: i0, template: "<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.adjustOrderLines?.length\"\r\n        [label]=\"\r\n                    'order.modification-adjusting-lines'\r\n                        | translate : { count: modifyOrderInput.adjustOrderLines?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let line of adjustedLines\" class=\"mb-1\">\r\n        {{ line }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.addItems?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-items'\r\n                        | translate : { count: modifyOrderInput.addItems?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let item of addedLines\">\r\n        {{ item.productVariant.name }} x {{ item.quantity }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.surcharges?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-surcharges'\r\n                        | translate : { count: modifyOrderInput.surcharges?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let surcharge of modifyOrderInput.surcharges\" class=\"mb-1\">\r\n        {{ surcharge.description }}: {{ surcharge.price | localeCurrency : orderSnapshot.currencyCode }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(shippingAddressForm) as updatedShippingFields\"\r\n        [label]=\"'order.modification-updating-shipping-address' | translate\"\r\n>\r\n    {{ updatedShippingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(billingAddressForm) as updatedBillingFields\"\r\n        [label]=\"'order.modification-updating-billing-address' | translate\"\r\n>\r\n    {{ updatedBillingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"couponCodeChanges.length\" [label]=\"'order.set-coupon-codes' | translate\">\r\n    <div *ngFor=\"let change of couponCodeChanges\" class=\"mb-1\">{{ change }}</div>\r\n</vdr-labeled-data>\r\n<ng-container *ngIf=\"getUpdatedShippingMethodLines() as updatedShippingMethods\">\r\n    <vdr-labeled-data *ngIf=\"updatedShippingMethods.length\" [label]=\"'order.shipping-method' | translate\">\r\n        <div *ngFor=\"let change of updatedShippingMethods\" class=\"mb-1\">{{ change }}</div>\r\n    </vdr-labeled-data>\r\n</ng-container>", styles: [""], dependencies: [{ kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderModificationSummaryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-modification-summary', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.adjustOrderLines?.length\"\r\n        [label]=\"\r\n                    'order.modification-adjusting-lines'\r\n                        | translate : { count: modifyOrderInput.adjustOrderLines?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let line of adjustedLines\" class=\"mb-1\">\r\n        {{ line }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.addItems?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-items'\r\n                        | translate : { count: modifyOrderInput.addItems?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let item of addedLines\">\r\n        {{ item.productVariant.name }} x {{ item.quantity }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.surcharges?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-surcharges'\r\n                        | translate : { count: modifyOrderInput.surcharges?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let surcharge of modifyOrderInput.surcharges\" class=\"mb-1\">\r\n        {{ surcharge.description }}: {{ surcharge.price | localeCurrency : orderSnapshot.currencyCode }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(shippingAddressForm) as updatedShippingFields\"\r\n        [label]=\"'order.modification-updating-shipping-address' | translate\"\r\n>\r\n    {{ updatedShippingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(billingAddressForm) as updatedBillingFields\"\r\n        [label]=\"'order.modification-updating-billing-address' | translate\"\r\n>\r\n    {{ updatedBillingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"couponCodeChanges.length\" [label]=\"'order.set-coupon-codes' | translate\">\r\n    <div *ngFor=\"let change of couponCodeChanges\" class=\"mb-1\">{{ change }}</div>\r\n</vdr-labeled-data>\r\n<ng-container *ngIf=\"getUpdatedShippingMethodLines() as updatedShippingMethods\">\r\n    <vdr-labeled-data *ngIf=\"updatedShippingMethods.length\" [label]=\"'order.shipping-method' | translate\">\r\n        <div *ngFor=\"let change of updatedShippingMethods\" class=\"mb-1\">{{ change }}</div>\r\n    </vdr-labeled-data>\r\n</ng-container>" }]
        }], propDecorators: { orderSnapshot: [{
                type: Input
            }], modifyOrderInput: [{
                type: Input
            }], addedLines: [{
                type: Input
            }], shippingAddressForm: [{
                type: Input
            }], billingAddressForm: [{
                type: Input
            }], updatedShippingMethods: [{
                type: Input
            }], couponCodesControl: [{
                type: Input
            }] } });

var OrderEditResultType;
(function (OrderEditResultType) {
    OrderEditResultType[OrderEditResultType["Refund"] = 0] = "Refund";
    OrderEditResultType[OrderEditResultType["Payment"] = 1] = "Payment";
    OrderEditResultType[OrderEditResultType["PriceUnchanged"] = 2] = "PriceUnchanged";
    OrderEditResultType[OrderEditResultType["Cancel"] = 3] = "Cancel";
})(OrderEditResultType || (OrderEditResultType = {}));
class OrderEditsPreviewDialogComponent {
    get priceDifference() {
        return this.order.totalWithTax - this.orderSnapshot.totalWithTax;
    }
    get amountToRefundTotal() {
        return this.refundablePayments.reduce((total, payment) => total + payment.amountToRefundControl.value, 0);
    }
    ngOnInit() {
        this.refundNote = this.modifyOrderInput.note || '';
        this.refundablePayments = getRefundablePayments(this.order.payments || []);
        this.refundablePayments.forEach(rp => {
            rp.amountToRefundControl.addValidators(Validators.max(this.priceDifference * -1));
        });
        if (this.priceDifference < 0 && this.refundablePayments.length) {
            this.onPaymentSelected(this.refundablePayments[0], true);
        }
    }
    onPaymentSelected(payment, selected) {
        if (selected) {
            const outstandingRefundAmount = this.priceDifference * -1 -
                this.refundablePayments
                    .filter(p => p.id !== payment.id)
                    .reduce((total, p) => total + p.amountToRefundControl.value, 0);
            if (0 < outstandingRefundAmount) {
                payment.amountToRefundControl.setValue(Math.min(outstandingRefundAmount, payment.refundableAmount));
            }
        }
        else {
            payment.amountToRefundControl.setValue(0);
        }
    }
    refundsCoverDifference() {
        return this.priceDifference * -1 === this.amountToRefundTotal;
    }
    cancel() {
        this.resolveWith({
            result: OrderEditResultType.Cancel,
        });
    }
    submit() {
        if (0 < this.priceDifference) {
            this.resolveWith({
                result: OrderEditResultType.Payment,
            });
        }
        else if (this.priceDifference < 0) {
            this.resolveWith({
                result: OrderEditResultType.Refund,
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                refunds: this.refundablePayments
                    .filter(rp => rp.selected && 0 < rp.amountToRefundControl.value)
                    .map(payment => {
                    return {
                        reason: this.refundNote || this.modifyOrderInput.note,
                        paymentId: payment.id,
                        amount: payment.amountToRefundControl.value,
                    };
                }),
            });
        }
        else {
            this.resolveWith({
                result: OrderEditResultType.PriceUnchanged,
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderEditsPreviewDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderEditsPreviewDialogComponent, selector: "vdr-order-edits-preview-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table\r\n    [order]=\"order\"\r\n    [orderLineCustomFields]=\"orderLineCustomFields\"\r\n    class=\"order-edits-preview-table\"\r\n></vdr-order-table>\r\n<div class=\"payments-wrapper mb-2\">\r\n    <div class=\"flex-spacer\">\r\n        <vdr-payment-for-refund-selector\r\n            *ngIf=\"priceDifference < 0\"\r\n            class=\"\"\r\n            [refundablePayments]=\"refundablePayments\"\r\n            (paymentSelected)=\"onPaymentSelected($event.payment, $event.selected)\"\r\n            [order]=\"order\"\r\n        ></vdr-payment-for-refund-selector>\r\n    </div>\r\n    <div class=\"flex-spacer\">\r\n        <vdr-card [title]=\"'order.modify-order' | translate\">\r\n            <vdr-order-modification-summary\r\n                [orderSnapshot]=\"orderSnapshot\"\r\n                [modifyOrderInput]=\"modifyOrderInput\"\r\n                [addedLines]=\"addedLines\"\r\n                [shippingAddressForm]=\"shippingAddressForm\"\r\n                [billingAddressForm]=\"billingAddressForm\"\r\n                [couponCodesControl]=\"couponCodesControl\"\r\n                [updatedShippingMethods]=\"updatedShippingMethods\"\r\n            ></vdr-order-modification-summary>\r\n            <vdr-labeled-data [label]=\"'order.note' | translate\">\r\n                {{ modifyOrderInput.note || '-' }}\r\n            </vdr-labeled-data>\r\n            <vdr-form-field\r\n                [label]=\"'order.refund-cancellation-reason' | translate\"\r\n                *ngIf=\"priceDifference < 0\"\r\n            >\r\n                <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" required></textarea>\r\n            </vdr-form-field>\r\n        </vdr-card>\r\n    </div>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <div>\r\n        <div class=\"errors\">\r\n            <clr-alert\r\n                class=\"mb-1\"\r\n                *ngIf=\"priceDifference < 0 && !refundsCoverDifference()\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n        </div>\r\n        <div class=\"modal-buttons\">\r\n            <clr-alert class=\"\" [clrAlertType]=\"'primary'\" [clrAlertClosable]=\"false\">\r\n                <clr-alert-item>\r\n                    {{ 'order.modify-order-price-difference' | translate }}\r\n                    {{ 0 < priceDifference ? '+' : ''\r\n                    }}{{ priceDifference | localeCurrency : order.currencyCode }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <button type=\"button\" class=\"btn\" (click)=\"cancel()\">\r\n                {{ 'common.cancel' | translate }}\r\n            </button>\r\n            <button\r\n                type=\"submit\"\r\n                (click)=\"submit()\"\r\n                [disabled]=\"priceDifference < 0 ? !refundsCoverDifference() : false\"\r\n                class=\"btn btn-primary\"\r\n            >\r\n                {{ 'common.confirm' | translate }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n", styles: ["::ng-deep .order-edits-preview-table .table-wrapper{max-width:initial!important}.payments-wrapper{display:flex;gap:calc(var(--space-unit) * 2)}.modal-buttons{display:flex;justify-content:flex-end;gap:.6rem;gap:var(--clr-modal-footer-gap, .6rem)}\n"], dependencies: [{ kind: "component", type: i3.ClrAlert, selector: "clr-alert", inputs: ["clrAlertSizeSmall", "clrAlertClosable", "clrAlertAppLevel", "clrCloseButtonAriaLabel", "clrAlertLightweight", "clrAlertType", "clrAlertIcon", "clrAlertClosed"], outputs: ["clrAlertClosedChange"] }, { kind: "component", type: i3.ClrAlertItem, selector: "clr-alert-item" }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: OrderTableComponent, selector: "vdr-order-table", inputs: ["order", "orderLineCustomFields", "isDraft"], outputs: ["adjust", "remove"] }, { kind: "component", type: PaymentForRefundSelectorComponent, selector: "vdr-payment-for-refund-selector", inputs: ["refundablePayments", "order"], outputs: ["paymentSelected"] }, { kind: "component", type: OrderModificationSummaryComponent, selector: "vdr-order-modification-summary", inputs: ["orderSnapshot", "modifyOrderInput", "addedLines", "shippingAddressForm", "billingAddressForm", "updatedShippingMethods", "couponCodesControl"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderEditsPreviewDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-edits-preview-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table\r\n    [order]=\"order\"\r\n    [orderLineCustomFields]=\"orderLineCustomFields\"\r\n    class=\"order-edits-preview-table\"\r\n></vdr-order-table>\r\n<div class=\"payments-wrapper mb-2\">\r\n    <div class=\"flex-spacer\">\r\n        <vdr-payment-for-refund-selector\r\n            *ngIf=\"priceDifference < 0\"\r\n            class=\"\"\r\n            [refundablePayments]=\"refundablePayments\"\r\n            (paymentSelected)=\"onPaymentSelected($event.payment, $event.selected)\"\r\n            [order]=\"order\"\r\n        ></vdr-payment-for-refund-selector>\r\n    </div>\r\n    <div class=\"flex-spacer\">\r\n        <vdr-card [title]=\"'order.modify-order' | translate\">\r\n            <vdr-order-modification-summary\r\n                [orderSnapshot]=\"orderSnapshot\"\r\n                [modifyOrderInput]=\"modifyOrderInput\"\r\n                [addedLines]=\"addedLines\"\r\n                [shippingAddressForm]=\"shippingAddressForm\"\r\n                [billingAddressForm]=\"billingAddressForm\"\r\n                [couponCodesControl]=\"couponCodesControl\"\r\n                [updatedShippingMethods]=\"updatedShippingMethods\"\r\n            ></vdr-order-modification-summary>\r\n            <vdr-labeled-data [label]=\"'order.note' | translate\">\r\n                {{ modifyOrderInput.note || '-' }}\r\n            </vdr-labeled-data>\r\n            <vdr-form-field\r\n                [label]=\"'order.refund-cancellation-reason' | translate\"\r\n                *ngIf=\"priceDifference < 0\"\r\n            >\r\n                <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" required></textarea>\r\n            </vdr-form-field>\r\n        </vdr-card>\r\n    </div>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <div>\r\n        <div class=\"errors\">\r\n            <clr-alert\r\n                class=\"mb-1\"\r\n                *ngIf=\"priceDifference < 0 && !refundsCoverDifference()\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n        </div>\r\n        <div class=\"modal-buttons\">\r\n            <clr-alert class=\"\" [clrAlertType]=\"'primary'\" [clrAlertClosable]=\"false\">\r\n                <clr-alert-item>\r\n                    {{ 'order.modify-order-price-difference' | translate }}\r\n                    {{ 0 < priceDifference ? '+' : ''\r\n                    }}{{ priceDifference | localeCurrency : order.currencyCode }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <button type=\"button\" class=\"btn\" (click)=\"cancel()\">\r\n                {{ 'common.cancel' | translate }}\r\n            </button>\r\n            <button\r\n                type=\"submit\"\r\n                (click)=\"submit()\"\r\n                [disabled]=\"priceDifference < 0 ? !refundsCoverDifference() : false\"\r\n                class=\"btn btn-primary\"\r\n            >\r\n                {{ 'common.confirm' | translate }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n", styles: ["::ng-deep .order-edits-preview-table .table-wrapper{max-width:initial!important}.payments-wrapper{display:flex;gap:calc(var(--space-unit) * 2)}.modal-buttons{display:flex;justify-content:flex-end;gap:.6rem;gap:var(--clr-modal-footer-gap, .6rem)}\n"] }]
        }] });

class OrderEditorComponent extends TypedBaseDetailComponent {
    constructor(dataService, notificationService, modalService, orderTransitionService, changeDetectorRef) {
        super();
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.orderTransitionService = orderTransitionService;
        this.changeDetectorRef = changeDetectorRef;
        this.detailForm = new UntypedFormGroup({});
        this.couponCodesControl = new FormControl([]);
        this.modifyOrderInput = {
            dryRun: true,
            orderId: '',
            addItems: [],
            adjustOrderLines: [],
            surcharges: [],
            note: '',
            refunds: [],
            updateShippingAddress: {},
            updateBillingAddress: {},
        };
        this.surchargeForm = new FormGroup({
            description: new FormControl('', Validators.minLength(1)),
            sku: new FormControl(''),
            price: new FormControl(0),
            priceIncludesTax: new FormControl(true),
            taxRate: new FormControl(0),
            taxDescription: new FormControl(''),
        });
        this.shippingAddressForm = new FormGroup({
            fullName: new FormControl(''),
            company: new FormControl(''),
            streetLine1: new FormControl(''),
            streetLine2: new FormControl(''),
            city: new FormControl(''),
            province: new FormControl(''),
            postalCode: new FormControl(''),
            countryCode: new FormControl(''),
            phoneNumber: new FormControl(''),
        });
        this.billingAddressForm = new FormGroup({
            fullName: new FormControl(''),
            company: new FormControl(''),
            streetLine1: new FormControl(''),
            streetLine2: new FormControl(''),
            city: new FormControl(''),
            province: new FormControl(''),
            postalCode: new FormControl(''),
            countryCode: new FormControl(''),
            phoneNumber: new FormControl(''),
        });
        this.note = '';
        this.recalculateShipping = true;
        this.editingShippingAddress = false;
        this.editingBillingAddress = false;
        this.updatedShippingMethods = {};
        this.addedVariants = new Map();
    }
    ngOnInit() {
        this.init();
        this.addressCustomFields = this.getCustomFieldConfig('Address');
        this.modifyOrderInput.orderId = this.route.snapshot.paramMap.get('id');
        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');
        this.entity$.pipe(take(1)).subscribe(order => {
            this.orderSnapshot = this.createOrderSnapshot(order);
            if (order.couponCodes.length) {
                this.couponCodesControl.setValue(order.couponCodes);
            }
            this.surchargeForm.reset();
            for (const [name, control] of Object.entries(this.shippingAddressForm.controls)) {
                control.setValue(order.shippingAddress?.[name]);
            }
            this.addAddressCustomFieldsFormGroup(this.shippingAddressForm, order.shippingAddress);
            for (const [name, control] of Object.entries(this.billingAddressForm.controls)) {
                control.setValue(order.billingAddress?.[name]);
            }
            this.addAddressCustomFieldsFormGroup(this.billingAddressForm, order.billingAddress);
            this.orderLineCustomFieldsFormArray = new UntypedFormArray([]);
            for (const line of order.lines) {
                const formGroup = new UntypedFormGroup({});
                for (const { name } of this.orderLineCustomFields) {
                    formGroup.addControl(name, new UntypedFormControl(line.customFields[name]));
                }
                formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                    let modifyRow = this.modifyOrderInput.adjustOrderLines.find(l => l.orderLineId === line.id);
                    if (!modifyRow) {
                        modifyRow = {
                            orderLineId: line.id,
                            quantity: line.quantity,
                        };
                        this.modifyOrderInput.adjustOrderLines.push(modifyRow);
                    }
                    if (this.orderLineCustomFields.length) {
                        modifyRow.customFields = value;
                    }
                });
                this.orderLineCustomFieldsFormArray.push(formGroup);
            }
        });
        this.addItemCustomFieldsFormArray = new UntypedFormArray([]);
        this.addItemCustomFieldsForm = new UntypedFormGroup({});
        for (const customField of this.orderLineCustomFields) {
            this.addItemCustomFieldsForm.addControl(customField.name, new UntypedFormControl());
        }
        this.availableCountries$ = this.dataService.settings
            .getAvailableCountries()
            .mapSingle(result => result.countries.items)
            .pipe(shareReplay(1));
        this.dataService.order
            .getOrderHistory(this.id, {
            take: 1,
            sort: {
                createdAt: SortOrder.DESC,
            },
            filter: { type: { eq: HistoryEntryType.ORDER_STATE_TRANSITION } },
        })
            .single$.subscribe(({ order }) => {
            this.previousState = order?.history.items[0].data.from;
        });
        this.uiLanguage$ = this.dataService.client
            .uiState()
            .stream$.pipe(map(({ uiState }) => uiState.language));
    }
    ngOnDestroy() {
        this.destroy();
    }
    get addedLines() {
        const getSinglePriceValue = (price) => price.__typename === 'SinglePrice' ? price.value : 0;
        return (this.modifyOrderInput.addItems || [])
            .map(row => {
            const variantInfo = this.addedVariants.get(row.productVariantId);
            if (variantInfo) {
                return {
                    id: this.getIdForAddedItem(row),
                    featuredAsset: variantInfo.productAsset,
                    productVariant: {
                        id: variantInfo.productVariantId,
                        name: variantInfo.productVariantName,
                        sku: variantInfo.sku,
                    },
                    unitPrice: getSinglePriceValue(variantInfo.price),
                    unitPriceWithTax: getSinglePriceValue(variantInfo.priceWithTax),
                    quantity: row.quantity,
                };
            }
        })
            .filter(notNullOrUndefined);
    }
    getIdForAddedItem(row) {
        return `added-${row.productVariantId}-${JSON.stringify(row.customFields || {})}`;
    }
    transitionToPriorState(order) {
        this.orderTransitionService
            .transitionToPreModifyingState(order.id, order.nextStates)
            .subscribe(result => {
            this.router.navigate(['..'], { relativeTo: this.route });
        });
    }
    hasModifications() {
        const { addItems, adjustOrderLines, surcharges } = this.modifyOrderInput;
        return (!!addItems?.length ||
            !!surcharges?.length ||
            !!adjustOrderLines?.length ||
            (this.shippingAddressForm.dirty && this.shippingAddressForm.valid) ||
            (this.billingAddressForm.dirty && this.billingAddressForm.valid) ||
            this.couponCodesControl.dirty ||
            Object.entries(this.updatedShippingMethods).length > 0);
    }
    isLineModified(line) {
        return !!this.modifyOrderInput.adjustOrderLines?.find(l => l.orderLineId === line.id && l.quantity !== line.quantity);
    }
    getInitialLineQuantity(lineId) {
        const adjustedLine = this.modifyOrderInput.adjustOrderLines?.find(l => l.orderLineId === lineId);
        if (adjustedLine) {
            return adjustedLine.quantity;
        }
        const addedLine = this.modifyOrderInput.addItems?.find(l => this.getIdForAddedItem(l) === lineId);
        if (addedLine) {
            return addedLine.quantity ?? 1;
        }
        const line = this.orderSnapshot.lines.find(l => l.id === lineId);
        return line ? line.quantity : 1;
    }
    updateLineQuantity(line, quantity) {
        const { adjustOrderLines } = this.modifyOrderInput;
        if (this.isAddedLine(line)) {
            const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === line.productVariant.id);
            if (row) {
                row.quantity = +quantity;
            }
        }
        else {
            let row = adjustOrderLines?.find(l => l.orderLineId === line.id);
            if (row && +quantity === line.quantity) {
                // Remove the modification if the quantity is the same as
                // the original order
                adjustOrderLines?.splice(adjustOrderLines?.indexOf(row), 1);
            }
            if (!row) {
                row = { orderLineId: line.id, quantity: +quantity };
                adjustOrderLines?.push(row);
            }
            row.quantity = +quantity;
        }
    }
    isAddedLine(line) {
        return line.id.startsWith('added-');
    }
    updateAddedItemQuantity(item, quantity) {
        const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === item.productVariant.id);
        if (row) {
            row.quantity = +quantity;
        }
    }
    trackByProductVariantId(index, item) {
        return item.productVariant.id;
    }
    getSelectedItemPrice(result) {
        switch (result?.priceWithTax.__typename) {
            case 'SinglePrice':
                return result.priceWithTax.value;
            default:
                return 0;
        }
    }
    addItemToOrder(result) {
        if (!result) {
            return;
        }
        const customFields = this.orderLineCustomFields.length
            ? this.addItemCustomFieldsForm.value
            : undefined;
        let row = this.modifyOrderInput.addItems?.find(l => this.isMatchingAddItemRow(l, result, customFields));
        if (!row) {
            row = { productVariantId: result.productVariantId, quantity: 1 };
            if (customFields) {
                row.customFields = customFields;
            }
            this.modifyOrderInput.addItems?.push(row);
        }
        else {
            row.quantity++;
        }
        if (customFields) {
            const formGroup = new UntypedFormGroup({});
            for (const [key, value] of Object.entries(customFields)) {
                formGroup.addControl(key, new UntypedFormControl(value));
            }
            this.addItemCustomFieldsFormArray.push(formGroup);
            formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                if (row) {
                    row.customFields = value;
                }
            });
        }
        this.addItemCustomFieldsForm.reset({});
        this.addItemSelectedVariant = undefined;
        this.addedVariants.set(result.productVariantId, result);
    }
    getShippingLineDetails(shippingLine) {
        const updatedMethod = this.updatedShippingMethods[shippingLine.id];
        if (updatedMethod) {
            return {
                name: updatedMethod.name || updatedMethod.code,
                price: updatedMethod.priceWithTax,
            };
        }
        else {
            return {
                name: shippingLine.shippingMethod.name || shippingLine.shippingMethod.code,
                price: shippingLine.discountedPriceWithTax,
            };
        }
    }
    setShippingMethod(shippingLineId) {
        const currentShippingMethod = this.updatedShippingMethods[shippingLineId] ??
            this.entity?.shippingLines.find(l => l.id === shippingLineId)?.shippingMethod;
        if (!currentShippingMethod) {
            return;
        }
        this.dataService.order
            .getDraftOrderEligibleShippingMethods(this.id)
            .mapSingle(({ eligibleShippingMethodsForDraftOrder }) => eligibleShippingMethodsForDraftOrder)
            .pipe(switchMap(methods => this.modalService
            .fromComponent(SelectShippingMethodDialogComponent, {
            locals: {
                eligibleShippingMethods: methods,
                currencyCode: this.entity?.currencyCode,
                currentSelectionId: currentShippingMethod.id,
            },
        })
            .pipe(map(result => {
            if (result) {
                return methods.find(method => method.id === result);
            }
        }))))
            .subscribe(result => {
            if (result) {
                this.updatedShippingMethods[shippingLineId] = result;
                this.changeDetectorRef.markForCheck();
            }
        });
    }
    isMatchingAddItemRow(row, result, customFields) {
        return (row.productVariantId === result.productVariantId &&
            JSON.stringify(row.customFields) === JSON.stringify(customFields));
    }
    removeAddedItem(id) {
        this.modifyOrderInput.addItems = this.modifyOrderInput.addItems?.filter(l => {
            const itemId = this.getIdForAddedItem(l);
            return itemId !== id;
        });
    }
    getSurchargePrices(surcharge) {
        const priceWithTax = surcharge.priceIncludesTax
            ? surcharge.price
            : Math.round(surcharge.price * ((100 + (surcharge.taxRate || 0)) / 100));
        const price = surcharge.priceIncludesTax
            ? Math.round(surcharge.price / ((100 + (surcharge.taxRate || 0)) / 100))
            : surcharge.price;
        return {
            price,
            priceWithTax,
        };
    }
    addSurcharge(value) {
        this.modifyOrderInput.surcharges?.push(value);
        this.surchargeForm.reset({
            price: 0,
            priceIncludesTax: true,
            taxRate: 0,
        });
    }
    removeSurcharge(index) {
        this.modifyOrderInput.surcharges?.splice(index, 1);
    }
    previewAndModify(order) {
        const modifyOrderInput = {
            ...this.modifyOrderInput,
            adjustOrderLines: this.modifyOrderInput.adjustOrderLines.map(line => transformRelationCustomFieldInputs(simpleDeepClone(line), this.orderLineCustomFields)),
        };
        const input = {
            ...modifyOrderInput,
            ...(this.billingAddressForm.dirty ? { updateBillingAddress: this.billingAddressForm.value } : {}),
            ...(this.shippingAddressForm.dirty
                ? { updateShippingAddress: this.shippingAddressForm.value }
                : {}),
            dryRun: true,
            couponCodes: this.couponCodesControl.dirty ? this.couponCodesControl.value : undefined,
            note: this.note ?? '',
            options: {
                recalculateShipping: this.recalculateShipping,
            },
        };
        if (Object.entries(this.updatedShippingMethods).length) {
            input.shippingMethodIds = order.shippingLines.map(l => this.updatedShippingMethods[l.id]
                ? this.updatedShippingMethods[l.id].id
                : l.shippingMethod.id);
        }
        this.dataService.order
            .modifyOrder(input)
            .pipe(switchMap(({ modifyOrder }) => {
            switch (modifyOrder.__typename) {
                case 'Order':
                    return this.modalService.fromComponent(OrderEditsPreviewDialogComponent, {
                        size: 'xl',
                        closable: false,
                        locals: {
                            order: modifyOrder,
                            orderSnapshot: this.orderSnapshot,
                            orderLineCustomFields: this.orderLineCustomFields,
                            modifyOrderInput: input,
                            addedLines: this.addedLines,
                            shippingAddressForm: this.shippingAddressForm,
                            billingAddressForm: this.billingAddressForm,
                            couponCodesControl: this.couponCodesControl,
                            updatedShippingMethods: this.updatedShippingMethods,
                        },
                    });
                case 'InsufficientStockError':
                case 'NegativeQuantityError':
                case 'NoChangesSpecifiedError':
                case 'OrderLimitError':
                case 'OrderModificationStateError':
                case 'PaymentMethodMissingError':
                case 'RefundPaymentIdMissingError':
                case 'CouponCodeLimitError':
                case 'CouponCodeExpiredError':
                case 'IneligibleShippingMethodError':
                case 'CouponCodeInvalidError': {
                    this.notificationService.error(modifyOrder.message);
                    return of(false);
                }
                case null:
                case undefined:
                    return of(false);
                default:
                    assertNever(modifyOrder);
            }
        }), switchMap(result => {
            if (!result || result.result === OrderEditResultType.Cancel) {
                // re-fetch so that the preview values get overwritten in the cache.
                return this.dataService.order.getOrder(this.id).mapSingle(() => false);
            }
            else {
                // Do the modification
                const wetRunInput = {
                    ...input,
                    dryRun: false,
                };
                if (result.result === OrderEditResultType.Refund) {
                    wetRunInput.refunds = result.refunds;
                }
                return this.dataService.order.modifyOrder(wetRunInput).pipe(switchMap(({ modifyOrder }) => {
                    if (modifyOrder.__typename === 'Order') {
                        const priceDelta = modifyOrder.totalWithTax - this.orderSnapshot.totalWithTax;
                        const nextState = 0 < priceDelta ? 'ArrangingAdditionalPayment' : this.previousState;
                        return this.dataService.order
                            .transitionToState(order.id, nextState)
                            .pipe(mapTo(true));
                    }
                    else {
                        this.notificationService.error(modifyOrder.message);
                        return EMPTY;
                    }
                }));
            }
        }))
            .subscribe(result => {
            if (result) {
                this.router.navigate(['../'], { relativeTo: this.route });
            }
        });
    }
    addAddressCustomFieldsFormGroup(parentFormGroup, address) {
        if (address && this.addressCustomFields.length) {
            const addressCustomFieldsFormGroup = new UntypedFormGroup({});
            for (const customFieldDef of this.addressCustomFields) {
                const name = customFieldDef.name;
                const value = address.customFields?.[name];
                addressCustomFieldsFormGroup.addControl(name, new UntypedFormControl(value));
            }
            parentFormGroup.addControl('customFields', addressCustomFieldsFormGroup);
        }
    }
    createOrderSnapshot(order) {
        return {
            totalWithTax: order.totalWithTax,
            currencyCode: order.currencyCode,
            couponCodes: order.couponCodes,
            lines: [...order.lines].map(line => ({ ...line })),
            shippingLines: [...order.shippingLines].map(line => ({ ...line })),
        };
    }
    setFormValues(entity, languageCode) {
        /* not used */
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderEditorComponent, deps: [{ token: i1.DataService }, { token: i1.NotificationService }, { token: i1.ModalService }, { token: OrderTransitionService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderEditorComponent, selector: "vdr-order-editor", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\r\n    <vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n        <vdr-ab-left>\r\n            <div class=\"flex clr-align-items-center\"></div>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\r\n                {{ 'order.cancel-modification' | translate }}\r\n            </button>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<vdr-page-detail-layout *ngIf=\"entity as order\">\r\n    <vdr-page-detail-sidebar>\r\n        <vdr-card [title]=\"'order.modification-summary' | translate\">\r\n            <vdr-order-modification-summary\r\n                [orderSnapshot]=\"orderSnapshot\"\r\n                [modifyOrderInput]=\"modifyOrderInput\"\r\n                [addedLines]=\"addedLines\"\r\n                [shippingAddressForm]=\"shippingAddressForm\"\r\n                [billingAddressForm]=\"billingAddressForm\"\r\n                [couponCodesControl]=\"couponCodesControl\"\r\n                [updatedShippingMethods]=\"updatedShippingMethods\"\r\n            ></vdr-order-modification-summary>\r\n\r\n            <div *ngIf=\"!hasModifications()\" class=\"no-modifications\">\r\n                {{ 'order.no-modifications-made' | translate }}\r\n            </div>\r\n\r\n            <div class=\"summary-controls\">\r\n                <vdr-form-field [label]=\"'order.note' | translate\">\r\n                    <textarea\r\n                        [(ngModel)]=\"note\"\r\n                        name=\"note\"\r\n                        required\r\n                        [disabled]=\"!hasModifications()\"\r\n                    ></textarea>\r\n                </vdr-form-field>\r\n                <label class=\"flex items-center\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        [(ngModel)]=\"recalculateShipping\"\r\n                        [disabled]=\"!hasModifications()\"\r\n                    />\r\n                    <div class=\"ml-1\">{{ 'order.modification-recalculate-shipping' | translate }}</div>\r\n                </label>\r\n                <button\r\n                    class=\"btn btn-primary mt-2\"\r\n                    [disabled]=\"!hasModifications()\"\r\n                    (click)=\"previewAndModify(order)\"\r\n                >\r\n                    {{ 'order.preview-changes' | translate }}\r\n                </button>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.set-coupon-codes' | translate\">\r\n            <vdr-coupon-code-selector [control]=\"couponCodesControl\"></vdr-coupon-code-selector>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.shipping-address' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    class=\"button-small\"\r\n                    [title]=\"'order.edit-shipping-address' | translate\"\r\n                    (click)=\"editingShippingAddress = !editingShippingAddress\"\r\n                >\r\n                    <clr-icon shape=\"edit\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                *ngIf=\"!editingShippingAddress\"\r\n                [address]=\"shippingAddressForm.value\"\r\n            ></vdr-formatted-address>\r\n            <vdr-address-form\r\n                *ngIf=\"editingShippingAddress\"\r\n                [formGroup]=\"shippingAddressForm\"\r\n                [availableCountries]=\"availableCountries$ | async\"\r\n                [customFields]=\"addressCustomFields\"\r\n            ></vdr-address-form>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.billing-address' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    class=\"button-small\"\r\n                    [title]=\"'order.edit-billing-address' | translate\"\r\n                    (click)=\"editingBillingAddress = !editingBillingAddress\"\r\n                >\r\n                    <clr-icon shape=\"edit\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                *ngIf=\"!editingBillingAddress\"\r\n                [address]=\"billingAddressForm.value\"\r\n            ></vdr-formatted-address>\r\n            <vdr-address-form\r\n                *ngIf=\"editingBillingAddress\"\r\n                [formGroup]=\"billingAddressForm\"\r\n                [availableCountries]=\"availableCountries$ | async\"\r\n                [customFields]=\"addressCustomFields\"\r\n            ></vdr-address-form>\r\n        </vdr-card>\r\n    </vdr-page-detail-sidebar>\r\n\r\n    <vdr-page-block>\r\n        <vdr-card [paddingX]=\"false\">\r\n            <vdr-data-table-2 id=\"modify-order\" class=\"order-table\" [items]=\"order.lines.concat(addedLines)\">\r\n                <!-- Here we define all the available columns -->\r\n                <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.id }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    id=\"created-at\"\r\n                    [heading]=\"'common.created-at' | translate\"\r\n                    [hiddenByDefault]=\"true\"\r\n                >\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.createdAt | localeDate : 'short' }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    id=\"updated-at\"\r\n                    [heading]=\"'common.updated-at' | translate\"\r\n                    [hiddenByDefault]=\"true\"\r\n                >\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.updatedAt | localeDate : 'short' }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n                    <ng-template let-line=\"item\">\r\n                        <div class=\"image-placeholder\">\r\n                            <img\r\n                                *ngIf=\"line.featuredAsset as asset; else imagePlaceholder\"\r\n                                [src]=\"asset | assetPreview : 'tiny'\"\r\n                            />\r\n                            <ng-template #imagePlaceholder>\r\n                                <div class=\"placeholder\">\r\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                                </div>\r\n                            </ng-template>\r\n                        </div>\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    id=\"product-name\"\r\n                    [heading]=\"'order.product-name' | translate\"\r\n                    [optional]=\"false\"\r\n                >\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.productVariant.name }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column id=\"product-sku\" [heading]=\"'order.product-sku' | translate\">\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.productVariant.sku }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column id=\"unit-price\" [heading]=\"'order.unit-price' | translate\">\r\n                    <ng-template let-line=\"item\">\r\n                        <div class=\"text-center\">\r\n                            <div>{{ line.unitPriceWithTax | localeCurrency : order.currencyCode }}</div>\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.unitPrice | localeCurrency : order.currencyCode }}\r\n                            </div>\r\n                        </div>\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column id=\"quantity\" [heading]=\"'order.quantity' | translate\" [optional]=\"false\">\r\n                    <ng-template let-line=\"item\">\r\n                        <input\r\n                            type=\"number\"\r\n                            class=\"draft-qty mr-1\"\r\n                            min=\"0\"\r\n                            [value]=\"getInitialLineQuantity(line.id)\"\r\n                            (input)=\"updateLineQuantity(line, $event.target.value)\"\r\n                        />\r\n                        <button\r\n                            class=\"button-small\"\r\n                            *ngIf=\"isAddedLine(line)\"\r\n                            (click)=\"removeAddedItem(line.id)\"\r\n                        >\r\n                            <clr-icon shape=\"trash\"></clr-icon>\r\n                        </button>\r\n                        <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                        <vdr-line-fulfillment\r\n                            [line]=\"line\"\r\n                            [allOrderFulfillments]=\"order.fulfillments\"\r\n                            [orderState]=\"order.state\"\r\n                        ></vdr-line-fulfillment>\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    *ngFor=\"let customField of orderLineCustomFields\"\r\n                    [id]=\"customField.name\"\r\n                    [heading]=\"customField | customFieldLabel : (uiLanguage$ | async)\"\r\n                    [hiddenByDefault]=\"true\"\r\n                >\r\n                    <ng-template let-line=\"item\" let-index=\"index\">\r\n                        <vdr-custom-field-control\r\n                            [compact]=\"true\"\r\n                            [entityName]=\"'OrderLine'\"\r\n                            [customField]=\"customField\"\r\n                            [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.at(index)\"\r\n                        />\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n            </vdr-data-table-2>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.add-item-to-order' | translate\">\r\n            <vdr-product-variant-selector class=\"mb-4\" (productSelected)=\"addItemSelectedVariant = $event\">\r\n            </vdr-product-variant-selector>\r\n            <div class=\"flex\">\r\n                <div>\r\n                    <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb-4\">\r\n                        <img\r\n                            *ngIf=\"addItemSelectedVariant.productAsset as asset\"\r\n                            [src]=\"asset | assetPreview : 'tiny'\"\r\n                            class=\"mr-4 add-item-thumb\"\r\n                        />\r\n                        <div>\r\n                            <strong class=\"mr-4\">{{ addItemSelectedVariant.productVariantName }}</strong>\r\n                            <small>{{ addItemSelectedVariant.sku }}</small>\r\n                            <div>\r\n                                {{\r\n                                    getSelectedItemPrice(addItemSelectedVariant)\r\n                                        | localeCurrency : order.currencyCode\r\n                                }}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf=\"addItemSelectedVariant\">\r\n                        <vdr-tabbed-custom-fields\r\n                            entityName=\"Order\"\r\n                            [customFields]=\"orderLineCustomFields\"\r\n                            [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\r\n                        ></vdr-tabbed-custom-fields>\r\n                    </div>\r\n                </div>\r\n                <div class=\"flex-spacer\"></div>\r\n                <div>\r\n                    <button\r\n                        *ngIf=\"addItemSelectedVariant\"\r\n                        class=\"btn btn-secondary\"\r\n                        [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\r\n                        (click)=\"addItemToOrder(addItemSelectedVariant)\"\r\n                    >\r\n                        {{ 'order.add-item-to-order' | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.shipping' | translate\">\r\n            <div *ngFor=\"let shippingLine of order.shippingLines\" class=\"flex items-center\">\r\n                <ng-container *ngIf=\"getShippingLineDetails(shippingLine) as details\">\r\n                    <div>{{ details.name }}:</div>\r\n                    <div class=\"mx-1\">\r\n                        {{ details.price | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                    <button class=\"button-small\" (click)=\"setShippingMethod(shippingLine.id)\">\r\n                        {{ 'order.set-shipping-method' | translate }}\r\n                    </button>\r\n                </ng-container>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.add-surcharge' | translate\">\r\n            <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\r\n                        ><input id=\"description\" type=\"text\" formControlName=\"description\"\r\n                    /></vdr-form-field>\r\n                    <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\r\n                        ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\r\n                    /></vdr-form-field>\r\n                    <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\">\r\n                        <vdr-currency-input\r\n                            [currencyCode]=\"order.currencyCode\"\r\n                            id=\"price\"\r\n                            formControlName=\"price\"\r\n                        ></vdr-currency-input>\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        [label]=\"\r\n                            'catalog.price-includes-tax-at'\r\n                                | translate : { rate: surchargeForm.get('taxRate')?.value ?? 0 }\r\n                        \"\r\n                        for=\"priceIncludesTax\"\r\n                        ><input\r\n                            id=\"priceIncludesTax\"\r\n                            type=\"checkbox\"\r\n                            clrCheckbox\r\n                            formControlName=\"priceIncludesTax\"\r\n                    /></vdr-form-field>\r\n                    <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\">\r\n                        <vdr-affixed-input suffix=\"%\"\r\n                            ><input id=\"taxRate\" type=\"number\" min=\"0\" max=\"100\" formControlName=\"taxRate\"\r\n                        /></vdr-affixed-input>\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\r\n                        ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\r\n                    /></vdr-form-field>\r\n                </div>\r\n                <button\r\n                    class=\"btn btn-secondary mt-2\"\r\n                    [disabled]=\"\r\n                        surchargeForm.invalid ||\r\n                        surchargeForm.pristine ||\r\n                        surchargeForm.get('price')?.value === 0 ||\r\n                        !surchargeForm.get('description')?.value\r\n                    \"\r\n                >\r\n                    {{ 'order.add-surcharge' | translate }}\r\n                </button>\r\n            </form>\r\n        </vdr-card>\r\n    </vdr-page-block>\r\n</vdr-page-detail-layout>\r\n", styles: [".order-table .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}.order-table .sub-total td{border-top:1px dashed var(--color-component-border-200)}.order-table .total td{font-weight:700;border-top:1px dashed var(--color-component-border-200)}.order-table td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}.order-table img{border-radius:var(--border-radius-img)}.order-table .order-line-custom-fields{display:flex;flex-wrap:wrap}.order-table .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-inline-end:18px}.order-table .draft-qty{max-width:48px}.order-table .order-line-custom-field{background-color:var(--color-component-bg-100)}.order-table .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}.order-table .net-price{font-size:11px;color:var(--color-text-300);line-height:14px}.order-table .promotions-label{text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}.order-table .thumb img{width:50px;height:50px}.order-table .shipping-method-name{font-size:var(--font-size-xs);margin-inline-end:2px}.order-table .order-placed-quantity{text-decoration:line-through;color:var(--color-text-300);margin-inline-end:2px}.order-table tr.modified td{background-color:var(--color-warning-100)}.order-table .order-line-custom-field{text-align:start}.add-item-thumb{max-width:50px}.no-modifications{color:var(--color-grey-400)}.summary-controls{border-top:1px solid var(--color-weight-200);margin-top:calc(var(--space-unit) * 2);padding-top:calc(var(--space-unit) * 1)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i2.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.AffixedInputComponent, selector: "vdr-affixed-input", inputs: ["prefix", "suffix"] }, { kind: "component", type: i1.CurrencyInputComponent, selector: "vdr-currency-input", inputs: ["disabled", "readonly", "value", "currencyCode"], outputs: ["valueChange"] }, { kind: "component", type: i1.CustomFieldControlComponent, selector: "vdr-custom-field-control", inputs: ["entityName", "customFieldsFormGroup", "customField", "compact", "showLabel", "readonly"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "component", type: i1.FormattedAddressComponent, selector: "vdr-formatted-address", inputs: ["address"] }, { kind: "component", type: i1.ProductVariantSelectorComponent, selector: "vdr-product-variant-selector", outputs: ["productSelected"] }, { kind: "component", type: i1.AddressFormComponent, selector: "vdr-address-form", inputs: ["customFields", "formGroup", "availableCountries"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "directive", type: i1.CardControlsDirective, selector: "[vdrCardControls]" }, { kind: "component", type: LineFulfillmentComponent, selector: "vdr-line-fulfillment", inputs: ["line", "allOrderFulfillments", "orderState"] }, { kind: "component", type: LineRefundsComponent, selector: "vdr-line-refunds", inputs: ["line", "payments"] }, { kind: "component", type: CouponCodeSelectorComponent, selector: "vdr-coupon-code-selector", inputs: ["couponCodes", "control"], outputs: ["addCouponCode", "removeCouponCode"] }, { kind: "component", type: OrderModificationSummaryComponent, selector: "vdr-order-modification-summary", inputs: ["orderSnapshot", "modifyOrderInput", "addedLines", "shippingAddressForm", "billingAddressForm", "updatedShippingMethods", "couponCodesControl"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.CustomFieldLabelPipe, name: "customFieldLabel" }, { kind: "pipe", type: i1.AssetPreviewPipe, name: "assetPreview" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderEditorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-editor', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-block>\r\n    <vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n        <vdr-ab-left>\r\n            <div class=\"flex clr-align-items-center\"></div>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\r\n                {{ 'order.cancel-modification' | translate }}\r\n            </button>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<vdr-page-detail-layout *ngIf=\"entity as order\">\r\n    <vdr-page-detail-sidebar>\r\n        <vdr-card [title]=\"'order.modification-summary' | translate\">\r\n            <vdr-order-modification-summary\r\n                [orderSnapshot]=\"orderSnapshot\"\r\n                [modifyOrderInput]=\"modifyOrderInput\"\r\n                [addedLines]=\"addedLines\"\r\n                [shippingAddressForm]=\"shippingAddressForm\"\r\n                [billingAddressForm]=\"billingAddressForm\"\r\n                [couponCodesControl]=\"couponCodesControl\"\r\n                [updatedShippingMethods]=\"updatedShippingMethods\"\r\n            ></vdr-order-modification-summary>\r\n\r\n            <div *ngIf=\"!hasModifications()\" class=\"no-modifications\">\r\n                {{ 'order.no-modifications-made' | translate }}\r\n            </div>\r\n\r\n            <div class=\"summary-controls\">\r\n                <vdr-form-field [label]=\"'order.note' | translate\">\r\n                    <textarea\r\n                        [(ngModel)]=\"note\"\r\n                        name=\"note\"\r\n                        required\r\n                        [disabled]=\"!hasModifications()\"\r\n                    ></textarea>\r\n                </vdr-form-field>\r\n                <label class=\"flex items-center\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        [(ngModel)]=\"recalculateShipping\"\r\n                        [disabled]=\"!hasModifications()\"\r\n                    />\r\n                    <div class=\"ml-1\">{{ 'order.modification-recalculate-shipping' | translate }}</div>\r\n                </label>\r\n                <button\r\n                    class=\"btn btn-primary mt-2\"\r\n                    [disabled]=\"!hasModifications()\"\r\n                    (click)=\"previewAndModify(order)\"\r\n                >\r\n                    {{ 'order.preview-changes' | translate }}\r\n                </button>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.set-coupon-codes' | translate\">\r\n            <vdr-coupon-code-selector [control]=\"couponCodesControl\"></vdr-coupon-code-selector>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.shipping-address' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    class=\"button-small\"\r\n                    [title]=\"'order.edit-shipping-address' | translate\"\r\n                    (click)=\"editingShippingAddress = !editingShippingAddress\"\r\n                >\r\n                    <clr-icon shape=\"edit\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                *ngIf=\"!editingShippingAddress\"\r\n                [address]=\"shippingAddressForm.value\"\r\n            ></vdr-formatted-address>\r\n            <vdr-address-form\r\n                *ngIf=\"editingShippingAddress\"\r\n                [formGroup]=\"shippingAddressForm\"\r\n                [availableCountries]=\"availableCountries$ | async\"\r\n                [customFields]=\"addressCustomFields\"\r\n            ></vdr-address-form>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.billing-address' | translate\">\r\n            <ng-template vdrCardControls>\r\n                <button\r\n                    class=\"button-small\"\r\n                    [title]=\"'order.edit-billing-address' | translate\"\r\n                    (click)=\"editingBillingAddress = !editingBillingAddress\"\r\n                >\r\n                    <clr-icon shape=\"edit\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n            <vdr-formatted-address\r\n                *ngIf=\"!editingBillingAddress\"\r\n                [address]=\"billingAddressForm.value\"\r\n            ></vdr-formatted-address>\r\n            <vdr-address-form\r\n                *ngIf=\"editingBillingAddress\"\r\n                [formGroup]=\"billingAddressForm\"\r\n                [availableCountries]=\"availableCountries$ | async\"\r\n                [customFields]=\"addressCustomFields\"\r\n            ></vdr-address-form>\r\n        </vdr-card>\r\n    </vdr-page-detail-sidebar>\r\n\r\n    <vdr-page-block>\r\n        <vdr-card [paddingX]=\"false\">\r\n            <vdr-data-table-2 id=\"modify-order\" class=\"order-table\" [items]=\"order.lines.concat(addedLines)\">\r\n                <!-- Here we define all the available columns -->\r\n                <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.id }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    id=\"created-at\"\r\n                    [heading]=\"'common.created-at' | translate\"\r\n                    [hiddenByDefault]=\"true\"\r\n                >\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.createdAt | localeDate : 'short' }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    id=\"updated-at\"\r\n                    [heading]=\"'common.updated-at' | translate\"\r\n                    [hiddenByDefault]=\"true\"\r\n                >\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.updatedAt | localeDate : 'short' }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n                    <ng-template let-line=\"item\">\r\n                        <div class=\"image-placeholder\">\r\n                            <img\r\n                                *ngIf=\"line.featuredAsset as asset; else imagePlaceholder\"\r\n                                [src]=\"asset | assetPreview : 'tiny'\"\r\n                            />\r\n                            <ng-template #imagePlaceholder>\r\n                                <div class=\"placeholder\">\r\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                                </div>\r\n                            </ng-template>\r\n                        </div>\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    id=\"product-name\"\r\n                    [heading]=\"'order.product-name' | translate\"\r\n                    [optional]=\"false\"\r\n                >\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.productVariant.name }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column id=\"product-sku\" [heading]=\"'order.product-sku' | translate\">\r\n                    <ng-template let-line=\"item\">\r\n                        {{ line.productVariant.sku }}\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column id=\"unit-price\" [heading]=\"'order.unit-price' | translate\">\r\n                    <ng-template let-line=\"item\">\r\n                        <div class=\"text-center\">\r\n                            <div>{{ line.unitPriceWithTax | localeCurrency : order.currencyCode }}</div>\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.unitPrice | localeCurrency : order.currencyCode }}\r\n                            </div>\r\n                        </div>\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column id=\"quantity\" [heading]=\"'order.quantity' | translate\" [optional]=\"false\">\r\n                    <ng-template let-line=\"item\">\r\n                        <input\r\n                            type=\"number\"\r\n                            class=\"draft-qty mr-1\"\r\n                            min=\"0\"\r\n                            [value]=\"getInitialLineQuantity(line.id)\"\r\n                            (input)=\"updateLineQuantity(line, $event.target.value)\"\r\n                        />\r\n                        <button\r\n                            class=\"button-small\"\r\n                            *ngIf=\"isAddedLine(line)\"\r\n                            (click)=\"removeAddedItem(line.id)\"\r\n                        >\r\n                            <clr-icon shape=\"trash\"></clr-icon>\r\n                        </button>\r\n                        <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                        <vdr-line-fulfillment\r\n                            [line]=\"line\"\r\n                            [allOrderFulfillments]=\"order.fulfillments\"\r\n                            [orderState]=\"order.state\"\r\n                        ></vdr-line-fulfillment>\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n                <vdr-dt2-column\r\n                    *ngFor=\"let customField of orderLineCustomFields\"\r\n                    [id]=\"customField.name\"\r\n                    [heading]=\"customField | customFieldLabel : (uiLanguage$ | async)\"\r\n                    [hiddenByDefault]=\"true\"\r\n                >\r\n                    <ng-template let-line=\"item\" let-index=\"index\">\r\n                        <vdr-custom-field-control\r\n                            [compact]=\"true\"\r\n                            [entityName]=\"'OrderLine'\"\r\n                            [customField]=\"customField\"\r\n                            [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.at(index)\"\r\n                        />\r\n                    </ng-template>\r\n                </vdr-dt2-column>\r\n            </vdr-data-table-2>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.add-item-to-order' | translate\">\r\n            <vdr-product-variant-selector class=\"mb-4\" (productSelected)=\"addItemSelectedVariant = $event\">\r\n            </vdr-product-variant-selector>\r\n            <div class=\"flex\">\r\n                <div>\r\n                    <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb-4\">\r\n                        <img\r\n                            *ngIf=\"addItemSelectedVariant.productAsset as asset\"\r\n                            [src]=\"asset | assetPreview : 'tiny'\"\r\n                            class=\"mr-4 add-item-thumb\"\r\n                        />\r\n                        <div>\r\n                            <strong class=\"mr-4\">{{ addItemSelectedVariant.productVariantName }}</strong>\r\n                            <small>{{ addItemSelectedVariant.sku }}</small>\r\n                            <div>\r\n                                {{\r\n                                    getSelectedItemPrice(addItemSelectedVariant)\r\n                                        | localeCurrency : order.currencyCode\r\n                                }}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf=\"addItemSelectedVariant\">\r\n                        <vdr-tabbed-custom-fields\r\n                            entityName=\"Order\"\r\n                            [customFields]=\"orderLineCustomFields\"\r\n                            [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\r\n                        ></vdr-tabbed-custom-fields>\r\n                    </div>\r\n                </div>\r\n                <div class=\"flex-spacer\"></div>\r\n                <div>\r\n                    <button\r\n                        *ngIf=\"addItemSelectedVariant\"\r\n                        class=\"btn btn-secondary\"\r\n                        [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\r\n                        (click)=\"addItemToOrder(addItemSelectedVariant)\"\r\n                    >\r\n                        {{ 'order.add-item-to-order' | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.shipping' | translate\">\r\n            <div *ngFor=\"let shippingLine of order.shippingLines\" class=\"flex items-center\">\r\n                <ng-container *ngIf=\"getShippingLineDetails(shippingLine) as details\">\r\n                    <div>{{ details.name }}:</div>\r\n                    <div class=\"mx-1\">\r\n                        {{ details.price | localeCurrency : order.currencyCode }}\r\n                    </div>\r\n                    <button class=\"button-small\" (click)=\"setShippingMethod(shippingLine.id)\">\r\n                        {{ 'order.set-shipping-method' | translate }}\r\n                    </button>\r\n                </ng-container>\r\n            </div>\r\n        </vdr-card>\r\n        <vdr-card [title]=\"'order.add-surcharge' | translate\">\r\n            <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\r\n                        ><input id=\"description\" type=\"text\" formControlName=\"description\"\r\n                    /></vdr-form-field>\r\n                    <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\r\n                        ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\r\n                    /></vdr-form-field>\r\n                    <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\">\r\n                        <vdr-currency-input\r\n                            [currencyCode]=\"order.currencyCode\"\r\n                            id=\"price\"\r\n                            formControlName=\"price\"\r\n                        ></vdr-currency-input>\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        [label]=\"\r\n                            'catalog.price-includes-tax-at'\r\n                                | translate : { rate: surchargeForm.get('taxRate')?.value ?? 0 }\r\n                        \"\r\n                        for=\"priceIncludesTax\"\r\n                        ><input\r\n                            id=\"priceIncludesTax\"\r\n                            type=\"checkbox\"\r\n                            clrCheckbox\r\n                            formControlName=\"priceIncludesTax\"\r\n                    /></vdr-form-field>\r\n                    <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\">\r\n                        <vdr-affixed-input suffix=\"%\"\r\n                            ><input id=\"taxRate\" type=\"number\" min=\"0\" max=\"100\" formControlName=\"taxRate\"\r\n                        /></vdr-affixed-input>\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\r\n                        ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\r\n                    /></vdr-form-field>\r\n                </div>\r\n                <button\r\n                    class=\"btn btn-secondary mt-2\"\r\n                    [disabled]=\"\r\n                        surchargeForm.invalid ||\r\n                        surchargeForm.pristine ||\r\n                        surchargeForm.get('price')?.value === 0 ||\r\n                        !surchargeForm.get('description')?.value\r\n                    \"\r\n                >\r\n                    {{ 'order.add-surcharge' | translate }}\r\n                </button>\r\n            </form>\r\n        </vdr-card>\r\n    </vdr-page-block>\r\n</vdr-page-detail-layout>\r\n", styles: [".order-table .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}.order-table .sub-total td{border-top:1px dashed var(--color-component-border-200)}.order-table .total td{font-weight:700;border-top:1px dashed var(--color-component-border-200)}.order-table td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}.order-table img{border-radius:var(--border-radius-img)}.order-table .order-line-custom-fields{display:flex;flex-wrap:wrap}.order-table .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-inline-end:18px}.order-table .draft-qty{max-width:48px}.order-table .order-line-custom-field{background-color:var(--color-component-bg-100)}.order-table .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}.order-table .net-price{font-size:11px;color:var(--color-text-300);line-height:14px}.order-table .promotions-label{text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}.order-table .thumb img{width:50px;height:50px}.order-table .shipping-method-name{font-size:var(--font-size-xs);margin-inline-end:2px}.order-table .order-placed-quantity{text-decoration:line-through;color:var(--color-text-300);margin-inline-end:2px}.order-table tr.modified td{background-color:var(--color-warning-100)}.order-table .order-line-custom-field{text-align:start}.add-item-thumb{max-width:50px}.no-modifications{color:var(--color-grey-400)}.summary-controls{border-top:1px solid var(--color-weight-200);margin-top:calc(var(--space-unit) * 2);padding-top:calc(var(--space-unit) * 1)}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1.NotificationService }, { type: i1.ModalService }, { type: OrderTransitionService }, { type: i0.ChangeDetectorRef }] });

class OrderListComponent extends TypedBaseListComponent {
    constructor(serverConfigService, channelService) {
        super();
        this.serverConfigService = serverConfigService;
        this.channelService = channelService;
        this.dataTableListId = 'order-list';
        this.orderStates = this.serverConfigService.getOrderProcessStates().map(item => item.name);
        this.OrderType = OrderType;
        this.customFields = this.getCustomFieldConfig('Order');
        this.filters = this.createFilterCollection()
            .addIdFilter()
            .addDateFilters()
            .addFilter({
            name: 'active',
            type: { kind: 'boolean' },
            label: marker('order.filter-is-active'),
            filterField: 'active',
        })
            .addFilter({
            name: 'totalWithTax',
            type: { kind: 'number', inputType: 'currency', currencyCode: 'USD' },
            label: marker('order.total'),
            filterField: 'totalWithTax',
        })
            .addFilter({
            name: 'state',
            type: {
                kind: 'select',
                options: this.orderStates.map(s => ({ value: s, label: getOrderStateTranslationToken(s) })),
            },
            label: marker('order.state'),
            filterField: 'state',
        })
            .addFilter({
            name: 'type',
            type: {
                kind: 'select',
                options: [
                    { value: OrderType.Regular, label: marker('order.order-type-regular') },
                    { value: OrderType.Aggregate, label: marker('order.order-type-aggregate') },
                    { value: OrderType.Seller, label: marker('order.order-type-seller') },
                ],
            },
            label: marker('order.order-type'),
            filterField: 'type',
        })
            .addFilter({
            name: 'orderPlacedAt',
            type: { kind: 'dateRange' },
            label: marker('order.placed-at'),
            filterField: 'orderPlacedAt',
        })
            .addFilter({
            name: 'customerLastName',
            type: { kind: 'text' },
            label: marker('customer.last-name'),
            filterField: 'customerLastName',
        })
            .addFilter({
            name: 'transactionId',
            type: { kind: 'text' },
            label: marker('order.transaction-id'),
            filterField: 'transactionId',
        })
            .addCustomFieldFilters(this.customFields)
            .connectToRoute(this.route);
        this.sorts = this.createSortCollection()
            .defaultSort('updatedAt', 'DESC')
            .addSort({ name: 'id' })
            .addSort({ name: 'createdAt' })
            .addSort({ name: 'updatedAt' })
            .addSort({ name: 'orderPlacedAt' })
            .addSort({ name: 'customerLastName' })
            .addSort({ name: 'state' })
            .addSort({ name: 'totalWithTax' })
            .addCustomFieldSorts(this.customFields)
            .connectToRoute(this.route);
        this.canCreateDraftOrder = false;
        this.activeChannelIsDefaultChannel = false;
        super.configure({
            document: GetOrderListDocument,
            getItems: result => result.orders,
            setVariables: (skip, take) => this.createQueryOptions(skip, take, this.searchTermControl.value),
            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],
        });
        this.canCreateDraftOrder = !!this.serverConfigService
            .getOrderProcessStates()
            .find(state => state.name === 'Created')
            ?.to.includes('Draft');
    }
    ngOnInit() {
        super.ngOnInit();
        const isDefaultChannel$ = this.channelService.defaultChannelIsActive$.pipe(tap(isDefault => (this.activeChannelIsDefaultChannel = isDefault)));
        super.refreshListOnChanges(this.filters.valueChanges, this.sorts.valueChanges, isDefaultChannel$);
    }
    createQueryOptions(
    // eslint-disable-next-line @typescript-eslint/no-shadow
    skip, take, searchTerm) {
        let filterInput = this.filters.createFilterInput();
        if (this.activeChannelIsDefaultChannel) {
            filterInput = {
                ...(filterInput ?? {}),
            };
        }
        if (searchTerm) {
            filterInput = {
                code: {
                    contains: searchTerm,
                },
                customerLastName: {
                    contains: searchTerm,
                },
                transactionId: {
                    contains: searchTerm,
                },
            };
        }
        return {
            options: {
                skip,
                take,
                filter: {
                    ...(filterInput ?? {}),
                },
                filterOperator: searchTerm ? LogicalOperator.OR : LogicalOperator.AND,
                sort: this.sorts.createSortInput(),
            },
        };
    }
    getShippingNames(order) {
        if (order.shippingLines.length) {
            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');
        }
        else {
            return '';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderListComponent, deps: [{ token: i1.ServerConfigService }, { token: i1.ChannelService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderListComponent, selector: "vdr-order-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"order-list\" />\r\n            <ng-container *ngIf=\"canCreateDraftOrder\">\r\n                <a class=\"btn\" *vdrIfPermissions=\"['CreateOrder']\" [routerLink]=\"['./draft/create']\">\r\n                    <clr-icon shape=\"plus\"></clr-icon>\r\n                    {{ 'catalog.create-draft-order' | translate }}\r\n                </a>\r\n            </ng-container>\r\n            <vdr-action-bar-dropdown-menu locationId=\"order-list\" />\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<vdr-data-table-2\r\n    class=\"mt-2\"\r\n    [id]=\"dataTableListId\"\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    [filters]=\"filters\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\r\n>\r\n    <vdr-bulk-action-menu\r\n        locationId=\"order-list\"\r\n        [hostComponent]=\"this\"\r\n        [selectionManager]=\"selectionManager\"\r\n    ></vdr-bulk-action-menu>\r\n    <vdr-dt2-search\r\n        [searchTermControl]=\"searchTermControl\"\r\n        [searchTermPlaceholder]=\"'order.search-by-order-filters' | translate\"\r\n    />\r\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.createdAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\">\r\n        <ng-template let-order=\"item\">\r\n            <a class=\"button-ghost\" [routerLink]=\"order.state === 'Draft' ? ['./draft', order.id] : ['./', order.id]\"\r\n                ><span>{{ order.code }}</span>\r\n                <clr-icon shape=\"arrow right\"></clr-icon>\r\n            </a>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.customer' | translate\" id=\"customer\" [sort]=\"sorts.get('customerLastName')\">\r\n        <ng-template let-order=\"item\">\r\n            <vdr-customer-label\r\n                [customer]=\"order.customer\"\r\n                (click)=\"$event.stopPropagation()\"\r\n            ></vdr-customer-label>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.order-type' | translate\" id=\"order-type\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-order=\"item\">\r\n            <vdr-chip *ngIf=\"order.type === OrderType.Regular\">{{ 'order.order-type-regular' | translate }}</vdr-chip>\r\n            <vdr-chip *ngIf=\"order.type === OrderType.Aggregate\">{{ 'order.order-type-aggregate' | translate }}</vdr-chip>\r\n            <vdr-chip *ngIf=\"order.type === OrderType.Seller\">{{ 'order.order-type-seller' | translate }}</vdr-chip>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.state' | translate\" id=\"state\" [sort]=\"sorts.get('state')\">\r\n        <ng-template let-order=\"item\">\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.total' | translate\" id=\"total\" [sort]=\"sorts.get('totalWithTax')\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.updatedAt | timeAgo }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.placed-at' | translate\" id=\"placed-at\" [sort]=\"sorts.get('orderPlacedAt')\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.orderPlacedAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.shipping' | translate\" id=\"shipping\">\r\n        <ng-template let-order=\"item\">\r\n            {{ getShippingNames(order) }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-custom-field-column\r\n        *ngFor=\"let customField of customFields\"\r\n        [customField]=\"customField\"\r\n        [sorts]=\"sorts\"\r\n    />\r\n</vdr-data-table-2>\r\n", styles: [".search-form{display:flex;flex-direction:column;align-items:baseline;width:100%;max-width:100vw;margin-bottom:6px}.filter-presets{max-width:90vw;overflow-x:auto}.search-input{margin-top:6px;min-width:300px}.custom-filters{overflow:hidden;max-height:0;padding-bottom:6px}.custom-filters.expanded{max-height:initial}.custom-filters>form{display:flex;flex-direction:column;align-items:center}.custom-filters>form>div{width:100%}ng-select{flex:1;min-width:200px;height:36px}ng-select ::ng-deep .ng-select-container{height:36px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarDropdownMenuComponent, selector: "vdr-action-bar-dropdown-menu", inputs: ["alwaysShow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.CustomerLabelComponent, selector: "vdr-customer-label", inputs: ["customer"] }, { kind: "component", type: i1.OrderStateLabelComponent, selector: "vdr-order-state-label", inputs: ["state"] }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items" }, { kind: "component", type: i1.BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: ["locationId", "selectionManager", "hostComponent"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex"], outputs: ["pageChange", "itemsPerPageChange", "visibleColumnsChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.DataTable2SearchComponent, selector: "vdr-dt2-search", inputs: ["searchTermControl", "searchTermPlaceholder"] }, { kind: "component", type: i1.DataTableCustomFieldColumnComponent, selector: "vdr-dt2-custom-field-column", inputs: ["customField", "sorts"], exportAs: ["row"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.TimeAgoPipe, name: "timeAgo" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-list', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"order-list\" />\r\n            <ng-container *ngIf=\"canCreateDraftOrder\">\r\n                <a class=\"btn\" *vdrIfPermissions=\"['CreateOrder']\" [routerLink]=\"['./draft/create']\">\r\n                    <clr-icon shape=\"plus\"></clr-icon>\r\n                    {{ 'catalog.create-draft-order' | translate }}\r\n                </a>\r\n            </ng-container>\r\n            <vdr-action-bar-dropdown-menu locationId=\"order-list\" />\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<vdr-data-table-2\r\n    class=\"mt-2\"\r\n    [id]=\"dataTableListId\"\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    [filters]=\"filters\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\r\n>\r\n    <vdr-bulk-action-menu\r\n        locationId=\"order-list\"\r\n        [hostComponent]=\"this\"\r\n        [selectionManager]=\"selectionManager\"\r\n    ></vdr-bulk-action-menu>\r\n    <vdr-dt2-search\r\n        [searchTermControl]=\"searchTermControl\"\r\n        [searchTermPlaceholder]=\"'order.search-by-order-filters' | translate\"\r\n    />\r\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.createdAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\">\r\n        <ng-template let-order=\"item\">\r\n            <a class=\"button-ghost\" [routerLink]=\"order.state === 'Draft' ? ['./draft', order.id] : ['./', order.id]\"\r\n                ><span>{{ order.code }}</span>\r\n                <clr-icon shape=\"arrow right\"></clr-icon>\r\n            </a>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.customer' | translate\" id=\"customer\" [sort]=\"sorts.get('customerLastName')\">\r\n        <ng-template let-order=\"item\">\r\n            <vdr-customer-label\r\n                [customer]=\"order.customer\"\r\n                (click)=\"$event.stopPropagation()\"\r\n            ></vdr-customer-label>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.order-type' | translate\" id=\"order-type\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-order=\"item\">\r\n            <vdr-chip *ngIf=\"order.type === OrderType.Regular\">{{ 'order.order-type-regular' | translate }}</vdr-chip>\r\n            <vdr-chip *ngIf=\"order.type === OrderType.Aggregate\">{{ 'order.order-type-aggregate' | translate }}</vdr-chip>\r\n            <vdr-chip *ngIf=\"order.type === OrderType.Seller\">{{ 'order.order-type-seller' | translate }}</vdr-chip>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.state' | translate\" id=\"state\" [sort]=\"sorts.get('state')\">\r\n        <ng-template let-order=\"item\">\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.total' | translate\" id=\"total\" [sort]=\"sorts.get('totalWithTax')\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.updatedAt | timeAgo }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.placed-at' | translate\" id=\"placed-at\" [sort]=\"sorts.get('orderPlacedAt')\">\r\n        <ng-template let-order=\"item\">\r\n            {{ order.orderPlacedAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'order.shipping' | translate\" id=\"shipping\">\r\n        <ng-template let-order=\"item\">\r\n            {{ getShippingNames(order) }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-custom-field-column\r\n        *ngFor=\"let customField of customFields\"\r\n        [customField]=\"customField\"\r\n        [sorts]=\"sorts\"\r\n    />\r\n</vdr-data-table-2>\r\n", styles: [".search-form{display:flex;flex-direction:column;align-items:baseline;width:100%;max-width:100vw;margin-bottom:6px}.filter-presets{max-width:90vw;overflow-x:auto}.search-input{margin-top:6px;min-width:300px}.custom-filters{overflow:hidden;max-height:0;padding-bottom:6px}.custom-filters.expanded{max-height:initial}.custom-filters>form{display:flex;flex-direction:column;align-items:center}.custom-filters>form>div{width:100%}ng-select{flex:1;min-width:200px;height:36px}ng-select ::ng-deep .ng-select-container{height:36px}\n"] }]
        }], ctorParameters: () => [{ type: i1.ServerConfigService }, { type: i1.ChannelService }] });

class RefundDetailComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: RefundDetailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: RefundDetailComponent, selector: "vdr-refund-detail", inputs: { refund: "refund", currencyCode: "currencyCode" }, ngImport: i0, template: "<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ refund.total | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"refund.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ refund.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i1.ObjectTreeComponent, selector: "vdr-object-tree", inputs: ["value", "isArrayItem"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: RefundDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-refund-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ refund.total | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"refund.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ refund.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n" }]
        }], propDecorators: { refund: [{
                type: Input
            }], currencyCode: [{
                type: Input
            }] } });

const GET_CUSTOMER_ADDRESSES = gql `
    query GetCustomerAddresses($customerId: ID!) {
        customer(id: $customerId) {
            id
            addresses {
                ...Address
            }
        }
    }
    ${ADDRESS_FRAGMENT}
`;

const GET_ORDER_STATE = gql `
    query GetOrderState($id: ID!) {
        order(id: $id) {
            id
            state
        }
    }
`;
class OrderGuard {
    constructor(dataService, router) {
        this.dataService = dataService;
        this.router = router;
    }
    canActivate(route, state) {
        const isDraft = state.url.includes('orders/draft');
        const isModifying = state.url.includes('/modify');
        const id = route.paramMap.get('id');
        if (isDraft) {
            if (id === 'create') {
                return this.dataService.order
                    .createDraftOrder()
                    .pipe(map(({ createDraftOrder }) => this.router.parseUrl(`/orders/draft/${createDraftOrder.id}`)));
            }
            else {
                return true;
            }
        }
        else {
            return (this.dataService
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                .query(GET_ORDER_STATE, { id: id })
                .single$.pipe(map(({ order }) => {
                if (order?.state === 'Modifying' && !isModifying) {
                    return this.router.parseUrl(`/orders/${id}/modify`);
                }
                else {
                    return true;
                }
            })));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderGuard, deps: [{ token: i1.DataService }, { token: i1$1.Router }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderGuard, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderGuard, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i1$1.Router }] });

const createRoutes = (pageService) => [
    {
        path: '',
        component: PageComponent,
        data: {
            locationId: 'order-list',
            breadcrumb: marker('breadcrumb.orders'),
        },
        children: pageService.getPageTabRoutes('order-list'),
    },
    {
        path: 'draft/:id',
        component: PageComponent,
        canActivate: [OrderGuard],
        data: {
            locationId: 'draft-order-detail',
            breadcrumb: { label: marker('breadcrumb.orders'), link: ['../'] },
        },
        children: pageService.getPageTabRoutes('draft-order-detail'),
    },
    {
        path: ':id',
        component: PageComponent,
        canActivate: [OrderGuard],
        data: {
            locationId: 'order-detail',
            breadcrumb: { label: marker('breadcrumb.orders'), link: ['../'] },
        },
        children: pageService.getPageTabRoutes('order-detail'),
    },
    {
        path: ':aggregateOrderId/seller-orders/:id',
        component: PageComponent,
        canActivate: [OrderGuard],
        data: {
            locationId: 'order-detail',
            breadcrumb: { label: marker('breadcrumb.orders'), link: ['../'] },
        },
        children: pageService.getPageTabRoutes('order-detail'),
    },
    {
        path: ':id/modify',
        component: PageComponent,
        canActivate: [OrderGuard],
        data: {
            locationId: 'modify-order',
            breadcrumb: { label: marker('breadcrumb.orders'), link: ['../'] },
        },
        children: pageService.getPageTabRoutes('modify-order'),
    },
];

class OrderModule {
    static { this.hasRegisteredTabsAndBulkActions = false; }
    constructor(pageService) {
        if (OrderModule.hasRegisteredTabsAndBulkActions) {
            return;
        }
        pageService.registerPageTab({
            priority: 0,
            location: 'order-list',
            tab: marker('order.orders'),
            route: '',
            component: OrderListComponent,
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'order-detail',
            tab: marker('order.order'),
            route: '',
            component: detailComponentWithResolver({
                component: OrderDetailComponent,
                query: OrderDetailQueryDocument,
                entityKey: 'order',
                getBreadcrumbs: entity => entity?.type !== OrderType.Seller || !entity?.aggregateOrder
                    ? [
                        {
                            label: `${entity?.code}`,
                            link: [entity?.id],
                        },
                    ]
                    : [
                        {
                            label: `${entity?.aggregateOrder?.code}`,
                            link: ['/orders/', entity?.aggregateOrder?.id],
                        },
                        {
                            label: marker('breadcrumb.seller-orders'),
                            link: ['/orders/', entity?.aggregateOrder?.id],
                        },
                        {
                            label: `${entity?.code}`,
                            link: [entity?.id],
                        },
                    ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'draft-order-detail',
            tab: marker('order.order'),
            route: '',
            component: detailComponentWithResolver({
                component: DraftOrderDetailComponent,
                query: OrderDetailQueryDocument,
                entityKey: 'order',
                getBreadcrumbs: entity => [
                    {
                        label: marker('order.draft-order'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        pageService.registerPageTab({
            priority: 0,
            location: 'modify-order',
            tab: marker('order.order'),
            route: '',
            component: detailComponentWithResolver({
                component: OrderEditorComponent,
                query: OrderDetailQueryDocument,
                entityKey: 'order',
                getBreadcrumbs: entity => [
                    {
                        label: entity?.code || 'order',
                        link: ['/orders/', entity?.id],
                    },
                    {
                        label: marker('breadcrumb.modifying-order'),
                        link: [entity?.id],
                    },
                ],
            }),
        });
        OrderModule.hasRegisteredTabsAndBulkActions = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderModule, deps: [{ token: i1.PageService }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: OrderModule, declarations: [OrderListComponent,
            OrderDetailComponent,
            FulfillOrderDialogComponent,
            LineFulfillmentComponent,
            RefundOrderDialogComponent,
            CancelOrderDialogComponent,
            PaymentStateLabelComponent,
            LineRefundsComponent,
            OrderPaymentCardComponent,
            RefundStateLabelComponent,
            SettleRefundDialogComponent,
            OrderHistoryComponent,
            FulfillmentDetailComponent,
            PaymentDetailComponent,
            SimpleItemListComponent,
            OrderCustomFieldsCardComponent,
            OrderProcessGraphComponent,
            OrderProcessNodeComponent,
            OrderProcessEdgeComponent,
            OrderProcessGraphDialogComponent,
            FulfillmentStateLabelComponent,
            FulfillmentCardComponent,
            OrderEditorComponent,
            OrderTableComponent,
            OrderEditsPreviewDialogComponent,
            ModificationDetailComponent,
            AddManualPaymentDialogComponent,
            OrderStateSelectDialogComponent,
            DraftOrderDetailComponent,
            DraftOrderVariantSelectorComponent,
            SelectCustomerDialogComponent,
            SelectAddressDialogComponent,
            CouponCodeSelectorComponent,
            SelectShippingMethodDialogComponent,
            OrderHistoryEntryHostComponent,
            SellerOrdersCardComponent,
            OrderDataTableComponent,
            OrderTotalColumnComponent,
            PaymentForRefundSelectorComponent,
            OrderModificationSummaryComponent,
            RefundDetailComponent], imports: [SharedModule, i1$1.RouterModule], exports: [OrderCustomFieldsCardComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderModule, providers: [
            {
                provide: ROUTES,
                useFactory: (pageService) => createRoutes(pageService),
                multi: true,
                deps: [PageService],
            },
        ], imports: [SharedModule, RouterModule.forChild([])] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [SharedModule, RouterModule.forChild([])],
                    providers: [
                        {
                            provide: ROUTES,
                            useFactory: (pageService) => createRoutes(pageService),
                            multi: true,
                            deps: [PageService],
                        },
                    ],
                    declarations: [
                        OrderListComponent,
                        OrderDetailComponent,
                        FulfillOrderDialogComponent,
                        LineFulfillmentComponent,
                        RefundOrderDialogComponent,
                        CancelOrderDialogComponent,
                        PaymentStateLabelComponent,
                        LineRefundsComponent,
                        OrderPaymentCardComponent,
                        RefundStateLabelComponent,
                        SettleRefundDialogComponent,
                        OrderHistoryComponent,
                        FulfillmentDetailComponent,
                        PaymentDetailComponent,
                        SimpleItemListComponent,
                        OrderCustomFieldsCardComponent,
                        OrderProcessGraphComponent,
                        OrderProcessNodeComponent,
                        OrderProcessEdgeComponent,
                        OrderProcessGraphDialogComponent,
                        FulfillmentStateLabelComponent,
                        FulfillmentCardComponent,
                        OrderEditorComponent,
                        OrderTableComponent,
                        OrderEditsPreviewDialogComponent,
                        ModificationDetailComponent,
                        AddManualPaymentDialogComponent,
                        OrderStateSelectDialogComponent,
                        DraftOrderDetailComponent,
                        DraftOrderVariantSelectorComponent,
                        SelectCustomerDialogComponent,
                        SelectAddressDialogComponent,
                        CouponCodeSelectorComponent,
                        SelectShippingMethodDialogComponent,
                        OrderHistoryEntryHostComponent,
                        SellerOrdersCardComponent,
                        OrderDataTableComponent,
                        OrderTotalColumnComponent,
                        PaymentForRefundSelectorComponent,
                        OrderModificationSummaryComponent,
                        RefundDetailComponent,
                    ],
                    exports: [OrderCustomFieldsCardComponent],
                }]
        }], ctorParameters: () => [{ type: i1.PageService }] });

// This file was generated by the build-public-api.ts script

/**
 * Generated bundle index. Do not edit.
 */

export { AddManualPaymentDialogComponent, CancelOrderDialogComponent, CouponCodeSelectorComponent, DraftOrderDetailComponent, DraftOrderVariantSelectorComponent, FulfillOrderDialogComponent, FulfillmentCardComponent, FulfillmentDetailComponent, FulfillmentStateLabelComponent, GET_COUPON_CODE_SELECTOR_PROMOTION_LIST, GET_CUSTOMER_ADDRESSES, GET_ORDER_STATE, GET_SELLER_ORDERS, LineFulfillmentComponent, LineRefundsComponent, ModificationDetailComponent, NODE_HEIGHT, ORDER_DETAIL_QUERY, OrderCustomFieldsCardComponent, OrderDataTableComponent, OrderDetailComponent, OrderEditResultType, OrderEditorComponent, OrderEditsPreviewDialogComponent, OrderGuard, OrderHistoryComponent, OrderHistoryEntryHostComponent, OrderListComponent, OrderModificationSummaryComponent, OrderModule, OrderPaymentCardComponent, OrderProcessEdgeComponent, OrderProcessGraphComponent, OrderProcessGraphDialogComponent, OrderProcessNodeComponent, OrderStateSelectDialogComponent, OrderTableComponent, OrderTotalColumnComponent, OrderTransitionService, PaymentDetailComponent, PaymentForRefundSelectorComponent, PaymentStateLabelComponent, RefundDetailComponent, RefundOrderDialogComponent, RefundStateLabelComponent, SET_ORDER_CUSTOMER_MUTATION, SelectAddressDialogComponent, SelectCustomerDialogComponent, SelectShippingMethodDialogComponent, SellerOrdersCardComponent, SettleRefundDialogComponent, SimpleItemListComponent, createRoutes, getRefundablePayments };
//# sourceMappingURL=vendure-admin-ui-order.mjs.map
