import { ChangeDetectorRef, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { ConfigurableOperation, GetEntityDuplicatorsQuery } from '../../../common/generated-types';
import { DataService } from '../../../data/providers/data.service';
import { Dialog } from '../../../providers/modal/modal.types';
import { NotificationService } from '../../../providers/notification/notification.service';
import * as i0 from "@angular/core";
type EntityDuplicatorDef = GetEntityDuplicatorsQuery['entityDuplicators'][0];
export declare class DuplicateEntityDialogComponent<T extends {
    id: string;
}> implements OnInit, Dialog<boolean> {
    private dataService;
    private notificationService;
    private changeDetectorRef;
    resolveWith: (result?: boolean | undefined) => void;
    protected entityDuplicators$: Observable<EntityDuplicatorDef[]>;
    protected selectedDuplicator: EntityDuplicatorDef | undefined;
    protected duplicatorInstance: ConfigurableOperation;
    protected formGroup: FormControl<ConfigurableOperation | null>;
    title?: string;
    entities: T[];
    entityName: string;
    getEntityName: (entity: T) => string;
    constructor(dataService: DataService, notificationService: NotificationService, changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    setSelectedDuplicator(duplicator: EntityDuplicatorDef): void;
    duplicate(): Promise<void>;
    cancel(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DuplicateEntityDialogComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DuplicateEntityDialogComponent<any>, "vdr-duplicate-entity-dialog", never, {}, {}, never, never, false, never>;
}
export {};
