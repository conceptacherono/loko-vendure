import { Injector, OnChanges, SimpleChanges } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject, Observable } from 'rxjs';
import { ActionBarLocationId } from '../../../common/component-registry-types';
import { DataService } from '../../../data/providers/data.service';
import { ActionBarButtonState, ActionBarContext, ActionBarDropdownMenuItem, ActionBarItem } from '../../../providers/nav-builder/nav-builder-types';
import { NavBuilderService } from '../../../providers/nav-builder/nav-builder.service';
import { NotificationService } from '../../../providers/notification/notification.service';
import * as i0 from "@angular/core";
export declare abstract class ActionBarBaseComponent<T extends ActionBarItem | ActionBarDropdownMenuItem> implements OnChanges {
    locationId: ActionBarLocationId;
    items$: Observable<T[]>;
    buttonStates: {
        [id: string]: Observable<ActionBarButtonState>;
    };
    protected locationId$: BehaviorSubject<string>;
    protected navBuilderService: NavBuilderService;
    protected route: ActivatedRoute;
    protected dataService: DataService;
    protected notificationService: NotificationService;
    protected injector: Injector;
    ngOnChanges(changes: SimpleChanges): void;
    handleClick(event: MouseEvent, item: T): void;
    getRouterLink(item: T): any[] | null;
    protected buildButtonStates(items: T[]): void;
    protected createContext(): ActionBarContext;
    static ɵfac: i0.ɵɵFactoryDeclaration<ActionBarBaseComponent<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ActionBarBaseComponent<any>, never, never, { "locationId": { "alias": "locationId"; "required": false; }; }, {}, never, never, false, never>;
}
