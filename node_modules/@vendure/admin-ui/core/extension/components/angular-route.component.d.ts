import { ComponentRef, EventEmitter, OnInit, ViewContainerRef } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @description
 * This component is used internally to allow us to dynamically load a component
 * like with `*ngComponentOutlet`, but with the ability to get a reference to the
 * created ComponentRef. This can then be used to delegate lifecycle events like
 * `canDeactivate` to the loaded component.
 */
export declare class DynamicComponentLoaderComponent implements OnInit {
    private viewContainer;
    componentType: any;
    loaded: EventEmitter<ComponentRef<any>>;
    constructor(viewContainer: ViewContainerRef);
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DynamicComponentLoaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DynamicComponentLoaderComponent, "vdr-dynamic-component-loader", never, { "componentType": { "alias": "componentType"; "required": false; }; }, { "loaded": "loaded"; }, never, never, true, never>;
}
export declare class AngularRouteComponent {
    protected component: import("@angular/core").Type<any>;
    protected componentRef: ComponentRef<any>;
    componentLoaded(componentRef: ComponentRef<any>): void;
    canDeactivate(): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<AngularRouteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AngularRouteComponent, "vdr-angular-route-component", never, {}, {}, never, never, true, never>;
}
