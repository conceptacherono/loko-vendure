import React, { forwardRef, useEffect, useState, } from 'react';
import { useRichTextEditor } from '../react-hooks/use-rich-text-editor';
/**
 * @description
 * A rich text editor component which uses ProseMirror (rich text editor) under the hood.
 *
 * @example
 * ```ts
 * import { RichTextEditor } from '@vendure/admin-ui/react';
 * import React from 'react';
 *
 * export function MyComponent() {
 *   const onSubmit = async (e: React.FormEvent) => {
 *     e.preventDefault();
 *     const form = new FormData(e.target as HTMLFormElement);
 *     const content = form.get("content");
 *     console.log(content);
 *   };
 *
 *   return (
 *     <form className="w-full" onSubmit={onSubmit}>
 *       <RichTextEditor
 *         name="content"
 *         readOnly={false}
 *         onMount={(e) => console.log("Mounted", e)}
 *       />
 *       <button type="submit" className="btn btn-primary">
 *         Submit
 *       </button>
 *     </form>
 *   );
 * }
 * ```
 *
 * @docsCategory react-components
 */
export const RichTextEditor = forwardRef((props, ref) => {
    const [data, setData] = useState('');
    const { readOnly, label, ...rest } = props;
    const { ref: _ref, editor } = useRichTextEditor({
        attributes: props.attributes,
        isReadOnly: () => readOnly || false,
        onTextInput: text => {
            setData(text);
            if (props.onChange) {
                props.onChange({
                    target: { value: text },
                });
            }
            if (ref && 'current' in ref && ref.current) {
                ref.current.value = text;
                const event = new Event('input', {
                    bubbles: true,
                    cancelable: true,
                });
                ref.current.dispatchEvent(event);
            }
        },
    });
    useEffect(() => {
        if (props.onMount && editor) {
            props.onMount(editor);
        }
        if (typeof props.defaultValue === 'string') {
            editor.update(props.defaultValue);
        }
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { ref: _ref, ...rest }, label && React.createElement("label", { className: "rich-text-label" }, label)),
        React.createElement("input", { type: "hidden", value: data, ref: ref })));
});
RichTextEditor.displayName = 'RichTextEditor';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmljaFRleHRFZGl0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3JlYWN0L3NyYy9yZWFjdC1jb21wb25lbnRzL1JpY2hUZXh0RWRpdG9yLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUlWLFVBQVUsRUFDVixTQUFTLEVBQ1QsUUFBUSxHQUNYLE1BQU0sT0FBTyxDQUFDO0FBRWYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFnQnhFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQ0c7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLENBQUMsS0FBeUIsRUFBRSxHQUFtQyxFQUFFLEVBQUU7SUFDeEcsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxRQUFRLENBQVMsRUFBRSxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDM0MsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsaUJBQWlCLENBQUM7UUFDNUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1FBQzVCLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLElBQUksS0FBSztRQUNuQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2QsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ2pCLEtBQUssQ0FBQyxRQUFRLENBQUM7b0JBQ1gsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtpQkFDTyxDQUFDLENBQUM7WUFDeEMsQ0FBQztZQUNELElBQUksR0FBRyxJQUFJLFNBQVMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUN6QyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3pCLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtvQkFDN0IsT0FBTyxFQUFFLElBQUk7b0JBQ2IsVUFBVSxFQUFFLElBQUk7aUJBQ25CLENBQUMsQ0FBQztnQkFDSCxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQyxDQUFDO1FBQ0wsQ0FBQztLQUNKLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWCxJQUFJLEtBQUssQ0FBQyxPQUFPLElBQUksTUFBTSxFQUFFLENBQUM7WUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQixDQUFDO1FBQ0QsSUFBSSxPQUFPLEtBQUssQ0FBQyxZQUFZLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDekMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdEMsQ0FBQztJQUNMLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNQLE9BQU8sQ0FDSDtRQUNJLDZCQUFLLEdBQUcsRUFBRSxJQUFJLEtBQU0sSUFBSSxJQUNuQixLQUFLLElBQUksK0JBQU8sU0FBUyxFQUFDLGlCQUFpQixJQUFFLEtBQUssQ0FBUyxDQUMxRDtRQUNOLCtCQUFPLElBQUksRUFBQyxRQUFRLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFJLENBQy9DLENBQ04sQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsY0FBYyxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xyXG4gICAgQ2hhbmdlRXZlbnQsXHJcbiAgICBGb3J3YXJkZWRSZWYsXHJcbiAgICBJbnB1dEhUTUxBdHRyaWJ1dGVzLFxyXG4gICAgZm9yd2FyZFJlZixcclxuICAgIHVzZUVmZmVjdCxcclxuICAgIHVzZVN0YXRlLFxyXG59IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgUHJvc2VtaXJyb3JTZXJ2aWNlIH0gZnJvbSAnQHZlbmR1cmUvYWRtaW4tdWkvY29yZSc7XHJcbmltcG9ydCB7IHVzZVJpY2hUZXh0RWRpdG9yIH0gZnJvbSAnLi4vcmVhY3QtaG9va3MvdXNlLXJpY2gtdGV4dC1lZGl0b3InO1xyXG5cclxuZXhwb3J0IHR5cGUgUmljaFRleHRFZGl0b3JUeXBlID0gSW5wdXRIVE1MQXR0cmlidXRlczxIVE1MSW5wdXRFbGVtZW50PiAmIHtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb250cm9sIHRoZSBET00gYXR0cmlidXRlcyBvZiB0aGUgZWRpdGFibGUgZWxlbWVudC4gTWF5IGJlIGVpdGhlciBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiBnb2luZyBmcm9tIGFuIGVkaXRvciBzdGF0ZSB0byBhbiBvYmplY3QuXHJcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCB3aWxsIGdldCBhIGNsYXNzIFwiUHJvc2VNaXJyb3JcIiwgYW5kIHdpbGwgaGF2ZSBpdHMgY29udGVudEVkaXRhYmxlIGF0dHJpYnV0ZSBkZXRlcm1pbmVkIGJ5IHRoZSBlZGl0YWJsZSBwcm9wLlxyXG4gICAgICogQWRkaXRpb25hbCBjbGFzc2VzIHByb3ZpZGVkIGhlcmUgd2lsbCBiZSBhZGRlZCB0byB0aGUgY2xhc3MuIEZvciBvdGhlciBhdHRyaWJ1dGVzLCB0aGUgdmFsdWUgcHJvdmlkZWQgZmlyc3QgKGFzIGluIHNvbWVQcm9wKSB3aWxsIGJlIHVzZWQuXHJcbiAgICAgKiBDb3BpZWQgZnJvbSByZWFsIHByb3BlcnR5IGRlc2NyaXB0aW9uLlxyXG4gICAgICovXHJcbiAgICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcclxuICAgIGxhYmVsPzogc3RyaW5nO1xyXG4gICAgcmVhZE9ubHk/OiBib29sZWFuO1xyXG4gICAgb25Nb3VudD86IChlZGl0b3I6IFByb3NlbWlycm9yU2VydmljZSkgPT4gdm9pZDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSByaWNoIHRleHQgZWRpdG9yIGNvbXBvbmVudCB3aGljaCB1c2VzIFByb3NlTWlycm9yIChyaWNoIHRleHQgZWRpdG9yKSB1bmRlciB0aGUgaG9vZC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgdHNcclxuICogaW1wb3J0IHsgUmljaFRleHRFZGl0b3IgfSBmcm9tICdAdmVuZHVyZS9hZG1pbi11aS9yZWFjdCc7XHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbiAqXHJcbiAqIGV4cG9ydCBmdW5jdGlvbiBNeUNvbXBvbmVudCgpIHtcclxuICogICBjb25zdCBvblN1Ym1pdCA9IGFzeW5jIChlOiBSZWFjdC5Gb3JtRXZlbnQpID0+IHtcclxuICogICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICogICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoZS50YXJnZXQgYXMgSFRNTEZvcm1FbGVtZW50KTtcclxuICogICAgIGNvbnN0IGNvbnRlbnQgPSBmb3JtLmdldChcImNvbnRlbnRcIik7XHJcbiAqICAgICBjb25zb2xlLmxvZyhjb250ZW50KTtcclxuICogICB9O1xyXG4gKlxyXG4gKiAgIHJldHVybiAoXHJcbiAqICAgICA8Zm9ybSBjbGFzc05hbWU9XCJ3LWZ1bGxcIiBvblN1Ym1pdD17b25TdWJtaXR9PlxyXG4gKiAgICAgICA8UmljaFRleHRFZGl0b3JcclxuICogICAgICAgICBuYW1lPVwiY29udGVudFwiXHJcbiAqICAgICAgICAgcmVhZE9ubHk9e2ZhbHNlfVxyXG4gKiAgICAgICAgIG9uTW91bnQ9eyhlKSA9PiBjb25zb2xlLmxvZyhcIk1vdW50ZWRcIiwgZSl9XHJcbiAqICAgICAgIC8+XHJcbiAqICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeVwiPlxyXG4gKiAgICAgICAgIFN1Ym1pdFxyXG4gKiAgICAgICA8L2J1dHRvbj5cclxuICogICAgIDwvZm9ybT5cclxuICogICApO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZG9jc0NhdGVnb3J5IHJlYWN0LWNvbXBvbmVudHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBSaWNoVGV4dEVkaXRvciA9IGZvcndhcmRSZWYoKHByb3BzOiBSaWNoVGV4dEVkaXRvclR5cGUsIHJlZjogRm9yd2FyZGVkUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XHJcbiAgICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcclxuICAgIGNvbnN0IHsgcmVhZE9ubHksIGxhYmVsLCAuLi5yZXN0IH0gPSBwcm9wcztcclxuICAgIGNvbnN0IHsgcmVmOiBfcmVmLCBlZGl0b3IgfSA9IHVzZVJpY2hUZXh0RWRpdG9yKHtcclxuICAgICAgICBhdHRyaWJ1dGVzOiBwcm9wcy5hdHRyaWJ1dGVzLFxyXG4gICAgICAgIGlzUmVhZE9ubHk6ICgpID0+IHJlYWRPbmx5IHx8IGZhbHNlLFxyXG4gICAgICAgIG9uVGV4dElucHV0OiB0ZXh0ID0+IHtcclxuICAgICAgICAgICAgc2V0RGF0YSh0ZXh0KTtcclxuICAgICAgICAgICAgaWYgKHByb3BzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wcy5vbkNoYW5nZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB7IHZhbHVlOiB0ZXh0IH0sXHJcbiAgICAgICAgICAgICAgICB9IGFzIENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmVmICYmICdjdXJyZW50JyBpbiByZWYgJiYgcmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJlZi5jdXJyZW50LnZhbHVlID0gdGV4dDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KCdpbnB1dCcsIHtcclxuICAgICAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJlZi5jdXJyZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHByb3BzLm9uTW91bnQgJiYgZWRpdG9yKSB7XHJcbiAgICAgICAgICAgIHByb3BzLm9uTW91bnQoZWRpdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wcy5kZWZhdWx0VmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGVkaXRvci51cGRhdGUocHJvcHMuZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbXSk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxkaXYgcmVmPXtfcmVmfSB7Li4ucmVzdH0+XHJcbiAgICAgICAgICAgICAgICB7bGFiZWwgJiYgPGxhYmVsIGNsYXNzTmFtZT1cInJpY2gtdGV4dC1sYWJlbFwiPntsYWJlbH08L2xhYmVsPn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9e2RhdGF9IHJlZj17cmVmfSAvPlxyXG4gICAgICAgIDwvPlxyXG4gICAgKTtcclxufSk7XHJcblxyXG5SaWNoVGV4dEVkaXRvci5kaXNwbGF5TmFtZSA9ICdSaWNoVGV4dEVkaXRvcic7XHJcbiJdfQ==