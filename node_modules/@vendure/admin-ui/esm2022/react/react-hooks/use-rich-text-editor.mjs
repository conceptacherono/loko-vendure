import { useEffect, useRef } from 'react';
import { Injector } from '@angular/core';
import { ProsemirrorService, ContextMenuService } from '@vendure/admin-ui/core';
import { useInjector } from './use-injector';
/**
 * @description
 * Provides access to the ProseMirror (rich text editor) instance.
 *
 * @example
 * ```ts
 * import { useRichTextEditor } from '\@vendure/admin-ui/react';
 * import React from 'react';
 *
 * export function Component() {
 *     const { ref, editor } = useRichTextEditor({
 *        attributes: { class: '' },
 *        onTextInput: (text) => console.log(text),
 *        isReadOnly: () => false,
 *     });
 *
 *     return <div className="w-full" ref={ref} />
 * }
 * ```
 *
 * @docsCategory react-hooks
 */
export const useRichTextEditor = ({ attributes, onTextInput, isReadOnly }) => {
    const injector = useInjector(Injector);
    const ref = useRef(null);
    const prosemirror = new ProsemirrorService(injector, useInjector(ContextMenuService));
    useEffect(() => {
        if (!ref.current)
            return;
        prosemirror.createEditorView({
            element: ref.current,
            isReadOnly,
            onTextInput,
        });
        const readOnly = isReadOnly();
        prosemirror.editorView.setProps({
            attributes,
            editable: readOnly ? () => false : () => true,
        });
        return () => {
            prosemirror.destroy();
        };
    }, [ref.current]);
    return { ref, editor: prosemirror };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJpY2gtdGV4dC1lZGl0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3JlYWN0L3NyYy9yZWFjdC1ob29rcy91c2UtcmljaC10ZXh0LWVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUMxQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBMkIsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFhN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBNEIsRUFBRSxFQUFFO0lBQ25HLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQWlCLElBQUksQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sV0FBVyxHQUFHLElBQUksa0JBQWtCLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7SUFFdEYsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTztZQUFFLE9BQU87UUFDekIsV0FBVyxDQUFDLGdCQUFnQixDQUFDO1lBQ3pCLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztZQUNwQixVQUFVO1lBQ1YsV0FBVztTQUNkLENBQUMsQ0FBQztRQUNILE1BQU0sUUFBUSxHQUFHLFVBQVUsRUFBRSxDQUFDO1FBQzlCLFdBQVcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQzVCLFVBQVU7WUFDVixRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUk7U0FDaEQsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLEVBQUU7WUFDUixXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFFbEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUM7QUFDeEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBDcmVhdGVFZGl0b3JWaWV3T3B0aW9ucywgUHJvc2VtaXJyb3JTZXJ2aWNlLCBDb250ZXh0TWVudVNlcnZpY2UgfSBmcm9tICdAdmVuZHVyZS9hZG1pbi11aS9jb3JlJztcclxuaW1wb3J0IHsgdXNlSW5qZWN0b3IgfSBmcm9tICcuL3VzZS1pbmplY3Rvcic7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIHVzZVJpY2hUZXh0RWRpdG9yT3B0aW9ucyBleHRlbmRzIE9taXQ8Q3JlYXRlRWRpdG9yVmlld09wdGlvbnMsICdlbGVtZW50Jz4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbnRyb2wgdGhlIERPTSBhdHRyaWJ1dGVzIG9mIHRoZSBlZGl0YWJsZSBlbGVtZW50LiBNYXkgYmUgZWl0aGVyIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uIGdvaW5nIGZyb20gYW4gZWRpdG9yIHN0YXRlIHRvIGFuIG9iamVjdC5cclxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBlbGVtZW50IHdpbGwgZ2V0IGEgY2xhc3MgXCJQcm9zZU1pcnJvclwiLCBhbmQgd2lsbCBoYXZlIGl0cyBjb250ZW50RWRpdGFibGUgYXR0cmlidXRlIGRldGVybWluZWQgYnkgdGhlIGVkaXRhYmxlIHByb3AuXHJcbiAgICAgKiBBZGRpdGlvbmFsIGNsYXNzZXMgcHJvdmlkZWQgaGVyZSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBjbGFzcy4gRm9yIG90aGVyIGF0dHJpYnV0ZXMsIHRoZSB2YWx1ZSBwcm92aWRlZCBmaXJzdCAoYXMgaW4gc29tZVByb3ApIHdpbGwgYmUgdXNlZC5cclxuICAgICAqIENvcGllZCBmcm9tIHJlYWwgcHJvcGVydHkgZGVzY3JpcHRpb24uXHJcbiAgICAgKi9cclxuICAgIGF0dHJpYnV0ZXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xyXG59XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgUHJvc2VNaXJyb3IgKHJpY2ggdGV4dCBlZGl0b3IpIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGB0c1xyXG4gKiBpbXBvcnQgeyB1c2VSaWNoVGV4dEVkaXRvciB9IGZyb20gJ1xcQHZlbmR1cmUvYWRtaW4tdWkvcmVhY3QnO1xyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG4gKlxyXG4gKiBleHBvcnQgZnVuY3Rpb24gQ29tcG9uZW50KCkge1xyXG4gKiAgICAgY29uc3QgeyByZWYsIGVkaXRvciB9ID0gdXNlUmljaFRleHRFZGl0b3Ioe1xyXG4gKiAgICAgICAgYXR0cmlidXRlczogeyBjbGFzczogJycgfSxcclxuICogICAgICAgIG9uVGV4dElucHV0OiAodGV4dCkgPT4gY29uc29sZS5sb2codGV4dCksXHJcbiAqICAgICAgICBpc1JlYWRPbmx5OiAoKSA9PiBmYWxzZSxcclxuICogICAgIH0pO1xyXG4gKlxyXG4gKiAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsXCIgcmVmPXtyZWZ9IC8+XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBkb2NzQ2F0ZWdvcnkgcmVhY3QtaG9va3NcclxuICovXHJcbmV4cG9ydCBjb25zdCB1c2VSaWNoVGV4dEVkaXRvciA9ICh7IGF0dHJpYnV0ZXMsIG9uVGV4dElucHV0LCBpc1JlYWRPbmx5IH06IHVzZVJpY2hUZXh0RWRpdG9yT3B0aW9ucykgPT4ge1xyXG4gICAgY29uc3QgaW5qZWN0b3IgPSB1c2VJbmplY3RvcihJbmplY3Rvcik7XHJcbiAgICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG4gICAgY29uc3QgcHJvc2VtaXJyb3IgPSBuZXcgUHJvc2VtaXJyb3JTZXJ2aWNlKGluamVjdG9yLCB1c2VJbmplY3RvcihDb250ZXh0TWVudVNlcnZpY2UpKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmICghcmVmLmN1cnJlbnQpIHJldHVybjtcclxuICAgICAgICBwcm9zZW1pcnJvci5jcmVhdGVFZGl0b3JWaWV3KHtcclxuICAgICAgICAgICAgZWxlbWVudDogcmVmLmN1cnJlbnQsXHJcbiAgICAgICAgICAgIGlzUmVhZE9ubHksXHJcbiAgICAgICAgICAgIG9uVGV4dElucHV0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHJlYWRPbmx5ID0gaXNSZWFkT25seSgpO1xyXG4gICAgICAgIHByb3NlbWlycm9yLmVkaXRvclZpZXcuc2V0UHJvcHMoe1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICBlZGl0YWJsZTogcmVhZE9ubHkgPyAoKSA9PiBmYWxzZSA6ICgpID0+IHRydWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgcHJvc2VtaXJyb3IuZGVzdHJveSgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9LCBbcmVmLmN1cnJlbnRdKTtcclxuXHJcbiAgICByZXR1cm4geyByZWYsIGVkaXRvcjogcHJvc2VtaXJyb3IgfTtcclxufTtcclxuIl19