import { createBulkAssignToChannelAction, AssignPaymentMethodsToChannelDocument, RemovePaymentMethodsFromChannelDocument, createBulkDeleteAction, createBulkRemoveFromChannelAction, Permission, } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import { map } from 'rxjs/operators';
export const deletePaymentMethodsBulkAction = createBulkDeleteAction({
    location: 'payment-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeletePaymentMethod) ||
        userPermissions.includes(Permission.DeleteSettings),
    getItemName: item => item.name,
    shouldRetryItem: (response, item) => !!response.message,
    bulkDelete: (dataService, ids, retrying) => dataService.settings.deletePaymentMethods(ids, retrying).pipe(map(res => res.deletePaymentMethods)),
});
const ASSIGN_PAYMENT_METHODS_TO_CHANNEL = gql `
    mutation AssignPaymentMethodsToChannel($input: AssignPaymentMethodsToChannelInput!) {
        assignPaymentMethodsToChannel(input: $input) {
            id
            name
        }
    }
`;
const REMOVE_PAYMENT_METHODS_FROM_CHANNEL = gql `
    mutation RemovePaymentMethodsFromChannel($input: RemovePaymentMethodsFromChannelInput!) {
        removePaymentMethodsFromChannel(input: $input) {
            id
            name
        }
    }
`;
export const assignPaymentMethodsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'payment-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdatePaymentMethod) ||
        userPermissions.includes(Permission.UpdateSettings),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, paymentMethodIds, channelIds) => channelIds.map(channelId => dataService
        .mutate(AssignPaymentMethodsToChannelDocument, {
        input: {
            channelId,
            paymentMethodIds,
        },
    })
        .pipe(map(res => res.assignPaymentMethodsToChannel))),
});
export const removePaymentMethodsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'payment-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeletePaymentMethod) ||
        userPermissions.includes(Permission.DeleteSettings),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, paymentMethodIds, channelId) => dataService
        .mutate(RemovePaymentMethodsFromChannelDocument, {
        input: {
            channelId,
            paymentMethodIds,
        },
    })
        .pipe(map(res => res.removePaymentMethodsFromChannel)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1tZXRob2QtbGlzdC1idWxrLWFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3NldHRpbmdzL3NyYy9jb21wb25lbnRzL3BheW1lbnQtbWV0aG9kLWxpc3QvcGF5bWVudC1tZXRob2QtbGlzdC1idWxrLWFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILCtCQUErQixFQUMvQixxQ0FBcUMsRUFDckMsdUNBQXVDLEVBQ3ZDLHNCQUFzQixFQUN0QixpQ0FBaUMsRUFHakMsVUFBVSxHQUNiLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxzQkFBc0IsQ0FFbEU7SUFDRSxRQUFRLEVBQUUscUJBQXFCO0lBQy9CLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQ2xDLGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDO1FBQ3hELGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztJQUN2RCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSTtJQUM5QixlQUFlLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU87SUFDdkQsVUFBVSxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUN2QyxXQUFXLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Q0FDMUcsQ0FBQyxDQUFDO0FBRUgsTUFBTSxpQ0FBaUMsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Q0FPNUMsQ0FBQztBQUVGLE1BQU0sbUNBQW1DLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBTzlDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSx1Q0FBdUMsR0FBRywrQkFBK0IsQ0FFcEY7SUFDRSxRQUFRLEVBQUUscUJBQXFCO0lBQy9CLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQ2xDLGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDO1FBQ3hELGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztJQUN2RCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSTtJQUM5QixtQkFBbUIsRUFBRSxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUMvRCxVQUFVLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQ3ZCLFdBQVc7U0FDTixNQUFNLENBQUMscUNBQXFDLEVBQUU7UUFDM0MsS0FBSyxFQUFFO1lBQ0gsU0FBUztZQUNULGdCQUFnQjtTQUNuQjtLQUNKLENBQUM7U0FDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FDM0Q7Q0FDUixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBRyxpQ0FBaUMsQ0FFeEY7SUFDRSxRQUFRLEVBQUUscUJBQXFCO0lBQy9CLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQ2xDLGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDO1FBQ3hELGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztJQUN2RCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSTtJQUM5QixxQkFBcUIsRUFBRSxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUNoRSxXQUFXO1NBQ04sTUFBTSxDQUFDLHVDQUF1QyxFQUFFO1FBQzdDLEtBQUssRUFBRTtZQUNILFNBQVM7WUFDVCxnQkFBZ0I7U0FDbkI7S0FDSixDQUFDO1NBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0NBQ2pFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBjcmVhdGVCdWxrQXNzaWduVG9DaGFubmVsQWN0aW9uLFxyXG4gICAgQXNzaWduUGF5bWVudE1ldGhvZHNUb0NoYW5uZWxEb2N1bWVudCxcclxuICAgIFJlbW92ZVBheW1lbnRNZXRob2RzRnJvbUNoYW5uZWxEb2N1bWVudCxcclxuICAgIGNyZWF0ZUJ1bGtEZWxldGVBY3Rpb24sXHJcbiAgICBjcmVhdGVCdWxrUmVtb3ZlRnJvbUNoYW5uZWxBY3Rpb24sXHJcbiAgICBHZXRQYXltZW50TWV0aG9kTGlzdFF1ZXJ5LFxyXG4gICAgSXRlbU9mLFxyXG4gICAgUGVybWlzc2lvbixcclxufSBmcm9tICdAdmVuZHVyZS9hZG1pbi11aS9jb3JlJztcclxuaW1wb3J0IHsgZ3FsIH0gZnJvbSAnYXBvbGxvLWFuZ3VsYXInO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5leHBvcnQgY29uc3QgZGVsZXRlUGF5bWVudE1ldGhvZHNCdWxrQWN0aW9uID0gY3JlYXRlQnVsa0RlbGV0ZUFjdGlvbjxcclxuICAgIEl0ZW1PZjxHZXRQYXltZW50TWV0aG9kTGlzdFF1ZXJ5LCAncGF5bWVudE1ldGhvZHMnPlxyXG4+KHtcclxuICAgIGxvY2F0aW9uOiAncGF5bWVudC1tZXRob2QtbGlzdCcsXHJcbiAgICByZXF1aXJlc1Blcm1pc3Npb246IHVzZXJQZXJtaXNzaW9ucyA9PlxyXG4gICAgICAgIHVzZXJQZXJtaXNzaW9ucy5pbmNsdWRlcyhQZXJtaXNzaW9uLkRlbGV0ZVBheW1lbnRNZXRob2QpIHx8XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uRGVsZXRlU2V0dGluZ3MpLFxyXG4gICAgZ2V0SXRlbU5hbWU6IGl0ZW0gPT4gaXRlbS5uYW1lLFxyXG4gICAgc2hvdWxkUmV0cnlJdGVtOiAocmVzcG9uc2UsIGl0ZW0pID0+ICEhcmVzcG9uc2UubWVzc2FnZSxcclxuICAgIGJ1bGtEZWxldGU6IChkYXRhU2VydmljZSwgaWRzLCByZXRyeWluZykgPT5cclxuICAgICAgICBkYXRhU2VydmljZS5zZXR0aW5ncy5kZWxldGVQYXltZW50TWV0aG9kcyhpZHMsIHJldHJ5aW5nKS5waXBlKG1hcChyZXMgPT4gcmVzLmRlbGV0ZVBheW1lbnRNZXRob2RzKSksXHJcbn0pO1xyXG5cclxuY29uc3QgQVNTSUdOX1BBWU1FTlRfTUVUSE9EU19UT19DSEFOTkVMID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gQXNzaWduUGF5bWVudE1ldGhvZHNUb0NoYW5uZWwoJGlucHV0OiBBc3NpZ25QYXltZW50TWV0aG9kc1RvQ2hhbm5lbElucHV0ISkge1xyXG4gICAgICAgIGFzc2lnblBheW1lbnRNZXRob2RzVG9DaGFubmVsKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFJFTU9WRV9QQVlNRU5UX01FVEhPRFNfRlJPTV9DSEFOTkVMID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gUmVtb3ZlUGF5bWVudE1ldGhvZHNGcm9tQ2hhbm5lbCgkaW5wdXQ6IFJlbW92ZVBheW1lbnRNZXRob2RzRnJvbUNoYW5uZWxJbnB1dCEpIHtcclxuICAgICAgICByZW1vdmVQYXltZW50TWV0aG9kc0Zyb21DaGFubmVsKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuZXhwb3J0IGNvbnN0IGFzc2lnblBheW1lbnRNZXRob2RzVG9DaGFubmVsQnVsa0FjdGlvbiA9IGNyZWF0ZUJ1bGtBc3NpZ25Ub0NoYW5uZWxBY3Rpb248XHJcbiAgICBJdGVtT2Y8R2V0UGF5bWVudE1ldGhvZExpc3RRdWVyeSwgJ3BheW1lbnRNZXRob2RzJz5cclxuPih7XHJcbiAgICBsb2NhdGlvbjogJ3BheW1lbnQtbWV0aG9kLWxpc3QnLFxyXG4gICAgcmVxdWlyZXNQZXJtaXNzaW9uOiB1c2VyUGVybWlzc2lvbnMgPT5cclxuICAgICAgICB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5VcGRhdGVQYXltZW50TWV0aG9kKSB8fFxyXG4gICAgICAgIHVzZXJQZXJtaXNzaW9ucy5pbmNsdWRlcyhQZXJtaXNzaW9uLlVwZGF0ZVNldHRpbmdzKSxcclxuICAgIGdldEl0ZW1OYW1lOiBpdGVtID0+IGl0ZW0ubmFtZSxcclxuICAgIGJ1bGtBc3NpZ25Ub0NoYW5uZWw6IChkYXRhU2VydmljZSwgcGF5bWVudE1ldGhvZElkcywgY2hhbm5lbElkcykgPT5cclxuICAgICAgICBjaGFubmVsSWRzLm1hcChjaGFubmVsSWQgPT5cclxuICAgICAgICAgICAgZGF0YVNlcnZpY2VcclxuICAgICAgICAgICAgICAgIC5tdXRhdGUoQXNzaWduUGF5bWVudE1ldGhvZHNUb0NoYW5uZWxEb2N1bWVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZElkcyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5waXBlKG1hcChyZXMgPT4gcmVzLmFzc2lnblBheW1lbnRNZXRob2RzVG9DaGFubmVsKSksXHJcbiAgICAgICAgKSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlUGF5bWVudE1ldGhvZHNGcm9tQ2hhbm5lbEJ1bGtBY3Rpb24gPSBjcmVhdGVCdWxrUmVtb3ZlRnJvbUNoYW5uZWxBY3Rpb248XHJcbiAgICBJdGVtT2Y8R2V0UGF5bWVudE1ldGhvZExpc3RRdWVyeSwgJ3BheW1lbnRNZXRob2RzJz5cclxuPih7XHJcbiAgICBsb2NhdGlvbjogJ3BheW1lbnQtbWV0aG9kLWxpc3QnLFxyXG4gICAgcmVxdWlyZXNQZXJtaXNzaW9uOiB1c2VyUGVybWlzc2lvbnMgPT5cclxuICAgICAgICB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5EZWxldGVQYXltZW50TWV0aG9kKSB8fFxyXG4gICAgICAgIHVzZXJQZXJtaXNzaW9ucy5pbmNsdWRlcyhQZXJtaXNzaW9uLkRlbGV0ZVNldHRpbmdzKSxcclxuICAgIGdldEl0ZW1OYW1lOiBpdGVtID0+IGl0ZW0ubmFtZSxcclxuICAgIGJ1bGtSZW1vdmVGcm9tQ2hhbm5lbDogKGRhdGFTZXJ2aWNlLCBwYXltZW50TWV0aG9kSWRzLCBjaGFubmVsSWQpID0+XHJcbiAgICAgICAgZGF0YVNlcnZpY2VcclxuICAgICAgICAgICAgLm11dGF0ZShSZW1vdmVQYXltZW50TWV0aG9kc0Zyb21DaGFubmVsRG9jdW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbElkLFxyXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2RJZHMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucGlwZShtYXAocmVzID0+IHJlcy5yZW1vdmVQYXltZW50TWV0aG9kc0Zyb21DaGFubmVsKSksXHJcbn0pO1xyXG4iXX0=