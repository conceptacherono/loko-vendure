import { createBulkAssignToChannelAction, createBulkDeleteAction, createBulkRemoveFromChannelAction, Permission, AssignShippingMethodsToChannelDocument, RemoveShippingMethodsFromChannelDocument, } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import { map } from 'rxjs/operators';
export const deleteShippingMethodsBulkAction = createBulkDeleteAction({
    location: 'shipping-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteShippingMethod),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.shippingMethod.deleteShippingMethods(ids).pipe(map(res => res.deleteShippingMethods)),
});
const ASSIGN_SHIPPING_METHODS_TO_CHANNEL = gql `
    mutation AssignShippingMethodsToChannel($input: AssignShippingMethodsToChannelInput!) {
        assignShippingMethodsToChannel(input: $input) {
            id
            name
        }
    }
`;
const REMOVE_SHIPPING_METHODS_FROM_CHANNEL = gql `
    mutation RemoveShippingMethodsFromChannel($input: RemoveShippingMethodsFromChannelInput!) {
        removeShippingMethodsFromChannel(input: $input) {
            id
            name
        }
    }
`;
export const assignShippingMethodsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'shipping-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateShippingMethod) ||
        userPermissions.includes(Permission.UpdateSettings),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, shippingMethodIds, channelIds) => channelIds.map(channelId => dataService
        .mutate(AssignShippingMethodsToChannelDocument, {
        input: {
            channelId,
            shippingMethodIds,
        },
    })
        .pipe(map(res => res.assignShippingMethodsToChannel))),
});
export const removeShippingMethodsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'shipping-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteShippingMethod) ||
        userPermissions.includes(Permission.DeleteSettings),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, shippingMethodIds, channelId) => dataService
        .mutate(RemoveShippingMethodsFromChannelDocument, {
        input: {
            channelId,
            shippingMethodIds,
        },
    })
        .pipe(map(res => res.removeShippingMethodsFromChannel)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hpcHBpbmctbWV0aG9kLWxpc3QtYnVsay1hY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXR0aW5ncy9zcmMvY29tcG9uZW50cy9zaGlwcGluZy1tZXRob2QtbGlzdC9zaGlwcGluZy1tZXRob2QtbGlzdC1idWxrLWFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILCtCQUErQixFQUMvQixzQkFBc0IsRUFDdEIsaUNBQWlDLEVBSWpDLFVBQVUsRUFDVixzQ0FBc0MsRUFDdEMsd0NBQXdDLEdBQzNDLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRyxzQkFBc0IsQ0FFbkU7SUFDRSxRQUFRLEVBQUUsc0JBQXNCO0lBQ2hDLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUM7SUFDaEcsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUk7SUFDOUIsVUFBVSxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQzdCLFdBQVcsQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0NBQ3hHLENBQUMsQ0FBQztBQUVILE1BQU0sa0NBQWtDLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBTzdDLENBQUM7QUFFRixNQUFNLG9DQUFvQyxHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU8vQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQUcsK0JBQStCLENBRXJGO0lBQ0UsUUFBUSxFQUFFLHNCQUFzQjtJQUNoQyxrQkFBa0IsRUFBRSxlQUFlLENBQUMsRUFBRSxDQUNsQyxlQUFlLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztRQUN6RCxlQUFlLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUM7SUFDdkQsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUk7SUFDOUIsbUJBQW1CLEVBQUUsQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FDaEUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUN2QixXQUFXO1NBQ04sTUFBTSxDQUFDLHNDQUFzQyxFQUFFO1FBQzVDLEtBQUssRUFBRTtZQUNILFNBQVM7WUFDVCxpQkFBaUI7U0FDcEI7S0FDSixDQUFDO1NBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQzVEO0NBQ1IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sMENBQTBDLEdBQUcsaUNBQWlDLENBRXpGO0lBQ0UsUUFBUSxFQUFFLHNCQUFzQjtJQUNoQyxrQkFBa0IsRUFBRSxlQUFlLENBQUMsRUFBRSxDQUNsQyxlQUFlLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztRQUN6RCxlQUFlLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUM7SUFDdkQsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUk7SUFDOUIscUJBQXFCLEVBQUUsQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FDakUsV0FBVztTQUNOLE1BQU0sQ0FBQyx3Q0FBd0MsRUFBRTtRQUM5QyxLQUFLLEVBQUU7WUFDSCxTQUFTO1lBQ1QsaUJBQWlCO1NBQ3BCO0tBQ0osQ0FBQztTQUNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztDQUNsRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgY3JlYXRlQnVsa0Fzc2lnblRvQ2hhbm5lbEFjdGlvbixcclxuICAgIGNyZWF0ZUJ1bGtEZWxldGVBY3Rpb24sXHJcbiAgICBjcmVhdGVCdWxrUmVtb3ZlRnJvbUNoYW5uZWxBY3Rpb24sXHJcbiAgICBHZXRTaGlwcGluZ01ldGhvZExpc3RRdWVyeSxcclxuICAgIEdldFJvbGVzUXVlcnksXHJcbiAgICBJdGVtT2YsXHJcbiAgICBQZXJtaXNzaW9uLFxyXG4gICAgQXNzaWduU2hpcHBpbmdNZXRob2RzVG9DaGFubmVsRG9jdW1lbnQsXHJcbiAgICBSZW1vdmVTaGlwcGluZ01ldGhvZHNGcm9tQ2hhbm5lbERvY3VtZW50LFxyXG59IGZyb20gJ0B2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xyXG5pbXBvcnQgeyBncWwgfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmV4cG9ydCBjb25zdCBkZWxldGVTaGlwcGluZ01ldGhvZHNCdWxrQWN0aW9uID0gY3JlYXRlQnVsa0RlbGV0ZUFjdGlvbjxcclxuICAgIEl0ZW1PZjxHZXRTaGlwcGluZ01ldGhvZExpc3RRdWVyeSwgJ3NoaXBwaW5nTWV0aG9kcyc+XHJcbj4oe1xyXG4gICAgbG9jYXRpb246ICdzaGlwcGluZy1tZXRob2QtbGlzdCcsXHJcbiAgICByZXF1aXJlc1Blcm1pc3Npb246IHVzZXJQZXJtaXNzaW9ucyA9PiB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5EZWxldGVTaGlwcGluZ01ldGhvZCksXHJcbiAgICBnZXRJdGVtTmFtZTogaXRlbSA9PiBpdGVtLm5hbWUsXHJcbiAgICBidWxrRGVsZXRlOiAoZGF0YVNlcnZpY2UsIGlkcykgPT5cclxuICAgICAgICBkYXRhU2VydmljZS5zaGlwcGluZ01ldGhvZC5kZWxldGVTaGlwcGluZ01ldGhvZHMoaWRzKS5waXBlKG1hcChyZXMgPT4gcmVzLmRlbGV0ZVNoaXBwaW5nTWV0aG9kcykpLFxyXG59KTtcclxuXHJcbmNvbnN0IEFTU0lHTl9TSElQUElOR19NRVRIT0RTX1RPX0NIQU5ORUwgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBBc3NpZ25TaGlwcGluZ01ldGhvZHNUb0NoYW5uZWwoJGlucHV0OiBBc3NpZ25TaGlwcGluZ01ldGhvZHNUb0NoYW5uZWxJbnB1dCEpIHtcclxuICAgICAgICBhc3NpZ25TaGlwcGluZ01ldGhvZHNUb0NoYW5uZWwoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgUkVNT1ZFX1NISVBQSU5HX01FVEhPRFNfRlJPTV9DSEFOTkVMID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gUmVtb3ZlU2hpcHBpbmdNZXRob2RzRnJvbUNoYW5uZWwoJGlucHV0OiBSZW1vdmVTaGlwcGluZ01ldGhvZHNGcm9tQ2hhbm5lbElucHV0ISkge1xyXG4gICAgICAgIHJlbW92ZVNoaXBwaW5nTWV0aG9kc0Zyb21DaGFubmVsKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuZXhwb3J0IGNvbnN0IGFzc2lnblNoaXBwaW5nTWV0aG9kc1RvQ2hhbm5lbEJ1bGtBY3Rpb24gPSBjcmVhdGVCdWxrQXNzaWduVG9DaGFubmVsQWN0aW9uPFxyXG4gICAgSXRlbU9mPEdldFNoaXBwaW5nTWV0aG9kTGlzdFF1ZXJ5LCAnc2hpcHBpbmdNZXRob2RzJz5cclxuPih7XHJcbiAgICBsb2NhdGlvbjogJ3NoaXBwaW5nLW1ldGhvZC1saXN0JyxcclxuICAgIHJlcXVpcmVzUGVybWlzc2lvbjogdXNlclBlcm1pc3Npb25zID0+XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uVXBkYXRlU2hpcHBpbmdNZXRob2QpIHx8XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uVXBkYXRlU2V0dGluZ3MpLFxyXG4gICAgZ2V0SXRlbU5hbWU6IGl0ZW0gPT4gaXRlbS5uYW1lLFxyXG4gICAgYnVsa0Fzc2lnblRvQ2hhbm5lbDogKGRhdGFTZXJ2aWNlLCBzaGlwcGluZ01ldGhvZElkcywgY2hhbm5lbElkcykgPT5cclxuICAgICAgICBjaGFubmVsSWRzLm1hcChjaGFubmVsSWQgPT5cclxuICAgICAgICAgICAgZGF0YVNlcnZpY2VcclxuICAgICAgICAgICAgICAgIC5tdXRhdGUoQXNzaWduU2hpcHBpbmdNZXRob2RzVG9DaGFubmVsRG9jdW1lbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaXBwaW5nTWV0aG9kSWRzLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnBpcGUobWFwKHJlcyA9PiByZXMuYXNzaWduU2hpcHBpbmdNZXRob2RzVG9DaGFubmVsKSksXHJcbiAgICAgICAgKSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlU2hpcHBpbmdNZXRob2RzRnJvbUNoYW5uZWxCdWxrQWN0aW9uID0gY3JlYXRlQnVsa1JlbW92ZUZyb21DaGFubmVsQWN0aW9uPFxyXG4gICAgSXRlbU9mPEdldFNoaXBwaW5nTWV0aG9kTGlzdFF1ZXJ5LCAnc2hpcHBpbmdNZXRob2RzJz5cclxuPih7XHJcbiAgICBsb2NhdGlvbjogJ3NoaXBwaW5nLW1ldGhvZC1saXN0JyxcclxuICAgIHJlcXVpcmVzUGVybWlzc2lvbjogdXNlclBlcm1pc3Npb25zID0+XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uRGVsZXRlU2hpcHBpbmdNZXRob2QpIHx8XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uRGVsZXRlU2V0dGluZ3MpLFxyXG4gICAgZ2V0SXRlbU5hbWU6IGl0ZW0gPT4gaXRlbS5uYW1lLFxyXG4gICAgYnVsa1JlbW92ZUZyb21DaGFubmVsOiAoZGF0YVNlcnZpY2UsIHNoaXBwaW5nTWV0aG9kSWRzLCBjaGFubmVsSWQpID0+XHJcbiAgICAgICAgZGF0YVNlcnZpY2VcclxuICAgICAgICAgICAgLm11dGF0ZShSZW1vdmVTaGlwcGluZ01ldGhvZHNGcm9tQ2hhbm5lbERvY3VtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxJZCxcclxuICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ01ldGhvZElkcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5waXBlKG1hcChyZXMgPT4gcmVzLnJlbW92ZVNoaXBwaW5nTWV0aG9kc0Zyb21DaGFubmVsKSksXHJcbn0pO1xyXG4iXX0=