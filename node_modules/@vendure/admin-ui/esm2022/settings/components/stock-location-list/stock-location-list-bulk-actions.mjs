import { AssignStockLocationsToChannelDocument, createBulkAssignToChannelAction, createBulkDeleteAction, createBulkRemoveFromChannelAction, DeleteStockLocationsDocument, DeletionResult, Permission, RemoveStockLocationsFromChannelDocument, } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import { map } from 'rxjs/operators';
const DELETE_STOCK_LOCATIONS = gql `
    mutation DeleteStockLocations($input: [DeleteStockLocationInput!]!) {
        deleteStockLocations(input: $input) {
            result
            message
        }
    }
`;
const ASSIGN_STOCK_LOCATIONS_TO_CHANNEL = gql `
    mutation AssignStockLocationsToChannel($input: AssignStockLocationsToChannelInput!) {
        assignStockLocationsToChannel(input: $input) {
            id
            name
        }
    }
`;
const REMOVE_STOCK_LOCATIONS_FROM_CHANNEL = gql `
    mutation RemoveStockLocationsFromChannel($input: RemoveStockLocationsFromChannelInput!) {
        removeStockLocationsFromChannel(input: $input) {
            id
            name
        }
    }
`;
export const deleteStockLocationsBulkAction = createBulkDeleteAction({
    location: 'stock-location-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteStockLocation) ||
        userPermissions.includes(Permission.DeleteCatalog),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService
        .mutate(DeleteStockLocationsDocument, {
        input: ids.map(id => ({ id })),
    })
        .pipe(map(res => res.deleteStockLocations)),
    shouldRetryItem: response => response.result === DeletionResult.NOT_DELETED,
});
export const assignStockLocationsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'stock-location-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateCatalog) ||
        userPermissions.includes(Permission.UpdateStockLocation),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, stockLocationIds, channelIds) => channelIds.map(channelId => dataService
        .mutate(AssignStockLocationsToChannelDocument, {
        input: {
            channelId,
            stockLocationIds,
        },
    })
        .pipe(map(res => res.assignStockLocationsToChannel))),
});
export const removeStockLocationsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'stock-location-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteCatalog) ||
        userPermissions.includes(Permission.DeleteStockLocation),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, stockLocationIds, channelId) => dataService
        .mutate(RemoveStockLocationsFromChannelDocument, {
        input: {
            channelId,
            stockLocationIds,
        },
    })
        .pipe(map(res => res.removeStockLocationsFromChannel)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2stbG9jYXRpb24tbGlzdC1idWxrLWFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3NldHRpbmdzL3NyYy9jb21wb25lbnRzL3N0b2NrLWxvY2F0aW9uLWxpc3Qvc3RvY2stbG9jYXRpb24tbGlzdC1idWxrLWFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHFDQUFxQyxFQUNyQywrQkFBK0IsRUFDL0Isc0JBQXNCLEVBQ3RCLGlDQUFpQyxFQUNqQyw0QkFBNEIsRUFDNUIsY0FBYyxFQUdkLFVBQVUsRUFDVix1Q0FBdUMsR0FDMUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBT2pDLENBQUM7QUFFRixNQUFNLGlDQUFpQyxHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU81QyxDQUFDO0FBRUYsTUFBTSxtQ0FBbUMsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Q0FPOUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLHNCQUFzQixDQUVsRTtJQUNFLFFBQVEsRUFBRSxxQkFBcUI7SUFDL0Isa0JBQWtCLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FDbEMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUM7UUFDeEQsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO0lBQ3RELFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO0lBQzlCLFVBQVUsRUFBRSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUM3QixXQUFXO1NBQ04sTUFBTSxDQUFDLDRCQUE0QixFQUFFO1FBQ2xDLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDakMsQ0FBQztTQUNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNuRCxlQUFlLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLGNBQWMsQ0FBQyxXQUFXO0NBQzlFLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUFHLCtCQUErQixDQUVwRjtJQUNFLFFBQVEsRUFBRSxxQkFBcUI7SUFDL0Isa0JBQWtCLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FDbEMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ2xELGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDO0lBQzVELFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO0lBQzlCLG1CQUFtQixFQUFFLENBQUMsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxFQUFFLENBQy9ELFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FDdkIsV0FBVztTQUNOLE1BQU0sQ0FBQyxxQ0FBcUMsRUFBRTtRQUMzQyxLQUFLLEVBQUU7WUFDSCxTQUFTO1lBQ1QsZ0JBQWdCO1NBQ25CO0tBQ0osQ0FBQztTQUNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUMzRDtDQUNSLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLHlDQUF5QyxHQUFHLGlDQUFpQyxDQUV4RjtJQUNFLFFBQVEsRUFBRSxxQkFBcUI7SUFDL0Isa0JBQWtCLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FDbEMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ2xELGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDO0lBQzVELFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO0lBQzlCLHFCQUFxQixFQUFFLENBQUMsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQ2hFLFdBQVc7U0FDTixNQUFNLENBQUMsdUNBQXVDLEVBQUU7UUFDN0MsS0FBSyxFQUFFO1lBQ0gsU0FBUztZQUNULGdCQUFnQjtTQUNuQjtLQUNKLENBQUM7U0FDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUM7Q0FDakUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIEFzc2lnblN0b2NrTG9jYXRpb25zVG9DaGFubmVsRG9jdW1lbnQsXHJcbiAgICBjcmVhdGVCdWxrQXNzaWduVG9DaGFubmVsQWN0aW9uLFxyXG4gICAgY3JlYXRlQnVsa0RlbGV0ZUFjdGlvbixcclxuICAgIGNyZWF0ZUJ1bGtSZW1vdmVGcm9tQ2hhbm5lbEFjdGlvbixcclxuICAgIERlbGV0ZVN0b2NrTG9jYXRpb25zRG9jdW1lbnQsXHJcbiAgICBEZWxldGlvblJlc3VsdCxcclxuICAgIEdldFN0b2NrTG9jYXRpb25MaXN0UXVlcnksXHJcbiAgICBJdGVtT2YsXHJcbiAgICBQZXJtaXNzaW9uLFxyXG4gICAgUmVtb3ZlU3RvY2tMb2NhdGlvbnNGcm9tQ2hhbm5lbERvY3VtZW50LFxyXG59IGZyb20gJ0B2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xyXG5pbXBvcnQgeyBncWwgfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmNvbnN0IERFTEVURV9TVE9DS19MT0NBVElPTlMgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBEZWxldGVTdG9ja0xvY2F0aW9ucygkaW5wdXQ6IFtEZWxldGVTdG9ja0xvY2F0aW9uSW5wdXQhXSEpIHtcclxuICAgICAgICBkZWxldGVTdG9ja0xvY2F0aW9ucyhpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFxyXG4gICAgICAgICAgICBtZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgQVNTSUdOX1NUT0NLX0xPQ0FUSU9OU19UT19DSEFOTkVMID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gQXNzaWduU3RvY2tMb2NhdGlvbnNUb0NoYW5uZWwoJGlucHV0OiBBc3NpZ25TdG9ja0xvY2F0aW9uc1RvQ2hhbm5lbElucHV0ISkge1xyXG4gICAgICAgIGFzc2lnblN0b2NrTG9jYXRpb25zVG9DaGFubmVsKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IFJFTU9WRV9TVE9DS19MT0NBVElPTlNfRlJPTV9DSEFOTkVMID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gUmVtb3ZlU3RvY2tMb2NhdGlvbnNGcm9tQ2hhbm5lbCgkaW5wdXQ6IFJlbW92ZVN0b2NrTG9jYXRpb25zRnJvbUNoYW5uZWxJbnB1dCEpIHtcclxuICAgICAgICByZW1vdmVTdG9ja0xvY2F0aW9uc0Zyb21DaGFubmVsKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBkZWxldGVTdG9ja0xvY2F0aW9uc0J1bGtBY3Rpb24gPSBjcmVhdGVCdWxrRGVsZXRlQWN0aW9uPFxyXG4gICAgSXRlbU9mPEdldFN0b2NrTG9jYXRpb25MaXN0UXVlcnksICdzdG9ja0xvY2F0aW9ucyc+XHJcbj4oe1xyXG4gICAgbG9jYXRpb246ICdzdG9jay1sb2NhdGlvbi1saXN0JyxcclxuICAgIHJlcXVpcmVzUGVybWlzc2lvbjogdXNlclBlcm1pc3Npb25zID0+XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uRGVsZXRlU3RvY2tMb2NhdGlvbikgfHxcclxuICAgICAgICB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5EZWxldGVDYXRhbG9nKSxcclxuICAgIGdldEl0ZW1OYW1lOiBpdGVtID0+IGl0ZW0ubmFtZSxcclxuICAgIGJ1bGtEZWxldGU6IChkYXRhU2VydmljZSwgaWRzKSA9PlxyXG4gICAgICAgIGRhdGFTZXJ2aWNlXHJcbiAgICAgICAgICAgIC5tdXRhdGUoRGVsZXRlU3RvY2tMb2NhdGlvbnNEb2N1bWVudCwge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGlkcy5tYXAoaWQgPT4gKHsgaWQgfSkpLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucGlwZShtYXAocmVzID0+IHJlcy5kZWxldGVTdG9ja0xvY2F0aW9ucykpLFxyXG4gICAgc2hvdWxkUmV0cnlJdGVtOiByZXNwb25zZSA9PiByZXNwb25zZS5yZXN1bHQgPT09IERlbGV0aW9uUmVzdWx0Lk5PVF9ERUxFVEVELFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBhc3NpZ25TdG9ja0xvY2F0aW9uc1RvQ2hhbm5lbEJ1bGtBY3Rpb24gPSBjcmVhdGVCdWxrQXNzaWduVG9DaGFubmVsQWN0aW9uPFxyXG4gICAgSXRlbU9mPEdldFN0b2NrTG9jYXRpb25MaXN0UXVlcnksICdzdG9ja0xvY2F0aW9ucyc+XHJcbj4oe1xyXG4gICAgbG9jYXRpb246ICdzdG9jay1sb2NhdGlvbi1saXN0JyxcclxuICAgIHJlcXVpcmVzUGVybWlzc2lvbjogdXNlclBlcm1pc3Npb25zID0+XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uVXBkYXRlQ2F0YWxvZykgfHxcclxuICAgICAgICB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5VcGRhdGVTdG9ja0xvY2F0aW9uKSxcclxuICAgIGdldEl0ZW1OYW1lOiBpdGVtID0+IGl0ZW0ubmFtZSxcclxuICAgIGJ1bGtBc3NpZ25Ub0NoYW5uZWw6IChkYXRhU2VydmljZSwgc3RvY2tMb2NhdGlvbklkcywgY2hhbm5lbElkcykgPT5cclxuICAgICAgICBjaGFubmVsSWRzLm1hcChjaGFubmVsSWQgPT5cclxuICAgICAgICAgICAgZGF0YVNlcnZpY2VcclxuICAgICAgICAgICAgICAgIC5tdXRhdGUoQXNzaWduU3RvY2tMb2NhdGlvbnNUb0NoYW5uZWxEb2N1bWVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvY2tMb2NhdGlvbklkcyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5waXBlKG1hcChyZXMgPT4gcmVzLmFzc2lnblN0b2NrTG9jYXRpb25zVG9DaGFubmVsKSksXHJcbiAgICAgICAgKSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlU3RvY2tMb2NhdGlvbnNGcm9tQ2hhbm5lbEJ1bGtBY3Rpb24gPSBjcmVhdGVCdWxrUmVtb3ZlRnJvbUNoYW5uZWxBY3Rpb248XHJcbiAgICBJdGVtT2Y8R2V0U3RvY2tMb2NhdGlvbkxpc3RRdWVyeSwgJ3N0b2NrTG9jYXRpb25zJz5cclxuPih7XHJcbiAgICBsb2NhdGlvbjogJ3N0b2NrLWxvY2F0aW9uLWxpc3QnLFxyXG4gICAgcmVxdWlyZXNQZXJtaXNzaW9uOiB1c2VyUGVybWlzc2lvbnMgPT5cclxuICAgICAgICB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5EZWxldGVDYXRhbG9nKSB8fFxyXG4gICAgICAgIHVzZXJQZXJtaXNzaW9ucy5pbmNsdWRlcyhQZXJtaXNzaW9uLkRlbGV0ZVN0b2NrTG9jYXRpb24pLFxyXG4gICAgZ2V0SXRlbU5hbWU6IGl0ZW0gPT4gaXRlbS5uYW1lLFxyXG4gICAgYnVsa1JlbW92ZUZyb21DaGFubmVsOiAoZGF0YVNlcnZpY2UsIHN0b2NrTG9jYXRpb25JZHMsIGNoYW5uZWxJZCkgPT5cclxuICAgICAgICBkYXRhU2VydmljZVxyXG4gICAgICAgICAgICAubXV0YXRlKFJlbW92ZVN0b2NrTG9jYXRpb25zRnJvbUNoYW5uZWxEb2N1bWVudCwge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RvY2tMb2NhdGlvbklkcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5waXBlKG1hcChyZXMgPT4gcmVzLnJlbW92ZVN0b2NrTG9jYXRpb25zRnJvbUNoYW5uZWwpKSxcclxufSk7XHJcbiJdfQ==