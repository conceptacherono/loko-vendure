import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@vendure/admin-ui/core";
import * as i3 from "@ngx-translate/core";
export class OrderModificationSummaryComponent {
    get adjustedLines() {
        return (this.modifyOrderInput.adjustOrderLines || [])
            .map(l => {
            const line = this.orderSnapshot.lines.find(line => line.id === l.orderLineId);
            if (line) {
                const delta = l.quantity - line.quantity;
                const sign = delta === 0 ? '' : delta > 0 ? '+' : '-';
                return delta
                    ? `${sign}${Math.abs(delta)} ${line.productVariant.name}`
                    : line.productVariant.name;
            }
        })
            .filter(notNullOrUndefined);
    }
    getModifiedFields(formGroup) {
        if (!formGroup.dirty) {
            return '';
        }
        return Object.entries(formGroup.controls)
            .map(([key, control]) => {
            if (control.dirty) {
                return key;
            }
        })
            .filter(notNullOrUndefined)
            .join(', ');
    }
    getUpdatedShippingMethodLines() {
        return Object.entries(this.updatedShippingMethods || {})
            .map(([lineId, shippingMethod]) => {
            const previousMethod = this.orderSnapshot.shippingLines.find(l => l.id === lineId);
            if (!previousMethod) {
                return;
            }
            const previousName = previousMethod.shippingMethod.name || previousMethod.shippingMethod.code;
            const newName = shippingMethod.name || shippingMethod.code;
            return `${previousName} -> ${newName}`;
        })
            .filter(notNullOrUndefined);
    }
    get couponCodeChanges() {
        const originalCodes = this.orderSnapshot.couponCodes || [];
        const newCodes = this.couponCodesControl.value || [];
        const addedCodes = newCodes.filter(c => !originalCodes.includes(c)).map(c => `+ ${c}`);
        const removedCodes = originalCodes.filter(c => !newCodes.includes(c)).map(c => `- ${c}`);
        return [...addedCodes, ...removedCodes];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderModificationSummaryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderModificationSummaryComponent, selector: "vdr-order-modification-summary", inputs: { orderSnapshot: "orderSnapshot", modifyOrderInput: "modifyOrderInput", addedLines: "addedLines", shippingAddressForm: "shippingAddressForm", billingAddressForm: "billingAddressForm", updatedShippingMethods: "updatedShippingMethods", couponCodesControl: "couponCodesControl" }, ngImport: i0, template: "<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.adjustOrderLines?.length\"\r\n        [label]=\"\r\n                    'order.modification-adjusting-lines'\r\n                        | translate : { count: modifyOrderInput.adjustOrderLines?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let line of adjustedLines\" class=\"mb-1\">\r\n        {{ line }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.addItems?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-items'\r\n                        | translate : { count: modifyOrderInput.addItems?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let item of addedLines\">\r\n        {{ item.productVariant.name }} x {{ item.quantity }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.surcharges?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-surcharges'\r\n                        | translate : { count: modifyOrderInput.surcharges?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let surcharge of modifyOrderInput.surcharges\" class=\"mb-1\">\r\n        {{ surcharge.description }}: {{ surcharge.price | localeCurrency : orderSnapshot.currencyCode }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(shippingAddressForm) as updatedShippingFields\"\r\n        [label]=\"'order.modification-updating-shipping-address' | translate\"\r\n>\r\n    {{ updatedShippingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(billingAddressForm) as updatedBillingFields\"\r\n        [label]=\"'order.modification-updating-billing-address' | translate\"\r\n>\r\n    {{ updatedBillingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"couponCodeChanges.length\" [label]=\"'order.set-coupon-codes' | translate\">\r\n    <div *ngFor=\"let change of couponCodeChanges\" class=\"mb-1\">{{ change }}</div>\r\n</vdr-labeled-data>\r\n<ng-container *ngIf=\"getUpdatedShippingMethodLines() as updatedShippingMethods\">\r\n    <vdr-labeled-data *ngIf=\"updatedShippingMethods.length\" [label]=\"'order.shipping-method' | translate\">\r\n        <div *ngFor=\"let change of updatedShippingMethods\" class=\"mb-1\">{{ change }}</div>\r\n    </vdr-labeled-data>\r\n</ng-container>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }, { kind: "pipe", type: i2.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderModificationSummaryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-modification-summary', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.adjustOrderLines?.length\"\r\n        [label]=\"\r\n                    'order.modification-adjusting-lines'\r\n                        | translate : { count: modifyOrderInput.adjustOrderLines?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let line of adjustedLines\" class=\"mb-1\">\r\n        {{ line }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.addItems?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-items'\r\n                        | translate : { count: modifyOrderInput.addItems?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let item of addedLines\">\r\n        {{ item.productVariant.name }} x {{ item.quantity }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"modifyOrderInput.surcharges?.length\"\r\n        [label]=\"\r\n                    'order.modification-adding-surcharges'\r\n                        | translate : { count: modifyOrderInput.surcharges?.length }\r\n                \"\r\n>\r\n    <div *ngFor=\"let surcharge of modifyOrderInput.surcharges\" class=\"mb-1\">\r\n        {{ surcharge.description }}: {{ surcharge.price | localeCurrency : orderSnapshot.currencyCode }}\r\n    </div>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(shippingAddressForm) as updatedShippingFields\"\r\n        [label]=\"'order.modification-updating-shipping-address' | translate\"\r\n>\r\n    {{ updatedShippingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data\r\n        *ngIf=\"getModifiedFields(billingAddressForm) as updatedBillingFields\"\r\n        [label]=\"'order.modification-updating-billing-address' | translate\"\r\n>\r\n    {{ updatedBillingFields }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"couponCodeChanges.length\" [label]=\"'order.set-coupon-codes' | translate\">\r\n    <div *ngFor=\"let change of couponCodeChanges\" class=\"mb-1\">{{ change }}</div>\r\n</vdr-labeled-data>\r\n<ng-container *ngIf=\"getUpdatedShippingMethodLines() as updatedShippingMethods\">\r\n    <vdr-labeled-data *ngIf=\"updatedShippingMethods.length\" [label]=\"'order.shipping-method' | translate\">\r\n        <div *ngFor=\"let change of updatedShippingMethods\" class=\"mb-1\">{{ change }}</div>\r\n    </vdr-labeled-data>\r\n</ng-container>" }]
        }], propDecorators: { orderSnapshot: [{
                type: Input
            }], modifyOrderInput: [{
                type: Input
            }], addedLines: [{
                type: Input
            }], shippingAddressForm: [{
                type: Input
            }], billingAddressForm: [{
                type: Input
            }], updatedShippingMethods: [{
                type: Input
            }], couponCodesControl: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,