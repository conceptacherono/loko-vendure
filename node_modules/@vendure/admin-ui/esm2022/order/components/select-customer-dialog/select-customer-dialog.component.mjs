import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { concat, of, Subject } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
import * as i2 from "@angular/forms";
import * as i3 from "@clr/angular";
import * as i4 from "@angular/common";
import * as i5 from "@ng-select/ng-select";
import * as i6 from "@ngx-translate/core";
export class SelectCustomerDialogComponent {
    constructor(dataService, formBuilder) {
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        // populated by the dialog service
        this.canCreateNew = true;
        this.includeNoteInput = false;
        this.title = _('order.set-customer-for-order');
        this.isLoading = false;
        this.input$ = new Subject();
        this.selectedCustomer = [];
        this.useExisting = true;
        this.createNew = false;
        this.note = '';
        this.customerForm = this.formBuilder.group({
            title: '',
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            phoneNumber: '',
            emailAddress: ['', [Validators.required, Validators.email]],
        });
    }
    ngOnInit() {
        this.customers$ = concat(of([]), // default items
        this.input$.pipe(debounceTime(200), distinctUntilChanged(), tap(() => (this.isLoading = true)), switchMap(term => this.dataService.customer
            .getCustomerList(10, 0, term)
            .mapStream(({ customers }) => customers.items)
            .pipe(catchError(() => of([])), // empty list on error
        tap(() => (this.isLoading = false))))));
    }
    trackByFn(item) {
        return item.id;
    }
    cancel() {
        this.resolveWith();
    }
    select() {
        if (this.useExisting && this.selectedCustomer.length === 1) {
            this.resolveWith({ ...this.selectedCustomer[0], note: this.note });
        }
        else if (this.createNew && this.customerForm.valid) {
            const formValue = this.customerForm.value;
            this.resolveWith({ ...formValue, note: this.note });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SelectCustomerDialogComponent, deps: [{ token: i1.DataService }, { token: i2.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: SelectCustomerDialogComponent, selector: "vdr-select-customer-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ title | translate }}</ng-template>\r\n\r\n<ng-container *ngIf=\"!canCreateNew\">\r\n    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n    <vdr-form-field [label]=\"'common.add-note' | translate\" *ngIf=\"includeNoteInput\" class=\"mt-4\">\r\n        <textarea [(ngModel)]=\"note\"></textarea>\r\n    </vdr-form-field>\r\n</ng-container>\r\n\r\n<clr-tabs *ngIf=\"canCreateNew\" class=\"pt-1\">\r\n    <clr-tab>\r\n        <button clrTabLink>{{ 'order.existing-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"useExisting\">\r\n            <clr-tab-content>\r\n                <div class=\"mt-4\">\r\n                    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n                </div>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n    <clr-tab *ngIf=\"canCreateNew\">\r\n        <button clrTabLink>{{ 'customer.create-new-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"createNew\">\r\n            <clr-tab-content>\r\n                <form [formGroup]=\"customerForm\">\r\n                    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\">\r\n                        <input id=\"title\" type=\"text\" formControlName=\"title\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.first-name' | translate\" for=\"firstName\">\r\n                        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.last-name' | translate\" for=\"lastName\">\r\n                        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.email-address' | translate\" for=\"emailAddress\">\r\n                        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.phone-number' | translate\" for=\"phoneNumber\">\r\n                        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\r\n                    </vdr-form-field>\r\n                </form>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n</clr-tabs>\r\n\r\n<ng-template #customerSelect>\r\n    <ng-select\r\n        [items]=\"customers$ | async\"\r\n        appendTo=\"body\"\r\n        bindLabel=\"name\"\r\n        [addTag]=\"false\"\r\n        [multiple]=\"true\"\r\n        [hideSelected]=\"true\"\r\n        [trackByFn]=\"trackByFn\"\r\n        [minTermLength]=\"2\"\r\n        [loading]=\"isLoading\"\r\n        [typeahead]=\"input$\"\r\n        [(ngModel)]=\"selectedCustomer\"\r\n    >\r\n        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n        <ng-template ng-option-tmp let-item=\"item\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n    </ng-select>\r\n</ng-template>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"(useExisting && selectedCustomer.length === 0) || (createNew && customerForm.invalid)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [".item-row{display:flex;align-items:center}clr-tabs{display:block}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrIfActive, selector: "[clrIfActive]", inputs: ["clrIfActive"], outputs: ["clrIfActiveChange"] }, { kind: "component", type: i3.ClrTabContent, selector: "clr-tab-content", inputs: ["id"] }, { kind: "component", type: i3.ClrTab, selector: "clr-tab" }, { kind: "component", type: i3.ClrTabs, selector: "clr-tabs", inputs: ["clrLayout"] }, { kind: "directive", type: i3.ClrTabLink, selector: "[clrTabLink]", inputs: ["id", "clrTabLinkInOverflow"] }, { kind: "directive", type: i3.ÇlrTabsWillyWonka, selector: "clr-tabs" }, { kind: "directive", type: i3.ÇlrActiveOompaLoompa, selector: "[clrTabLink], clr-tab-content" }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i5.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i5.NgOptionTemplateDirective, selector: "[ng-option-tmp]" }, { kind: "directive", type: i5.NgLabelTemplateDirective, selector: "[ng-label-tmp]" }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: SelectCustomerDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-select-customer-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ title | translate }}</ng-template>\r\n\r\n<ng-container *ngIf=\"!canCreateNew\">\r\n    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n    <vdr-form-field [label]=\"'common.add-note' | translate\" *ngIf=\"includeNoteInput\" class=\"mt-4\">\r\n        <textarea [(ngModel)]=\"note\"></textarea>\r\n    </vdr-form-field>\r\n</ng-container>\r\n\r\n<clr-tabs *ngIf=\"canCreateNew\" class=\"pt-1\">\r\n    <clr-tab>\r\n        <button clrTabLink>{{ 'order.existing-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"useExisting\">\r\n            <clr-tab-content>\r\n                <div class=\"mt-4\">\r\n                    <ng-container *ngTemplateOutlet=\"customerSelect\"></ng-container>\r\n                </div>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n    <clr-tab *ngIf=\"canCreateNew\">\r\n        <button clrTabLink>{{ 'customer.create-new-customer' | translate }}</button>\r\n\r\n        <ng-template [(clrIfActive)]=\"createNew\">\r\n            <clr-tab-content>\r\n                <form [formGroup]=\"customerForm\">\r\n                    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\">\r\n                        <input id=\"title\" type=\"text\" formControlName=\"title\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.first-name' | translate\" for=\"firstName\">\r\n                        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.last-name' | translate\" for=\"lastName\">\r\n                        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.email-address' | translate\" for=\"emailAddress\">\r\n                        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'customer.phone-number' | translate\" for=\"phoneNumber\">\r\n                        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\r\n                    </vdr-form-field>\r\n                </form>\r\n            </clr-tab-content>\r\n        </ng-template>\r\n    </clr-tab>\r\n</clr-tabs>\r\n\r\n<ng-template #customerSelect>\r\n    <ng-select\r\n        [items]=\"customers$ | async\"\r\n        appendTo=\"body\"\r\n        bindLabel=\"name\"\r\n        [addTag]=\"false\"\r\n        [multiple]=\"true\"\r\n        [hideSelected]=\"true\"\r\n        [trackByFn]=\"trackByFn\"\r\n        [minTermLength]=\"2\"\r\n        [loading]=\"isLoading\"\r\n        [typeahead]=\"input$\"\r\n        [(ngModel)]=\"selectedCustomer\"\r\n    >\r\n        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n        <ng-template ng-option-tmp let-item=\"item\">\r\n            <span class=\"item-row\">\r\n                <clr-icon shape=\"user\" class=\"is-solid\"></clr-icon\r\n                ><span class=\"mx-1\">{{ item.firstName }} {{ item.lastName }}</span>\r\n                <vdr-chip>{{ item.emailAddress }}</vdr-chip>\r\n            </span>\r\n        </ng-template>\r\n    </ng-select>\r\n</ng-template>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"(useExisting && selectedCustomer.length === 0) || (createNew && customerForm.invalid)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.okay' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [".item-row{display:flex;align-items:center}clr-tabs{display:block}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i2.UntypedFormBuilder }] });
//# sourceMappingURL=data:application/json;base64,