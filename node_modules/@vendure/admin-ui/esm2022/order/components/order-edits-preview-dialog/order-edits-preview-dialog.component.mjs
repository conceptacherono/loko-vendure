import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { getRefundablePayments } from '../../common/get-refundable-payments';
import * as i0 from "@angular/core";
import * as i1 from "@clr/angular";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@vendure/admin-ui/core";
import * as i5 from "../order-table/order-table.component";
import * as i6 from "../payment-for-refund-selector/payment-for-refund-selector.component";
import * as i7 from "../order-modification-summary/order-modification-summary.component";
import * as i8 from "@ngx-translate/core";
export var OrderEditResultType;
(function (OrderEditResultType) {
    OrderEditResultType[OrderEditResultType["Refund"] = 0] = "Refund";
    OrderEditResultType[OrderEditResultType["Payment"] = 1] = "Payment";
    OrderEditResultType[OrderEditResultType["PriceUnchanged"] = 2] = "PriceUnchanged";
    OrderEditResultType[OrderEditResultType["Cancel"] = 3] = "Cancel";
})(OrderEditResultType || (OrderEditResultType = {}));
export class OrderEditsPreviewDialogComponent {
    get priceDifference() {
        return this.order.totalWithTax - this.orderSnapshot.totalWithTax;
    }
    get amountToRefundTotal() {
        return this.refundablePayments.reduce((total, payment) => total + payment.amountToRefundControl.value, 0);
    }
    ngOnInit() {
        this.refundNote = this.modifyOrderInput.note || '';
        this.refundablePayments = getRefundablePayments(this.order.payments || []);
        this.refundablePayments.forEach(rp => {
            rp.amountToRefundControl.addValidators(Validators.max(this.priceDifference * -1));
        });
        if (this.priceDifference < 0 && this.refundablePayments.length) {
            this.onPaymentSelected(this.refundablePayments[0], true);
        }
    }
    onPaymentSelected(payment, selected) {
        if (selected) {
            const outstandingRefundAmount = this.priceDifference * -1 -
                this.refundablePayments
                    .filter(p => p.id !== payment.id)
                    .reduce((total, p) => total + p.amountToRefundControl.value, 0);
            if (0 < outstandingRefundAmount) {
                payment.amountToRefundControl.setValue(Math.min(outstandingRefundAmount, payment.refundableAmount));
            }
        }
        else {
            payment.amountToRefundControl.setValue(0);
        }
    }
    refundsCoverDifference() {
        return this.priceDifference * -1 === this.amountToRefundTotal;
    }
    cancel() {
        this.resolveWith({
            result: OrderEditResultType.Cancel,
        });
    }
    submit() {
        if (0 < this.priceDifference) {
            this.resolveWith({
                result: OrderEditResultType.Payment,
            });
        }
        else if (this.priceDifference < 0) {
            this.resolveWith({
                result: OrderEditResultType.Refund,
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                refunds: this.refundablePayments
                    .filter(rp => rp.selected && 0 < rp.amountToRefundControl.value)
                    .map(payment => {
                    return {
                        reason: this.refundNote || this.modifyOrderInput.note,
                        paymentId: payment.id,
                        amount: payment.amountToRefundControl.value,
                    };
                }),
            });
        }
        else {
            this.resolveWith({
                result: OrderEditResultType.PriceUnchanged,
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderEditsPreviewDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: OrderEditsPreviewDialogComponent, selector: "vdr-order-edits-preview-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table\r\n    [order]=\"order\"\r\n    [orderLineCustomFields]=\"orderLineCustomFields\"\r\n    class=\"order-edits-preview-table\"\r\n></vdr-order-table>\r\n<div class=\"payments-wrapper mb-2\">\r\n    <div class=\"flex-spacer\">\r\n        <vdr-payment-for-refund-selector\r\n            *ngIf=\"priceDifference < 0\"\r\n            class=\"\"\r\n            [refundablePayments]=\"refundablePayments\"\r\n            (paymentSelected)=\"onPaymentSelected($event.payment, $event.selected)\"\r\n            [order]=\"order\"\r\n        ></vdr-payment-for-refund-selector>\r\n    </div>\r\n    <div class=\"flex-spacer\">\r\n        <vdr-card [title]=\"'order.modify-order' | translate\">\r\n            <vdr-order-modification-summary\r\n                [orderSnapshot]=\"orderSnapshot\"\r\n                [modifyOrderInput]=\"modifyOrderInput\"\r\n                [addedLines]=\"addedLines\"\r\n                [shippingAddressForm]=\"shippingAddressForm\"\r\n                [billingAddressForm]=\"billingAddressForm\"\r\n                [couponCodesControl]=\"couponCodesControl\"\r\n                [updatedShippingMethods]=\"updatedShippingMethods\"\r\n            ></vdr-order-modification-summary>\r\n            <vdr-labeled-data [label]=\"'order.note' | translate\">\r\n                {{ modifyOrderInput.note || '-' }}\r\n            </vdr-labeled-data>\r\n            <vdr-form-field\r\n                [label]=\"'order.refund-cancellation-reason' | translate\"\r\n                *ngIf=\"priceDifference < 0\"\r\n            >\r\n                <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" required></textarea>\r\n            </vdr-form-field>\r\n        </vdr-card>\r\n    </div>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <div>\r\n        <div class=\"errors\">\r\n            <clr-alert\r\n                class=\"mb-1\"\r\n                *ngIf=\"priceDifference < 0 && !refundsCoverDifference()\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n        </div>\r\n        <div class=\"modal-buttons\">\r\n            <clr-alert class=\"\" [clrAlertType]=\"'primary'\" [clrAlertClosable]=\"false\">\r\n                <clr-alert-item>\r\n                    {{ 'order.modify-order-price-difference' | translate }}\r\n                    {{ 0 < priceDifference ? '+' : ''\r\n                    }}{{ priceDifference | localeCurrency : order.currencyCode }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <button type=\"button\" class=\"btn\" (click)=\"cancel()\">\r\n                {{ 'common.cancel' | translate }}\r\n            </button>\r\n            <button\r\n                type=\"submit\"\r\n                (click)=\"submit()\"\r\n                [disabled]=\"priceDifference < 0 ? !refundsCoverDifference() : false\"\r\n                class=\"btn btn-primary\"\r\n            >\r\n                {{ 'common.confirm' | translate }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n", styles: ["::ng-deep .order-edits-preview-table .table-wrapper{max-width:initial!important}.payments-wrapper{display:flex;gap:calc(var(--space-unit) * 2)}.modal-buttons{display:flex;justify-content:flex-end;gap:.6rem;gap:var(--clr-modal-footer-gap, .6rem)}\n"], dependencies: [{ kind: "component", type: i1.ClrAlert, selector: "clr-alert", inputs: ["clrAlertSizeSmall", "clrAlertClosable", "clrAlertAppLevel", "clrCloseButtonAriaLabel", "clrAlertLightweight", "clrAlertType", "clrAlertIcon", "clrAlertClosed"], outputs: ["clrAlertClosedChange"] }, { kind: "component", type: i1.ClrAlertItem, selector: "clr-alert-item" }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i4.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i4.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i4.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i4.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i4.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: i5.OrderTableComponent, selector: "vdr-order-table", inputs: ["order", "orderLineCustomFields", "isDraft"], outputs: ["adjust", "remove"] }, { kind: "component", type: i6.PaymentForRefundSelectorComponent, selector: "vdr-payment-for-refund-selector", inputs: ["refundablePayments", "order"], outputs: ["paymentSelected"] }, { kind: "component", type: i7.OrderModificationSummaryComponent, selector: "vdr-order-modification-summary", inputs: ["orderSnapshot", "modifyOrderInput", "addedLines", "shippingAddressForm", "billingAddressForm", "updatedShippingMethods", "couponCodesControl"] }, { kind: "pipe", type: i8.TranslatePipe, name: "translate" }, { kind: "pipe", type: i4.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: OrderEditsPreviewDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-edits-preview-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table\r\n    [order]=\"order\"\r\n    [orderLineCustomFields]=\"orderLineCustomFields\"\r\n    class=\"order-edits-preview-table\"\r\n></vdr-order-table>\r\n<div class=\"payments-wrapper mb-2\">\r\n    <div class=\"flex-spacer\">\r\n        <vdr-payment-for-refund-selector\r\n            *ngIf=\"priceDifference < 0\"\r\n            class=\"\"\r\n            [refundablePayments]=\"refundablePayments\"\r\n            (paymentSelected)=\"onPaymentSelected($event.payment, $event.selected)\"\r\n            [order]=\"order\"\r\n        ></vdr-payment-for-refund-selector>\r\n    </div>\r\n    <div class=\"flex-spacer\">\r\n        <vdr-card [title]=\"'order.modify-order' | translate\">\r\n            <vdr-order-modification-summary\r\n                [orderSnapshot]=\"orderSnapshot\"\r\n                [modifyOrderInput]=\"modifyOrderInput\"\r\n                [addedLines]=\"addedLines\"\r\n                [shippingAddressForm]=\"shippingAddressForm\"\r\n                [billingAddressForm]=\"billingAddressForm\"\r\n                [couponCodesControl]=\"couponCodesControl\"\r\n                [updatedShippingMethods]=\"updatedShippingMethods\"\r\n            ></vdr-order-modification-summary>\r\n            <vdr-labeled-data [label]=\"'order.note' | translate\">\r\n                {{ modifyOrderInput.note || '-' }}\r\n            </vdr-labeled-data>\r\n            <vdr-form-field\r\n                [label]=\"'order.refund-cancellation-reason' | translate\"\r\n                *ngIf=\"priceDifference < 0\"\r\n            >\r\n                <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" required></textarea>\r\n            </vdr-form-field>\r\n        </vdr-card>\r\n    </div>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <div>\r\n        <div class=\"errors\">\r\n            <clr-alert\r\n                class=\"mb-1\"\r\n                *ngIf=\"priceDifference < 0 && !refundsCoverDifference()\"\r\n                [clrAlertType]=\"'danger'\"\r\n                [clrAlertClosable]=\"false\"\r\n            >\r\n                <clr-alert-item>\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n        </div>\r\n        <div class=\"modal-buttons\">\r\n            <clr-alert class=\"\" [clrAlertType]=\"'primary'\" [clrAlertClosable]=\"false\">\r\n                <clr-alert-item>\r\n                    {{ 'order.modify-order-price-difference' | translate }}\r\n                    {{ 0 < priceDifference ? '+' : ''\r\n                    }}{{ priceDifference | localeCurrency : order.currencyCode }}\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <button type=\"button\" class=\"btn\" (click)=\"cancel()\">\r\n                {{ 'common.cancel' | translate }}\r\n            </button>\r\n            <button\r\n                type=\"submit\"\r\n                (click)=\"submit()\"\r\n                [disabled]=\"priceDifference < 0 ? !refundsCoverDifference() : false\"\r\n                class=\"btn btn-primary\"\r\n            >\r\n                {{ 'common.confirm' | translate }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n", styles: ["::ng-deep .order-edits-preview-table .table-wrapper{max-width:initial!important}.payments-wrapper{display:flex;gap:calc(var(--space-unit) * 2)}.modal-buttons{display:flex;justify-content:flex-end;gap:.6rem;gap:var(--clr-modal-footer-gap, .6rem)}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItZWRpdHMtcHJldmlldy1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9vcmRlci9zcmMvY29tcG9uZW50cy9vcmRlci1lZGl0cy1wcmV2aWV3LWRpYWxvZy9vcmRlci1lZGl0cy1wcmV2aWV3LWRpYWxvZy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL29yZGVyL3NyYy9jb21wb25lbnRzL29yZGVyLWVkaXRzLXByZXZpZXctZGlhbG9nL29yZGVyLWVkaXRzLXByZXZpZXctZGlhbG9nLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFlLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBUXpELE9BQU8sRUFBRSxxQkFBcUIsRUFBcUIsTUFBTSxzQ0FBc0MsQ0FBQzs7Ozs7Ozs7OztBQUloRyxNQUFNLENBQU4sSUFBWSxtQkFLWDtBQUxELFdBQVksbUJBQW1CO0lBQzNCLGlFQUFNLENBQUE7SUFDTixtRUFBTyxDQUFBO0lBQ1AsaUZBQWMsQ0FBQTtJQUNkLGlFQUFNLENBQUE7QUFDVixDQUFDLEVBTFcsbUJBQW1CLEtBQW5CLG1CQUFtQixRQUs5QjtBQTJCRCxNQUFNLE9BQU8sZ0NBQWdDO0lBZ0J6QyxJQUFJLGVBQWU7UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ3JFLENBQUM7SUFFRCxJQUFJLG1CQUFtQjtRQUNuQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQ2pDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQy9E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U0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUFFO3dCQUNyQixNQUFNLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixDQUFDLEtBQUs7cUJBQzlDLENBQUM7Z0JBQ04sQ0FBQyxDQUFDO2FBQ1QsQ0FBQyxDQUFDO1FBQ1AsQ0FBQzthQUFNLENBQUM7WUFDSixJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUNiLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxjQUFjO2FBQzdDLENBQUMsQ0FBQztRQUNQLENBQUM7SUFDTCxDQUFDOzhHQXpGUSxnQ0FBZ0M7a0dBQWhDLGdDQUFnQyxzRUM3QzdDLDB3R0EyRUE7OzJGRDlCYSxnQ0FBZ0M7a0JBTjVDLFNBQVM7K0JBQ0ksZ0NBQWdDLG1CQUd6Qix1QkFBdUIsQ0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Db250cm9sLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge1xyXG4gICAgQWRtaW5pc3RyYXRvclJlZnVuZElucHV0LFxyXG4gICAgQ3VzdG9tRmllbGRDb25maWcsXHJcbiAgICBEaWFsb2csXHJcbiAgICBNb2RpZnlPcmRlcklucHV0LFxyXG4gICAgT3JkZXJEZXRhaWxGcmFnbWVudCxcclxufSBmcm9tICdAdmVuZHVyZS9hZG1pbi11aS9jb3JlJztcclxuaW1wb3J0IHsgZ2V0UmVmdW5kYWJsZVBheW1lbnRzLCBSZWZ1bmRhYmxlUGF5bWVudCB9IGZyb20gJy4uLy4uL2NvbW1vbi9nZXQtcmVmdW5kYWJsZS1wYXltZW50cyc7XHJcbmltcG9ydCB7IEFkZGVkTGluZSwgT3JkZXJTbmFwc2hvdCB9IGZyb20gJy4uLy4uL2NvbW1vbi9tb2RpZnktb3JkZXItdHlwZXMnO1xyXG5pbXBvcnQgeyBPcmRlckVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4uL29yZGVyLWVkaXRvci9vcmRlci1lZGl0b3IuY29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBlbnVtIE9yZGVyRWRpdFJlc3VsdFR5cGUge1xyXG4gICAgUmVmdW5kLFxyXG4gICAgUGF5bWVudCxcclxuICAgIFByaWNlVW5jaGFuZ2VkLFxyXG4gICAgQ2FuY2VsLFxyXG59XHJcblxyXG5pbnRlcmZhY2UgT3JkZXJFZGl0c1JlZnVuZFJlc3VsdCB7XHJcbiAgICByZXN1bHQ6IE9yZGVyRWRpdFJlc3VsdFR5cGUuUmVmdW5kO1xyXG4gICAgcmVmdW5kczogQWRtaW5pc3RyYXRvclJlZnVuZElucHV0W107XHJcbn1cclxuaW50ZXJmYWNlIE9yZGVyRWRpdHNQYXltZW50UmVzdWx0IHtcclxuICAgIHJlc3VsdDogT3JkZXJFZGl0UmVzdWx0VHlwZS5QYXltZW50O1xyXG59XHJcbmludGVyZmFjZSBPcmRlckVkaXRzUHJpY2VVbmNoYW5nZWRSZXN1bHQge1xyXG4gICAgcmVzdWx0OiBPcmRlckVkaXRSZXN1bHRUeXBlLlByaWNlVW5jaGFuZ2VkO1xyXG59XHJcbmludGVyZmFjZSBPcmRlckVkaXRzQ2FuY2VsUmVzdWx0IHtcclxuICAgIHJlc3VsdDogT3JkZXJFZGl0UmVzdWx0VHlwZS5DYW5jZWw7XHJcbn1cclxudHlwZSBPcmRlckVkaXRSZXN1bHQgPVxyXG4gICAgfCBPcmRlckVkaXRzUmVmdW5kUmVzdWx0XHJcbiAgICB8IE9yZGVyRWRpdHNQYXltZW50UmVzdWx0XHJcbiAgICB8IE9yZGVyRWRpdHNQcmljZVVuY2hhbmdlZFJlc3VsdFxyXG4gICAgfCBPcmRlckVkaXRzQ2FuY2VsUmVzdWx0O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3Zkci1vcmRlci1lZGl0cy1wcmV2aWV3LWRpYWxvZycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vb3JkZXItZWRpdHMtcHJldmlldy1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vb3JkZXItZWRpdHMtcHJldmlldy1kaWFsb2cuY29tcG9uZW50LnNjc3MnXSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgT3JkZXJFZGl0c1ByZXZpZXdEaWFsb2dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIERpYWxvZzxPcmRlckVkaXRSZXN1bHQ+IHtcclxuICAgIC8vIFBhc3NlZCBpbiB2aWEgdGhlIG1vZGFsU2VydmljZVxyXG4gICAgb3JkZXJMaW5lQ3VzdG9tRmllbGRzOiBDdXN0b21GaWVsZENvbmZpZ1tdO1xyXG4gICAgb3JkZXI6IE9yZGVyRGV0YWlsRnJhZ21lbnQ7XHJcbiAgICBvcmRlclNuYXBzaG90OiBPcmRlclNuYXBzaG90O1xyXG4gICAgbW9kaWZ5T3JkZXJJbnB1dDogTW9kaWZ5T3JkZXJJbnB1dDtcclxuICAgIGFkZGVkTGluZXM6IEFkZGVkTGluZVtdO1xyXG4gICAgc2hpcHBpbmdBZGRyZXNzRm9ybTogT3JkZXJFZGl0b3JDb21wb25lbnRbJ3NoaXBwaW5nQWRkcmVzc0Zvcm0nXTtcclxuICAgIGJpbGxpbmdBZGRyZXNzRm9ybTogT3JkZXJFZGl0b3JDb21wb25lbnRbJ2JpbGxpbmdBZGRyZXNzRm9ybSddO1xyXG4gICAgdXBkYXRlZFNoaXBwaW5nTWV0aG9kczogT3JkZXJFZGl0b3JDb21wb25lbnRbJ3VwZGF0ZWRTaGlwcGluZ01ldGhvZHMnXTtcclxuICAgIGNvdXBvbkNvZGVzQ29udHJvbDogRm9ybUNvbnRyb2w8c3RyaW5nW10gfCBudWxsPjtcclxuXHJcbiAgICByZWZ1bmRhYmxlUGF5bWVudHM6IFJlZnVuZGFibGVQYXltZW50W107XHJcbiAgICByZWZ1bmROb3RlOiBzdHJpbmc7XHJcbiAgICByZXNvbHZlV2l0aDogKHJlc3VsdD86IE9yZGVyRWRpdFJlc3VsdCkgPT4gdm9pZDtcclxuXHJcbiAgICBnZXQgcHJpY2VEaWZmZXJlbmNlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3JkZXIudG90YWxXaXRoVGF4IC0gdGhpcy5vcmRlclNuYXBzaG90LnRvdGFsV2l0aFRheDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgYW1vdW50VG9SZWZ1bmRUb3RhbCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZnVuZGFibGVQYXltZW50cy5yZWR1Y2UoXHJcbiAgICAgICAgICAgICh0b3RhbCwgcGF5bWVudCkgPT4gdG90YWwgKyBwYXltZW50LmFtb3VudFRvUmVmdW5kQ29udHJvbC52YWx1ZSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMucmVmdW5kTm90ZSA9IHRoaXMubW9kaWZ5T3JkZXJJbnB1dC5ub3RlIHx8ICcnO1xyXG4gICAgICAgIHRoaXMucmVmdW5kYWJsZVBheW1lbnRzID0gZ2V0UmVmdW5kYWJsZVBheW1lbnRzKHRoaXMub3JkZXIucGF5bWVudHMgfHwgW10pO1xyXG4gICAgICAgIHRoaXMucmVmdW5kYWJsZVBheW1lbnRzLmZvckVhY2gocnAgPT4ge1xyXG4gICAgICAgICAgICBycC5hbW91bnRUb1JlZnVuZENvbnRyb2wuYWRkVmFsaWRhdG9ycyhWYWxpZGF0b3JzLm1heCh0aGlzLnByaWNlRGlmZmVyZW5jZSAqIC0xKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMucHJpY2VEaWZmZXJlbmNlIDwgMCAmJiB0aGlzLnJlZnVuZGFibGVQYXltZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5vblBheW1lbnRTZWxlY3RlZCh0aGlzLnJlZnVuZGFibGVQYXltZW50c1swXSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uUGF5bWVudFNlbGVjdGVkKHBheW1lbnQ6IFJlZnVuZGFibGVQYXltZW50LCBzZWxlY3RlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBvdXRzdGFuZGluZ1JlZnVuZEFtb3VudCA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByaWNlRGlmZmVyZW5jZSAqIC0xIC1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVmdW5kYWJsZVBheW1lbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihwID0+IHAuaWQgIT09IHBheW1lbnQuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlZHVjZSgodG90YWwsIHApID0+IHRvdGFsICsgcC5hbW91bnRUb1JlZnVuZENvbnRyb2wudmFsdWUsIDApO1xyXG4gICAgICAgICAgICBpZiAoMCA8IG91dHN0YW5kaW5nUmVmdW5kQW1vdW50KSB7XHJcbiAgICAgICAgICAgICAgICBwYXltZW50LmFtb3VudFRvUmVmdW5kQ29udHJvbC5zZXRWYWx1ZShcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihvdXRzdGFuZGluZ1JlZnVuZEFtb3VudCwgcGF5bWVudC5yZWZ1bmRhYmxlQW1vdW50KSxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwYXltZW50LmFtb3VudFRvUmVmdW5kQ29udHJvbC5zZXRWYWx1ZSgwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVmdW5kc0NvdmVyRGlmZmVyZW5jZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcmljZURpZmZlcmVuY2UgKiAtMSA9PT0gdGhpcy5hbW91bnRUb1JlZnVuZFRvdGFsO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLnJlc29sdmVXaXRoKHtcclxuICAgICAgICAgICAgcmVzdWx0OiBPcmRlckVkaXRSZXN1bHRUeXBlLkNhbmNlbCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdWJtaXQoKSB7XHJcbiAgICAgICAgaWYgKDAgPCB0aGlzLnByaWNlRGlmZmVyZW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc29sdmVXaXRoKHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogT3JkZXJFZGl0UmVzdWx0VHlwZS5QYXltZW50LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJpY2VEaWZmZXJlbmNlIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc29sdmVXaXRoKHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogT3JkZXJFZGl0UmVzdWx0VHlwZS5SZWZ1bmQsXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxyXG4gICAgICAgICAgICAgICAgcmVmdW5kczogdGhpcy5yZWZ1bmRhYmxlUGF5bWVudHNcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHJwID0+IHJwLnNlbGVjdGVkICYmIDAgPCBycC5hbW91bnRUb1JlZnVuZENvbnRyb2wudmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChwYXltZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogdGhpcy5yZWZ1bmROb3RlIHx8IHRoaXMubW9kaWZ5T3JkZXJJbnB1dC5ub3RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudElkOiBwYXltZW50LmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBwYXltZW50LmFtb3VudFRvUmVmdW5kQ29udHJvbC52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlV2l0aCh7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IE9yZGVyRWRpdFJlc3VsdFR5cGUuUHJpY2VVbmNoYW5nZWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCI8bmctdGVtcGxhdGUgdmRyRGlhbG9nVGl0bGU+e3sgJ29yZGVyLmNvbmZpcm0tbW9kaWZpY2F0aW9ucycgfCB0cmFuc2xhdGUgfX08L25nLXRlbXBsYXRlPlxyXG48dmRyLW9yZGVyLXRhYmxlXHJcbiAgICBbb3JkZXJdPVwib3JkZXJcIlxyXG4gICAgW29yZGVyTGluZUN1c3RvbUZpZWxkc109XCJvcmRlckxpbmVDdXN0b21GaWVsZHNcIlxyXG4gICAgY2xhc3M9XCJvcmRlci1lZGl0cy1wcmV2aWV3LXRhYmxlXCJcclxuPjwvdmRyLW9yZGVyLXRhYmxlPlxyXG48ZGl2IGNsYXNzPVwicGF5bWVudHMtd3JhcHBlciBtYi0yXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZmxleC1zcGFjZXJcIj5cclxuICAgICAgICA8dmRyLXBheW1lbnQtZm9yLXJlZnVuZC1zZWxlY3RvclxyXG4gICAgICAgICAgICAqbmdJZj1cInByaWNlRGlmZmVyZW5jZSA8IDBcIlxyXG4gICAgICAgICAgICBjbGFzcz1cIlwiXHJcbiAgICAgICAgICAgIFtyZWZ1bmRhYmxlUGF5bWVudHNdPVwicmVmdW5kYWJsZVBheW1lbnRzXCJcclxuICAgICAgICAgICAgKHBheW1lbnRTZWxlY3RlZCk9XCJvblBheW1lbnRTZWxlY3RlZCgkZXZlbnQucGF5bWVudCwgJGV2ZW50LnNlbGVjdGVkKVwiXHJcbiAgICAgICAgICAgIFtvcmRlcl09XCJvcmRlclwiXHJcbiAgICAgICAgPjwvdmRyLXBheW1lbnQtZm9yLXJlZnVuZC1zZWxlY3Rvcj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImZsZXgtc3BhY2VyXCI+XHJcbiAgICAgICAgPHZkci1jYXJkIFt0aXRsZV09XCInb3JkZXIubW9kaWZ5LW9yZGVyJyB8IHRyYW5zbGF0ZVwiPlxyXG4gICAgICAgICAgICA8dmRyLW9yZGVyLW1vZGlmaWNhdGlvbi1zdW1tYXJ5XHJcbiAgICAgICAgICAgICAgICBbb3JkZXJTbmFwc2hvdF09XCJvcmRlclNuYXBzaG90XCJcclxuICAgICAgICAgICAgICAgIFttb2RpZnlPcmRlcklucHV0XT1cIm1vZGlmeU9yZGVySW5wdXRcIlxyXG4gICAgICAgICAgICAgICAgW2FkZGVkTGluZXNdPVwiYWRkZWRMaW5lc1wiXHJcbiAgICAgICAgICAgICAgICBbc2hpcHBpbmdBZGRyZXNzRm9ybV09XCJzaGlwcGluZ0FkZHJlc3NGb3JtXCJcclxuICAgICAgICAgICAgICAgIFtiaWxsaW5nQWRkcmVzc0Zvcm1dPVwiYmlsbGluZ0FkZHJlc3NGb3JtXCJcclxuICAgICAgICAgICAgICAgIFtjb3Vwb25Db2Rlc0NvbnRyb2xdPVwiY291cG9uQ29kZXNDb250cm9sXCJcclxuICAgICAgICAgICAgICAgIFt1cGRhdGVkU2hpcHBpbmdNZXRob2RzXT1cInVwZGF0ZWRTaGlwcGluZ01ldGhvZHNcIlxyXG4gICAgICAgICAgICA+PC92ZHItb3JkZXItbW9kaWZpY2F0aW9uLXN1bW1hcnk+XHJcbiAgICAgICAgICAgIDx2ZHItbGFiZWxlZC1kYXRhIFtsYWJlbF09XCInb3JkZXIubm90ZScgfCB0cmFuc2xhdGVcIj5cclxuICAgICAgICAgICAgICAgIHt7IG1vZGlmeU9yZGVySW5wdXQubm90ZSB8fCAnLScgfX1cclxuICAgICAgICAgICAgPC92ZHItbGFiZWxlZC1kYXRhPlxyXG4gICAgICAgICAgICA8dmRyLWZvcm0tZmllbGRcclxuICAgICAgICAgICAgICAgIFtsYWJlbF09XCInb3JkZXIucmVmdW5kLWNhbmNlbGxhdGlvbi1yZWFzb24nIHwgdHJhbnNsYXRlXCJcclxuICAgICAgICAgICAgICAgICpuZ0lmPVwicHJpY2VEaWZmZXJlbmNlIDwgMFwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBbKG5nTW9kZWwpXT1cInJlZnVuZE5vdGVcIiBuYW1lPVwicmVmdW5kTm90ZVwiIHJlcXVpcmVkPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgIDwvdmRyLWZvcm0tZmllbGQ+XHJcbiAgICAgICAgPC92ZHItY2FyZD5cclxuICAgIDwvZGl2PlxyXG48L2Rpdj5cclxuPG5nLXRlbXBsYXRlIHZkckRpYWxvZ0J1dHRvbnM+XHJcbiAgICA8ZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJlcnJvcnNcIj5cclxuICAgICAgICAgICAgPGNsci1hbGVydFxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJtYi0xXCJcclxuICAgICAgICAgICAgICAgICpuZ0lmPVwicHJpY2VEaWZmZXJlbmNlIDwgMCAmJiAhcmVmdW5kc0NvdmVyRGlmZmVyZW5jZSgpXCJcclxuICAgICAgICAgICAgICAgIFtjbHJBbGVydFR5cGVdPVwiJ2RhbmdlcidcIlxyXG4gICAgICAgICAgICAgICAgW2NsckFsZXJ0Q2xvc2FibGVdPVwiZmFsc2VcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8Y2xyLWFsZXJ0LWl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAge3sgJ29yZGVyLnJlZnVuZC10b3RhbC13YXJuaW5nJyB8IHRyYW5zbGF0ZSB9fVxyXG4gICAgICAgICAgICAgICAgPC9jbHItYWxlcnQtaXRlbT5cclxuICAgICAgICAgICAgPC9jbHItYWxlcnQ+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJ1dHRvbnNcIj5cclxuICAgICAgICAgICAgPGNsci1hbGVydCBjbGFzcz1cIlwiIFtjbHJBbGVydFR5cGVdPVwiJ3ByaW1hcnknXCIgW2NsckFsZXJ0Q2xvc2FibGVdPVwiZmFsc2VcIj5cclxuICAgICAgICAgICAgICAgIDxjbHItYWxlcnQtaXRlbT5cclxuICAgICAgICAgICAgICAgICAgICB7eyAnb3JkZXIubW9kaWZ5LW9yZGVyLXByaWNlLWRpZmZlcmVuY2UnIHwgdHJhbnNsYXRlIH19XHJcbiAgICAgICAgICAgICAgICAgICAge3sgMCA8IHByaWNlRGlmZmVyZW5jZSA/ICcrJyA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgfX17eyBwcmljZURpZmZlcmVuY2UgfCBsb2NhbGVDdXJyZW5jeSA6IG9yZGVyLmN1cnJlbmN5Q29kZSB9fVxyXG4gICAgICAgICAgICAgICAgPC9jbHItYWxlcnQtaXRlbT5cclxuICAgICAgICAgICAgPC9jbHItYWxlcnQ+XHJcbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuXCIgKGNsaWNrKT1cImNhbmNlbCgpXCI+XHJcbiAgICAgICAgICAgICAgICB7eyAnY29tbW9uLmNhbmNlbCcgfCB0cmFuc2xhdGUgfX1cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxyXG4gICAgICAgICAgICAgICAgKGNsaWNrKT1cInN1Ym1pdCgpXCJcclxuICAgICAgICAgICAgICAgIFtkaXNhYmxlZF09XCJwcmljZURpZmZlcmVuY2UgPCAwID8gIXJlZnVuZHNDb3ZlckRpZmZlcmVuY2UoKSA6IGZhbHNlXCJcclxuICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge3sgJ2NvbW1vbi5jb25maXJtJyB8IHRyYW5zbGF0ZSB9fVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L25nLXRlbXBsYXRlPlxyXG4iXX0=