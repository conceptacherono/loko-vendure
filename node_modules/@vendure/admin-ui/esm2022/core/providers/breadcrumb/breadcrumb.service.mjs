import { Injectable } from '@angular/core';
import { NavigationEnd, PRIMARY_OUTLET } from '@angular/router';
import { flatten } from 'lodash';
import { combineLatest as observableCombineLatest, isObservable, of as observableOf, Subject, } from 'rxjs';
import { filter, map, shareReplay, startWith, switchMap, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../data/providers/data.service";
export class BreadcrumbService {
    constructor(router, route, dataService) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.destroy$ = new Subject();
        this.breadcrumbs$ = this.router.events.pipe(filter(event => event instanceof NavigationEnd), takeUntil(this.destroy$), startWith(true), switchMap(() => this.generateBreadcrumbs(this.route.root)), shareReplay(1));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    generateBreadcrumbs(rootRoute) {
        const breadcrumbParts = this.assembleBreadcrumbParts(rootRoute);
        const breadcrumbObservables$ = breadcrumbParts.map(({ value$, path }) => value$.pipe(map(value => {
            if (isBreadcrumbLabelLinkPair(value)) {
                return {
                    label: value.label,
                    link: this.normalizeRelativeLinks(value.link, path),
                };
            }
            else if (isBreadcrumbPairArray(value)) {
                return value.map(val => ({
                    label: val.label,
                    link: this.normalizeRelativeLinks(val.link, path),
                }));
            }
            else {
                return {
                    label: value,
                    link: '/' + path.join('/'),
                };
            }
        })));
        return observableCombineLatest(breadcrumbObservables$).pipe(map(links => flatten(links)));
    }
    /**
     * Walks the route definition tree to assemble an array from which the breadcrumbs can be derived.
     */
    assembleBreadcrumbParts(rootRoute) {
        const breadcrumbParts = [];
        const segmentPaths = [];
        let currentRoute = rootRoute;
        do {
            const childRoutes = currentRoute.children;
            currentRoute = null;
            childRoutes.forEach((route) => {
                if (route.outlet === PRIMARY_OUTLET) {
                    const routeSnapshot = route.snapshot;
                    let breadcrumbDef = route.routeConfig && route.routeConfig.data && route.routeConfig.data['breadcrumb'];
                    segmentPaths.push(routeSnapshot.url.map(segment => segment.path).join('/'));
                    if (breadcrumbDef) {
                        if (isBreadcrumbFunction(breadcrumbDef)) {
                            breadcrumbDef = breadcrumbDef(routeSnapshot.data, routeSnapshot.params, this.dataService);
                        }
                        const observableValue = isObservable(breadcrumbDef)
                            ? breadcrumbDef
                            : observableOf(breadcrumbDef);
                        breadcrumbParts.push({ value$: observableValue, path: segmentPaths.slice() });
                    }
                    currentRoute = route;
                }
            });
        } while (currentRoute);
        return breadcrumbParts;
    }
    /**
     * Accounts for relative routes in the link array, i.e. arrays whose first element is either:
     * * `./`   - this appends the rest of the link segments to the current active route
     * * `../`  - this removes the last segment of the current active route, and appends the link segments
     *            to the parent route.
     */
    normalizeRelativeLinks(link, segmentPaths) {
        const clone = link.slice();
        if (clone[0] === './') {
            clone[0] = segmentPaths.join('/');
        }
        if (clone[0] === '../') {
            clone[0] = segmentPaths.slice(0, -1).join('/');
        }
        return clone.filter(segment => segment !== '');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: i2.DataService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: BreadcrumbService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: BreadcrumbService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: i2.DataService }] });
function isBreadcrumbFunction(value) {
    return typeof value === 'function';
}
function isBreadcrumbLabelLinkPair(value) {
    return value.hasOwnProperty('label') && value.hasOwnProperty('link');
}
function isBreadcrumbPairArray(value) {
    return Array.isArray(value) && isBreadcrumbLabelLinkPair(value[0]);
}
//# sourceMappingURL=data:application/json;base64,