export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"nav-builder-types.js","sourceRoot":"","sources":["../../../../../src/lib/core/src/providers/nav-builder/nav-builder-types.ts"],"names":[],"mappings":"","sourcesContent":["import { Injector } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ActionBarLocationId } from '../../common/component-registry-types';\r\nimport { DataService } from '../../data/providers/data.service';\r\nimport { NotificationService } from '../notification/notification.service';\r\n\r\nexport type NavMenuBadgeType = 'none' | 'info' | 'success' | 'warning' | 'error';\r\n\r\n/**\r\n * @description\r\n * A color-coded notification badge which will be displayed by the\r\n * NavMenuItem's icon.\r\n *\r\n * @docsCategory nav-menu\r\n * @docsPage navigation-types\r\n */\r\nexport interface NavMenuBadge {\r\n    type: NavMenuBadgeType;\r\n    /**\r\n     * @description\r\n     * If true, the badge will propagate to the NavMenuItem's\r\n     * parent section, displaying a notification badge next\r\n     * to the section name.\r\n     */\r\n    propagateToSection?: boolean;\r\n}\r\n\r\n/**\r\n * @description\r\n * A NavMenuItem is a menu item in the main (left-hand side) nav\r\n * bar.\r\n *\r\n * @docsCategory nav-menu\r\n */\r\nexport interface NavMenuItem {\r\n    id: string;\r\n    label: string;\r\n    routerLink: RouterLinkDefinition;\r\n    onClick?: (event: MouseEvent) => void;\r\n    icon?: string;\r\n    /**\r\n     * Control the display of this item based on the user permissions.\r\n     */\r\n    requiresPermission?: string | ((userPermissions: string[]) => boolean);\r\n    statusBadge?: Observable<NavMenuBadge>;\r\n}\r\n\r\n/**\r\n * @description\r\n * A NavMenuSection is a grouping of links in the main\r\n * (left-hand side) nav bar.\r\n *\r\n * @docsCategory nav-menu\r\n */\r\nexport interface NavMenuSection {\r\n    id: string;\r\n    label: string;\r\n    items: NavMenuItem[];\r\n    icon?: string;\r\n    displayMode?: 'regular' | 'settings';\r\n    /**\r\n     * @description\r\n     * Control the display of this item based on the user permissions. Note: if you attempt to pass a\r\n     * {@link PermissionDefinition} object, you will get a compilation error. Instead, pass the plain\r\n     * string version. For example, if the permission is defined as:\r\n     * ```ts\r\n     * export const MyPermission = new PermissionDefinition('ProductReview');\r\n     * ```\r\n     * then the generated permission strings will be:\r\n     *\r\n     * - `CreateProductReview`\r\n     * - `ReadProductReview`\r\n     * - `UpdateProductReview`\r\n     * - `DeleteProductReview`\r\n     */\r\n    requiresPermission?: string | ((userPermissions: string[]) => boolean);\r\n    collapsible?: boolean;\r\n    collapsedByDefault?: boolean;\r\n}\r\n\r\n/**\r\n * @description\r\n * Providers & data available to the `onClick` & `buttonState` functions of an {@link ActionBarItem},\r\n * {@link ActionBarDropdownMenuItem} or {@link NavMenuItem}.\r\n *\r\n * @docsCategory action-bar\r\n */\r\nexport interface ActionBarContext {\r\n    /**\r\n     * @description\r\n     * The router's [ActivatedRoute](https://angular.dev/guide/routing/router-reference#activated-route) object for\r\n     * the current route. This object contains information about the route, its parameters, and additional data\r\n     * associated with the route.\r\n     */\r\n    route: ActivatedRoute;\r\n    /**\r\n     * @description\r\n     * The Angular [Injector](https://angular.dev/api/core/Injector) which can be used to get instances\r\n     * of services and other providers available in the application.\r\n     */\r\n    injector: Injector;\r\n    /**\r\n     * @description\r\n     * The [DataService](/reference/admin-ui-api/services/data-service), which provides methods for querying the\r\n     * server-side data.\r\n     */\r\n    dataService: DataService;\r\n    /**\r\n     * @description\r\n     * The [NotificationService](/reference/admin-ui-api/services/notification-service), which provides methods for\r\n     * displaying notifications to the user.\r\n     */\r\n    notificationService: NotificationService;\r\n    /**\r\n     * @description\r\n     * An observable of the current entity in a detail view. In a list view the observable will not emit any values.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * addActionBarDropdownMenuItem({\r\n     *     id: 'print-invoice',\r\n     *     locationId: 'order-detail',\r\n     *     label: 'Print Invoice',\r\n     *     icon: 'printer',\r\n     *     buttonState: context => {\r\n     *         // highlight-start\r\n     *         return context.entity$.pipe(\r\n     *             map((order) => {\r\n     *                 return order?.state === 'PaymentSettled'\r\n     *                     ? { disabled: false, visible: true }\r\n     *                     : { disabled: true, visible: true };\r\n     *             }),\r\n     *         );\r\n     *         // highlight-end\r\n     *     },\r\n     *     requiresPermission: ['UpdateOrder'],\r\n     * }),\r\n     * ```\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    entity$: Observable<Record<string, any> | undefined>;\r\n}\r\n\r\nexport interface ActionBarButtonState {\r\n    disabled: boolean;\r\n    visible: boolean;\r\n}\r\n\r\n/**\r\n * @description\r\n * A button in the ActionBar area at the top of one of the list or detail views.\r\n *\r\n * @docsCategory action-bar\r\n */\r\nexport interface ActionBarItem {\r\n    /**\r\n     * @description\r\n     * A unique identifier for the item.\r\n     */\r\n    id: string;\r\n    /**\r\n     * @description\r\n     * The label to display for the item. This can also be a translation token,\r\n     * e.g. `invoice-plugin.print-invoice`.\r\n     */\r\n    label: string;\r\n    /**\r\n     * @description\r\n     * The location in the UI where this button should be displayed.\r\n     */\r\n    locationId: ActionBarLocationId;\r\n    /**\r\n     * @description\r\n     * Deprecated since v2.1.0 - use `buttonState` instead.\r\n     * @deprecated - use `buttonState` instead.\r\n     */\r\n    disabled?: Observable<boolean>;\r\n    /**\r\n     * @description\r\n     * A function which returns an observable of the button state, allowing you to\r\n     * dynamically enable/disable or show/hide the button.\r\n     *\r\n     * @since 2.1.0\r\n     */\r\n    buttonState?: (context: ActionBarContext) => Observable<ActionBarButtonState>;\r\n    onClick?: (event: MouseEvent, context: ActionBarContext) => void;\r\n    routerLink?: RouterLinkDefinition;\r\n    buttonColor?: 'primary' | 'success' | 'warning';\r\n    buttonStyle?: 'solid' | 'outline' | 'link';\r\n    /**\r\n     * @description\r\n     * An optional icon to display in the button. The icon\r\n     * should be a valid shape name from the [Clarity Icons](https://core.clarity.design/foundation/icons/shapes/)\r\n     * set.\r\n     */\r\n    icon?: string;\r\n    /**\r\n     * @description\r\n     * Control the display of this item based on the user permissions. Note: if you attempt to pass a\r\n     * {@link PermissionDefinition} object, you will get a compilation error. Instead, pass the plain\r\n     * string version. For example, if the permission is defined as:\r\n     *\r\n     * ```ts\r\n     * export const MyPermission = new PermissionDefinition('ProductReview');\r\n     * ```\r\n     *\r\n     * then the generated permission strings will be:\r\n     *\r\n     * - `CreateProductReview`\r\n     * - `ReadProductReview`\r\n     * - `UpdateProductReview`\r\n     * - `DeleteProductReview`\r\n     */\r\n    requiresPermission?: string | string[];\r\n}\r\n\r\n/**\r\n * @description\r\n * A dropdown menu item in the ActionBar area at the top of one of the list or detail views.\r\n *\r\n * @docsCategory action-bar\r\n * @since 2.2.0\r\n */\r\nexport interface ActionBarDropdownMenuItem {\r\n    /**\r\n     * @description\r\n     * A unique identifier for the item.\r\n     */\r\n    id: string;\r\n    /**\r\n     * @description\r\n     * The label to display for the item. This can also be a translation token,\r\n     * e.g. `invoice-plugin.print-invoice`.\r\n     */\r\n    label: string;\r\n    /**\r\n     * @description\r\n     * The location in the UI where this menu item should be displayed.\r\n     */\r\n    locationId: ActionBarLocationId;\r\n    /**\r\n     * @description\r\n     * Whether to render a divider above this item.\r\n     */\r\n    hasDivider?: boolean;\r\n    /**\r\n     * @description\r\n     * A function which returns an observable of the button state, allowing you to\r\n     * dynamically enable/disable or show/hide the button.\r\n     */\r\n    buttonState?: (context: ActionBarContext) => Observable<ActionBarButtonState | undefined>;\r\n    onClick?: (event: MouseEvent, context: ActionBarContext) => void;\r\n    routerLink?: RouterLinkDefinition;\r\n    /**\r\n     * @description\r\n     * An optional icon to display with the item. The icon\r\n     * should be a valid shape name from the [Clarity Icons](https://core.clarity.design/foundation/icons/shapes/)\r\n     * set.\r\n     */\r\n    icon?: string;\r\n    /**\r\n     * @description\r\n     * Control the display of this item based on the user permissions. Note: if you attempt to pass a\r\n     * {@link PermissionDefinition} object, you will get a compilation error. Instead, pass the plain\r\n     * string version. For example, if the permission is defined as:\r\n     *\r\n     * ```ts\r\n     * export const MyPermission = new PermissionDefinition('ProductReview');\r\n     * ```\r\n     * then the generated permission strings will be:\r\n     *\r\n     * - `CreateProductReview`\r\n     * - `ReadProductReview`\r\n     * - `UpdateProductReview`\r\n     * - `DeleteProductReview`\r\n     */\r\n    requiresPermission?: string | string[];\r\n}\r\n\r\n/**\r\n * @description\r\n * A function which returns the router link for an {@link ActionBarItem} or {@link NavMenuItem}.\r\n *\r\n * @docsCategory action-bar\r\n */\r\nexport type RouterLinkDefinition = ((route: ActivatedRoute, context: ActionBarContext) => any[]) | any[];\r\n"]}