import { assertNever } from '@vendure/common/lib/shared-utils';
import dayjs from 'dayjs';
export class DataTableFilter {
    constructor(options, onActivate) {
        this.options = options;
        this.onActivate = onActivate;
    }
    get name() {
        return this.options.name;
    }
    get type() {
        return this.options.type;
    }
    get label() {
        return this.options.label;
    }
    getFilterOperator(value) {
        const type = this.options.type;
        switch (type.kind) {
            case 'boolean':
                return {
                    eq: !!value,
                };
            case 'dateRange': {
                let dateOperators;
                const mode = value.mode ?? 'relative';
                if (mode === 'relative') {
                    const relativeValue = value.relativeValue ?? 30;
                    const relativeUnit = value.relativeUnit ?? 'day';
                    dateOperators = {
                        after: dayjs().subtract(relativeValue, relativeUnit).startOf('day').toISOString(),
                    };
                }
                else {
                    const start = value.start ?? undefined;
                    const end = value.end ?? undefined;
                    if (start && end) {
                        dateOperators = {
                            between: { start, end },
                        };
                    }
                    else if (start) {
                        dateOperators = {
                            after: start,
                        };
                    }
                    else {
                        dateOperators = {
                            before: end,
                        };
                    }
                }
                return dateOperators;
            }
            case 'number':
                return {
                    [value.operator]: Number(value.amount),
                };
            case 'select':
                return { in: value };
            case 'text':
                return {
                    [value.operator]: value.term,
                };
            case 'id':
                return {
                    [value.operator]: value.term,
                };
            case 'custom': {
                return value;
            }
            default:
                assertNever(type);
        }
    }
    toFilterInput(value) {
        if (this.options.toFilterInput) {
            return this.options.toFilterInput(value);
        }
        if (this.options.filterField) {
            return { [this.options.filterField]: this.getFilterOperator(value) };
        }
        else {
            throw new Error(`Either "filterField" or "toFilterInput" must be provided (for filter "${this.name}"))`);
        }
    }
    activate(value) {
        if (this.onActivate) {
            this.onActivate(this, value);
        }
    }
    isId() {
        return this.type.kind === 'id';
    }
    isText() {
        return this.type.kind === 'text';
    }
    isNumber() {
        return this.type.kind === 'number';
    }
    isBoolean() {
        return this.type.kind === 'boolean';
    }
    isSelect() {
        return this.type.kind === 'select';
    }
    isDateRange() {
        return this.type.kind === 'dateRange';
    }
    isCustom() {
        return this.type.kind === 'custom';
    }
}
//# sourceMappingURL=data:application/json;base64,