import { assertNever } from '@vendure/common/lib/shared-utils';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DataTableSort } from './data-table-sort';
export class DataTableSortCollection {
    #sorts;
    #valueChanges$;
    #connectedToRouter;
    #sortQueryParamName;
    #defaultSort;
    constructor(router) {
        this.router = router;
        this.#sorts = [];
        this.#valueChanges$ = new Subject();
        this.#connectedToRouter = false;
        this.valueChanges = this.#valueChanges$.asObservable();
        this.#sortQueryParamName = 'sort';
        this.destroy$ = new Subject();
    }
    get length() {
        return this.#sorts.length;
    }
    destroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    addSort(config) {
        if (this.#connectedToRouter) {
            throw new Error('Cannot add sort after connecting to router. Make sure to call addSort() before connectToRoute()');
        }
        this.#sorts.push(new DataTableSort(config, () => this.onSetValue()));
        return this;
    }
    addSorts(configs) {
        for (const config of configs) {
            this.addSort(config);
        }
        return this;
    }
    addCustomFieldSorts(customFields) {
        for (const config of customFields) {
            const type = config.type;
            if (config.list) {
                continue;
            }
            switch (type) {
                case 'string':
                case 'localeString':
                case 'boolean':
                case 'int':
                case 'float':
                case 'datetime':
                case 'localeText':
                case 'text':
                    this.addSort({ name: config.name });
                    break;
                case 'relation':
                case 'struct':
                    // Cannot sort relations
                    break;
                default:
                    assertNever(type);
            }
        }
        return this;
    }
    defaultSort(name, sortOrder) {
        this.#defaultSort = { name, sortOrder };
        return this;
    }
    get(name) {
        return this.#sorts.find(s => s.name === name);
    }
    connectToRoute(route) {
        this.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.router.navigate(['./'], {
                queryParams: { [this.#sortQueryParamName]: this.serialize() },
                relativeTo: route,
                queryParamsHandling: 'merge',
            });
        });
        const filterQueryParams = (route.snapshot.queryParamMap.get(this.#sortQueryParamName) ?? '')
            .split(';')
            .map(value => value.split(':'))
            .map(([name, value]) => ({ name, value }));
        for (const { name, value } of filterQueryParams) {
            const sort = this.get(name);
            if (sort) {
                sort.setSortOrder(value);
            }
        }
        this.#connectedToRouter = true;
        return this;
    }
    createSortInput() {
        const activeSorts = this.#sorts.filter(s => s.sortOrder !== undefined);
        let sortInput = {};
        if (activeSorts.length === 0 && this.#defaultSort) {
            return { [this.#defaultSort.name]: this.#defaultSort.sortOrder };
        }
        for (const sort of activeSorts) {
            sortInput = { ...sortInput, [sort.name]: sort.sortOrder };
        }
        return sortInput;
    }
    serialize() {
        const activeSorts = this.#sorts.filter(s => s.sortOrder !== undefined);
        return activeSorts.map(s => `${s.name}:${s.sortOrder}`).join(';');
    }
    onSetValue() {
        this.#valueChanges$.next(this.#sorts
            .filter(f => f.sortOrder !== undefined)
            .map(s => ({ name: s.name, sortOrder: s.sortOrder })));
    }
}
//# sourceMappingURL=data:application/json;base64,