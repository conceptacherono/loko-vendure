import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../local-storage/local-storage.service";
export class DataTableConfigService {
    constructor(localStorageService) {
        this.localStorageService = localStorageService;
    }
    getConfig(dataTableId) {
        const dataTableConfig = this.localStorageService.get('dataTableConfig') ?? {};
        if (dataTableId) {
            return (dataTableConfig[dataTableId] ?? {
                visibility: [],
                order: {},
                showSearchFilterRow: false,
                filterPresets: [],
            });
        }
        return dataTableConfig;
    }
    setConfig(idOrConfig, maybeConfig) {
        const currentConfig = this.getConfig();
        if (typeof idOrConfig === 'string') {
            if (maybeConfig) {
                this.localStorageService.set('dataTableConfig', {
                    ...currentConfig,
                    [idOrConfig]: maybeConfig,
                });
            }
        }
        else {
            this.localStorageService.set('dataTableConfig', { ...currentConfig, ...idOrConfig });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DataTableConfigService, deps: [{ token: i1.LocalStorageService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DataTableConfigService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DataTableConfigService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.LocalStorageService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvcHJvdmlkZXJzL2RhdGEtdGFibGUvZGF0YS10YWJsZS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFNM0MsTUFBTSxPQUFPLHNCQUFzQjtJQUMvQixZQUFvQixtQkFBd0M7UUFBeEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUFHLENBQUM7SUFJaEUsU0FBUyxDQUFDLFdBQW9CO1FBQzFCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDOUUsSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUNkLE9BQU8sQ0FDSCxlQUFlLENBQUMsV0FBVyxDQUFDLElBQUk7Z0JBQzVCLFVBQVUsRUFBRSxFQUFFO2dCQUNkLEtBQUssRUFBRSxFQUFFO2dCQUNULG1CQUFtQixFQUFFLEtBQUs7Z0JBQzFCLGFBQWEsRUFBRSxFQUFFO2FBQ3BCLENBQ0osQ0FBQztRQUNOLENBQUM7UUFDRCxPQUFPLGVBQWUsQ0FBQztJQUMzQixDQUFDO0lBSUQsU0FBUyxDQUFDLFVBQW9DLEVBQUUsV0FBcUM7UUFDakYsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3ZDLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDakMsSUFBSSxXQUFXLEVBQUUsQ0FBQztnQkFDZCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFO29CQUM1QyxHQUFHLGFBQWE7b0JBQ2hCLENBQUMsVUFBVSxDQUFDLEVBQUUsV0FBVztpQkFDNUIsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztRQUNMLENBQUM7YUFBTSxDQUFDO1lBQ0osSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEdBQUcsYUFBYSxFQUFFLEdBQUcsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUN6RixDQUFDO0lBQ0wsQ0FBQzs4R0FsQ1Esc0JBQXNCO2tIQUF0QixzQkFBc0IsY0FGbkIsTUFBTTs7MkZBRVQsc0JBQXNCO2tCQUhsQyxVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YVRhYmxlQ29uZmlnLCBMb2NhbFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vbG9jYWwtc3RvcmFnZS9sb2NhbC1zdG9yYWdlLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlQ29uZmlnU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsU3RvcmFnZVNlcnZpY2U6IExvY2FsU3RvcmFnZVNlcnZpY2UpIHt9XHJcblxyXG4gICAgZ2V0Q29uZmlnKCk6IERhdGFUYWJsZUNvbmZpZztcclxuICAgIGdldENvbmZpZyhkYXRhVGFibGVJZDogc3RyaW5nKTogRGF0YVRhYmxlQ29uZmlnW3N0cmluZ107XHJcbiAgICBnZXRDb25maWcoZGF0YVRhYmxlSWQ/OiBzdHJpbmcpOiBEYXRhVGFibGVDb25maWdbc3RyaW5nXSB8IERhdGFUYWJsZUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgZGF0YVRhYmxlQ29uZmlnID0gdGhpcy5sb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldCgnZGF0YVRhYmxlQ29uZmlnJykgPz8ge307XHJcbiAgICAgICAgaWYgKGRhdGFUYWJsZUlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBkYXRhVGFibGVDb25maWdbZGF0YVRhYmxlSWRdID8/IHtcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBvcmRlcjoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd1NlYXJjaEZpbHRlclJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyUHJlc2V0czogW10sXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRhVGFibGVDb25maWc7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29uZmlnKGRhdGFUYWJsZUlkOiBzdHJpbmcsIGNvbmZpZzogRGF0YVRhYmxlQ29uZmlnW3N0cmluZ10pOiB2b2lkO1xyXG4gICAgc2V0Q29uZmlnKGRhdGFUYWJsZUNvbmZpZzogRGF0YVRhYmxlQ29uZmlnKTogdm9pZDtcclxuICAgIHNldENvbmZpZyhpZE9yQ29uZmlnOiBzdHJpbmcgfCBEYXRhVGFibGVDb25maWcsIG1heWJlQ29uZmlnPzogRGF0YVRhYmxlQ29uZmlnW3N0cmluZ10pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcclxuICAgICAgICBpZiAodHlwZW9mIGlkT3JDb25maWcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXliZUNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldCgnZGF0YVRhYmxlQ29uZmlnJywge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLmN1cnJlbnRDb25maWcsXHJcbiAgICAgICAgICAgICAgICAgICAgW2lkT3JDb25maWddOiBtYXliZUNvbmZpZyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldCgnZGF0YVRhYmxlQ29uZmlnJywgeyAuLi5jdXJyZW50Q29uZmlnLCAuLi5pZE9yQ29uZmlnIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=