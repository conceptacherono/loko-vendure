import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { CanDeactivateDetailGuard } from '../../shared/providers/routing/can-deactivate-detail-guard';
import * as i0 from "@angular/core";
export class PageService {
    constructor() {
        this.registry = new Map();
    }
    registerPageTab(config) {
        if (!this.registry.has(config.location)) {
            this.registry.set(config.location, []);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const pages = this.registry.get(config.location);
        if (pages.find(p => p.tab === config.tab)) {
            throw new Error(`A page with the tab "${config.tab}" has already been registered`);
        }
        pages.push(config);
    }
    getPageTabRoutes(location) {
        const configs = this.registry.get(location) || [];
        return configs.map(config => {
            const route = {
                path: config.route || '',
                pathMatch: config.route ? 'prefix' : 'full',
            };
            let component;
            if (isComponentWithResolver(config.component)) {
                const { component: cmp, breadcrumbFn, resolveFn } = config.component;
                component = cmp;
                route.resolve = { detail: resolveFn };
                route.data = {
                    breadcrumb: data => data.detail.entity.pipe(map(entity => breadcrumbFn(entity))),
                };
            }
            else {
                component = config.component;
            }
            const guards = typeof component.prototype.canDeactivate === 'function' ? [CanDeactivateDetailGuard] : [];
            route.component = component;
            route.canDeactivate = guards;
            if (config.routeConfig) {
                Object.assign(route, config.routeConfig);
            }
            return route;
        });
    }
    getPageTabs(location) {
        return this.registry.get(location)?.sort((a, b) => (a.priority ?? 0) - (b.priority ?? 0)) || [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
function isComponentWithResolver(input) {
    return input && input.hasOwnProperty('resolveFn');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9wcm92aWRlcnMvcGFnZS9wYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNERBQTRELENBQUM7O0FBc0R0RyxNQUFNLE9BQU8sV0FBVztJQUh4QjtRQUlZLGFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBbUMsQ0FBQztLQWdEakU7SUE5Q0csZUFBZSxDQUFDLE1BQXFCO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFDRCxvRUFBb0U7UUFDcEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBRSxDQUFDO1FBQ2xELElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDeEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsTUFBTSxDQUFDLEdBQUcsK0JBQStCLENBQUMsQ0FBQztRQUN2RixDQUFDO1FBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBd0I7UUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2xELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN4QixNQUFNLEtBQUssR0FBVTtnQkFDakIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDeEIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTTthQUM5QyxDQUFDO1lBRUYsSUFBSSxTQUFvQixDQUFDO1lBQ3pCLElBQUksdUJBQXVCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7Z0JBQzVDLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO2dCQUNyRSxTQUFTLEdBQUcsR0FBRyxDQUFDO2dCQUNoQixLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxDQUFDO2dCQUN0QyxLQUFLLENBQUMsSUFBSSxHQUFHO29CQUNULFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztpQkFDbkYsQ0FBQztZQUNOLENBQUM7aUJBQU0sQ0FBQztnQkFDSixTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUNqQyxDQUFDO1lBQ0QsTUFBTSxNQUFNLEdBQ1IsT0FBTyxTQUFTLENBQUMsU0FBUyxDQUFDLGFBQWEsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzlGLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1lBQzVCLEtBQUssQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO1lBQzdCLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUNyQixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDN0MsQ0FBQztZQUVELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUF3QjtRQUNoQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEcsQ0FBQzs4R0FoRFEsV0FBVztrSEFBWCxXQUFXLGNBRlIsTUFBTTs7MkZBRVQsV0FBVztrQkFIdkIsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7O0FBb0RELFNBQVMsdUJBQXVCLENBQUMsS0FBVTtJQUN2QyxPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBkZXRhaWxDb21wb25lbnRXaXRoUmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9jb21tb24vYmFzZS1kZXRhaWwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUGFnZUxvY2F0aW9uSWQgfSBmcm9tICcuLi8uLi9jb21tb24vY29tcG9uZW50LXJlZ2lzdHJ5LXR5cGVzJztcclxuaW1wb3J0IHsgQ2FuRGVhY3RpdmF0ZURldGFpbEd1YXJkIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3Byb3ZpZGVycy9yb3V0aW5nL2Nhbi1kZWFjdGl2YXRlLWRldGFpbC1ndWFyZCc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBvYmplY3QgdXNlZCB0byBjb25maWd1cmUgYSBuZXcgcGFnZSB0YWIuXHJcbiAqXHJcbiAqIEBkb2NzQ2F0ZWdvcnkgdGFic1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQYWdlVGFiQ29uZmlnIHtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBBIHZhbGlkIGxvY2F0aW9uIHJlcHJlc2VudGluZyBhIGxpc3Qgb3IgZGV0YWlsIHBhZ2UuXHJcbiAgICAgKi9cclxuICAgIGxvY2F0aW9uOiBQYWdlTG9jYXRpb25JZDtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBBbiBvcHRpb25hbCBpY29uIHRvIGRpc3BsYXkgaW4gdGhlIHRhYi4gVGhlIGljb25cclxuICAgICAqIHNob3VsZCBiZSBhIHZhbGlkIHNoYXBlIG5hbWUgZnJvbSB0aGUgW0NsYXJpdHkgSWNvbnNdKGh0dHBzOi8vY29yZS5jbGFyaXR5LmRlc2lnbi9mb3VuZGF0aW9uL2ljb25zL3NoYXBlcy8pXHJcbiAgICAgKiBzZXQuXHJcbiAgICAgKi9cclxuICAgIHRhYkljb24/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogVGhlIHJvdXRlIHBhdGggdG8gdGhlIHRhYi4gVGhpcyB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZVxyXG4gICAgICogcm91dGUgb2YgdGhlIHBhcmVudCBwYWdlLlxyXG4gICAgICovXHJcbiAgICByb3V0ZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB0YWIgdG8gZGlzcGxheSBpbiB0aGUgVUkuXHJcbiAgICAgKi9cclxuICAgIHRhYjogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFRoZSBwcmlvcml0eSBvZiB0aGUgdGFiLiBUYWJzIHdpdGggYSBsb3dlciBwcmlvcml0eSB3aWxsIGJlIGRpc3BsYXllZCBmaXJzdC5cclxuICAgICAqL1xyXG4gICAgcHJpb3JpdHk/OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogVGhlIGNvbXBvbmVudCB0byByZW5kZXIgYXQgdGhlIHJvdXRlIG9mIHRoZSB0YWIuXHJcbiAgICAgKi9cclxuICAgIGNvbXBvbmVudDogVHlwZTxhbnk+IHwgUmV0dXJuVHlwZTx0eXBlb2YgZGV0YWlsQ29tcG9uZW50V2l0aFJlc29sdmVyPjtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBZb3UgY2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhbnkgbmF0aXZlIEFuZ3VsYXIgcm91dGUgY29uZmlndXJhdGlvbiBvcHRpb25zIGhlcmUuXHJcbiAgICAgKiBBbnkgdmFsdWVzIHByb3ZpZGVkIGhlcmUgd2lsbCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGUgdmFsdWVzIGdlbmVyYXRlZFxyXG4gICAgICogYnkgdGhlIGByb3V0ZWAgYW5kIGBjb21wb25lbnRgIHByb3BlcnRpZXMuXHJcbiAgICAgKi9cclxuICAgIHJvdXRlQ29uZmlnPzogUm91dGU7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFBhZ2VTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVnaXN0cnkgPSBuZXcgTWFwPFBhZ2VMb2NhdGlvbklkLCBQYWdlVGFiQ29uZmlnW10+KCk7XHJcblxyXG4gICAgcmVnaXN0ZXJQYWdlVGFiKGNvbmZpZzogUGFnZVRhYkNvbmZpZykge1xyXG4gICAgICAgIGlmICghdGhpcy5yZWdpc3RyeS5oYXMoY29uZmlnLmxvY2F0aW9uKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdHJ5LnNldChjb25maWcubG9jYXRpb24sIFtdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cclxuICAgICAgICBjb25zdCBwYWdlcyA9IHRoaXMucmVnaXN0cnkuZ2V0KGNvbmZpZy5sb2NhdGlvbikhO1xyXG4gICAgICAgIGlmIChwYWdlcy5maW5kKHAgPT4gcC50YWIgPT09IGNvbmZpZy50YWIpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBwYWdlIHdpdGggdGhlIHRhYiBcIiR7Y29uZmlnLnRhYn1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFnZXMucHVzaChjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBhZ2VUYWJSb3V0ZXMobG9jYXRpb246IFBhZ2VMb2NhdGlvbklkKTogUm91dGVbXSB7XHJcbiAgICAgICAgY29uc3QgY29uZmlncyA9IHRoaXMucmVnaXN0cnkuZ2V0KGxvY2F0aW9uKSB8fCBbXTtcclxuICAgICAgICByZXR1cm4gY29uZmlncy5tYXAoY29uZmlnID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgcm91dGU6IFJvdXRlID0ge1xyXG4gICAgICAgICAgICAgICAgcGF0aDogY29uZmlnLnJvdXRlIHx8ICcnLFxyXG4gICAgICAgICAgICAgICAgcGF0aE1hdGNoOiBjb25maWcucm91dGUgPyAncHJlZml4JyA6ICdmdWxsJyxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb21wb25lbnQ6IFR5cGU8YW55PjtcclxuICAgICAgICAgICAgaWYgKGlzQ29tcG9uZW50V2l0aFJlc29sdmVyKGNvbmZpZy5jb21wb25lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNvbXBvbmVudDogY21wLCBicmVhZGNydW1iRm4sIHJlc29sdmVGbiB9ID0gY29uZmlnLmNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudCA9IGNtcDtcclxuICAgICAgICAgICAgICAgIHJvdXRlLnJlc29sdmUgPSB7IGRldGFpbDogcmVzb2x2ZUZuIH07XHJcbiAgICAgICAgICAgICAgICByb3V0ZS5kYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFkY3J1bWI6IGRhdGEgPT4gZGF0YS5kZXRhaWwuZW50aXR5LnBpcGUobWFwKGVudGl0eSA9PiBicmVhZGNydW1iRm4oZW50aXR5KSkpLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudCA9IGNvbmZpZy5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZ3VhcmRzID1cclxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb21wb25lbnQucHJvdG90eXBlLmNhbkRlYWN0aXZhdGUgPT09ICdmdW5jdGlvbicgPyBbQ2FuRGVhY3RpdmF0ZURldGFpbEd1YXJkXSA6IFtdO1xyXG4gICAgICAgICAgICByb3V0ZS5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgICAgIHJvdXRlLmNhbkRlYWN0aXZhdGUgPSBndWFyZHM7XHJcbiAgICAgICAgICAgIGlmIChjb25maWcucm91dGVDb25maWcpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocm91dGUsIGNvbmZpZy5yb3V0ZUNvbmZpZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByb3V0ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQYWdlVGFicyhsb2NhdGlvbjogUGFnZUxvY2F0aW9uSWQpOiBQYWdlVGFiQ29uZmlnW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldChsb2NhdGlvbik/LnNvcnQoKGEsIGIpID0+IChhLnByaW9yaXR5ID8/IDApIC0gKGIucHJpb3JpdHkgPz8gMCkpIHx8IFtdO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0NvbXBvbmVudFdpdGhSZXNvbHZlcihpbnB1dDogYW55KTogaW5wdXQgaXMgUmV0dXJuVHlwZTx0eXBlb2YgZGV0YWlsQ29tcG9uZW50V2l0aFJlc29sdmVyPiB7XHJcbiAgICByZXR1cm4gaW5wdXQgJiYgaW5wdXQuaGFzT3duUHJvcGVydHkoJ3Jlc29sdmVGbicpO1xyXG59XHJcbiJdfQ==