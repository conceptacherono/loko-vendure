/* eslint-disable no-console */
import { Injectable } from '@angular/core';
import { TranslateMessageFormatCompiler, } from 'ngx-translate-messageformat-compiler';
import * as i0 from "@angular/core";
/**
 * Work-around for Angular 9 compat.
 * See https://github.com/lephyrus/ngx-translate-messageformat-compiler/issues/53#issuecomment-583677994
 *
 * Also logs errors which would otherwise get swallowed by ngx-translate. This is important
 * because it is quite easy to make errors in messageformat syntax, and without clear
 * error messages it's very hard to debug.
 */
export class InjectableTranslateMessageFormatCompiler extends TranslateMessageFormatCompiler {
    compileTranslations(value, lang) {
        try {
            return super.compileTranslations(value, lang);
        }
        catch (e) {
            console.error(`There was an error with the ${lang} translations:`);
            console.log(e);
            console.log(`Check the messageformat docs: https://messageformat.github.io/messageformat/page-guide`);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: InjectableTranslateMessageFormatCompiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: InjectableTranslateMessageFormatCompiler, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: InjectableTranslateMessageFormatCompiler, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLW1lc3NhZ2UtZm9ybWF0LWNvbXBpbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9wcm92aWRlcnMvaTE4bi9jdXN0b20tbWVzc2FnZS1mb3JtYXQtY29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBQy9CLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUNILDhCQUE4QixHQUVqQyxNQUFNLHNDQUFzQyxDQUFDOztBQUU5Qzs7Ozs7OztHQU9HO0FBRUgsTUFBTSxPQUFPLHdDQUF5QyxTQUFRLDhCQUE4QjtJQUN4RixtQkFBbUIsQ0FBQyxLQUFVLEVBQUUsSUFBWTtRQUN4QyxJQUFJLENBQUM7WUFDRCxPQUFPLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUFDLE9BQU8sQ0FBTSxFQUFFLENBQUM7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLCtCQUErQixJQUFJLGdCQUFnQixDQUFDLENBQUM7WUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNmLE9BQU8sQ0FBQyxHQUFHLENBQ1Asd0ZBQXdGLENBQzNGLENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQzs4R0FYUSx3Q0FBd0M7a0hBQXhDLHdDQUF3QyxjQUQzQixNQUFNOzsyRkFDbkIsd0NBQXdDO2tCQURwRCxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gICAgVHJhbnNsYXRlTWVzc2FnZUZvcm1hdENvbXBpbGVyLFxyXG4gICAgVHJhbnNsYXRlTWVzc2FnZUZvcm1hdERlYnVnQ29tcGlsZXIsXHJcbn0gZnJvbSAnbmd4LXRyYW5zbGF0ZS1tZXNzYWdlZm9ybWF0LWNvbXBpbGVyJztcclxuXHJcbi8qKlxyXG4gKiBXb3JrLWFyb3VuZCBmb3IgQW5ndWxhciA5IGNvbXBhdC5cclxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXBoeXJ1cy9uZ3gtdHJhbnNsYXRlLW1lc3NhZ2Vmb3JtYXQtY29tcGlsZXIvaXNzdWVzLzUzI2lzc3VlY29tbWVudC01ODM2Nzc5OTRcclxuICpcclxuICogQWxzbyBsb2dzIGVycm9ycyB3aGljaCB3b3VsZCBvdGhlcndpc2UgZ2V0IHN3YWxsb3dlZCBieSBuZ3gtdHJhbnNsYXRlLiBUaGlzIGlzIGltcG9ydGFudFxyXG4gKiBiZWNhdXNlIGl0IGlzIHF1aXRlIGVhc3kgdG8gbWFrZSBlcnJvcnMgaW4gbWVzc2FnZWZvcm1hdCBzeW50YXgsIGFuZCB3aXRob3V0IGNsZWFyXHJcbiAqIGVycm9yIG1lc3NhZ2VzIGl0J3MgdmVyeSBoYXJkIHRvIGRlYnVnLlxyXG4gKi9cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIEluamVjdGFibGVUcmFuc2xhdGVNZXNzYWdlRm9ybWF0Q29tcGlsZXIgZXh0ZW5kcyBUcmFuc2xhdGVNZXNzYWdlRm9ybWF0Q29tcGlsZXIge1xyXG4gICAgY29tcGlsZVRyYW5zbGF0aW9ucyh2YWx1ZTogYW55LCBsYW5nOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5jb21waWxlVHJhbnNsYXRpb25zKHZhbHVlLCBsYW5nKTtcclxuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgVGhlcmUgd2FzIGFuIGVycm9yIHdpdGggdGhlICR7bGFuZ30gdHJhbnNsYXRpb25zOmApO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgICAgICBgQ2hlY2sgdGhlIG1lc3NhZ2Vmb3JtYXQgZG9jczogaHR0cHM6Ly9tZXNzYWdlZm9ybWF0LmdpdGh1Yi5pby9tZXNzYWdlZm9ybWF0L3BhZ2UtZ3VpZGVgLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=