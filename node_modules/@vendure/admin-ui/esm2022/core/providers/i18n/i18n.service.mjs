import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { LanguageCode } from '../../common/generated-types';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
/** @dynamic */
export class I18nService {
    get availableLanguages() {
        return [...this._availableLanguages];
    }
    get availableLocales() {
        return [...this._availableLocales];
    }
    constructor(ngxTranslate, document) {
        this.ngxTranslate = ngxTranslate;
        this.document = document;
        this._availableLocales = [];
        this._availableLanguages = [];
    }
    /**
     * Set the default language
     */
    setDefaultLanguage(languageCode) {
        this.ngxTranslate.setDefaultLang(languageCode);
    }
    /**
     * Set the UI language
     */
    setLanguage(language) {
        this.ngxTranslate.use(language);
        if (this.document?.documentElement) {
            this.document.documentElement.lang = language;
        }
    }
    /**
     * Set the available UI languages
     */
    setAvailableLanguages(languages) {
        this._availableLanguages = languages;
    }
    /**
     * Set the available UI locales
     */
    setAvailableLocales(locales) {
        this._availableLocales = locales;
    }
    /**
     * Translate the given key.
     */
    translate(key, params) {
        return this.ngxTranslate.instant(key, params);
    }
    /**
     * Returns true if the given language code is a right-to-left language.
     */
    isRTL(languageCode) {
        const rtlLanguageCodes = [
            LanguageCode.ar,
            LanguageCode.he,
            LanguageCode.fa,
            LanguageCode.ur,
            LanguageCode.ps,
        ];
        return rtlLanguageCodes.includes(languageCode);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: I18nService, deps: [{ token: i1.TranslateService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: I18nService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: I18nService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.TranslateService }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9wcm92aWRlcnMvaTE4bi9pMThuLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7O0FBRTVELGVBQWU7QUFJZixNQUFNLE9BQU8sV0FBVztJQUlwQixJQUFJLGtCQUFrQjtRQUNsQixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDaEIsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELFlBQW9CLFlBQThCLEVBQTRCLFFBQWtCO1FBQTVFLGlCQUFZLEdBQVosWUFBWSxDQUFrQjtRQUE0QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBWGhHLHNCQUFpQixHQUFhLEVBQUUsQ0FBQztRQUNqQyx3QkFBbUIsR0FBbUIsRUFBRSxDQUFDO0lBVTBELENBQUM7SUFFcEc7O09BRUc7SUFDSCxrQkFBa0IsQ0FBQyxZQUEwQjtRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXLENBQUMsUUFBc0I7UUFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLGVBQWUsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDbEQsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILHFCQUFxQixDQUFDLFNBQXlCO1FBQzNDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsbUJBQW1CLENBQUMsT0FBaUI7UUFDakMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQztJQUNyQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxTQUFTLENBQUMsR0FBc0IsRUFBRSxNQUFZO1FBQzFDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxZQUEwQjtRQUM1QixNQUFNLGdCQUFnQixHQUFHO1lBQ3JCLFlBQVksQ0FBQyxFQUFFO1lBQ2YsWUFBWSxDQUFDLEVBQUU7WUFDZixZQUFZLENBQUMsRUFBRTtZQUNmLFlBQVksQ0FBQyxFQUFFO1lBQ2YsWUFBWSxDQUFDLEVBQUU7U0FDbEIsQ0FBQztRQUNGLE9BQU8sZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ25ELENBQUM7OEdBaEVRLFdBQVcsa0RBWXdDLFFBQVE7a0hBWjNELFdBQVcsY0FGUixNQUFNOzsyRkFFVCxXQUFXO2tCQUh2QixVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7MEJBYXdELE1BQU07MkJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuXHJcbmltcG9ydCB7IExhbmd1YWdlQ29kZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5cclxuLyoqIEBkeW5hbWljICovXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEkxOG5TZXJ2aWNlIHtcclxuICAgIF9hdmFpbGFibGVMb2NhbGVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgX2F2YWlsYWJsZUxhbmd1YWdlczogTGFuZ3VhZ2VDb2RlW10gPSBbXTtcclxuXHJcbiAgICBnZXQgYXZhaWxhYmxlTGFuZ3VhZ2VzKCk6IExhbmd1YWdlQ29kZVtdIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRoaXMuX2F2YWlsYWJsZUxhbmd1YWdlc107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGF2YWlsYWJsZUxvY2FsZXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiBbLi4udGhpcy5fYXZhaWxhYmxlTG9jYWxlc107XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ3hUcmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50KSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBkZWZhdWx0IGxhbmd1YWdlXHJcbiAgICAgKi9cclxuICAgIHNldERlZmF1bHRMYW5ndWFnZShsYW5ndWFnZUNvZGU6IExhbmd1YWdlQ29kZSkge1xyXG4gICAgICAgIHRoaXMubmd4VHJhbnNsYXRlLnNldERlZmF1bHRMYW5nKGxhbmd1YWdlQ29kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIFVJIGxhbmd1YWdlXHJcbiAgICAgKi9cclxuICAgIHNldExhbmd1YWdlKGxhbmd1YWdlOiBMYW5ndWFnZUNvZGUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm5neFRyYW5zbGF0ZS51c2UobGFuZ3VhZ2UpO1xyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50Py5kb2N1bWVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyA9IGxhbmd1YWdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgYXZhaWxhYmxlIFVJIGxhbmd1YWdlc1xyXG4gICAgICovXHJcbiAgICBzZXRBdmFpbGFibGVMYW5ndWFnZXMobGFuZ3VhZ2VzOiBMYW5ndWFnZUNvZGVbXSkge1xyXG4gICAgICAgIHRoaXMuX2F2YWlsYWJsZUxhbmd1YWdlcyA9IGxhbmd1YWdlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgYXZhaWxhYmxlIFVJIGxvY2FsZXNcclxuICAgICAqL1xyXG4gICAgc2V0QXZhaWxhYmxlTG9jYWxlcyhsb2NhbGVzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuX2F2YWlsYWJsZUxvY2FsZXMgPSBsb2NhbGVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNsYXRlIHRoZSBnaXZlbiBrZXkuXHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZShrZXk6IHN0cmluZyB8IHN0cmluZ1tdLCBwYXJhbXM/OiBhbnkpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5neFRyYW5zbGF0ZS5pbnN0YW50KGtleSwgcGFyYW1zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbGFuZ3VhZ2UgY29kZSBpcyBhIHJpZ2h0LXRvLWxlZnQgbGFuZ3VhZ2UuXHJcbiAgICAgKi9cclxuICAgIGlzUlRMKGxhbmd1YWdlQ29kZTogTGFuZ3VhZ2VDb2RlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgcnRsTGFuZ3VhZ2VDb2RlcyA9IFtcclxuICAgICAgICAgICAgTGFuZ3VhZ2VDb2RlLmFyLFxyXG4gICAgICAgICAgICBMYW5ndWFnZUNvZGUuaGUsXHJcbiAgICAgICAgICAgIExhbmd1YWdlQ29kZS5mYSxcclxuICAgICAgICAgICAgTGFuZ3VhZ2VDb2RlLnVyLFxyXG4gICAgICAgICAgICBMYW5ndWFnZUNvZGUucHMsXHJcbiAgICAgICAgXTtcclxuICAgICAgICByZXR1cm4gcnRsTGFuZ3VhZ2VDb2Rlcy5pbmNsdWRlcyhsYW5ndWFnZUNvZGUpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==