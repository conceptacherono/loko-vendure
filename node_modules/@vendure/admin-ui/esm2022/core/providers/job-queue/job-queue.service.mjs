import { Injectable } from '@angular/core';
import { EMPTY, interval, of, Subject, timer } from 'rxjs';
import { debounceTime, map, mapTo, scan, shareReplay, switchMap } from 'rxjs/operators';
import { JobState, Permission } from '../../common/generated-types';
import * as i0 from "@angular/core";
import * as i1 from "../../data/providers/data.service";
export class JobQueueService {
    constructor(dataService) {
        this.dataService = dataService;
        this.updateJob$ = new Subject();
        this.onCompleteHandlers = new Map();
        this.checkForJobs();
        this.activeJobs$ = this.updateJob$.pipe(scan((jobMap, job) => this.handleJob(jobMap, job), new Map()), map(jobMap => Array.from(jobMap.values())), debounceTime(500), shareReplay(1));
        this.subscription = this.activeJobs$
            .pipe(switchMap(jobs => {
            if (jobs.length) {
                return interval(2500).pipe(mapTo(jobs));
            }
            else {
                return of([]);
            }
        }))
            .subscribe(jobs => {
            if (jobs.length) {
                this.dataService.settings.pollJobs(jobs.map(j => j.id)).single$.subscribe(data => {
                    data.jobsById.forEach(job => {
                        this.updateJob$.next(job);
                    });
                });
            }
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * After a given delay, checks the server for any active jobs.
     */
    checkForJobs(delay = 1000) {
        timer(delay)
            .pipe(switchMap(() => this.dataService.client.userStatus().mapSingle(data => data.userStatus)), switchMap(userStatus => {
            if (userStatus.permissions.includes(Permission.ReadSettings) && userStatus.isLoggedIn) {
                return this.dataService.settings.getRunningJobs().single$;
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(data => data.jobs.items.forEach(job => this.updateJob$.next(job)));
    }
    addJob(jobId, onComplete) {
        this.dataService.settings.getJob(jobId).single$.subscribe(({ job }) => {
            if (job) {
                this.updateJob$.next(job);
                if (onComplete) {
                    this.onCompleteHandlers.set(jobId, onComplete);
                }
            }
        });
    }
    handleJob(jobMap, job) {
        switch (job.state) {
            case JobState.RUNNING:
            case JobState.PENDING:
                jobMap.set(job.id, job);
                break;
            case JobState.COMPLETED:
            case JobState.FAILED:
            case JobState.CANCELLED:
                jobMap.delete(job.id);
                const handler = this.onCompleteHandlers.get(job.id);
                if (handler) {
                    handler(job);
                    this.onCompleteHandlers.delete(job.id);
                }
                break;
        }
        return jobMap;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: JobQueueService, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: JobQueueService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: JobQueueService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.DataService }] });
//# sourceMappingURL=data:application/json;base64,