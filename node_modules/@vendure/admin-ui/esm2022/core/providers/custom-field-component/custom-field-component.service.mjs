import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../component-registry/component-registry.service";
/**
 * This service allows the registration of custom controls for customFields.
 *
 * @deprecated The ComponentRegistryService now handles custom field components directly.
 */
export class CustomFieldComponentService {
    constructor(componentRegistryService) {
        this.componentRegistryService = componentRegistryService;
    }
    /**
     * Checks whether a custom component is registered for the given entity custom field,
     * and if so returns the ID of that component.
     */
    customFieldComponentExists(entity, fieldName) {
        const id = this.generateId(entity, fieldName, true);
        return this.componentRegistryService.getInputComponent(id) ? id : undefined;
    }
    generateId(entity, fieldName, isCustomField) {
        let id = entity;
        if (isCustomField) {
            id += '-customFields';
        }
        id += '-' + fieldName;
        return id;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CustomFieldComponentService, deps: [{ token: i1.ComponentRegistryService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CustomFieldComponentService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CustomFieldComponentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.ComponentRegistryService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWZpZWxkLWNvbXBvbmVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9wcm92aWRlcnMvY3VzdG9tLWZpZWxkLWNvbXBvbmVudC9jdXN0b20tZmllbGQtY29tcG9uZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBWTNDOzs7O0dBSUc7QUFJSCxNQUFNLE9BQU8sMkJBQTJCO0lBQ3BDLFlBQW9CLHdCQUFrRDtRQUFsRCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO0lBQUcsQ0FBQztJQUUxRTs7O09BR0c7SUFDSCwwQkFBMEIsQ0FBQyxNQUE2QixFQUFFLFNBQWlCO1FBQ3ZFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwRCxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDaEYsQ0FBQztJQUVPLFVBQVUsQ0FBQyxNQUE2QixFQUFFLFNBQWlCLEVBQUUsYUFBc0I7UUFDdkYsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQ2hCLElBQUksYUFBYSxFQUFFLENBQUM7WUFDaEIsRUFBRSxJQUFJLGVBQWUsQ0FBQztRQUMxQixDQUFDO1FBQ0QsRUFBRSxJQUFJLEdBQUcsR0FBRyxTQUFTLENBQUM7UUFDdEIsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOzhHQW5CUSwyQkFBMkI7a0hBQTNCLDJCQUEyQixjQUZ4QixNQUFNOzsyRkFFVCwyQkFBMkI7a0JBSHZDLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGb3JtSW5wdXRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21tb24vY29tcG9uZW50LXJlZ2lzdHJ5LXR5cGVzJztcbmltcG9ydCB7IEN1c3RvbUZpZWxkcywgQ3VzdG9tRmllbGRzRnJhZ21lbnQgfSBmcm9tICcuLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcbmltcG9ydCB7IENvbXBvbmVudFJlZ2lzdHJ5U2VydmljZSB9IGZyb20gJy4uL2NvbXBvbmVudC1yZWdpc3RyeS9jb21wb25lbnQtcmVnaXN0cnkuc2VydmljZSc7XG5cbmV4cG9ydCB0eXBlIEN1c3RvbUZpZWxkQ29uZmlnVHlwZSA9IEN1c3RvbUZpZWxkc0ZyYWdtZW50O1xuXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbUZpZWxkQ29udHJvbCBleHRlbmRzIEZvcm1JbnB1dENvbXBvbmVudDxDdXN0b21GaWVsZENvbmZpZ1R5cGU+IHt9XG5cbmV4cG9ydCB0eXBlIEN1c3RvbUZpZWxkRW50aXR5TmFtZSA9IEV4Y2x1ZGU8a2V5b2YgQ3VzdG9tRmllbGRzLCAnX190eXBlbmFtZSc+O1xuXG4vKipcbiAqIFRoaXMgc2VydmljZSBhbGxvd3MgdGhlIHJlZ2lzdHJhdGlvbiBvZiBjdXN0b20gY29udHJvbHMgZm9yIGN1c3RvbUZpZWxkcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgQ29tcG9uZW50UmVnaXN0cnlTZXJ2aWNlIG5vdyBoYW5kbGVzIGN1c3RvbSBmaWVsZCBjb21wb25lbnRzIGRpcmVjdGx5LlxuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBDdXN0b21GaWVsZENvbXBvbmVudFNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcG9uZW50UmVnaXN0cnlTZXJ2aWNlOiBDb21wb25lbnRSZWdpc3RyeVNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhIGN1c3RvbSBjb21wb25lbnQgaXMgcmVnaXN0ZXJlZCBmb3IgdGhlIGdpdmVuIGVudGl0eSBjdXN0b20gZmllbGQsXG4gICAgICogYW5kIGlmIHNvIHJldHVybnMgdGhlIElEIG9mIHRoYXQgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGN1c3RvbUZpZWxkQ29tcG9uZW50RXhpc3RzKGVudGl0eTogQ3VzdG9tRmllbGRFbnRpdHlOYW1lLCBmaWVsZE5hbWU6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5nZW5lcmF0ZUlkKGVudGl0eSwgZmllbGROYW1lLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50UmVnaXN0cnlTZXJ2aWNlLmdldElucHV0Q29tcG9uZW50KGlkKSA/IGlkIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVJZChlbnRpdHk6IEN1c3RvbUZpZWxkRW50aXR5TmFtZSwgZmllbGROYW1lOiBzdHJpbmcsIGlzQ3VzdG9tRmllbGQ6IGJvb2xlYW4pIHtcbiAgICAgICAgbGV0IGlkID0gZW50aXR5O1xuICAgICAgICBpZiAoaXNDdXN0b21GaWVsZCkge1xuICAgICAgICAgICAgaWQgKz0gJy1jdXN0b21GaWVsZHMnO1xuICAgICAgICB9XG4gICAgICAgIGlkICs9ICctJyArIGZpZWxkTmFtZTtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbn1cbiJdfQ==