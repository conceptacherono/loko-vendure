import { Injectable } from '@angular/core';
import { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';
import { of } from 'rxjs';
import { catchError, map, mergeMap, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../local-storage/local-storage.service";
import * as i2 from "../../data/providers/data.service";
import * as i3 from "../../data/server-config";
import * as i4 from "../permissions/permissions.service";
import * as i5 from "../alerts/alerts.service";
/**
 * This service handles logic relating to authentication of the current user.
 */
export class AuthService {
    constructor(localStorageService, dataService, serverConfigService, permissionsService, alertService) {
        this.localStorageService = localStorageService;
        this.dataService = dataService;
        this.serverConfigService = serverConfigService;
        this.permissionsService = permissionsService;
        this.alertService = alertService;
    }
    /**
     * Attempts to log in via the REST login endpoint and updates the app
     * state on success.
     */
    logIn(username, password, rememberMe) {
        return this.dataService.auth.attemptLogin(username, password, rememberMe).pipe(switchMap(response => {
            if (response.login.__typename === 'CurrentUser') {
                this.setChannelToken(response.login.channels);
            }
            return this.serverConfigService.getServerConfig().then(() => response.login);
        }), switchMap(login => {
            if (login.__typename === 'CurrentUser') {
                const activeChannel = this.getActiveChannel(login.channels);
                this.permissionsService.setCurrentUserPermissions(activeChannel.permissions);
                return this.dataService.administrator.getActiveAdministrator().single$.pipe(switchMap(({ activeAdministrator }) => {
                    if (activeAdministrator) {
                        return this.dataService.client
                            .loginSuccess(activeAdministrator.id, `${activeAdministrator.firstName} ${activeAdministrator.lastName}`, activeChannel.id, login.channels)
                            .pipe(map(() => login));
                    }
                    else {
                        return of(login);
                    }
                }));
            }
            return of(login);
        }));
    }
    /**
     * Update the user status to being logged out.
     */
    logOut() {
        return this.dataService.client.userStatus().single$.pipe(switchMap(status => {
            if (status.userStatus.isLoggedIn) {
                return this.dataService.client
                    .logOut()
                    .pipe(mergeMap(() => this.dataService.auth.logOut()));
            }
            else {
                return [];
            }
        }), tap(() => {
            this.alertService.clearAlerts();
        }), map(() => true));
    }
    /**
     * Checks the app state to see if the user is already logged in,
     * and if not, attempts to validate any auth token found.
     */
    checkAuthenticatedStatus() {
        return this.dataService.client.userStatus().single$.pipe(mergeMap(data => {
            if (!data.userStatus.isLoggedIn) {
                return this.validateAuthToken();
            }
            else {
                return of(true);
            }
        }));
    }
    /**
     * Checks for an auth token and if found, attempts to validate
     * that token against the API.
     */
    validateAuthToken() {
        return this.dataService.auth.currentUser().single$.pipe(mergeMap(({ me }) => {
            if (!me) {
                return of(false);
            }
            this.setChannelToken(me.channels);
            const activeChannel = this.getActiveChannel(me.channels);
            this.permissionsService.setCurrentUserPermissions(activeChannel.permissions);
            return this.dataService.administrator.getActiveAdministrator().single$.pipe(switchMap(({ activeAdministrator }) => {
                if (activeAdministrator) {
                    return this.dataService.client
                        .loginSuccess(activeAdministrator.id, `${activeAdministrator.firstName} ${activeAdministrator.lastName}`, activeChannel.id, me.channels)
                        .pipe(map(() => true));
                }
                else {
                    return of(false);
                }
            }));
        }), map(() => true), catchError(err => of(false)));
    }
    getActiveChannel(userChannels) {
        const lastActiveChannelToken = this.localStorageService.get('activeChannelToken');
        if (lastActiveChannelToken) {
            const lastActiveChannel = userChannels.find(c => c.token === lastActiveChannelToken);
            if (lastActiveChannel) {
                return lastActiveChannel;
            }
        }
        const defaultChannel = userChannels.find(c => c.code === DEFAULT_CHANNEL_CODE);
        return defaultChannel || userChannels[0];
    }
    setChannelToken(userChannels) {
        this.localStorageService.set('activeChannelToken', this.getActiveChannel(userChannels).token);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AuthService, deps: [{ token: i1.LocalStorageService }, { token: i2.DataService }, { token: i3.ServerConfigService }, { token: i4.PermissionsService }, { token: i5.AlertsService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AuthService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AuthService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.LocalStorageService }, { type: i2.DataService }, { type: i3.ServerConfigService }, { type: i4.PermissionsService }, { type: i5.AlertsService }] });
//# sourceMappingURL=data:application/json;base64,