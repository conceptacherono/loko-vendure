import { Injectable } from '@angular/core';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { BehaviorSubject, combineLatest, first, isObservable, of, Subject, switchMap, } from 'rxjs';
import { filter, map, startWith, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../permissions/permissions.service";
import * as i2 from "../../data/providers/data.service";
import * as i3 from "../notification/notification.service";
import * as i4 from "../modal/modal.service";
export class Alert {
    constructor(config, context) {
        this.config = config;
        this.context = context;
        this.hasRun$ = new BehaviorSubject(false);
        this.data$ = new BehaviorSubject(undefined);
        if (this.config.recheck) {
            this.subscription = this.config.recheck(this.context).subscribe(() => this.runCheck());
        }
        this.activeAlert$ = combineLatest([this.data$, this.hasRun$]).pipe(map(([data, hasRun]) => {
            if (!data) {
                return;
            }
            const isAlert = this.config.isAlert(data, this.context);
            if (!isAlert) {
                return;
            }
            return {
                id: this.config.id,
                runAction: () => {
                    if (!hasRun) {
                        this.config.action(data, this.context);
                        this.hasRun$.next(true);
                    }
                },
                hasRun,
                label: this.config.label(data, this.context),
            };
        }));
    }
    get id() {
        return this.config.id;
    }
    runCheck() {
        const result = this.config.check(this.context);
        if (result instanceof Promise) {
            result.then(data => this.data$.next(data));
        }
        else if (isObservable(result)) {
            result.pipe(take(1)).subscribe(data => this.data$.next(data));
        }
        else {
            this.data$.next(result);
        }
        this.hasRun$.next(false);
    }
    destroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
export class AlertsService {
    constructor(permissionsService, injector, dataService, notificationService, modalService) {
        this.permissionsService = permissionsService;
        this.injector = injector;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.alertsMap = new Map();
        this.configUpdated = new Subject();
        const alerts$ = this.configUpdated.pipe(map(() => [...this.alertsMap.values()]), startWith([...this.alertsMap.values()]));
        this.activeAlerts$ = alerts$.pipe(switchMap(() => {
            const alerts = [...this.alertsMap.values()];
            const isAlertStreams = alerts.map(alert => alert.activeAlert$);
            return combineLatest(isAlertStreams);
        }), map(alertStates => alertStates.filter(notNullOrUndefined)));
    }
    configureAlert(config) {
        this.hasSufficientPermissions(config.requiredPermissions)
            .pipe(first())
            .subscribe(hasPermissions => {
            if (hasPermissions) {
                this.alertsMap.set(config.id, new Alert(config, this.createContext()));
                this.configUpdated.next();
            }
        });
    }
    hasSufficientPermissions(permissions) {
        if (!permissions || permissions.length === 0) {
            return of(true);
        }
        return this.permissionsService.currentUserPermissions$.pipe(filter(permissions => permissions.length > 0), map(() => this.permissionsService.userHasPermissions(permissions)));
    }
    refresh(id) {
        if (id) {
            this.alertsMap.get(id)?.runCheck();
        }
        else {
            this.alertsMap.forEach(config => config.runCheck());
        }
    }
    clearAlerts() {
        this.alertsMap.forEach(alert => alert.destroy());
        this.alertsMap.clear();
        this.configUpdated.next();
    }
    createContext() {
        return {
            injector: this.injector,
            dataService: this.dataService,
            notificationService: this.notificationService,
            modalService: this.modalService,
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AlertsService, deps: [{ token: i1.PermissionsService }, { token: i0.Injector }, { token: i2.DataService }, { token: i3.NotificationService }, { token: i4.ModalService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AlertsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AlertsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.PermissionsService }, { type: i0.Injector }, { type: i2.DataService }, { type: i3.NotificationService }, { type: i4.ModalService }] });
//# sourceMappingURL=data:application/json;base64,