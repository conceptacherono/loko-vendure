import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../data/providers/data.service";
import * as i2 from "@clr/angular";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "../../components/help-tooltip/help-tooltip.component";
import * as i6 from "../dynamic-form-input/dynamic-form-input.component";
import * as i7 from "../../pipes/custom-field-label.pipe";
import * as i8 from "../../pipes/custom-field-description.pipe";
/**
 * @description
 * A checkbox input. The default input component for `boolean` fields.
 *
 * @docsCategory custom-input-components
 * @docsPage default-inputs
 */
export class StructFormInputComponent {
    static { this.id = 'struct-form-input'; }
    constructor(dataService) {
        this.dataService = dataService;
        this.structFormGroup = new FormGroup({});
    }
    ngOnInit() {
        this.uiLanguage$ = this.dataService.client
            .uiState()
            .stream$.pipe(map(({ uiState }) => uiState.language));
        const value = this.formControl.value || {};
        this.fields =
            this.config.fields?.map(field => {
                const formControl = new FormControl(value[field.name]);
                this.structFormGroup.addControl(field.name, formControl);
                return { def: field, formControl };
            }) ?? [];
        this.structFormGroup.valueChanges.subscribe(value => {
            this.formControl.setValue(value);
            this.formControl.markAsDirty();
        });
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: StructFormInputComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: StructFormInputComponent, selector: "vdr-struct-form-input", ngImport: i0, template: "<div [formGroup]=\"structFormGroup\" class=\"struct-container p-2\">\r\n    <div *ngFor=\"let field of fields\" class=\"flex mb-1\">\r\n        <label class=\"struct-field-wrapper\">\r\n            <div class=\"struct-field-label\">\r\n                {{ field.def | customFieldLabel: (uiLanguage$ | async) }}\r\n                <vdr-help-tooltip\r\n                    *ngIf=\"field.def | customFieldDescription: (uiLanguage$ | async) as description\"\r\n                    [content]=\"description\"\r\n                ></vdr-help-tooltip>\r\n            </div>\r\n\r\n            <vdr-dynamic-form-input\r\n                [readonly]=\"false\"\r\n                [control]=\"field.formControl\"\r\n                [def]=\"field.def\"\r\n                [formControlName]=\"field.def.name\"\r\n            >\r\n            </vdr-dynamic-form-input>\r\n        </label>\r\n    </div>\r\n</div>\r\n", styles: [".struct-container{border-left:2px solid var(--color-weight-100)}.struct-field-wrapper{display:flex;width:100%;align-items:baseline}.struct-field-wrapper>.struct-field-label{flex:1}.struct-field-wrapper>vdr-dynamic-form-input{flex:2}\n"], dependencies: [{ kind: "directive", type: i2.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i5.HelpTooltipComponent, selector: "vdr-help-tooltip", inputs: ["content", "position"] }, { kind: "component", type: i6.DynamicFormInputComponent, selector: "vdr-dynamic-form-input", inputs: ["def", "readonly", "control"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i7.CustomFieldLabelPipe, name: "customFieldLabel" }, { kind: "pipe", type: i8.CustomFieldDescriptionPipe, name: "customFieldDescription" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: StructFormInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-struct-form-input', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [formGroup]=\"structFormGroup\" class=\"struct-container p-2\">\r\n    <div *ngFor=\"let field of fields\" class=\"flex mb-1\">\r\n        <label class=\"struct-field-wrapper\">\r\n            <div class=\"struct-field-label\">\r\n                {{ field.def | customFieldLabel: (uiLanguage$ | async) }}\r\n                <vdr-help-tooltip\r\n                    *ngIf=\"field.def | customFieldDescription: (uiLanguage$ | async) as description\"\r\n                    [content]=\"description\"\r\n                ></vdr-help-tooltip>\r\n            </div>\r\n\r\n            <vdr-dynamic-form-input\r\n                [readonly]=\"false\"\r\n                [control]=\"field.formControl\"\r\n                [def]=\"field.def\"\r\n                [formControlName]=\"field.def.name\"\r\n            >\r\n            </vdr-dynamic-form-input>\r\n        </label>\r\n    </div>\r\n</div>\r\n", styles: [".struct-container{border-left:2px solid var(--color-weight-100)}.struct-field-wrapper{display:flex;width:100%;align-items:baseline}.struct-field-wrapper>.struct-field-label{flex:1}.struct-field-wrapper>vdr-dynamic-form-input{flex:2}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0LWZvcm0taW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvZHluYW1pYy1mb3JtLWlucHV0cy9zdHJ1Y3QtZm9ybS1pbnB1dC9zdHJ1Y3QtZm9ybS1pbnB1dC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9keW5hbWljLWZvcm0taW5wdXRzL3N0cnVjdC1mb3JtLWlucHV0L3N0cnVjdC1mb3JtLWlucHV0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFzQixNQUFNLGdCQUFnQixDQUFDO0FBRzVFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7OztBQU1yQzs7Ozs7O0dBTUc7QUFPSCxNQUFNLE9BQU8sd0JBQXdCO2FBQ2pCLE9BQUUsR0FBMkIsbUJBQW1CLEFBQTlDLENBQStDO0lBWWpFLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBUGxDLG9CQUFlLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFPQyxDQUFDO0lBRWhELFFBQVE7UUFDSixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTTthQUNyQyxPQUFPLEVBQUU7YUFDVCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRTFELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUUzQyxJQUFJLENBQUMsTUFBTTtZQUNOLElBQUksQ0FBQyxNQUErQyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3RFLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztnQkFDekQsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUM7WUFDdkMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2hELElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDckMsQ0FBQzs4R0FyQ1Esd0JBQXdCO2tHQUF4Qix3QkFBd0IsNkRDdkJyQyxvNEJBcUJBOzsyRkRFYSx3QkFBd0I7a0JBTnBDLFNBQVM7K0JBQ0ksdUJBQXVCLG1CQUdoQix1QkFBdUIsQ0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVW50eXBlZEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBEZWZhdWx0Rm9ybUNvbXBvbmVudENvbmZpZywgRGVmYXVsdEZvcm1Db21wb25lbnRJZCB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2hhcmVkLXR5cGVzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IEZvcm1JbnB1dENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jb21wb25lbnQtcmVnaXN0cnktdHlwZXMnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUNvZGUsIFN0cnVjdEN1c3RvbUZpZWxkRnJhZ21lbnQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcclxuaW1wb3J0IHsgRGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9kYXRhL3Byb3ZpZGVycy9kYXRhLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIGNoZWNrYm94IGlucHV0LiBUaGUgZGVmYXVsdCBpbnB1dCBjb21wb25lbnQgZm9yIGBib29sZWFuYCBmaWVsZHMuXHJcbiAqXHJcbiAqIEBkb2NzQ2F0ZWdvcnkgY3VzdG9tLWlucHV0LWNvbXBvbmVudHNcclxuICogQGRvY3NQYWdlIGRlZmF1bHQtaW5wdXRzXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLXN0cnVjdC1mb3JtLWlucHV0JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9zdHJ1Y3QtZm9ybS1pbnB1dC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9zdHJ1Y3QtZm9ybS1pbnB1dC5jb21wb25lbnQuc2NzcyddLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTdHJ1Y3RGb3JtSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBGb3JtSW5wdXRDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIHN0YXRpYyByZWFkb25seSBpZDogRGVmYXVsdEZvcm1Db21wb25lbnRJZCA9ICdzdHJ1Y3QtZm9ybS1pbnB1dCc7XHJcbiAgICByZWFkb25seTogYm9vbGVhbjtcclxuICAgIGZvcm1Db250cm9sOiBVbnR5cGVkRm9ybUNvbnRyb2w7XHJcbiAgICBjb25maWc6IERlZmF1bHRGb3JtQ29tcG9uZW50Q29uZmlnPCdzdHJ1Y3QtZm9ybS1pbnB1dCc+O1xyXG4gICAgdWlMYW5ndWFnZSQ6IE9ic2VydmFibGU8TGFuZ3VhZ2VDb2RlPjtcclxuICAgIHByb3RlY3RlZCBzdHJ1Y3RGb3JtR3JvdXAgPSBuZXcgRm9ybUdyb3VwKHt9KTtcclxuICAgIHByb3RlY3RlZCBmaWVsZHM6IEFycmF5PHtcclxuICAgICAgICBkZWY6IFN0cnVjdEN1c3RvbUZpZWxkRnJhZ21lbnRbJ2ZpZWxkcyddW251bWJlcl07XHJcbiAgICAgICAgZm9ybUNvbnRyb2w6IEZvcm1Db250cm9sO1xyXG4gICAgfT47XHJcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YVNlcnZpY2U6IERhdGFTZXJ2aWNlKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMudWlMYW5ndWFnZSQgPSB0aGlzLmRhdGFTZXJ2aWNlLmNsaWVudFxyXG4gICAgICAgICAgICAudWlTdGF0ZSgpXHJcbiAgICAgICAgICAgIC5zdHJlYW0kLnBpcGUobWFwKCh7IHVpU3RhdGUgfSkgPT4gdWlTdGF0ZS5sYW5ndWFnZSkpO1xyXG5cclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZm9ybUNvbnRyb2wudmFsdWUgfHwge307XHJcblxyXG4gICAgICAgIHRoaXMuZmllbGRzID1cclxuICAgICAgICAgICAgKHRoaXMuY29uZmlnIGFzIHVua25vd24gYXMgU3RydWN0Q3VzdG9tRmllbGRGcmFnbWVudCkuZmllbGRzPy5tYXAoZmllbGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybUNvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2wodmFsdWVbZmllbGQubmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJ1Y3RGb3JtR3JvdXAuYWRkQ29udHJvbChmaWVsZC5uYW1lLCBmb3JtQ29udHJvbCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkZWY6IGZpZWxkLCBmb3JtQ29udHJvbCB9O1xyXG4gICAgICAgICAgICB9KSA/PyBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5zdHJ1Y3RGb3JtR3JvdXAudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybUNvbnRyb2wuc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1Db250cm9sLm1hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiPGRpdiBbZm9ybUdyb3VwXT1cInN0cnVjdEZvcm1Hcm91cFwiIGNsYXNzPVwic3RydWN0LWNvbnRhaW5lciBwLTJcIj5cclxuICAgIDxkaXYgKm5nRm9yPVwibGV0IGZpZWxkIG9mIGZpZWxkc1wiIGNsYXNzPVwiZmxleCBtYi0xXCI+XHJcbiAgICAgICAgPGxhYmVsIGNsYXNzPVwic3RydWN0LWZpZWxkLXdyYXBwZXJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0cnVjdC1maWVsZC1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAge3sgZmllbGQuZGVmIHwgY3VzdG9tRmllbGRMYWJlbDogKHVpTGFuZ3VhZ2UkIHwgYXN5bmMpIH19XHJcbiAgICAgICAgICAgICAgICA8dmRyLWhlbHAtdG9vbHRpcFxyXG4gICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiZmllbGQuZGVmIHwgY3VzdG9tRmllbGREZXNjcmlwdGlvbjogKHVpTGFuZ3VhZ2UkIHwgYXN5bmMpIGFzIGRlc2NyaXB0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICBbY29udGVudF09XCJkZXNjcmlwdGlvblwiXHJcbiAgICAgICAgICAgICAgICA+PC92ZHItaGVscC10b29sdGlwPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDx2ZHItZHluYW1pYy1mb3JtLWlucHV0XHJcbiAgICAgICAgICAgICAgICBbcmVhZG9ubHldPVwiZmFsc2VcIlxyXG4gICAgICAgICAgICAgICAgW2NvbnRyb2xdPVwiZmllbGQuZm9ybUNvbnRyb2xcIlxyXG4gICAgICAgICAgICAgICAgW2RlZl09XCJmaWVsZC5kZWZcIlxyXG4gICAgICAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJmaWVsZC5kZWYubmFtZVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgPC92ZHItZHluYW1pYy1mb3JtLWlucHV0PlxyXG4gICAgICAgIDwvbGFiZWw+XHJcbiAgICA8L2Rpdj5cclxuPC9kaXY+XHJcbiJdfQ==