import { Pipe } from '@angular/core';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import * as i0 from "@angular/core";
export class StateI18nTokenPipe {
    constructor() {
        this.stateI18nTokens = {
            Created: _('state.created'),
            Draft: _('state.draft'),
            AddingItems: _('state.adding-items'),
            ArrangingPayment: _('state.arranging-payment'),
            PaymentAuthorized: _('state.payment-authorized'),
            PaymentSettled: _('state.payment-settled'),
            PartiallyShipped: _('state.partially-shipped'),
            Shipped: _('state.shipped'),
            PartiallyDelivered: _('state.partially-delivered'),
            Authorized: _('state.authorized'),
            Delivered: _('state.delivered'),
            Cancelled: _('state.cancelled'),
            Pending: _('state.pending'),
            Settled: _('state.settled'),
            Failed: _('state.failed'),
            Error: _('state.error'),
            Declined: _('state.declined'),
            Modifying: _('state.modifying'),
            ArrangingAdditionalPayment: _('state.arranging-additional-payment'),
        };
    }
    transform(value) {
        if (typeof value === 'string' && value.length) {
            const defaultStateToken = this.stateI18nTokens[value];
            if (defaultStateToken) {
                return defaultStateToken;
            }
            return getOrderStateTranslationToken(value);
        }
        return value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: StateI18nTokenPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: StateI18nTokenPipe, name: "stateI18nToken" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: StateI18nTokenPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'stateI18nToken',
                }]
        }] });
export function getOrderStateTranslationToken(state) {
    return ('state.' +
        state
            .replace(/([a-z])([A-Z])/g, '$1-$2')
            .replace(/ +/g, '-')
            .toLowerCase());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtaTE4bi10b2tlbi5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvcGlwZXMvc3RhdGUtaTE4bi10b2tlbi5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxFQUFFLE1BQU0seUNBQXlDLENBQUM7O0FBS3RFLE1BQU0sT0FBTyxrQkFBa0I7SUFIL0I7UUFJcUIsb0JBQWUsR0FBRztZQUMvQixPQUFPLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQztZQUMzQixLQUFLLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUN2QixXQUFXLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO1lBQ3BDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQztZQUM5QyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsMEJBQTBCLENBQUM7WUFDaEQsY0FBYyxFQUFFLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQztZQUMxQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMseUJBQXlCLENBQUM7WUFDOUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUM7WUFDM0Isa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLDJCQUEyQixDQUFDO1lBQ2xELFVBQVUsRUFBRSxDQUFDLENBQUMsa0JBQWtCLENBQUM7WUFDakMsU0FBUyxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztZQUMvQixTQUFTLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1lBQy9CLE9BQU8sRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDO1lBQzNCLE9BQU8sRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDO1lBQzNCLE1BQU0sRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDO1lBQ3pCLEtBQUssRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDO1lBQ3ZCLFFBQVEsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUM7WUFDN0IsU0FBUyxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztZQUMvQiwwQkFBMEIsRUFBRSxDQUFDLENBQUMsb0NBQW9DLENBQUM7U0FDdEUsQ0FBQztLQVdMO0lBVkcsU0FBUyxDQUFJLEtBQVE7UUFDakIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzVDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFZLENBQUMsQ0FBQztZQUM3RCxJQUFJLGlCQUFpQixFQUFFLENBQUM7Z0JBQ3BCLE9BQU8saUJBQWlCLENBQUM7WUFDN0IsQ0FBQztZQUNELE9BQU8sNkJBQTZCLENBQUMsS0FBZSxDQUFNLENBQUM7UUFDL0QsQ0FBQztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7OEdBL0JRLGtCQUFrQjs0R0FBbEIsa0JBQWtCOzsyRkFBbEIsa0JBQWtCO2tCQUg5QixJQUFJO21CQUFDO29CQUNGLElBQUksRUFBRSxnQkFBZ0I7aUJBQ3pCOztBQW1DRCxNQUFNLFVBQVUsNkJBQTZCLENBQUMsS0FBYTtJQUN2RCxPQUFPLENBQ0gsUUFBUTtRQUNSLEtBQUs7YUFDQSxPQUFPLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDO2FBQ25DLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO2FBQ25CLFdBQVcsRUFBRSxDQUNyQixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgbWFya2VyIGFzIF8gfSBmcm9tICdAYmllc2JqZXJnL25neC10cmFuc2xhdGUtZXh0cmFjdC1tYXJrZXInO1xyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ3N0YXRlSTE4blRva2VuJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFN0YXRlSTE4blRva2VuUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGF0ZUkxOG5Ub2tlbnMgPSB7XHJcbiAgICAgICAgQ3JlYXRlZDogXygnc3RhdGUuY3JlYXRlZCcpLFxyXG4gICAgICAgIERyYWZ0OiBfKCdzdGF0ZS5kcmFmdCcpLFxyXG4gICAgICAgIEFkZGluZ0l0ZW1zOiBfKCdzdGF0ZS5hZGRpbmctaXRlbXMnKSxcclxuICAgICAgICBBcnJhbmdpbmdQYXltZW50OiBfKCdzdGF0ZS5hcnJhbmdpbmctcGF5bWVudCcpLFxyXG4gICAgICAgIFBheW1lbnRBdXRob3JpemVkOiBfKCdzdGF0ZS5wYXltZW50LWF1dGhvcml6ZWQnKSxcclxuICAgICAgICBQYXltZW50U2V0dGxlZDogXygnc3RhdGUucGF5bWVudC1zZXR0bGVkJyksXHJcbiAgICAgICAgUGFydGlhbGx5U2hpcHBlZDogXygnc3RhdGUucGFydGlhbGx5LXNoaXBwZWQnKSxcclxuICAgICAgICBTaGlwcGVkOiBfKCdzdGF0ZS5zaGlwcGVkJyksXHJcbiAgICAgICAgUGFydGlhbGx5RGVsaXZlcmVkOiBfKCdzdGF0ZS5wYXJ0aWFsbHktZGVsaXZlcmVkJyksXHJcbiAgICAgICAgQXV0aG9yaXplZDogXygnc3RhdGUuYXV0aG9yaXplZCcpLFxyXG4gICAgICAgIERlbGl2ZXJlZDogXygnc3RhdGUuZGVsaXZlcmVkJyksXHJcbiAgICAgICAgQ2FuY2VsbGVkOiBfKCdzdGF0ZS5jYW5jZWxsZWQnKSxcclxuICAgICAgICBQZW5kaW5nOiBfKCdzdGF0ZS5wZW5kaW5nJyksXHJcbiAgICAgICAgU2V0dGxlZDogXygnc3RhdGUuc2V0dGxlZCcpLFxyXG4gICAgICAgIEZhaWxlZDogXygnc3RhdGUuZmFpbGVkJyksXHJcbiAgICAgICAgRXJyb3I6IF8oJ3N0YXRlLmVycm9yJyksXHJcbiAgICAgICAgRGVjbGluZWQ6IF8oJ3N0YXRlLmRlY2xpbmVkJyksXHJcbiAgICAgICAgTW9kaWZ5aW5nOiBfKCdzdGF0ZS5tb2RpZnlpbmcnKSxcclxuICAgICAgICBBcnJhbmdpbmdBZGRpdGlvbmFsUGF5bWVudDogXygnc3RhdGUuYXJyYW5naW5nLWFkZGl0aW9uYWwtcGF5bWVudCcpLFxyXG4gICAgfTtcclxuICAgIHRyYW5zZm9ybTxUPih2YWx1ZTogVCk6IFQge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0U3RhdGVUb2tlbiA9IHRoaXMuc3RhdGVJMThuVG9rZW5zW3ZhbHVlIGFzIGFueV07XHJcbiAgICAgICAgICAgIGlmIChkZWZhdWx0U3RhdGVUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRTdGF0ZVRva2VuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRPcmRlclN0YXRlVHJhbnNsYXRpb25Ub2tlbih2YWx1ZSBhcyBzdHJpbmcpIGFzIFQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9yZGVyU3RhdGVUcmFuc2xhdGlvblRva2VuKHN0YXRlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICAnc3RhdGUuJyArXHJcbiAgICAgICAgc3RhdGVcclxuICAgICAgICAgICAgLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMS0kMicpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC8gKy9nLCAnLScpXHJcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXHJcbiAgICApO1xyXG59XHJcbiJdfQ==