import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @description
 * Given an Asset object (an object with `preview` and optionally `focalPoint` properties), this pipe
 * returns a string with query parameters designed to work with the image resize capabilities of the
 * AssetServerPlugin.
 *
 * @example
 * ```HTML
 * <img [src]="asset | assetPreview:'tiny'" />
 * <img [src]="asset | assetPreview:150" />
 * ```
 *
 * @docsCategory pipes
 */
export class AssetPreviewPipe {
    transform(asset, preset = 'thumb') {
        if (!asset) {
            return '';
        }
        if (asset.preview == null || typeof asset.preview !== 'string') {
            throw new Error(`Expected an Asset, got ${JSON.stringify(asset)}`);
        }
        const fp = asset.focalPoint ? `&fpx=${asset.focalPoint.x}&fpy=${asset.focalPoint.y}` : '';
        if (Number.isNaN(Number(preset))) {
            return `${asset.preview}?preset=${preset}${fp}`;
        }
        else {
            return `${asset.preview}?w=${preset}&h=${preset}${fp}`;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AssetPreviewPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: AssetPreviewPipe, name: "assetPreview" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AssetPreviewPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'assetPreview',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtcHJldmlldy5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvcGlwZXMvYXNzZXQtcHJldmlldy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOztBQUlwRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBSUgsTUFBTSxPQUFPLGdCQUFnQjtJQUN6QixTQUFTLENBQUMsS0FBcUIsRUFBRSxTQUEwQixPQUFPO1FBQzlELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNULE9BQU8sRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUNELElBQUksS0FBSyxDQUFDLE9BQU8sSUFBSSxJQUFJLElBQUksT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzdELE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7UUFDRCxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMxRixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMvQixPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sV0FBVyxNQUFNLEdBQUcsRUFBRSxFQUFFLENBQUM7UUFDcEQsQ0FBQzthQUFNLENBQUM7WUFDSixPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sTUFBTSxNQUFNLE1BQU0sTUFBTSxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQzNELENBQUM7SUFDTCxDQUFDOzhHQWRRLGdCQUFnQjs0R0FBaEIsZ0JBQWdCOzsyRkFBaEIsZ0JBQWdCO2tCQUg1QixJQUFJO21CQUFDO29CQUNGLElBQUksRUFBRSxjQUFjO2lCQUN2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEFzc2V0RnJhZ21lbnQgfSBmcm9tICcuLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogR2l2ZW4gYW4gQXNzZXQgb2JqZWN0IChhbiBvYmplY3Qgd2l0aCBgcHJldmlld2AgYW5kIG9wdGlvbmFsbHkgYGZvY2FsUG9pbnRgIHByb3BlcnRpZXMpLCB0aGlzIHBpcGVcclxuICogcmV0dXJucyBhIHN0cmluZyB3aXRoIHF1ZXJ5IHBhcmFtZXRlcnMgZGVzaWduZWQgdG8gd29yayB3aXRoIHRoZSBpbWFnZSByZXNpemUgY2FwYWJpbGl0aWVzIG9mIHRoZVxyXG4gKiBBc3NldFNlcnZlclBsdWdpbi5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgSFRNTFxyXG4gKiA8aW1nIFtzcmNdPVwiYXNzZXQgfCBhc3NldFByZXZpZXc6J3RpbnknXCIgLz5cclxuICogPGltZyBbc3JjXT1cImFzc2V0IHwgYXNzZXRQcmV2aWV3OjE1MFwiIC8+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZG9jc0NhdGVnb3J5IHBpcGVzXHJcbiAqL1xyXG5AUGlwZSh7XHJcbiAgICBuYW1lOiAnYXNzZXRQcmV2aWV3JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEFzc2V0UHJldmlld1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICAgIHRyYW5zZm9ybShhc3NldD86IEFzc2V0RnJhZ21lbnQsIHByZXNldDogc3RyaW5nIHwgbnVtYmVyID0gJ3RodW1iJyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCFhc3NldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhc3NldC5wcmV2aWV3ID09IG51bGwgfHwgdHlwZW9mIGFzc2V0LnByZXZpZXcgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYW4gQXNzZXQsIGdvdCAke0pTT04uc3RyaW5naWZ5KGFzc2V0KX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZnAgPSBhc3NldC5mb2NhbFBvaW50ID8gYCZmcHg9JHthc3NldC5mb2NhbFBvaW50Lnh9JmZweT0ke2Fzc2V0LmZvY2FsUG9pbnQueX1gIDogJyc7XHJcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihOdW1iZXIocHJlc2V0KSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke2Fzc2V0LnByZXZpZXd9P3ByZXNldD0ke3ByZXNldH0ke2ZwfWA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke2Fzc2V0LnByZXZpZXd9P3c9JHtwcmVzZXR9Jmg9JHtwcmVzZXR9JHtmcH1gO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=