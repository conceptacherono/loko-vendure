import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FormControl } from '@angular/forms';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { assertNever } from '@vendure/common/lib/shared-utils';
import { lastValueFrom } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DuplicateEntityDocument, GetEntityDuplicatorsDocument, } from '../../../common/generated-types';
import { configurableDefinitionToInstance, toConfigurableOperationInput, } from '../../../common/utilities/configurable-operation-utils';
import * as i0 from "@angular/core";
import * as i1 from "../../../data/providers/data.service";
import * as i2 from "../../../providers/notification/notification.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "../configurable-input/configurable-input.component";
import * as i6 from "../form-field/form-field-control.directive";
import * as i7 from "../modal-dialog/dialog-buttons.directive";
import * as i8 from "../modal-dialog/dialog-title.directive";
import * as i9 from "@ngx-translate/core";
export class DuplicateEntityDialogComponent {
    constructor(dataService, notificationService, changeDetectorRef) {
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.changeDetectorRef = changeDetectorRef;
        this.formGroup = new FormControl({
            code: '',
            args: [],
        });
    }
    ngOnInit() {
        this.entityDuplicators$ = this.dataService
            .query(GetEntityDuplicatorsDocument)
            .mapSingle(data => data.entityDuplicators.filter(d => d.forEntities.includes(this.entityName)))
            .pipe(tap(duplicators => {
            if (0 < duplicators.length) {
                this.setSelectedDuplicator(duplicators[0]);
            }
        }));
    }
    setSelectedDuplicator(duplicator) {
        this.selectedDuplicator = duplicator;
        this.duplicatorInstance = configurableDefinitionToInstance(this.selectedDuplicator);
        this.formGroup.patchValue(this.duplicatorInstance);
        this.changeDetectorRef.markForCheck();
    }
    async duplicate() {
        const selectedDuplicator = this.selectedDuplicator;
        const formValue = this.formGroup.value;
        if (!selectedDuplicator || !formValue) {
            return;
        }
        const duplicatorInput = toConfigurableOperationInput(this.duplicatorInstance, formValue);
        const succeeded = [];
        const failed = [];
        for (const entity of this.entities) {
            const { duplicateEntity } = await lastValueFrom(this.dataService.mutate(DuplicateEntityDocument, {
                input: {
                    entityId: entity.id,
                    entityName: this.entityName,
                    duplicatorInput,
                },
            }));
            switch (duplicateEntity.__typename) {
                case 'DuplicateEntitySuccess':
                    succeeded.push(this.getEntityName(entity));
                    break;
                case 'DuplicateEntityError':
                    failed.push({
                        name: this.getEntityName(entity),
                        message: duplicateEntity.duplicationError,
                    });
                    break;
                case undefined:
                    break;
                default:
                    assertNever(duplicateEntity);
            }
        }
        if (0 < succeeded.length) {
            this.notificationService.success(_('common.notify-duplicate-success'), {
                count: succeeded.length,
                names: succeeded.join(', '),
            });
        }
        if (0 < failed.length) {
            const failedCount = failed.length;
            const maxNotices = 5;
            const excess = failedCount - maxNotices;
            for (let i = 0; i < Math.min(failedCount, maxNotices); i++) {
                const failedItem = failed[i];
                this.notificationService.error(_('common.notify-duplicate-error'), {
                    name: failedItem.name,
                    error: failedItem.message,
                });
            }
            if (excess > 0) {
                this.notificationService.error(_('common.notify-duplicate-error-excess'), { count: excess });
            }
        }
        this.resolveWith(true);
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DuplicateEntityDialogComponent, deps: [{ token: i1.DataService }, { token: i2.NotificationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: DuplicateEntityDialogComponent, selector: "vdr-duplicate-entity-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\r\n    {{ title || 'common.duplicate-entity' | translate }}\r\n</ng-template>\r\n<div class=\"\">\r\n    <ul>\r\n        <li *ngFor=\"let entity of entities\">\r\n            {{ getEntityName(entity) }}\r\n        </li>\r\n    </ul>\r\n    <ng-container *ngIf=\"entityDuplicators$ | async as duplicators\">\r\n        <select\r\n            name=\"\"\r\n            id=\"\"\r\n            *ngIf=\"1 < duplicators.length\"\r\n            class=\"mt-4\"\r\n            [ngModel]=\"selectedDuplicator\"\r\n            (ngModelChange)=\"setSelectedDuplicator($event)\"\r\n        >\r\n            <option *ngFor=\"let duplicator of duplicators\" [ngValue]=\"duplicator\">\r\n                {{ duplicator.description }} ({{ duplicator.code }})\r\n            </option>\r\n        </select>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"selectedDuplicator as duplicator\">\r\n        <vdr-configurable-input\r\n            *ngIf=\"duplicator.args.length > 0\"\r\n            [hideDescription]=\"true\"\r\n            [operation]=\"duplicatorInstance\"\r\n            [operationDefinition]=\"duplicator\"\r\n            [removable]=\"false\"\r\n            [formControl]=\"formGroup\"\r\n        ></vdr-configurable-input>\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"duplicate()\" [disabled]=\"!selectedDuplicator\" class=\"btn btn-primary\">\r\n        {{ 'common.duplicate' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i4.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i4.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i5.ConfigurableInputComponent, selector: "vdr-configurable-input", inputs: ["operation", "operationDefinition", "readonly", "removable", "position", "hideDescription"], outputs: ["remove"] }, { kind: "directive", type: i6.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i7.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i8.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i9.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DuplicateEntityDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-duplicate-entity-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>\r\n    {{ title || 'common.duplicate-entity' | translate }}\r\n</ng-template>\r\n<div class=\"\">\r\n    <ul>\r\n        <li *ngFor=\"let entity of entities\">\r\n            {{ getEntityName(entity) }}\r\n        </li>\r\n    </ul>\r\n    <ng-container *ngIf=\"entityDuplicators$ | async as duplicators\">\r\n        <select\r\n            name=\"\"\r\n            id=\"\"\r\n            *ngIf=\"1 < duplicators.length\"\r\n            class=\"mt-4\"\r\n            [ngModel]=\"selectedDuplicator\"\r\n            (ngModelChange)=\"setSelectedDuplicator($event)\"\r\n        >\r\n            <option *ngFor=\"let duplicator of duplicators\" [ngValue]=\"duplicator\">\r\n                {{ duplicator.description }} ({{ duplicator.code }})\r\n            </option>\r\n        </select>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"selectedDuplicator as duplicator\">\r\n        <vdr-configurable-input\r\n            *ngIf=\"duplicator.args.length > 0\"\r\n            [hideDescription]=\"true\"\r\n            [operation]=\"duplicatorInstance\"\r\n            [operationDefinition]=\"duplicator\"\r\n            [removable]=\"false\"\r\n            [formControl]=\"formGroup\"\r\n        ></vdr-configurable-input>\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"duplicate()\" [disabled]=\"!selectedDuplicator\" class=\"btn btn-primary\">\r\n        {{ 'common.duplicate' | translate }}\r\n    </button>\r\n</ng-template>\r\n" }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i2.NotificationService }, { type: i0.ChangeDetectorRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVwbGljYXRlLWVudGl0eS1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvY29tcG9uZW50cy9kdXBsaWNhdGUtZW50aXR5LWRpYWxvZy9kdXBsaWNhdGUtZW50aXR5LWRpYWxvZy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL2R1cGxpY2F0ZS1lbnRpdHktZGlhbG9nL2R1cGxpY2F0ZS1lbnRpdHktZGlhbG9nLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBcUIsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUMsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUUvRCxPQUFPLEVBQUUsYUFBYSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBRUgsdUJBQXVCLEVBQ3ZCLDRCQUE0QixHQUUvQixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFDSCxnQ0FBZ0MsRUFDaEMsNEJBQTRCLEdBQy9CLE1BQU0sd0RBQXdELENBQUM7Ozs7Ozs7Ozs7O0FBYWhFLE1BQU0sT0FBTyw4QkFBOEI7SUFldkMsWUFDWSxXQUF3QixFQUN4QixtQkFBd0MsRUFDeEMsaUJBQW9DO1FBRnBDLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsc0JBQWlCLEdBQWpCLGlCQUFpQixD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Q0E7OzJGRFphLDhCQUE4QjtrQkFOMUMsU0FBUzsrQkFDSSw2QkFBNkIsbUJBR3RCLHVCQUF1QixDQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBtYXJrZXIgYXMgXyB9IGZyb20gJ0BiaWVzYmplcmcvbmd4LXRyYW5zbGF0ZS1leHRyYWN0LW1hcmtlcic7XHJcbmltcG9ydCB7IGFzc2VydE5ldmVyIH0gZnJvbSAnQHZlbmR1cmUvY29tbW9uL2xpYi9zaGFyZWQtdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgbGFzdFZhbHVlRnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7XHJcbiAgICBDb25maWd1cmFibGVPcGVyYXRpb24sXHJcbiAgICBEdXBsaWNhdGVFbnRpdHlEb2N1bWVudCxcclxuICAgIEdldEVudGl0eUR1cGxpY2F0b3JzRG9jdW1lbnQsXHJcbiAgICBHZXRFbnRpdHlEdXBsaWNhdG9yc1F1ZXJ5LFxyXG59IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gICAgY29uZmlndXJhYmxlRGVmaW5pdGlvblRvSW5zdGFuY2UsXHJcbiAgICB0b0NvbmZpZ3VyYWJsZU9wZXJhdGlvbklucHV0LFxyXG59IGZyb20gJy4uLy4uLy4uL2NvbW1vbi91dGlsaXRpZXMvY29uZmlndXJhYmxlLW9wZXJhdGlvbi11dGlscyc7XHJcbmltcG9ydCB7IERhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9wcm92aWRlcnMvZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnLi4vLi4vLi4vcHJvdmlkZXJzL21vZGFsL21vZGFsLnR5cGVzJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3Byb3ZpZGVycy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xyXG5cclxudHlwZSBFbnRpdHlEdXBsaWNhdG9yRGVmID0gR2V0RW50aXR5RHVwbGljYXRvcnNRdWVyeVsnZW50aXR5RHVwbGljYXRvcnMnXVswXTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd2ZHItZHVwbGljYXRlLWVudGl0eS1kaWFsb2cnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2R1cGxpY2F0ZS1lbnRpdHktZGlhbG9nLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2R1cGxpY2F0ZS1lbnRpdHktZGlhbG9nLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIER1cGxpY2F0ZUVudGl0eURpYWxvZ0NvbXBvbmVudDxUIGV4dGVuZHMgeyBpZDogc3RyaW5nIH0+IGltcGxlbWVudHMgT25Jbml0LCBEaWFsb2c8Ym9vbGVhbj4ge1xyXG4gICAgcmVzb2x2ZVdpdGg6IChyZXN1bHQ/OiBib29sZWFuIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIGVudGl0eUR1cGxpY2F0b3JzJDogT2JzZXJ2YWJsZTxFbnRpdHlEdXBsaWNhdG9yRGVmW10+O1xyXG4gICAgcHJvdGVjdGVkIHNlbGVjdGVkRHVwbGljYXRvcjogRW50aXR5RHVwbGljYXRvckRlZiB8IHVuZGVmaW5lZDtcclxuICAgIHByb3RlY3RlZCBkdXBsaWNhdG9ySW5zdGFuY2U6IENvbmZpZ3VyYWJsZU9wZXJhdGlvbjtcclxuICAgIHByb3RlY3RlZCBmb3JtR3JvdXAgPSBuZXcgRm9ybUNvbnRyb2w8Q29uZmlndXJhYmxlT3BlcmF0aW9uPih7XHJcbiAgICAgICAgY29kZTogJycsXHJcbiAgICAgICAgYXJnczogW10sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aXRsZT86IHN0cmluZztcclxuICAgIGVudGl0aWVzOiBUW107XHJcbiAgICBlbnRpdHlOYW1lOiBzdHJpbmc7XHJcbiAgICBnZXRFbnRpdHlOYW1lOiAoZW50aXR5OiBUKSA9PiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBkYXRhU2VydmljZTogRGF0YVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBub3RpZmljYXRpb25TZXJ2aWNlOiBOb3RpZmljYXRpb25TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuZW50aXR5RHVwbGljYXRvcnMkID0gdGhpcy5kYXRhU2VydmljZVxyXG4gICAgICAgICAgICAucXVlcnkoR2V0RW50aXR5RHVwbGljYXRvcnNEb2N1bWVudClcclxuICAgICAgICAgICAgLm1hcFNpbmdsZShkYXRhID0+IGRhdGEuZW50aXR5RHVwbGljYXRvcnMuZmlsdGVyKGQgPT4gZC5mb3JFbnRpdGllcy5pbmNsdWRlcyh0aGlzLmVudGl0eU5hbWUpKSlcclxuICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICB0YXAoZHVwbGljYXRvcnMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgwIDwgZHVwbGljYXRvcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWREdXBsaWNhdG9yKGR1cGxpY2F0b3JzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTZWxlY3RlZER1cGxpY2F0b3IoZHVwbGljYXRvcjogRW50aXR5RHVwbGljYXRvckRlZikge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWREdXBsaWNhdG9yID0gZHVwbGljYXRvcjtcclxuICAgICAgICB0aGlzLmR1cGxpY2F0b3JJbnN0YW5jZSA9IGNvbmZpZ3VyYWJsZURlZmluaXRpb25Ub0luc3RhbmNlKHRoaXMuc2VsZWN0ZWREdXBsaWNhdG9yKTtcclxuICAgICAgICB0aGlzLmZvcm1Hcm91cC5wYXRjaFZhbHVlKHRoaXMuZHVwbGljYXRvckluc3RhbmNlKTtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGR1cGxpY2F0ZSgpIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZER1cGxpY2F0b3IgPSB0aGlzLnNlbGVjdGVkRHVwbGljYXRvcjtcclxuICAgICAgICBjb25zdCBmb3JtVmFsdWUgPSB0aGlzLmZvcm1Hcm91cC52YWx1ZTtcclxuICAgICAgICBpZiAoIXNlbGVjdGVkRHVwbGljYXRvciB8fCAhZm9ybVZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZHVwbGljYXRvcklucHV0ID0gdG9Db25maWd1cmFibGVPcGVyYXRpb25JbnB1dCh0aGlzLmR1cGxpY2F0b3JJbnN0YW5jZSwgZm9ybVZhbHVlKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3VjY2VlZGVkOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGZhaWxlZDogQXJyYXk8eyBuYW1lOiBzdHJpbmc7IG1lc3NhZ2U6IHN0cmluZyB9PiA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgZW50aXR5IG9mIHRoaXMuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBkdXBsaWNhdGVFbnRpdHkgfSA9IGF3YWl0IGxhc3RWYWx1ZUZyb20oXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFTZXJ2aWNlLm11dGF0ZShEdXBsaWNhdGVFbnRpdHlEb2N1bWVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eUlkOiBlbnRpdHkuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eU5hbWU6IHRoaXMuZW50aXR5TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHVwbGljYXRvcklucHV0LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgc3dpdGNoIChkdXBsaWNhdGVFbnRpdHkuX190eXBlbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnRHVwbGljYXRlRW50aXR5U3VjY2Vzcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VlZGVkLnB1c2godGhpcy5nZXRFbnRpdHlOYW1lKGVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnRHVwbGljYXRlRW50aXR5RXJyb3InOlxyXG4gICAgICAgICAgICAgICAgICAgIGZhaWxlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5nZXRFbnRpdHlOYW1lKGVudGl0eSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGR1cGxpY2F0ZUVudGl0eS5kdXBsaWNhdGlvbkVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydE5ldmVyKGR1cGxpY2F0ZUVudGl0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKDAgPCBzdWNjZWVkZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uU2VydmljZS5zdWNjZXNzKF8oJ2NvbW1vbi5ub3RpZnktZHVwbGljYXRlLXN1Y2Nlc3MnKSwge1xyXG4gICAgICAgICAgICAgICAgY291bnQ6IHN1Y2NlZWRlZC5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBuYW1lczogc3VjY2VlZGVkLmpvaW4oJywgJyksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoMCA8IGZhaWxlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgZmFpbGVkQ291bnQgPSBmYWlsZWQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhOb3RpY2VzID0gNTtcclxuICAgICAgICAgICAgY29uc3QgZXhjZXNzID0gZmFpbGVkQ291bnQgLSBtYXhOb3RpY2VzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWluKGZhaWxlZENvdW50LCBtYXhOb3RpY2VzKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmYWlsZWRJdGVtID0gZmFpbGVkW2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25TZXJ2aWNlLmVycm9yKF8oJ2NvbW1vbi5ub3RpZnktZHVwbGljYXRlLWVycm9yJyksIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBmYWlsZWRJdGVtLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZhaWxlZEl0ZW0ubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChleGNlc3MgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvblNlcnZpY2UuZXJyb3IoXygnY29tbW9uLm5vdGlmeS1kdXBsaWNhdGUtZXJyb3ItZXhjZXNzJyksIHsgY291bnQ6IGV4Y2VzcyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc29sdmVXaXRoKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLnJlc29sdmVXaXRoKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiPG5nLXRlbXBsYXRlIHZkckRpYWxvZ1RpdGxlPlxyXG4gICAge3sgdGl0bGUgfHwgJ2NvbW1vbi5kdXBsaWNhdGUtZW50aXR5JyB8IHRyYW5zbGF0ZSB9fVxyXG48L25nLXRlbXBsYXRlPlxyXG48ZGl2IGNsYXNzPVwiXCI+XHJcbiAgICA8dWw+XHJcbiAgICAgICAgPGxpICpuZ0Zvcj1cImxldCBlbnRpdHkgb2YgZW50aXRpZXNcIj5cclxuICAgICAgICAgICAge3sgZ2V0RW50aXR5TmFtZShlbnRpdHkpIH19XHJcbiAgICAgICAgPC9saT5cclxuICAgIDwvdWw+XHJcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZW50aXR5RHVwbGljYXRvcnMkIHwgYXN5bmMgYXMgZHVwbGljYXRvcnNcIj5cclxuICAgICAgICA8c2VsZWN0XHJcbiAgICAgICAgICAgIG5hbWU9XCJcIlxyXG4gICAgICAgICAgICBpZD1cIlwiXHJcbiAgICAgICAgICAgICpuZ0lmPVwiMSA8IGR1cGxpY2F0b3JzLmxlbmd0aFwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwibXQtNFwiXHJcbiAgICAgICAgICAgIFtuZ01vZGVsXT1cInNlbGVjdGVkRHVwbGljYXRvclwiXHJcbiAgICAgICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cInNldFNlbGVjdGVkRHVwbGljYXRvcigkZXZlbnQpXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxvcHRpb24gKm5nRm9yPVwibGV0IGR1cGxpY2F0b3Igb2YgZHVwbGljYXRvcnNcIiBbbmdWYWx1ZV09XCJkdXBsaWNhdG9yXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBkdXBsaWNhdG9yLmRlc2NyaXB0aW9uIH19ICh7eyBkdXBsaWNhdG9yLmNvZGUgfX0pXHJcbiAgICAgICAgICAgIDwvb3B0aW9uPlxyXG4gICAgICAgIDwvc2VsZWN0PlxyXG4gICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwic2VsZWN0ZWREdXBsaWNhdG9yIGFzIGR1cGxpY2F0b3JcIj5cclxuICAgICAgICA8dmRyLWNvbmZpZ3VyYWJsZS1pbnB1dFxyXG4gICAgICAgICAgICAqbmdJZj1cImR1cGxpY2F0b3IuYXJncy5sZW5ndGggPiAwXCJcclxuICAgICAgICAgICAgW2hpZGVEZXNjcmlwdGlvbl09XCJ0cnVlXCJcclxuICAgICAgICAgICAgW29wZXJhdGlvbl09XCJkdXBsaWNhdG9ySW5zdGFuY2VcIlxyXG4gICAgICAgICAgICBbb3BlcmF0aW9uRGVmaW5pdGlvbl09XCJkdXBsaWNhdG9yXCJcclxuICAgICAgICAgICAgW3JlbW92YWJsZV09XCJmYWxzZVwiXHJcbiAgICAgICAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtR3JvdXBcIlxyXG4gICAgICAgID48L3Zkci1jb25maWd1cmFibGUtaW5wdXQ+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuPC9kaXY+XHJcblxyXG48bmctdGVtcGxhdGUgdmRyRGlhbG9nQnV0dG9ucz5cclxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuXCIgKGNsaWNrKT1cImNhbmNlbCgpXCI+e3sgJ2NvbW1vbi5jYW5jZWwnIHwgdHJhbnNsYXRlIH19PC9idXR0b24+XHJcbiAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiAoY2xpY2spPVwiZHVwbGljYXRlKClcIiBbZGlzYWJsZWRdPVwiIXNlbGVjdGVkRHVwbGljYXRvclwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+XHJcbiAgICAgICAge3sgJ2NvbW1vbi5kdXBsaWNhdGUnIHwgdHJhbnNsYXRlIH19XHJcbiAgICA8L2J1dHRvbj5cclxuPC9uZy10ZW1wbGF0ZT5cclxuIl19