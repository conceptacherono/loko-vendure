import { ChangeDetectionStrategy, Component } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { combineLatest } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../../../data/providers/data.service";
import * as i2 from "../../../providers/notification/notification.service";
import * as i3 from "@clr/angular";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "../form-field/form-field.component";
import * as i7 from "../form-item/form-item.component";
import * as i8 from "../modal-dialog/dialog-buttons.directive";
import * as i9 from "../modal-dialog/dialog-title.directive";
import * as i10 from "../channel-assignment-control/channel-assignment-control.component";
import * as i11 from "@ngx-translate/core";
export class AssignToChannelDialogComponent {
    constructor(dataService, notificationService) {
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.selectedChannels = [];
        this.selectedChannelIdControl = new UntypedFormControl();
    }
    ngOnInit() {
        const activeChannelId$ = this.dataService.client
            .userStatus()
            .mapSingle(({ userStatus }) => userStatus.activeChannelId);
        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);
        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.currentChannel = channels.items.find(c => c.id === activeChannelId);
            this.availableChannels = channels.items;
        });
        this.selectedChannelIdControl.valueChanges.subscribe(ids => {
            this.selectChannel(ids);
        });
    }
    selectChannel(channelIds) {
        this.selectedChannels = this.availableChannels.filter(c => channelIds.includes(c.id));
    }
    assign() {
        const selectedChannels = this.selectedChannels;
        if (selectedChannels.length > 0) {
            this.resolveWith(selectedChannels);
        }
    }
    cancel() {
        this.resolveWith();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AssignToChannelDialogComponent, deps: [{ token: i1.DataService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: AssignToChannelDialogComponent, selector: "vdr-assign-to-channel-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\r\n    {{ 'common.confirm-bulk-assign-to-channel' | translate }}\r\n</ng-template>\r\n<div class=\"form-grid\">\r\n    <vdr-form-item>\r\n        <div *ngIf=\"0 < nMore\">\r\n            {{\r\n                'common.list-items-and-n-more'\r\n                    | translate\r\n                        : {\r\n                              items: itemNames,\r\n                              nMore: nMore\r\n                          }\r\n            }}\r\n        </div>\r\n        <div *ngIf=\"nMore === 0\">\r\n            {{ itemNames }}\r\n        </div>\r\n    </vdr-form-item>\r\n    <vdr-form-field [label]=\"'common.channel' | translate\" class=\"mb-4\">\r\n        <vdr-channel-assignment-control\r\n            clrInput\r\n            [multiple]=\"true\"\r\n            [includeDefaultChannel]=\"false\"\r\n            [formControl]=\"selectedChannelIdControl\"\r\n        ></vdr-channel-assignment-control>\r\n    </vdr-form-field>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"assign()\"\r\n        [disabled]=\"selectedChannels.length <= 0\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        <ng-template [ngIf]=\"selectedChannels.length > 0\" [ngIfElse]=\"noSelection\">\r\n            {{ 'common.assign-to-channels' | translate : { count: selectedChannels.length } }}\r\n        </ng-template>\r\n        <ng-template #noSelection>\r\n            {{ 'common.no-channel-selected' | translate : { count: selectedChannels.length } }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n", styles: ["vdr-channel-assignment-control{min-width:200px}\n"], dependencies: [{ kind: "directive", type: i3.ClrInput, selector: "[clrInput]" }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i6.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "component", type: i7.FormItemComponent, selector: "vdr-form-item", inputs: ["label", "tooltip"] }, { kind: "directive", type: i8.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i9.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i10.ChannelAssignmentControlComponent, selector: "vdr-channel-assignment-control", inputs: ["multiple", "includeDefaultChannel", "disableChannelIds"] }, { kind: "pipe", type: i11.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AssignToChannelDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-assign-to-channel-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>\r\n    {{ 'common.confirm-bulk-assign-to-channel' | translate }}\r\n</ng-template>\r\n<div class=\"form-grid\">\r\n    <vdr-form-item>\r\n        <div *ngIf=\"0 < nMore\">\r\n            {{\r\n                'common.list-items-and-n-more'\r\n                    | translate\r\n                        : {\r\n                              items: itemNames,\r\n                              nMore: nMore\r\n                          }\r\n            }}\r\n        </div>\r\n        <div *ngIf=\"nMore === 0\">\r\n            {{ itemNames }}\r\n        </div>\r\n    </vdr-form-item>\r\n    <vdr-form-field [label]=\"'common.channel' | translate\" class=\"mb-4\">\r\n        <vdr-channel-assignment-control\r\n            clrInput\r\n            [multiple]=\"true\"\r\n            [includeDefaultChannel]=\"false\"\r\n            [formControl]=\"selectedChannelIdControl\"\r\n        ></vdr-channel-assignment-control>\r\n    </vdr-form-field>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"assign()\"\r\n        [disabled]=\"selectedChannels.length <= 0\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        <ng-template [ngIf]=\"selectedChannels.length > 0\" [ngIfElse]=\"noSelection\">\r\n            {{ 'common.assign-to-channels' | translate : { count: selectedChannels.length } }}\r\n        </ng-template>\r\n        <ng-template #noSelection>\r\n            {{ 'common.no-channel-selected' | translate : { count: selectedChannels.length } }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n", styles: ["vdr-channel-assignment-control{min-width:200px}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i2.NotificationService }] });
//# sourceMappingURL=data:application/json;base64,