import { ChangeDetectionStrategy, Component } from '@angular/core';
import { assertNever } from '@vendure/common/lib/shared-utils';
import { combineLatest } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { ActionBarBaseComponent } from './action-bar-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@clr/angular";
import * as i2 from "@angular/common";
import * as i3 from "@angular/router";
import * as i4 from "../../directives/if-permissions.directive";
import * as i5 from "../ui-extension-point/ui-extension-point.component";
import * as i6 from "@ngx-translate/core";
export class ActionBarItemsComponent extends ActionBarBaseComponent {
    ngOnInit() {
        this.items$ = combineLatest([this.navBuilderService.actionBarConfig$, this.locationId$]).pipe(map(([items, locationId]) => items.filter(config => config.locationId === locationId)), tap(items => {
            this.buildButtonStates(items);
        }));
    }
    getButtonStyles(item) {
        const styles = ['button'];
        if (item.buttonStyle && item.buttonStyle === 'link') {
            styles.push('btn-link');
            return styles;
        }
        styles.push(this.getButtonColorClass(item));
        return styles;
    }
    getButtonColorClass(item) {
        switch (item.buttonColor) {
            case undefined:
                return '';
            case 'primary':
                return item.buttonStyle === 'outline' ? 'btn-outline' : 'primary';
            case 'success':
                return item.buttonStyle === 'outline' ? 'btn-success-outline' : 'success';
            case 'warning':
                return item.buttonStyle === 'outline' ? 'btn-warning-outline' : 'warning';
            default:
                assertNever(item.buttonColor);
                return '';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ActionBarItemsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: ActionBarItemsComponent, selector: "vdr-action-bar-items", usesInheritance: true, ngImport: i0, template: "<vdr-ui-extension-point [locationId]=\"locationId\" api=\"actionBar\" [leftPx]=\"-24\">\r\n    <ng-container *ngFor=\"let item of items$ | async\">\r\n        <ng-container *ngIf=\"buttonStates[item.id] | async as buttonState\">\r\n            <button\r\n                *vdrIfPermissions=\"item.requiresPermission\"\r\n                [routerLink]=\"getRouterLink(item)\"\r\n                [class.hidden]=\"buttonState.visible === false\"\r\n                [disabled]=\"buttonState.disabled || (item.disabled ? (item.disabled | async) : false)\"\r\n                (click)=\"handleClick($event, item)\"\r\n                [ngClass]=\"getButtonStyles(item)\"\r\n                class=\"mr-2\"\r\n            >\r\n                <clr-icon *ngIf=\"item.icon\" [attr.shape]=\"item.icon\"></clr-icon>\r\n                {{ item.label | translate }}\r\n            </button>\r\n        </ng-container>\r\n    </ng-container>\r\n</vdr-ui-extension-point>\r\n", styles: [":host{display:inline-block}button.hidden{display:none}\n"], dependencies: [{ kind: "directive", type: i1.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i4.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i5.UiExtensionPointComponent, selector: "vdr-ui-extension-point", inputs: ["locationId", "metadata", "topPx", "leftPx", "display", "api"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ActionBarItemsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-action-bar-items', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-ui-extension-point [locationId]=\"locationId\" api=\"actionBar\" [leftPx]=\"-24\">\r\n    <ng-container *ngFor=\"let item of items$ | async\">\r\n        <ng-container *ngIf=\"buttonStates[item.id] | async as buttonState\">\r\n            <button\r\n                *vdrIfPermissions=\"item.requiresPermission\"\r\n                [routerLink]=\"getRouterLink(item)\"\r\n                [class.hidden]=\"buttonState.visible === false\"\r\n                [disabled]=\"buttonState.disabled || (item.disabled ? (item.disabled | async) : false)\"\r\n                (click)=\"handleClick($event, item)\"\r\n                [ngClass]=\"getButtonStyles(item)\"\r\n                class=\"mr-2\"\r\n            >\r\n                <clr-icon *ngIf=\"item.icon\" [attr.shape]=\"item.icon\"></clr-icon>\r\n                {{ item.label | translate }}\r\n            </button>\r\n        </ng-container>\r\n    </ng-container>\r\n</vdr-ui-extension-point>\r\n", styles: [":host{display:inline-block}button.hidden{display:none}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLWJhci1pdGVtcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL2FjdGlvbi1iYXItaXRlbXMvYWN0aW9uLWJhci1pdGVtcy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL2FjdGlvbi1iYXItaXRlbXMvYWN0aW9uLWJhci1pdGVtcy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTFDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7OztBQVFyRSxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsc0JBQXFDO0lBQzlFLFFBQVE7UUFDSixJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3pGLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsS0FBSyxVQUFVLENBQUMsQ0FBQyxFQUN0RixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDUixJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7SUFFRCxlQUFlLENBQUMsSUFBbUI7UUFDL0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQixJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hCLE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxJQUFtQjtRQUMzQyxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QixLQUFLLFNBQVM7Z0JBQ1YsT0FBTyxFQUFFLENBQUM7WUFDZCxLQUFLLFNBQVM7Z0JBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDdEUsS0FBSyxTQUFTO2dCQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDOUUsS0FBSyxTQUFTO2dCQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDOUU7Z0JBQ0ksV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDOUIsT0FBTyxFQUFFLENBQUM7UUFDbEIsQ0FBQztJQUNMLENBQUM7OEdBbENRLHVCQUF1QjtrR0FBdkIsdUJBQXVCLG1GQ2JwQyw2N0JBa0JBOzsyRkRMYSx1QkFBdUI7a0JBTm5DLFNBQVM7K0JBQ0ksc0JBQXNCLG1CQUdmLHVCQUF1QixDQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkNoYW5nZXMsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhc3NlcnROZXZlciB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2hhcmVkLXV0aWxzJztcclxuaW1wb3J0IHsgY29tYmluZUxhdGVzdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQWN0aW9uQmFySXRlbSB9IGZyb20gJy4uLy4uLy4uL3Byb3ZpZGVycy9uYXYtYnVpbGRlci9uYXYtYnVpbGRlci10eXBlcyc7XHJcbmltcG9ydCB7IEFjdGlvbkJhckJhc2VDb21wb25lbnQgfSBmcm9tICcuL2FjdGlvbi1iYXItYmFzZS5jb21wb25lbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3Zkci1hY3Rpb24tYmFyLWl0ZW1zJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9hY3Rpb24tYmFyLWl0ZW1zLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2FjdGlvbi1iYXItaXRlbXMuY29tcG9uZW50LnNjc3MnXSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWN0aW9uQmFySXRlbXNDb21wb25lbnQgZXh0ZW5kcyBBY3Rpb25CYXJCYXNlQ29tcG9uZW50PEFjdGlvbkJhckl0ZW0+IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMkID0gY29tYmluZUxhdGVzdChbdGhpcy5uYXZCdWlsZGVyU2VydmljZS5hY3Rpb25CYXJDb25maWckLCB0aGlzLmxvY2F0aW9uSWQkXSkucGlwZShcclxuICAgICAgICAgICAgbWFwKChbaXRlbXMsIGxvY2F0aW9uSWRdKSA9PiBpdGVtcy5maWx0ZXIoY29uZmlnID0+IGNvbmZpZy5sb2NhdGlvbklkID09PSBsb2NhdGlvbklkKSksXHJcbiAgICAgICAgICAgIHRhcChpdGVtcyA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkQnV0dG9uU3RhdGVzKGl0ZW1zKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRCdXR0b25TdHlsZXMoaXRlbTogQWN0aW9uQmFySXRlbSk6IHN0cmluZ1tdIHtcclxuICAgICAgICBjb25zdCBzdHlsZXMgPSBbJ2J1dHRvbiddO1xyXG4gICAgICAgIGlmIChpdGVtLmJ1dHRvblN0eWxlICYmIGl0ZW0uYnV0dG9uU3R5bGUgPT09ICdsaW5rJykge1xyXG4gICAgICAgICAgICBzdHlsZXMucHVzaCgnYnRuLWxpbmsnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3R5bGVzLnB1c2godGhpcy5nZXRCdXR0b25Db2xvckNsYXNzKGl0ZW0pKTtcclxuICAgICAgICByZXR1cm4gc3R5bGVzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0QnV0dG9uQ29sb3JDbGFzcyhpdGVtOiBBY3Rpb25CYXJJdGVtKTogc3RyaW5nIHtcclxuICAgICAgICBzd2l0Y2ggKGl0ZW0uYnV0dG9uQ29sb3IpIHtcclxuICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIGNhc2UgJ3ByaW1hcnknOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uYnV0dG9uU3R5bGUgPT09ICdvdXRsaW5lJyA/ICdidG4tb3V0bGluZScgOiAncHJpbWFyeSc7XHJcbiAgICAgICAgICAgIGNhc2UgJ3N1Y2Nlc3MnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uYnV0dG9uU3R5bGUgPT09ICdvdXRsaW5lJyA/ICdidG4tc3VjY2Vzcy1vdXRsaW5lJyA6ICdzdWNjZXNzJztcclxuICAgICAgICAgICAgY2FzZSAnd2FybmluZyc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5idXR0b25TdHlsZSA9PT0gJ291dGxpbmUnID8gJ2J0bi13YXJuaW5nLW91dGxpbmUnIDogJ3dhcm5pbmcnO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYXNzZXJ0TmV2ZXIoaXRlbS5idXR0b25Db2xvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIjx2ZHItdWktZXh0ZW5zaW9uLXBvaW50IFtsb2NhdGlvbklkXT1cImxvY2F0aW9uSWRcIiBhcGk9XCJhY3Rpb25CYXJcIiBbbGVmdFB4XT1cIi0yNFwiPlxyXG4gICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtcyQgfCBhc3luY1wiPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJidXR0b25TdGF0ZXNbaXRlbS5pZF0gfCBhc3luYyBhcyBidXR0b25TdGF0ZVwiPlxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAqdmRySWZQZXJtaXNzaW9ucz1cIml0ZW0ucmVxdWlyZXNQZXJtaXNzaW9uXCJcclxuICAgICAgICAgICAgICAgIFtyb3V0ZXJMaW5rXT1cImdldFJvdXRlckxpbmsoaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgW2NsYXNzLmhpZGRlbl09XCJidXR0b25TdGF0ZS52aXNpYmxlID09PSBmYWxzZVwiXHJcbiAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiYnV0dG9uU3RhdGUuZGlzYWJsZWQgfHwgKGl0ZW0uZGlzYWJsZWQgPyAoaXRlbS5kaXNhYmxlZCB8IGFzeW5jKSA6IGZhbHNlKVwiXHJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwiaGFuZGxlQ2xpY2soJGV2ZW50LCBpdGVtKVwiXHJcbiAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJnZXRCdXR0b25TdHlsZXMoaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJtci0yXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGNsci1pY29uICpuZ0lmPVwiaXRlbS5pY29uXCIgW2F0dHIuc2hhcGVdPVwiaXRlbS5pY29uXCI+PC9jbHItaWNvbj5cclxuICAgICAgICAgICAgICAgIHt7IGl0ZW0ubGFiZWwgfCB0cmFuc2xhdGUgfX1cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuPC92ZHItdWktZXh0ZW5zaW9uLXBvaW50PlxyXG4iXX0=