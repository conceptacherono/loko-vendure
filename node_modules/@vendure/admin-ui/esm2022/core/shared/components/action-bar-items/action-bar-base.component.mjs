import { Directive, HostBinding, inject, Injector, Input } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject, of, switchMap } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { DataService } from '../../../data/providers/data.service';
import { NavBuilderService } from '../../../providers/nav-builder/nav-builder.service';
import { NotificationService } from '../../../providers/notification/notification.service';
import * as i0 from "@angular/core";
export class ActionBarBaseComponent {
    constructor() {
        this.buttonStates = {};
        this.locationId$ = new BehaviorSubject('');
        this.navBuilderService = inject(NavBuilderService);
        this.route = inject(ActivatedRoute);
        this.dataService = inject(DataService);
        this.notificationService = inject(NotificationService);
        this.injector = inject(Injector);
    }
    ngOnChanges(changes) {
        if ('locationId' in changes) {
            this.locationId$.next(changes['locationId'].currentValue);
        }
    }
    handleClick(event, item) {
        if (typeof item.onClick === 'function') {
            item.onClick(event, this.createContext());
        }
    }
    getRouterLink(item) {
        return this.navBuilderService.getRouterLink({ routerLink: item.routerLink, context: this.createContext() }, this.route);
    }
    buildButtonStates(items) {
        const context = this.createContext();
        const defaultState = {
            disabled: false,
            visible: true,
        };
        for (const item of items) {
            const buttonState$ = typeof item.buttonState === 'function'
                ? item.buttonState(context).pipe(map(result => result ?? defaultState), catchError(() => of(defaultState)))
                : of(defaultState);
            this.buttonStates[item.id] = buttonState$;
        }
    }
    createContext() {
        return {
            route: this.route,
            injector: this.injector,
            dataService: this.dataService,
            notificationService: this.notificationService,
            entity$: this.route.data.pipe(switchMap(data => {
                if (data.detail?.entity) {
                    return data.detail.entity;
                }
                else {
                    return of(undefined);
                }
            })),
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ActionBarBaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: ActionBarBaseComponent, inputs: { locationId: "locationId" }, host: { properties: { "attr.data-location-id": "this.locationId" } }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ActionBarBaseComponent, decorators: [{
            type: Directive
        }], propDecorators: { locationId: [{
                type: HostBinding,
                args: ['attr.data-location-id']
            }, {
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLWJhci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL2NvbXBvbmVudHMvYWN0aW9uLWJhci1pdGVtcy9hY3Rpb24tYmFyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUMxRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBYyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBT25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDOztBQUczRixNQUFNLE9BQWdCLHNCQUFzQjtJQUQ1QztRQVNJLGlCQUFZLEdBQXVELEVBQUUsQ0FBQztRQUM1RCxnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLHNCQUFpQixHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzlDLFVBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0IsZ0JBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEMsd0JBQW1CLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDbEQsYUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQXdEekM7SUF0REcsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksWUFBWSxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5RCxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFpQixFQUFFLElBQU87UUFDbEMsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssVUFBVSxFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDOUMsQ0FBQztJQUNMLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBTztRQUNqQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQ3ZDLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxFQUM5RCxJQUFJLENBQUMsS0FBSyxDQUNiLENBQUM7SUFDTixDQUFDO0lBRVMsaUJBQWlCLENBQUMsS0FBVTtRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckMsTUFBTSxZQUFZLEdBQUc7WUFDakIsUUFBUSxFQUFFLEtBQUs7WUFDZixPQUFPLEVBQUUsSUFBSTtTQUNoQixDQUFDO1FBQ0YsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUN2QixNQUFNLFlBQVksR0FDZCxPQUFPLElBQUksQ0FBQyxXQUFXLEtBQUssVUFBVTtnQkFDbEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUMxQixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDLEVBQ3JDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FDckM7Z0JBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUM7UUFDOUMsQ0FBQztJQUNMLENBQUM7SUFFUyxhQUFhO1FBQ25CLE9BQU87WUFDSCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixtQkFBbUIsRUFBRSxJQUFJLENBQUMsbUJBQW1CO1lBQzdDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3pCLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDYixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7b0JBQ3RCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUF5QyxDQUFDO2dCQUNqRSxDQUFDO3FCQUFNLENBQUM7b0JBQ0osT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3pCLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FDTDtTQUNKLENBQUM7SUFDTixDQUFDOzhHQXJFaUIsc0JBQXNCO2tHQUF0QixzQkFBc0I7OzJGQUF0QixzQkFBc0I7a0JBRDNDLFNBQVM7OEJBTU4sVUFBVTtzQkFGVCxXQUFXO3VCQUFDLHVCQUF1Qjs7c0JBQ25DLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBpbmplY3QsIEluamVjdG9yLCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZiwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQWN0aW9uQmFyTG9jYXRpb25JZCB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jb21wb25lbnQtcmVnaXN0cnktdHlwZXMnO1xyXG5pbXBvcnQgeyBEYXRhU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2RhdGEvcHJvdmlkZXJzL2RhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7XHJcbiAgICBBY3Rpb25CYXJCdXR0b25TdGF0ZSxcclxuICAgIEFjdGlvbkJhckNvbnRleHQsXHJcbiAgICBBY3Rpb25CYXJEcm9wZG93bk1lbnVJdGVtLFxyXG4gICAgQWN0aW9uQmFySXRlbSxcclxufSBmcm9tICcuLi8uLi8uLi9wcm92aWRlcnMvbmF2LWJ1aWxkZXIvbmF2LWJ1aWxkZXItdHlwZXMnO1xyXG5pbXBvcnQgeyBOYXZCdWlsZGVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3Byb3ZpZGVycy9uYXYtYnVpbGRlci9uYXYtYnVpbGRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3Byb3ZpZGVycy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSgpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBY3Rpb25CYXJCYXNlQ29tcG9uZW50PFQgZXh0ZW5kcyBBY3Rpb25CYXJJdGVtIHwgQWN0aW9uQmFyRHJvcGRvd25NZW51SXRlbT5cclxuICAgIGltcGxlbWVudHMgT25DaGFuZ2VzXHJcbntcclxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLWxvY2F0aW9uLWlkJylcclxuICAgIEBJbnB1dCgpXHJcbiAgICBsb2NhdGlvbklkOiBBY3Rpb25CYXJMb2NhdGlvbklkO1xyXG5cclxuICAgIGl0ZW1zJDogT2JzZXJ2YWJsZTxUW10+O1xyXG4gICAgYnV0dG9uU3RhdGVzOiB7IFtpZDogc3RyaW5nXTogT2JzZXJ2YWJsZTxBY3Rpb25CYXJCdXR0b25TdGF0ZT4gfSA9IHt9O1xyXG4gICAgcHJvdGVjdGVkIGxvY2F0aW9uSWQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KCcnKTtcclxuICAgIHByb3RlY3RlZCBuYXZCdWlsZGVyU2VydmljZSA9IGluamVjdChOYXZCdWlsZGVyU2VydmljZSk7XHJcbiAgICBwcm90ZWN0ZWQgcm91dGUgPSBpbmplY3QoQWN0aXZhdGVkUm91dGUpO1xyXG4gICAgcHJvdGVjdGVkIGRhdGFTZXJ2aWNlID0gaW5qZWN0KERhdGFTZXJ2aWNlKTtcclxuICAgIHByb3RlY3RlZCBub3RpZmljYXRpb25TZXJ2aWNlID0gaW5qZWN0KE5vdGlmaWNhdGlvblNlcnZpY2UpO1xyXG4gICAgcHJvdGVjdGVkIGluamVjdG9yID0gaW5qZWN0KEluamVjdG9yKTtcclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCdsb2NhdGlvbklkJyBpbiBjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYXRpb25JZCQubmV4dChjaGFuZ2VzWydsb2NhdGlvbklkJ10uY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIGl0ZW06IFQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBpdGVtLm9uQ2xpY2soZXZlbnQsIHRoaXMuY3JlYXRlQ29udGV4dCgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Um91dGVyTGluayhpdGVtOiBUKTogYW55W10gfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYXZCdWlsZGVyU2VydmljZS5nZXRSb3V0ZXJMaW5rKFxyXG4gICAgICAgICAgICB7IHJvdXRlckxpbms6IGl0ZW0ucm91dGVyTGluaywgY29udGV4dDogdGhpcy5jcmVhdGVDb250ZXh0KCkgfSxcclxuICAgICAgICAgICAgdGhpcy5yb3V0ZSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBidWlsZEJ1dHRvblN0YXRlcyhpdGVtczogVFtdKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuY3JlYXRlQ29udGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRTdGF0ZSA9IHtcclxuICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvblN0YXRlJCA9XHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5idXR0b25TdGF0ZSA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gaXRlbS5idXR0b25TdGF0ZShjb250ZXh0KS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcChyZXN1bHQgPT4gcmVzdWx0ID8/IGRlZmF1bHRTdGF0ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoKSA9PiBvZihkZWZhdWx0U3RhdGUpKSxcclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICA6IG9mKGRlZmF1bHRTdGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uU3RhdGVzW2l0ZW0uaWRdID0gYnV0dG9uU3RhdGUkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgY3JlYXRlQ29udGV4dCgpOiBBY3Rpb25CYXJDb250ZXh0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByb3V0ZTogdGhpcy5yb3V0ZSxcclxuICAgICAgICAgICAgaW5qZWN0b3I6IHRoaXMuaW5qZWN0b3IsXHJcbiAgICAgICAgICAgIGRhdGFTZXJ2aWNlOiB0aGlzLmRhdGFTZXJ2aWNlLFxyXG4gICAgICAgICAgICBub3RpZmljYXRpb25TZXJ2aWNlOiB0aGlzLm5vdGlmaWNhdGlvblNlcnZpY2UsXHJcbiAgICAgICAgICAgIGVudGl0eSQ6IHRoaXMucm91dGUuZGF0YS5waXBlKFxyXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmRldGFpbD8uZW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmRldGFpbC5lbnRpdHkgYXMgT2JzZXJ2YWJsZTxSZWNvcmQ8c3RyaW5nLCBhbnk+PjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==