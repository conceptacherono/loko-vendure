import { TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectionStrategy, Component, HostListener, Input, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "./dropdown.component";
import * as i3 from "../../../providers/localization/localization.service";
import * as i4 from "@angular/common";
import * as i5 from "@angular/cdk/bidi";
import * as i6 from "@angular/cdk/a11y";
/**
 * A dropdown menu modelled on the Clarity Dropdown component (https://v1.clarity.design/dropdowns).
 *
 * This was created because the Clarity implementation (at this time) does not handle edge detection. Instead
 * we make use of the Angular CDK's Overlay module to manage the positioning.
 *
 * The API of this component (and its related Components & Directives) are based on the Clarity version,
 * albeit only a subset which is currently used in this application.
 */
export class DropdownMenuComponent {
    onEscapeKeydown(event) {
        if (this.dropdown.isOpen) {
            if (this.overlayRef.overlayElement.contains(document.activeElement)) {
                this.dropdown.toggleOpen();
            }
        }
    }
    onArrowKey(event) {
        if (this.dropdown.isOpen &&
            document.activeElement instanceof HTMLElement &&
            (event.key === 'ArrowDown' || event.key === 'ArrowUp')) {
            const dropdownItems = Array.from(this.overlayRef.overlayElement.querySelectorAll('.dropdown-item'));
            const currentIndex = dropdownItems.indexOf(document.activeElement);
            if (currentIndex === -1) {
                return;
            }
            if (event.key === 'ArrowDown') {
                const nextItem = dropdownItems[(currentIndex + 1) % dropdownItems.length];
                nextItem.focus();
            }
            if (event.key === 'ArrowUp') {
                const previousItem = dropdownItems[(currentIndex - 1 + dropdownItems.length) % dropdownItems.length];
                previousItem.focus();
            }
        }
    }
    constructor(overlay, viewContainerRef, dropdown, localizationService, changeDetector) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.dropdown = dropdown;
        this.localizationService = localizationService;
        this.changeDetector = changeDetector;
        this.position = 'bottom-left';
        this.resizeObserver = new ResizeObserver(entries => {
            const margin = 12;
            for (const entry of entries) {
                const contentWrapper = entry.target.querySelector('.dropdown-content-wrapper');
                if (contentWrapper) {
                    const { bottom, top } = contentWrapper?.getBoundingClientRect();
                    if (bottom > window.innerHeight - margin) {
                        // dropdown is going off the bottom of the screen
                        this.maxHeight = window.innerHeight - top - margin;
                        this.changeDetector.markForCheck();
                    }
                    if (top < margin) {
                        // dropdown is going off the top of the screen
                        this.maxHeight = bottom - margin;
                        this.changeDetector.markForCheck();
                    }
                }
            }
        });
    }
    ngOnInit() {
        this.direction$ = this.localizationService.direction$;
        this.dropdown.onOpenChange(isOpen => {
            if (isOpen) {
                this.overlayRef.attach(this.menuPortal);
                this.resizeObserver.observe(this.overlayRef.overlayElement);
            }
            else {
                this.overlayRef.detach();
                this.resizeObserver.unobserve(this.overlayRef.overlayElement);
                this.maxHeight = undefined;
            }
        });
    }
    ngAfterViewInit() {
        this.overlayRef = this.overlay.create({
            hasBackdrop: true,
            backdropClass: 'clear-backdrop',
            positionStrategy: this.getPositionStrategy(),
            maxHeight: '70vh',
        });
        this.menuPortal = new TemplatePortal(this.menuTemplate, this.viewContainerRef);
        this.backdropClickSub = this.overlayRef.backdropClick().subscribe(() => {
            this.dropdown.toggleOpen();
        });
    }
    ngOnDestroy() {
        if (this.overlayRef) {
            this.overlayRef.dispose();
        }
        if (this.backdropClickSub) {
            this.backdropClickSub.unsubscribe();
        }
    }
    getPositionStrategy() {
        const position = {
            ['top-left']: {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
            ['top-right']: {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom',
            },
            ['bottom-left']: {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            ['bottom-right']: {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top',
            },
        };
        const pos = position[this.position];
        return this.overlay
            .position()
            .flexibleConnectedTo(this.dropdown.trigger)
            .withPositions([pos, this.invertPosition(pos)])
            .withViewportMargin(12)
            .withPush(true);
    }
    /** Inverts an overlay position. */
    invertPosition(pos) {
        const inverted = { ...pos };
        inverted.originY = pos.originY === 'top' ? 'bottom' : 'top';
        inverted.overlayY = pos.overlayY === 'top' ? 'bottom' : 'top';
        return inverted;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DropdownMenuComponent, deps: [{ token: i1.Overlay }, { token: i0.ViewContainerRef }, { token: i2.DropdownComponent }, { token: i3.LocalizationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: { position: ["vdrPosition", "position"], customClasses: "customClasses" }, host: { listeners: { "window:keydown.escape": "onEscapeKeydown($event)", "window:keydown": "onArrowKey($event)" } }, viewQueries: [{ propertyName: "menuTemplate", first: true, predicate: ["menu"], descendants: true, static: true }], ngImport: i0, template: `
        <ng-template #menu>
            <div [dir]="direction$ | async">
                <div class="dropdown open">
                    <div class="dropdown-menu" [ngClass]="customClasses" [style.maxHeight.px]="maxHeight">
                        <div
                            class="dropdown-content-wrapper"
                            [cdkTrapFocus]="true"
                            [cdkTrapFocusAutoCapture]="true"
                        >
                            <ng-content></ng-content>
                        </div>
                    </div>
                </div>
            </div>
        </ng-template>
    `, isInline: true, styles: [".clear-backdrop{background-color:#ff69b4}::ng-deep .dropdown-menu{max-width:initial}::ng-deep .dropdown-menu .dropdown-item{display:flex;align-items:center;padding:3px 24px}::ng-deep .dropdown-menu .dropdown-item clr-icon{margin-inline-end:3px}::ng-deep .dropdown-menu .dropdown-item:focus{outline:var(--color-dropdown-item-focus-outline) solid 1px;outline-offset:1px 0}.dropdown.open>.dropdown-menu{position:relative;top:0;height:100%;overflow-y:auto}:host{opacity:1;transition:opacity .3s}\n"], dependencies: [{ kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.Dir, selector: "[dir]", inputs: ["dir"], outputs: ["dirChange"], exportAs: ["dir"] }, { kind: "directive", type: i6.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DropdownMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-dropdown-menu', template: `
        <ng-template #menu>
            <div [dir]="direction$ | async">
                <div class="dropdown open">
                    <div class="dropdown-menu" [ngClass]="customClasses" [style.maxHeight.px]="maxHeight">
                        <div
                            class="dropdown-content-wrapper"
                            [cdkTrapFocus]="true"
                            [cdkTrapFocusAutoCapture]="true"
                        >
                            <ng-content></ng-content>
                        </div>
                    </div>
                </div>
            </div>
        </ng-template>
    `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [".clear-backdrop{background-color:#ff69b4}::ng-deep .dropdown-menu{max-width:initial}::ng-deep .dropdown-menu .dropdown-item{display:flex;align-items:center;padding:3px 24px}::ng-deep .dropdown-menu .dropdown-item clr-icon{margin-inline-end:3px}::ng-deep .dropdown-menu .dropdown-item:focus{outline:var(--color-dropdown-item-focus-outline) solid 1px;outline-offset:1px 0}.dropdown.open>.dropdown-menu{position:relative;top:0;height:100%;overflow-y:auto}:host{opacity:1;transition:opacity .3s}\n"] }]
        }], ctorParameters: () => [{ type: i1.Overlay }, { type: i0.ViewContainerRef }, { type: i2.DropdownComponent }, { type: i3.LocalizationService }, { type: i0.ChangeDetectorRef }], propDecorators: { position: [{
                type: Input,
                args: ['vdrPosition']
            }], customClasses: [{
                type: Input
            }], menuTemplate: [{
                type: ViewChild,
                args: ['menu', { static: true }]
            }], onEscapeKeydown: [{
                type: HostListener,
                args: ['window:keydown.escape', ['$event']]
            }], onArrowKey: [{
                type: HostListener,
                args: ['window:keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,