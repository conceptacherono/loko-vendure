import { ChangeDetectionStrategy, Component, ViewChild, } from '@angular/core';
import { SharedModule } from '../../shared.module';
import { ExtensionHostService } from './extension-host.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/platform-browser";
import * as i3 from "./extension-host.service";
import * as i4 from "@clr/angular";
import * as i5 from "@angular/common";
import * as i6 from "@ngx-translate/core";
/**
 * This component uses an iframe to embed an external url into the Admin UI, and uses the PostMessage
 * protocol to allow cross-frame communication between the two frames.
 */
export class ExtensionHostComponent {
    constructor(route, sanitizer, extensionHostService) {
        this.route = route;
        this.sanitizer = sanitizer;
        this.extensionHostService = extensionHostService;
        this.openInIframe = true;
        this.extensionWindowIsOpen = false;
    }
    ngOnInit() {
        const { data } = this.route.snapshot;
        if (!this.isExtensionHostConfig(data.extensionHostConfig)) {
            throw new Error(`Expected an ExtensionHostConfig object, got ${JSON.stringify(data.extensionHostConfig)}`);
        }
        this.config = data.extensionHostConfig;
        this.openInIframe = !this.config.openInNewTab;
        this.extensionUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.config.extensionUrl || 'about:blank');
    }
    ngAfterViewInit() {
        if (this.openInIframe) {
            const extensionWindow = this.extensionFrame.nativeElement.contentWindow;
            if (extensionWindow) {
                this.extensionHostService.init(extensionWindow, this.route.snapshot);
            }
        }
    }
    ngOnDestroy() {
        if (this.extensionWindow) {
            this.extensionWindow.close();
        }
    }
    launchExtensionWindow() {
        const extensionWindow = window.open(this.config.extensionUrl);
        if (!extensionWindow) {
            return;
        }
        this.extensionHostService.init(extensionWindow, this.route.snapshot);
        this.extensionWindowIsOpen = true;
        this.extensionWindow = extensionWindow;
        let timer;
        function pollWindowState(extwindow, onClosed) {
            if (extwindow.closed) {
                window.clearTimeout(timer);
                onClosed();
            }
            else {
                timer = window.setTimeout(() => pollWindowState(extwindow, onClosed), 250);
            }
        }
        pollWindowState(extensionWindow, () => {
            this.extensionWindowIsOpen = false;
            this.extensionHostService.destroy();
        });
    }
    isExtensionHostConfig(input) {
        return input.hasOwnProperty('extensionUrl');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ExtensionHostComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.DomSanitizer }, { token: i3.ExtensionHostService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: ExtensionHostComponent, isStandalone: true, selector: "vdr-extension-host", providers: [ExtensionHostService], viewQueries: [{ propertyName: "extensionFrame", first: true, predicate: ["extensionFrame"], descendants: true }], ngImport: i0, template: "<ng-template [ngIf]=\"openInIframe\" [ngIfElse]=\"launchExtension\">\r\n    <iframe [src]=\"extensionUrl\" #extensionFrame></iframe>\r\n</ng-template>\r\n<ng-template #launchExtension>\r\n    <div class=\"launch-button\" [class.launched]=\"extensionWindowIsOpen\">\r\n        <div>\r\n            <button\r\n                class=\"btn btn-lg btn-primary\"\r\n                [disabled]=\"extensionWindowIsOpen\"\r\n                (click)=\"launchExtensionWindow()\"\r\n            >\r\n                <clr-icon shape=\"pop-out\"></clr-icon>\r\n                {{ 'common.launch-extension' | translate }}\r\n            </button>\r\n            <h3 class=\"window-hint\" [class.visible]=\"extensionWindowIsOpen\">\r\n                {{ 'common.extension-running-in-separate-window' | translate }}\r\n            </h3>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n", styles: ["iframe{position:absolute;inset:0;width:100%;height:100%;border:none}.launch-button{position:absolute;inset:0;width:100%;height:100%;border:none;padding:24px;display:flex;align-items:center;justify-content:center;transition:background-color .3s;text-align:center}.launch-button.launched{background-color:var(--color-component-bg-300)}.window-hint{visibility:hidden;opacity:0;transition:visibility .3s 0,opacity .3s}.window-hint.visible{visibility:visible;opacity:1;transition:visibility 0,opacity .3s}\n"], dependencies: [{ kind: "ngmodule", type: SharedModule }, { kind: "directive", type: i4.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ExtensionHostComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-extension-host', changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [SharedModule], providers: [ExtensionHostService], template: "<ng-template [ngIf]=\"openInIframe\" [ngIfElse]=\"launchExtension\">\r\n    <iframe [src]=\"extensionUrl\" #extensionFrame></iframe>\r\n</ng-template>\r\n<ng-template #launchExtension>\r\n    <div class=\"launch-button\" [class.launched]=\"extensionWindowIsOpen\">\r\n        <div>\r\n            <button\r\n                class=\"btn btn-lg btn-primary\"\r\n                [disabled]=\"extensionWindowIsOpen\"\r\n                (click)=\"launchExtensionWindow()\"\r\n            >\r\n                <clr-icon shape=\"pop-out\"></clr-icon>\r\n                {{ 'common.launch-extension' | translate }}\r\n            </button>\r\n            <h3 class=\"window-hint\" [class.visible]=\"extensionWindowIsOpen\">\r\n                {{ 'common.extension-running-in-separate-window' | translate }}\r\n            </h3>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n", styles: ["iframe{position:absolute;inset:0;width:100%;height:100%;border:none}.launch-button{position:absolute;inset:0;width:100%;height:100%;border:none;padding:24px;display:flex;align-items:center;justify-content:center;transition:background-color .3s;text-align:center}.launch-button.launched{background-color:var(--color-component-bg-300)}.window-hint{visibility:hidden;opacity:0;transition:visibility .3s 0,opacity .3s}.window-hint.visible{visibility:visible;opacity:1;transition:visibility 0,opacity .3s}\n"] }]
        }], ctorParameters: () => [{ type: i1.ActivatedRoute }, { type: i2.DomSanitizer }, { type: i3.ExtensionHostService }], propDecorators: { extensionFrame: [{
                type: ViewChild,
                args: ['extensionFrame']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uLWhvc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvY29tcG9uZW50cy9leHRlbnNpb24taG9zdC9leHRlbnNpb24taG9zdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL2V4dGVuc2lvbi1ob3N0L2V4dGVuc2lvbi1ob3N0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUlULFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHbkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7Ozs7O0FBRWhFOzs7R0FHRztBQVVILE1BQU0sT0FBTyxzQkFBc0I7SUFRL0IsWUFDWSxLQUFxQixFQUNyQixTQUF1QixFQUN2QixvQkFBMEM7UUFGMUMsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUN2Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBVHRELGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLDBCQUFxQixHQUFHLEtBQUssQ0FBQztJQVMzQixDQUFDO0lBRUosUUFBUTtRQUNKLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUM7WUFDeEQsTUFBTSxJQUFJLEtBQUssQ0FDWCwrQ0FBK0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUM1RixDQUFDO1FBQ04sQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUM5QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQzdELElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLGFBQWEsQ0FDNUMsQ0FBQztJQUNOLENBQUM7SUFFRCxlQUFlO1FBQ1gsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDcEIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO1lBQ3hFLElBQUksZUFBZSxFQUFFLENBQUM7Z0JBQ2xCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekUsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakMsQ0FBQztJQUNMLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUNuQixPQUFPO1FBQ1gsQ0FBQztRQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUV2QyxJQUFJLEtBQWEsQ0FBQztRQUNsQixTQUFTLGVBQWUsQ0FBQyxTQUFpQixFQUFFLFFBQW9CO1lBQzVELElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNuQixNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMzQixRQUFRLEVBQUUsQ0FBQztZQUNmLENBQUM7aUJBQU0sQ0FBQztnQkFDSixLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQy9FLENBQUM7UUFDTCxDQUFDO1FBRUQsZUFBZSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7WUFDbEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQztZQUNuQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8scUJBQXFCLENBQUMsS0FBVTtRQUNwQyxPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs4R0F0RVEsc0JBQXNCO2tHQUF0QixzQkFBc0IsaUVBRnBCLENBQUMsb0JBQW9CLENBQUMsNElDM0JyQywyMkJBb0JBLCtpQkRNYyxZQUFZOzsyRkFHYixzQkFBc0I7a0JBVGxDLFNBQVM7K0JBQ0ksb0JBQW9CLG1CQUdiLHVCQUF1QixDQUFDLE9BQU8sY0FDcEMsSUFBSSxXQUNQLENBQUMsWUFBWSxDQUFDLGFBQ1osQ0FBQyxvQkFBb0IsQ0FBQztpSkFRSSxjQUFjO3NCQUFsRCxTQUFTO3VCQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBBZnRlclZpZXdJbml0LFxyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgT25Jbml0LFxyXG4gICAgVmlld0NoaWxkLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVSZXNvdXJjZVVybCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFNoYXJlZE1vZHVsZSB9IGZyb20gJy4uLy4uL3NoYXJlZC5tb2R1bGUnO1xyXG5cclxuaW1wb3J0IHsgRXh0ZW5zaW9uSG9zdENvbmZpZyB9IGZyb20gJy4vZXh0ZW5zaW9uLWhvc3QtY29uZmlnJztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uSG9zdFNlcnZpY2UgfSBmcm9tICcuL2V4dGVuc2lvbi1ob3N0LnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgY29tcG9uZW50IHVzZXMgYW4gaWZyYW1lIHRvIGVtYmVkIGFuIGV4dGVybmFsIHVybCBpbnRvIHRoZSBBZG1pbiBVSSwgYW5kIHVzZXMgdGhlIFBvc3RNZXNzYWdlXHJcbiAqIHByb3RvY29sIHRvIGFsbG93IGNyb3NzLWZyYW1lIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgdHdvIGZyYW1lcy5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd2ZHItZXh0ZW5zaW9uLWhvc3QnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2V4dGVuc2lvbi1ob3N0LmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2V4dGVuc2lvbi1ob3N0LmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LkRlZmF1bHQsXHJcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gICAgaW1wb3J0czogW1NoYXJlZE1vZHVsZV0sXHJcbiAgICBwcm92aWRlcnM6IFtFeHRlbnNpb25Ib3N0U2VydmljZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFeHRlbnNpb25Ib3N0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgZXh0ZW5zaW9uVXJsOiBTYWZlUmVzb3VyY2VVcmw7XHJcbiAgICBvcGVuSW5JZnJhbWUgPSB0cnVlO1xyXG4gICAgZXh0ZW5zaW9uV2luZG93SXNPcGVuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGNvbmZpZzogRXh0ZW5zaW9uSG9zdENvbmZpZztcclxuICAgIHByaXZhdGUgZXh0ZW5zaW9uV2luZG93PzogV2luZG93O1xyXG4gICAgQFZpZXdDaGlsZCgnZXh0ZW5zaW9uRnJhbWUnKSBwcml2YXRlIGV4dGVuc2lvbkZyYW1lOiBFbGVtZW50UmVmPEhUTUxJRnJhbWVFbGVtZW50PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgICAgICBwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyLFxyXG4gICAgICAgIHByaXZhdGUgZXh0ZW5zaW9uSG9zdFNlcnZpY2U6IEV4dGVuc2lvbkhvc3RTZXJ2aWNlLFxyXG4gICAgKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gdGhpcy5yb3V0ZS5zbmFwc2hvdDtcclxuICAgICAgICBpZiAoIXRoaXMuaXNFeHRlbnNpb25Ib3N0Q29uZmlnKGRhdGEuZXh0ZW5zaW9uSG9zdENvbmZpZykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICAgICAgYEV4cGVjdGVkIGFuIEV4dGVuc2lvbkhvc3RDb25maWcgb2JqZWN0LCBnb3QgJHtKU09OLnN0cmluZ2lmeShkYXRhLmV4dGVuc2lvbkhvc3RDb25maWcpfWAsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29uZmlnID0gZGF0YS5leHRlbnNpb25Ib3N0Q29uZmlnO1xyXG4gICAgICAgIHRoaXMub3BlbkluSWZyYW1lID0gIXRoaXMuY29uZmlnLm9wZW5Jbk5ld1RhYjtcclxuICAgICAgICB0aGlzLmV4dGVuc2lvblVybCA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybChcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuZXh0ZW5zaW9uVXJsIHx8ICdhYm91dDpibGFuaycsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3BlbkluSWZyYW1lKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbldpbmRvdyA9IHRoaXMuZXh0ZW5zaW9uRnJhbWUubmF0aXZlRWxlbWVudC5jb250ZW50V2luZG93O1xyXG4gICAgICAgICAgICBpZiAoZXh0ZW5zaW9uV2luZG93KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4dGVuc2lvbkhvc3RTZXJ2aWNlLmluaXQoZXh0ZW5zaW9uV2luZG93LCB0aGlzLnJvdXRlLnNuYXBzaG90KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5leHRlbnNpb25XaW5kb3cpIHtcclxuICAgICAgICAgICAgdGhpcy5leHRlbnNpb25XaW5kb3cuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGF1bmNoRXh0ZW5zaW9uV2luZG93KCkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbldpbmRvdyA9IHdpbmRvdy5vcGVuKHRoaXMuY29uZmlnLmV4dGVuc2lvblVybCk7XHJcbiAgICAgICAgaWYgKCFleHRlbnNpb25XaW5kb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmV4dGVuc2lvbkhvc3RTZXJ2aWNlLmluaXQoZXh0ZW5zaW9uV2luZG93LCB0aGlzLnJvdXRlLnNuYXBzaG90KTtcclxuICAgICAgICB0aGlzLmV4dGVuc2lvbldpbmRvd0lzT3BlbiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb25XaW5kb3cgPSBleHRlbnNpb25XaW5kb3c7XHJcblxyXG4gICAgICAgIGxldCB0aW1lcjogbnVtYmVyO1xyXG4gICAgICAgIGZ1bmN0aW9uIHBvbGxXaW5kb3dTdGF0ZShleHR3aW5kb3c6IFdpbmRvdywgb25DbG9zZWQ6ICgpID0+IHZvaWQpIHtcclxuICAgICAgICAgICAgaWYgKGV4dHdpbmRvdy5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgICAgICAgICAgICAgb25DbG9zZWQoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gcG9sbFdpbmRvd1N0YXRlKGV4dHdpbmRvdywgb25DbG9zZWQpLCAyNTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwb2xsV2luZG93U3RhdGUoZXh0ZW5zaW9uV2luZG93LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uV2luZG93SXNPcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uSG9zdFNlcnZpY2UuZGVzdHJveSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNFeHRlbnNpb25Ib3N0Q29uZmlnKGlucHV0OiBhbnkpOiBpbnB1dCBpcyBFeHRlbnNpb25Ib3N0Q29uZmlnIHtcclxuICAgICAgICByZXR1cm4gaW5wdXQuaGFzT3duUHJvcGVydHkoJ2V4dGVuc2lvblVybCcpO1xyXG4gICAgfVxyXG59XHJcbiIsIjxuZy10ZW1wbGF0ZSBbbmdJZl09XCJvcGVuSW5JZnJhbWVcIiBbbmdJZkVsc2VdPVwibGF1bmNoRXh0ZW5zaW9uXCI+XHJcbiAgICA8aWZyYW1lIFtzcmNdPVwiZXh0ZW5zaW9uVXJsXCIgI2V4dGVuc2lvbkZyYW1lPjwvaWZyYW1lPlxyXG48L25nLXRlbXBsYXRlPlxyXG48bmctdGVtcGxhdGUgI2xhdW5jaEV4dGVuc2lvbj5cclxuICAgIDxkaXYgY2xhc3M9XCJsYXVuY2gtYnV0dG9uXCIgW2NsYXNzLmxhdW5jaGVkXT1cImV4dGVuc2lvbldpbmRvd0lzT3BlblwiPlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1sZyBidG4tcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiZXh0ZW5zaW9uV2luZG93SXNPcGVuXCJcclxuICAgICAgICAgICAgICAgIChjbGljayk9XCJsYXVuY2hFeHRlbnNpb25XaW5kb3coKVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxjbHItaWNvbiBzaGFwZT1cInBvcC1vdXRcIj48L2Nsci1pY29uPlxyXG4gICAgICAgICAgICAgICAge3sgJ2NvbW1vbi5sYXVuY2gtZXh0ZW5zaW9uJyB8IHRyYW5zbGF0ZSB9fVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGgzIGNsYXNzPVwid2luZG93LWhpbnRcIiBbY2xhc3MudmlzaWJsZV09XCJleHRlbnNpb25XaW5kb3dJc09wZW5cIj5cclxuICAgICAgICAgICAgICAgIHt7ICdjb21tb24uZXh0ZW5zaW9uLXJ1bm5pbmctaW4tc2VwYXJhdGUtd2luZG93JyB8IHRyYW5zbGF0ZSB9fVxyXG4gICAgICAgICAgICA8L2gzPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvbmctdGVtcGxhdGU+XHJcbiJdfQ==