import { ChangeDetectionStrategy, Component } from '@angular/core';
import { gql } from 'apollo-angular';
import { of } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { ASSET_FRAGMENT, TAG_FRAGMENT } from '../../../data/definitions/product-definitions';
import * as i0 from "@angular/core";
import * as i1 from "../../../data/providers/data.service";
import * as i2 from "@angular/common";
import * as i3 from "../asset-preview/asset-preview.component";
import * as i4 from "../modal-dialog/dialog-title.directive";
export const ASSET_PREVIEW_QUERY = gql `
    query AssetPreviewQuery($id: ID!) {
        asset(id: $id) {
            ...Asset
            tags {
                ...Tag
            }
        }
    }
    ${ASSET_FRAGMENT}
    ${TAG_FRAGMENT}
`;
export class AssetPreviewDialogComponent {
    constructor(dataService) {
        this.dataService = dataService;
    }
    ngOnInit() {
        this.assetWithTags$ = of(this.asset).pipe(mergeMap(asset => {
            if (this.hasTags(asset)) {
                return of(asset);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return this.dataService.product.getAsset(asset.id).mapSingle(data => data.asset);
            }
        }));
        this.assetsWithTags$ = of(this.assets ?? []);
    }
    hasTags(asset) {
        return asset.hasOwnProperty('tags');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AssetPreviewDialogComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: AssetPreviewDialogComponent, selector: "vdr-asset-preview-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\r\n    <div class=\"title-row\">\r\n        {{ asset.name }}\r\n    </div>\r\n</ng-template>\r\n\r\n<vdr-asset-preview\r\n    *ngIf=\"assetWithTags$ | async as assetWithTags\"\r\n    [asset]=\"assetWithTags\"\r\n    (assetChange)=\"assetChanges = $event\"\r\n    (editClick)=\"resolveWith()\"\r\n    [assets]=\"assetsWithTags$ | async\"\r\n></vdr-asset-preview>\r\n", styles: [":host{height:70vh;overflow:auto}.update-button.hidden{visibility:hidden}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.AssetPreviewComponent, selector: "vdr-asset-preview", inputs: ["asset", "assets", "editable", "customFields", "customFieldsForm"], outputs: ["assetChange", "editClick"] }, { kind: "directive", type: i4.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AssetPreviewDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-asset-preview-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>\r\n    <div class=\"title-row\">\r\n        {{ asset.name }}\r\n    </div>\r\n</ng-template>\r\n\r\n<vdr-asset-preview\r\n    *ngIf=\"assetWithTags$ | async as assetWithTags\"\r\n    [asset]=\"assetWithTags\"\r\n    (assetChange)=\"assetChanges = $event\"\r\n    (editClick)=\"resolveWith()\"\r\n    [assets]=\"assetsWithTags$ | async\"\r\n></vdr-asset-preview>\r\n", styles: [":host{height:70vh;overflow:auto}.update-button.hidden{visibility:hidden}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtcHJldmlldy1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvY29tcG9uZW50cy9hc3NldC1wcmV2aWV3LWRpYWxvZy9hc3NldC1wcmV2aWV3LWRpYWxvZy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL2Fzc2V0LXByZXZpZXctZGlhbG9nL2Fzc2V0LXByZXZpZXctZGlhbG9nLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFPLFFBQVEsRUFBTyxNQUFNLGdCQUFnQixDQUFDO0FBR3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLE1BQU0sK0NBQStDLENBQUM7Ozs7OztBQUs3RixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7OztNQVNoQyxjQUFjO01BQ2QsWUFBWTtDQUNqQixDQUFDO0FBUUYsTUFBTSxPQUFPLDJCQUEyQjtJQUNwQyxZQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUFJLENBQUM7SUFRakQsUUFBUTtRQUNKLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQ3JDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNiLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUN0QixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQixDQUFDO2lCQUFNLENBQUM7Z0JBQ0osb0VBQW9FO2dCQUNwRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQU0sQ0FBQyxDQUFDO1lBQ3RGLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FDTCxDQUFDO1FBRUYsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU8sT0FBTyxDQUFDLEtBQWdCO1FBQzVCLE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDOzhHQTFCUSwyQkFBMkI7a0dBQTNCLDJCQUEyQixnRUM5QnhDLDRZQWFBOzsyRkRpQmEsMkJBQTJCO2tCQU52QyxTQUFTOytCQUNJLDBCQUEwQixtQkFHbkIsdUJBQXVCLENBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBncWwgfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgbWVyZ2VNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IEdldEFzc2V0UXVlcnksIFVwZGF0ZUFzc2V0SW5wdXQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcclxuaW1wb3J0IHsgQVNTRVRfRlJBR01FTlQsIFRBR19GUkFHTUVOVCB9IGZyb20gJy4uLy4uLy4uL2RhdGEvZGVmaW5pdGlvbnMvcHJvZHVjdC1kZWZpbml0aW9ucyc7XHJcbmltcG9ydCB7IERhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9wcm92aWRlcnMvZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnLi4vLi4vLi4vcHJvdmlkZXJzL21vZGFsL21vZGFsLnR5cGVzJztcclxuaW1wb3J0IHsgQXNzZXRMaWtlIH0gZnJvbSAnLi4vYXNzZXQtZ2FsbGVyeS9hc3NldC1nYWxsZXJ5LnR5cGVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBBU1NFVF9QUkVWSUVXX1FVRVJZID0gZ3FsYFxyXG4gICAgcXVlcnkgQXNzZXRQcmV2aWV3UXVlcnkoJGlkOiBJRCEpIHtcclxuICAgICAgICBhc3NldChpZDogJGlkKSB7XHJcbiAgICAgICAgICAgIC4uLkFzc2V0XHJcbiAgICAgICAgICAgIHRhZ3Mge1xyXG4gICAgICAgICAgICAgICAgLi4uVGFnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0FTU0VUX0ZSQUdNRU5UfVxyXG4gICAgJHtUQUdfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLWFzc2V0LXByZXZpZXctZGlhbG9nJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9hc3NldC1wcmV2aWV3LWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9hc3NldC1wcmV2aWV3LWRpYWxvZy5jb21wb25lbnQuc2NzcyddLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBc3NldFByZXZpZXdEaWFsb2dDb21wb25lbnQgaW1wbGVtZW50cyBEaWFsb2c8dm9pZD4sIE9uSW5pdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGFTZXJ2aWNlOiBEYXRhU2VydmljZSkgeyB9XHJcbiAgICBhc3NldDogQXNzZXRMaWtlO1xyXG4gICAgYXNzZXRzPzogQXNzZXRMaWtlW107XHJcbiAgICBhc3NldENoYW5nZXM/OiBVcGRhdGVBc3NldElucHV0O1xyXG4gICAgcmVzb2x2ZVdpdGg6IChyZXN1bHQ/OiB2b2lkKSA9PiB2b2lkO1xyXG4gICAgYXNzZXRXaXRoVGFncyQ6IE9ic2VydmFibGU8R2V0QXNzZXRRdWVyeVsnYXNzZXQnXT47XHJcbiAgICBhc3NldHNXaXRoVGFncyQ6IE9ic2VydmFibGU8QXJyYXk8R2V0QXNzZXRRdWVyeVsnYXNzZXQnXT4+O1xyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuYXNzZXRXaXRoVGFncyQgPSBvZih0aGlzLmFzc2V0KS5waXBlKFxyXG4gICAgICAgICAgICBtZXJnZU1hcChhc3NldCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNUYWdzKGFzc2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZihhc3NldCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UucHJvZHVjdC5nZXRBc3NldChhc3NldC5pZCkubWFwU2luZ2xlKGRhdGEgPT4gZGF0YS5hc3NldCEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmFzc2V0c1dpdGhUYWdzJCA9IG9mKHRoaXMuYXNzZXRzID8/IFtdKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhc1RhZ3MoYXNzZXQ6IEFzc2V0TGlrZSk6IGFzc2V0IGlzIEFzc2V0TGlrZSAmIHsgdGFnczogc3RyaW5nW10gfSB7XHJcbiAgICAgICAgcmV0dXJuIGFzc2V0Lmhhc093blByb3BlcnR5KCd0YWdzJyk7XHJcbiAgICB9XHJcbn1cclxuIiwiPG5nLXRlbXBsYXRlIHZkckRpYWxvZ1RpdGxlPlxyXG4gICAgPGRpdiBjbGFzcz1cInRpdGxlLXJvd1wiPlxyXG4gICAgICAgIHt7IGFzc2V0Lm5hbWUgfX1cclxuICAgIDwvZGl2PlxyXG48L25nLXRlbXBsYXRlPlxyXG5cclxuPHZkci1hc3NldC1wcmV2aWV3XHJcbiAgICAqbmdJZj1cImFzc2V0V2l0aFRhZ3MkIHwgYXN5bmMgYXMgYXNzZXRXaXRoVGFnc1wiXHJcbiAgICBbYXNzZXRdPVwiYXNzZXRXaXRoVGFnc1wiXHJcbiAgICAoYXNzZXRDaGFuZ2UpPVwiYXNzZXRDaGFuZ2VzID0gJGV2ZW50XCJcclxuICAgIChlZGl0Q2xpY2spPVwicmVzb2x2ZVdpdGgoKVwiXHJcbiAgICBbYXNzZXRzXT1cImFzc2V0c1dpdGhUYWdzJCB8IGFzeW5jXCJcclxuPjwvdmRyLWFzc2V0LXByZXZpZXc+XHJcbiJdfQ==