import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class DataTableCustomComponentService {
    constructor() {
        this.configMap = new Map();
    }
    registerCustomComponent(config) {
        const id = this.compoundId(config.tableId, config.columnId);
        this.configMap.set(id, config);
    }
    getCustomComponentsFor(tableId, columnId) {
        return this.configMap.get(this.compoundId(tableId, columnId));
    }
    compoundId(tableId, columnId) {
        return `${tableId}.${columnId}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DataTableCustomComponentService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DataTableCustomComponentService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DataTableCustomComponentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS1jdXN0b20tY29tcG9uZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL2RhdGEtdGFibGUtMi9kYXRhLXRhYmxlLWN1c3RvbS1jb21wb25lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFrQixNQUFNLGVBQWUsQ0FBQzs7QUE4RTNELE1BQU0sT0FBTywrQkFBK0I7SUFINUM7UUFJWSxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQXdDLENBQUM7S0FpQnZFO0lBZkcsdUJBQXVCLENBQUMsTUFBZ0M7UUFDcEQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHNCQUFzQixDQUNsQixPQUE0QixFQUM1QixRQUEyQjtRQUUzQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVPLFVBQVUsQ0FBQyxPQUE0QixFQUFFLFFBQTJCO1FBQ3hFLE9BQU8sR0FBRyxPQUFPLElBQUksUUFBUSxFQUFFLENBQUM7SUFDcEMsQ0FBQzs4R0FqQlEsK0JBQStCO2tIQUEvQiwrQkFBK0IsY0FGNUIsTUFBTTs7MkZBRVQsK0JBQStCO2tCQUgzQyxVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFByb3ZpZGVyLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBhZ2VMb2NhdGlvbklkIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NvbXBvbmVudC1yZWdpc3RyeS10eXBlcyc7XHJcblxyXG5leHBvcnQgdHlwZSBEYXRhVGFibGVMb2NhdGlvbklkID1cclxuICAgIHwge1xyXG4gICAgICAgICAgW2xvY2F0aW9uIGluIFBhZ2VMb2NhdGlvbklkXTogbG9jYXRpb24gZXh0ZW5kcyBgJHtzdHJpbmd9LWxpc3RgID8gbG9jYXRpb24gOiBuZXZlcjtcclxuICAgICAgfVtQYWdlTG9jYXRpb25JZF1cclxuICAgIHwgJ2NvbGxlY3Rpb24tY29udGVudHMnXHJcbiAgICB8ICdlZGl0LW9wdGlvbnMtbGlzdCdcclxuICAgIHwgJ21hbmFnZS1wcm9kdWN0LXZhcmlhbnQtbGlzdCdcclxuICAgIHwgJ2N1c3RvbWVyLW9yZGVyLWxpc3QnXHJcbiAgICB8ICdwcm9kdWN0LWRldGFpbC12YXJpYW50cy1saXN0J1xyXG4gICAgfCBzdHJpbmc7XHJcblxyXG5leHBvcnQgdHlwZSBEYXRhVGFibGVDb2x1bW5JZCA9XHJcbiAgICB8ICdpZCdcclxuICAgIHwgJ2NyZWF0ZWQtYXQnXHJcbiAgICB8ICd1cGRhdGVkLWF0J1xyXG4gICAgfCAnbmFtZSdcclxuICAgIHwgJ2NvZGUnXHJcbiAgICB8ICdkZXNjcmlwdGlvbidcclxuICAgIHwgJ3NsdWcnXHJcbiAgICB8ICdlbmFibGVkJ1xyXG4gICAgfCAnc2t1J1xyXG4gICAgfCAncHJpY2UnXHJcbiAgICB8ICdwcmljZS13aXRoLXRheCdcclxuICAgIHwgJ3N0YXR1cydcclxuICAgIHwgJ3N0YXRlJ1xyXG4gICAgfCAnaW1hZ2UnXHJcbiAgICB8ICdxdWFudGl0eSdcclxuICAgIHwgJ3RvdGFsJ1xyXG4gICAgfCAnc3RvY2stb24taGFuZCdcclxuICAgIHwgc3RyaW5nO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDb21wb25lbnRzIHdoaWNoIGFyZSB0byBiZSB1c2VkIHRvIHJlbmRlciBjdXN0b20gY2VsbHMgaW4gYSBkYXRhIHRhYmxlIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqIFRoZSBgcm93SXRlbWAgcHJvcGVydHkgaXMgdGhlIGRhdGEgb2JqZWN0IGZvciB0aGUgcm93LCBlLmcuIHRoZSBgUHJvZHVjdGAgb2JqZWN0IGlmIHVzZWRcclxuICogaW4gdGhlIGBwcm9kdWN0LWxpc3RgIHRhYmxlLlxyXG4gKlxyXG4gKiBAZG9jc0NhdGVnb3J5IGN1c3RvbS10YWJsZS1jb21wb25lbnRzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbUNvbHVtbkNvbXBvbmVudCB7XHJcbiAgICByb3dJdGVtOiBhbnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29uZmlndXJlcyBhIHtAbGluayBDdXN0b21EZXRhaWxDb21wb25lbnR9IHRvIGJlIHBsYWNlZCBpbiB0aGUgZ2l2ZW4gbG9jYXRpb24uXHJcbiAqXHJcbiAqIEBkb2NzQ2F0ZWdvcnkgY3VzdG9tLXRhYmxlLWNvbXBvbmVudHNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRhYmxlQ29tcG9uZW50Q29uZmlnIHtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBUaGUgbG9jYXRpb24gaW4gdGhlIFVJIHdoZXJlIHRoZSBjdXN0b20gY29tcG9uZW50IHNob3VsZCBiZSBwbGFjZWQuXHJcbiAgICAgKi9cclxuICAgIHRhYmxlSWQ6IERhdGFUYWJsZUxvY2F0aW9uSWQ7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogVGhlIGNvbHVtbiBpbiB0aGUgdGFibGUgd2hlcmUgdGhlIGN1c3RvbSBjb21wb25lbnQgc2hvdWxkIGJlIHBsYWNlZC5cclxuICAgICAqL1xyXG4gICAgY29sdW1uSWQ6IERhdGFUYWJsZUNvbHVtbklkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFRoZSBjb21wb25lbnQgdG8gcmVuZGVyIGluIHRoZSB0YWJsZSBjZWxsLiBUaGlzIGNvbXBvbmVudCBzaG91bGQgaW1wbGVtZW50IHRoZVxyXG4gICAgICoge0BsaW5rIEN1c3RvbUNvbHVtbkNvbXBvbmVudH0gaW50ZXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBjb21wb25lbnQ6IFR5cGU8Q3VzdG9tQ29sdW1uQ29tcG9uZW50PjtcclxuICAgIHByb3ZpZGVycz86IFByb3ZpZGVyW107XHJcbn1cclxuXHJcbnR5cGUgQ29tcG91bmRJZCA9IGAke0RhdGFUYWJsZUxvY2F0aW9uSWR9LiR7RGF0YVRhYmxlQ29sdW1uSWR9YDtcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZUN1c3RvbUNvbXBvbmVudFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBjb25maWdNYXAgPSBuZXcgTWFwPENvbXBvdW5kSWQsIERhdGFUYWJsZUNvbXBvbmVudENvbmZpZz4oKTtcclxuXHJcbiAgICByZWdpc3RlckN1c3RvbUNvbXBvbmVudChjb25maWc6IERhdGFUYWJsZUNvbXBvbmVudENvbmZpZykge1xyXG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5jb21wb3VuZElkKGNvbmZpZy50YWJsZUlkLCBjb25maWcuY29sdW1uSWQpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnTWFwLnNldChpZCwgY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDdXN0b21Db21wb25lbnRzRm9yKFxyXG4gICAgICAgIHRhYmxlSWQ6IERhdGFUYWJsZUxvY2F0aW9uSWQsXHJcbiAgICAgICAgY29sdW1uSWQ6IERhdGFUYWJsZUNvbHVtbklkLFxyXG4gICAgKTogRGF0YVRhYmxlQ29tcG9uZW50Q29uZmlnIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb25maWdNYXAuZ2V0KHRoaXMuY29tcG91bmRJZCh0YWJsZUlkLCBjb2x1bW5JZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29tcG91bmRJZCh0YWJsZUlkOiBEYXRhVGFibGVMb2NhdGlvbklkLCBjb2x1bW5JZDogRGF0YVRhYmxlQ29sdW1uSWQpOiBDb21wb3VuZElkIHtcclxuICAgICAgICByZXR1cm4gYCR7dGFibGVJZH0uJHtjb2x1bW5JZH1gO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==