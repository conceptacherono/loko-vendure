import { Directive, Optional } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
/* eslint-disable @angular-eslint/directive-selector */
export class FormFieldControlDirective {
    constructor(elementRef, formControlName) {
        this.elementRef = elementRef;
        this.formControlName = formControlName;
    }
    get valid() {
        return !!this.formControlName && !!this.formControlName.valid;
    }
    get touched() {
        return !!this.formControlName && !!this.formControlName.touched;
    }
    setReadOnly(value) {
        const input = this.elementRef.nativeElement;
        if (isSelectElement(input)) {
            input.disabled = value;
        }
        else {
            input.readOnly = value;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FormFieldControlDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgControl, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FormFieldControlDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'input, textarea, select, vdr-currency-input' }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }] }] });
function isSelectElement(value) {
    return value.hasOwnProperty('selectedIndex');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWVsZC1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL2NvbXBvbmVudHMvZm9ybS1maWVsZC9mb3JtLWZpZWxkLWNvbnRyb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFLaEUsdURBQXVEO0FBRXZELE1BQU0sT0FBTyx5QkFBeUI7SUFDbEMsWUFDWSxVQUFvQyxFQUN6QixlQUEwQjtRQURyQyxlQUFVLEdBQVYsVUFBVSxDQUEwQjtRQUN6QixvQkFBZSxHQUFmLGVBQWUsQ0FBVztJQUM5QyxDQUFDO0lBRUosSUFBSSxLQUFLO1FBQ0wsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7SUFDbEUsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBYztRQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUM1QyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3pCLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzNCLENBQUM7YUFBTSxDQUFDO1lBQ0osS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDM0IsQ0FBQztJQUNMLENBQUM7OEdBckJRLHlCQUF5QjtrR0FBekIseUJBQXlCOzsyRkFBekIseUJBQXlCO2tCQURyQyxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLDZDQUE2QyxFQUFFOzswQkFJN0QsUUFBUTs7QUFxQmpCLFNBQVMsZUFBZSxDQUFDLEtBQW1CO0lBQ3hDLE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNqRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG50eXBlIElucHV0RWxlbWVudCA9IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTFNlbGVjdEVsZW1lbnQ7XHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLXNlbGVjdG9yICovXHJcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0LCB2ZHItY3VycmVuY3ktaW5wdXQnIH0pXHJcbmV4cG9ydCBjbGFzcyBGb3JtRmllbGRDb250cm9sRGlyZWN0aXZlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjxJbnB1dEVsZW1lbnQ+LFxyXG4gICAgICAgIEBPcHRpb25hbCgpIHB1YmxpYyBmb3JtQ29udHJvbE5hbWU6IE5nQ29udHJvbCxcclxuICAgICkge31cclxuXHJcbiAgICBnZXQgdmFsaWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5mb3JtQ29udHJvbE5hbWUgJiYgISF0aGlzLmZvcm1Db250cm9sTmFtZS52YWxpZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdG91Y2hlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLmZvcm1Db250cm9sTmFtZSAmJiAhIXRoaXMuZm9ybUNvbnRyb2xOYW1lLnRvdWNoZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UmVhZE9ubHkodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCBpbnB1dCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIGlmIChpc1NlbGVjdEVsZW1lbnQoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGlucHV0LmRpc2FibGVkID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5wdXQucmVhZE9ubHkgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzU2VsZWN0RWxlbWVudCh2YWx1ZTogSW5wdXRFbGVtZW50KTogdmFsdWUgaXMgSFRNTFNlbGVjdEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHZhbHVlLmhhc093blByb3BlcnR5KCdzZWxlY3RlZEluZGV4Jyk7XHJcbn1cclxuIl19