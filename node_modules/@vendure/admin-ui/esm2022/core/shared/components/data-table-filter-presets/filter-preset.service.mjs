import { moveItemInArray } from '@angular/cdk/drag-drop';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../../../providers/data-table/data-table-config.service";
export class FilterPresetService {
    constructor(dataTableConfigService) {
        this.dataTableConfigService = dataTableConfigService;
        this._presetChanges = new Subject();
        this.presetChanges$ = this._presetChanges.asObservable();
    }
    getFilterPresets(dataTableId) {
        const dataTableConfig = this.dataTableConfigService.getConfig(dataTableId);
        return dataTableConfig.filterPresets ?? [];
    }
    saveFilterPreset(config) {
        const dataTableConfig = this.dataTableConfigService.getConfig(config.dataTableId);
        const filterPresets = dataTableConfig.filterPresets ?? [];
        const existingName = filterPresets.find(p => p.name === config.name);
        if (existingName) {
            existingName.value = config.value;
        }
        else {
            filterPresets.push({
                name: config.name,
                value: config.value,
            });
        }
        dataTableConfig.filterPresets = filterPresets;
        this.dataTableConfigService.setConfig(config.dataTableId, dataTableConfig);
        this._presetChanges.next(filterPresets);
    }
    deleteFilterPreset(config) {
        const dataTableConfig = this.dataTableConfigService.getConfig(config.dataTableId);
        dataTableConfig.filterPresets = dataTableConfig.filterPresets.filter(p => p.name !== config.name);
        this.dataTableConfigService.setConfig(config.dataTableId, dataTableConfig);
        this._presetChanges.next(dataTableConfig.filterPresets);
    }
    reorderPresets(dataTableId, fromIndex, toIndex) {
        const presets = this.getFilterPresets(dataTableId);
        moveItemInArray(presets, fromIndex, toIndex);
        const dataTableConfig = this.dataTableConfigService.getConfig(dataTableId);
        dataTableConfig.filterPresets = presets;
        this.dataTableConfigService.setConfig(dataTableId, dataTableConfig);
        this._presetChanges.next(presets);
    }
    renameFilterPreset(config) {
        const dataTableConfig = this.dataTableConfigService.getConfig(config.dataTableId);
        const filterPresets = dataTableConfig.filterPresets ?? [];
        const existingName = filterPresets.find(p => p.name === config.oldName);
        if (existingName) {
            existingName.name = config.newName;
            dataTableConfig.filterPresets = filterPresets;
            this.dataTableConfigService.setConfig(config.dataTableId, dataTableConfig);
            this._presetChanges.next(filterPresets);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FilterPresetService, deps: [{ token: i1.DataTableConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FilterPresetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: FilterPresetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.DataTableConfigService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXByZXNldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvY29tcG9uZW50cy9kYXRhLXRhYmxlLWZpbHRlci1wcmVzZXRzL2ZpbHRlci1wcmVzZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFNM0MsTUFBTSxPQUFPLG1CQUFtQjtJQUk1QixZQUFvQixzQkFBOEM7UUFBOUMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUYxRCxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUEwQyxDQUFDO1FBRzNFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM3RCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsV0FBbUI7UUFDaEMsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzRSxPQUFPLGVBQWUsQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxNQUE0RDtRQUN6RSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRixNQUFNLGFBQWEsR0FBRyxlQUFlLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQztRQUMxRCxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMs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QGFuZ3VsYXIvY2RrL2RyYWctZHJvcCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBEYXRhVGFibGVDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vcHJvdmlkZXJzL2RhdGEtdGFibGUvZGF0YS10YWJsZS1jb25maWcuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJQcmVzZXRTZXJ2aWNlIHtcclxuICAgIHByZXNldENoYW5nZXMkOiBPYnNlcnZhYmxlPEFycmF5PHsgbmFtZTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+PjtcclxuICAgIHByaXZhdGUgX3ByZXNldENoYW5nZXMgPSBuZXcgU3ViamVjdDxBcnJheTx7IG5hbWU6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9Pj4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGFUYWJsZUNvbmZpZ1NlcnZpY2U6IERhdGFUYWJsZUNvbmZpZ1NlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLnByZXNldENoYW5nZXMkID0gdGhpcy5fcHJlc2V0Q2hhbmdlcy5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRGaWx0ZXJQcmVzZXRzKGRhdGFUYWJsZUlkOiBzdHJpbmcpOiBBcnJheTx7IG5hbWU6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YVRhYmxlQ29uZmlnID0gdGhpcy5kYXRhVGFibGVDb25maWdTZXJ2aWNlLmdldENvbmZpZyhkYXRhVGFibGVJZCk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGFUYWJsZUNvbmZpZy5maWx0ZXJQcmVzZXRzID8/IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVGaWx0ZXJQcmVzZXQoY29uZmlnOiB7IGRhdGFUYWJsZUlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9KSB7XHJcbiAgICAgICAgY29uc3QgZGF0YVRhYmxlQ29uZmlnID0gdGhpcy5kYXRhVGFibGVDb25maWdTZXJ2aWNlLmdldENvbmZpZyhjb25maWcuZGF0YVRhYmxlSWQpO1xyXG4gICAgICAgIGNvbnN0IGZpbHRlclByZXNldHMgPSBkYXRhVGFibGVDb25maWcuZmlsdGVyUHJlc2V0cyA/PyBbXTtcclxuICAgICAgICBjb25zdCBleGlzdGluZ05hbWUgPSBmaWx0ZXJQcmVzZXRzLmZpbmQocCA9PiBwLm5hbWUgPT09IGNvbmZpZy5uYW1lKTtcclxuICAgICAgICBpZiAoZXhpc3RpbmdOYW1lKSB7XHJcbiAgICAgICAgICAgIGV4aXN0aW5nTmFtZS52YWx1ZSA9IGNvbmZpZy52YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaWx0ZXJQcmVzZXRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogY29uZmlnLm5hbWUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogY29uZmlnLnZhbHVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGF0YVRhYmxlQ29uZmlnLmZpbHRlclByZXNldHMgPSBmaWx0ZXJQcmVzZXRzO1xyXG4gICAgICAgIHRoaXMuZGF0YVRhYmxlQ29uZmlnU2VydmljZS5zZXRDb25maWcoY29uZmlnLmRhdGFUYWJsZUlkLCBkYXRhVGFibGVDb25maWcpO1xyXG4gICAgICAgIHRoaXMuX3ByZXNldENoYW5nZXMubmV4dChmaWx0ZXJQcmVzZXRzKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVGaWx0ZXJQcmVzZXQoY29uZmlnOiB7IGRhdGFUYWJsZUlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB9KSB7XHJcbiAgICAgICAgY29uc3QgZGF0YVRhYmxlQ29uZmlnID0gdGhpcy5kYXRhVGFibGVDb25maWdTZXJ2aWNlLmdldENvbmZpZyhjb25maWcuZGF0YVRhYmxlSWQpO1xyXG4gICAgICAgIGRhdGFUYWJsZUNvbmZpZy5maWx0ZXJQcmVzZXRzID0gZGF0YVRhYmxlQ29uZmlnLmZpbHRlclByZXNldHMuZmlsdGVyKHAgPT4gcC5uYW1lICE9PSBjb25maWcubmFtZSk7XHJcbiAgICAgICAgdGhpcy5kYXRhVGFibGVDb25maWdTZXJ2aWNlLnNldENvbmZpZyhjb25maWcuZGF0YVRhYmxlSWQsIGRhdGFUYWJsZUNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy5fcHJlc2V0Q2hhbmdlcy5uZXh0KGRhdGFUYWJsZUNvbmZpZy5maWx0ZXJQcmVzZXRzKTtcclxuICAgIH1cclxuXHJcbiAgICByZW9yZGVyUHJlc2V0cyhkYXRhVGFibGVJZDogc3RyaW5nLCBmcm9tSW5kZXg6IG51bWJlciwgdG9JbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgcHJlc2V0cyA9IHRoaXMuZ2V0RmlsdGVyUHJlc2V0cyhkYXRhVGFibGVJZCk7XHJcbiAgICAgICAgbW92ZUl0ZW1JbkFycmF5KHByZXNldHMsIGZyb21JbmRleCwgdG9JbmRleCk7XHJcbiAgICAgICAgY29uc3QgZGF0YVRhYmxlQ29uZmlnID0gdGhpcy5kYXRhVGFibGVDb25maWdTZXJ2aWNlLmdldENvbmZpZyhkYXRhVGFibGVJZCk7XHJcbiAgICAgICAgZGF0YVRhYmxlQ29uZmlnLmZpbHRlclByZXNldHMgPSBwcmVzZXRzO1xyXG4gICAgICAgIHRoaXMuZGF0YVRhYmxlQ29uZmlnU2VydmljZS5zZXRDb25maWcoZGF0YVRhYmxlSWQsIGRhdGFUYWJsZUNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy5fcHJlc2V0Q2hhbmdlcy5uZXh0KHByZXNldHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmFtZUZpbHRlclByZXNldChjb25maWc6IHsgZGF0YVRhYmxlSWQ6IHN0cmluZzsgb2xkTmFtZTogc3RyaW5nOyBuZXdOYW1lOiBzdHJpbmcgfSkge1xyXG4gICAgICAgIGNvbnN0IGRhdGFUYWJsZUNvbmZpZyA9IHRoaXMuZGF0YVRhYmxlQ29uZmlnU2VydmljZS5nZXRDb25maWcoY29uZmlnLmRhdGFUYWJsZUlkKTtcclxuICAgICAgICBjb25zdCBmaWx0ZXJQcmVzZXRzID0gZGF0YVRhYmxlQ29uZmlnLmZpbHRlclByZXNldHMgPz8gW107XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdOYW1lID0gZmlsdGVyUHJlc2V0cy5maW5kKHAgPT4gcC5uYW1lID09PSBjb25maWcub2xkTmFtZSk7XHJcbiAgICAgICAgaWYgKGV4aXN0aW5nTmFtZSkge1xyXG4gICAgICAgICAgICBleGlzdGluZ05hbWUubmFtZSA9IGNvbmZpZy5uZXdOYW1lO1xyXG4gICAgICAgICAgICBkYXRhVGFibGVDb25maWcuZmlsdGVyUHJlc2V0cyA9IGZpbHRlclByZXNldHM7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVRhYmxlQ29uZmlnU2VydmljZS5zZXRDb25maWcoY29uZmlnLmRhdGFUYWJsZUlkLCBkYXRhVGFibGVDb25maWcpO1xyXG4gICAgICAgICAgICB0aGlzLl9wcmVzZXRDaGFuZ2VzLm5leHQoZmlsdGVyUHJlc2V0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==