import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../providers/bulk-action-registry/bulk-action-registry.service";
import * as i2 from "@angular/router";
import * as i3 from "../../../data/providers/data.service";
import * as i4 from "@clr/angular";
import * as i5 from "@angular/common";
import * as i6 from "../dropdown/dropdown.component";
import * as i7 from "../dropdown/dropdown-menu.component";
import * as i8 from "../dropdown/dropdown-trigger.directive";
import * as i9 from "../dropdown/dropdown-item.directive";
import * as i10 from "@ngx-translate/core";
export class BulkActionMenuComponent {
    constructor(bulkActionRegistryService, injector, route, dataService, changeDetectorRef) {
        this.bulkActionRegistryService = bulkActionRegistryService;
        this.injector = injector;
        this.route = route;
        this.dataService = dataService;
        this.changeDetectorRef = changeDetectorRef;
        this.userPermissions = [];
        this.onClearSelectionFns = [];
    }
    ngOnInit() {
        const actionsForLocation = this.bulkActionRegistryService.getBulkActionsForLocation(this.locationId);
        this.actions$ = this.selectionManager.selectionChanges$.pipe(switchMap(selection => Promise.all(actionsForLocation.map(async (action) => {
            let display = true;
            let translationVars = {};
            const isVisibleFn = action.isVisible;
            const getTranslationVarsFn = action.getTranslationVars;
            const functionContext = {
                injector: this.injector,
                hostComponent: this.hostComponent,
                route: this.route,
                selection,
            };
            if (typeof isVisibleFn === 'function') {
                display = await isVisibleFn(functionContext);
            }
            if (typeof getTranslationVarsFn === 'function') {
                translationVars = await getTranslationVarsFn(functionContext);
            }
            return { ...action, display, translationVars };
        }))));
        this.subscription = this.dataService.client
            .userStatus()
            .mapStream(({ userStatus }) => {
            this.userPermissions = userStatus.permissions;
        })
            .subscribe();
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
    hasPermissions(bulkAction) {
        if (!this.userPermissions) {
            return false;
        }
        if (!bulkAction.requiresPermission) {
            return true;
        }
        if (typeof bulkAction.requiresPermission === 'string') {
            return this.userPermissions.includes(bulkAction.requiresPermission);
        }
        if (typeof bulkAction.requiresPermission === 'function') {
            return bulkAction.requiresPermission(this.userPermissions);
        }
    }
    actionClick(event, action) {
        action.onClick({
            injector: this.injector,
            event,
            route: this.route,
            selection: this.selectionManager.selection,
            hostComponent: this.hostComponent,
            clearSelection: () => this.selectionManager.clearSelection(),
        });
    }
    clearSelection() {
        this.selectionManager.clearSelection();
        this.changeDetectorRef.markForCheck();
        this.onClearSelectionFns.forEach(fn => fn());
    }
    onClearSelection(callback) {
        this.onClearSelectionFns.push(callback);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: BulkActionMenuComponent, deps: [{ token: i1.BulkActionRegistryService }, { token: i0.Injector }, { token: i2.ActivatedRoute }, { token: i3.DataService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: BulkActionMenuComponent, selector: "vdr-bulk-action-menu", inputs: { locationId: "locationId", selectionManager: "selectionManager", hostComponent: "hostComponent" }, ngImport: i0, template: "<vdr-dropdown *ngIf=\"actions$ | async as actions\">\r\n    <button\r\n        *ngIf=\"actions.length\"\r\n        class=\"btn btn-sm btn-outline mr-2\"\r\n        vdrDropdownTrigger\r\n        [disabled]=\"!selectionManager.selection?.length\"\r\n        [class.hidden]=\"!selectionManager.selection?.length\"\r\n    >\r\n        <clr-icon shape=\"file-group\"></clr-icon>\r\n        {{ 'common.with-selected' | translate: { count:selectionManager.selection.length } }}\r\n        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n        <ng-container *ngIf=\"actions.length; else noActions\">\r\n            <ng-container *ngFor=\"let action of actions\">\r\n                <button\r\n                    *ngIf=\"action.display\"\r\n                    [disabled]=\"!hasPermissions(action)\"\r\n                    type=\"button\"\r\n                    vdrDropdownItem\r\n                    (click)=\"actionClick($event, action)\"\r\n                >\r\n                    <clr-icon\r\n                        *ngIf=\"action.icon\"\r\n                        [attr.shape]=\"action.icon\"\r\n                        [ngClass]=\"action.iconClass || ''\"\r\n                    ></clr-icon>\r\n                    {{ action.label | translate: action.translationVars }}\r\n                </button>\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-template #noActions>\r\n            <button type=\"button\" disabled vdrDropdownItem>{{ 'common.no-bulk-actions-available' | translate }}</button>\r\n        </ng-template>\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n<button\r\n    class=\"button-small\"\r\n    (click)=\"clearSelection()\"\r\n    [class.hidden]=\"!selectionManager.selection?.length\"\r\n>\r\n    <span>{{ 'common.clear-selection' | translate }}</span>\r\n    <clr-icon shape=\"times\"></clr-icon>\r\n</button>\r\n", styles: [":host{display:inline-flex;align-items:center}button.hidden{display:none}\n"], dependencies: [{ kind: "directive", type: i4.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i7.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i8.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i9.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i10.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: BulkActionMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-bulk-action-menu', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-dropdown *ngIf=\"actions$ | async as actions\">\r\n    <button\r\n        *ngIf=\"actions.length\"\r\n        class=\"btn btn-sm btn-outline mr-2\"\r\n        vdrDropdownTrigger\r\n        [disabled]=\"!selectionManager.selection?.length\"\r\n        [class.hidden]=\"!selectionManager.selection?.length\"\r\n    >\r\n        <clr-icon shape=\"file-group\"></clr-icon>\r\n        {{ 'common.with-selected' | translate: { count:selectionManager.selection.length } }}\r\n        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n        <ng-container *ngIf=\"actions.length; else noActions\">\r\n            <ng-container *ngFor=\"let action of actions\">\r\n                <button\r\n                    *ngIf=\"action.display\"\r\n                    [disabled]=\"!hasPermissions(action)\"\r\n                    type=\"button\"\r\n                    vdrDropdownItem\r\n                    (click)=\"actionClick($event, action)\"\r\n                >\r\n                    <clr-icon\r\n                        *ngIf=\"action.icon\"\r\n                        [attr.shape]=\"action.icon\"\r\n                        [ngClass]=\"action.iconClass || ''\"\r\n                    ></clr-icon>\r\n                    {{ action.label | translate: action.translationVars }}\r\n                </button>\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-template #noActions>\r\n            <button type=\"button\" disabled vdrDropdownItem>{{ 'common.no-bulk-actions-available' | translate }}</button>\r\n        </ng-template>\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n<button\r\n    class=\"button-small\"\r\n    (click)=\"clearSelection()\"\r\n    [class.hidden]=\"!selectionManager.selection?.length\"\r\n>\r\n    <span>{{ 'common.clear-selection' | translate }}</span>\r\n    <clr-icon shape=\"times\"></clr-icon>\r\n</button>\r\n", styles: [":host{display:inline-flex;align-items:center}button.hidden{display:none}\n"] }]
        }], ctorParameters: () => [{ type: i1.BulkActionRegistryService }, { type: i0.Injector }, { type: i2.ActivatedRoute }, { type: i3.DataService }, { type: i0.ChangeDetectorRef }], propDecorators: { locationId: [{
                type: Input
            }], selectionManager: [{
                type: Input
            }], hostComponent: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,