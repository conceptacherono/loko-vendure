import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { titleSetter } from '../../../common/title-setter';
import * as i0 from "@angular/core";
import * as i1 from "../../../providers/breadcrumb/breadcrumb.service";
import * as i2 from "@angular/common";
import * as i3 from "@ngx-translate/core";
export class PageTitleComponent {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
        this.title = '';
        this.titleChange$ = new BehaviorSubject(undefined);
        this.setTitle = titleSetter();
    }
    ngOnInit() {
        this.title$ = combineLatest(this.titleChange$, this.breadcrumbService.breadcrumbs$).pipe(map(([title, breadcrumbs]) => {
            if (title) {
                return title;
            }
            else {
                return breadcrumbs[breadcrumbs.length - 1].label;
            }
        }), tap(title => this.setTitle(title)));
    }
    ngOnChanges(changes) {
        if (changes.title) {
            this.titleChange$.next(changes.title.currentValue);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PageTitleComponent, deps: [{ token: i1.BreadcrumbService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: PageTitleComponent, selector: "vdr-page-title", inputs: { title: "title" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"page-title\">\r\n    <h1>{{ (title$ | async) ?? '' | translate }}</h1>\r\n    <div class=\"title-actions\"><ng-content></ng-content></div>\r\n</div>\r\n", styles: [":host{display:block}.page-title{display:flex;gap:calc(var(--space-unit) * 2);margin-bottom:calc(var(--space-unit) * 2)}.page-title h1{margin-top:0;color:var(--color-weight-900);font-size:var(--cds-global-typography-headline-font-size);font-weight:600;line-height:48px}@media screen and (max-width: 768px){.page-title h1{font-size:var(--font-size-xl)}}@media screen and (max-width: 992px){.page-title h1{font-size:24px}}.title-actions{display:flex;align-items:center}\n"], dependencies: [{ kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: PageTitleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-page-title', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"page-title\">\r\n    <h1>{{ (title$ | async) ?? '' | translate }}</h1>\r\n    <div class=\"title-actions\"><ng-content></ng-content></div>\r\n</div>\r\n", styles: [":host{display:block}.page-title{display:flex;gap:calc(var(--space-unit) * 2);margin-bottom:calc(var(--space-unit) * 2)}.page-title h1{margin-top:0;color:var(--color-weight-900);font-size:var(--cds-global-typography-headline-font-size);font-weight:600;line-height:48px}@media screen and (max-width: 768px){.page-title h1{font-size:var(--font-size-xl)}}@media screen and (max-width: 992px){.page-title h1{font-size:24px}}.title-actions{display:flex;align-items:center}\n"] }]
        }], ctorParameters: () => [{ type: i1.BreadcrumbService }], propDecorators: { title: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS10aXRsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3BhZ2UtdGl0bGUvcGFnZS10aXRsZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3BhZ2UtdGl0bGUvcGFnZS10aXRsZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7O0FBUzNELE1BQU0sT0FBTyxrQkFBa0I7SUFNM0IsWUFBb0IsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFML0MsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNaLGlCQUFZLEdBQUcsSUFBSSxlQUFlLENBQXFCLFNBQVMsQ0FBQyxDQUFDO1FBRWpFLGFBQVEsR0FBRyxXQUFXLEVBQUUsQ0FBQztJQUV5QixDQUFDO0lBRTVELFFBQVE7UUFDSixJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQ3BGLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFFLEVBQUU7WUFDekIsSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFDUixPQUFPLEtBQUssQ0FBQztZQUNqQixDQUFDO2lCQUFNLENBQUM7Z0JBQ0osT0FBTyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDckQsQ0FBQztRQUNMLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDckMsQ0FBQztJQUNOLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN2RCxDQUFDO0lBQ0wsQ0FBQzs4R0F6QlEsa0JBQWtCO2tHQUFsQixrQkFBa0IsdUdDWi9CLHVLQUlBOzsyRkRRYSxrQkFBa0I7a0JBTjlCLFNBQVM7K0JBQ0ksZ0JBQWdCLG1CQUdULHVCQUF1QixDQUFDLE1BQU07c0ZBR3RDLEtBQUs7c0JBQWIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IHRpdGxlU2V0dGVyIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3RpdGxlLXNldHRlcic7XHJcbmltcG9ydCB7IEJyZWFkY3J1bWJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vcHJvdmlkZXJzL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd2ZHItcGFnZS10aXRsZScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vcGFnZS10aXRsZS5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFtgLi9wYWdlLXRpdGxlLmNvbXBvbmVudC5zY3NzYF0sXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIFBhZ2VUaXRsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIEBJbnB1dCgpIHRpdGxlID0gJyc7XHJcbiAgICBwcml2YXRlIHRpdGxlQ2hhbmdlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xyXG4gICAgcHJvdGVjdGVkIHRpdGxlJDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgcmVhZG9ubHkgc2V0VGl0bGUgPSB0aXRsZVNldHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJlYWRjcnVtYlNlcnZpY2U6IEJyZWFkY3J1bWJTZXJ2aWNlKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMudGl0bGUkID0gY29tYmluZUxhdGVzdCh0aGlzLnRpdGxlQ2hhbmdlJCwgdGhpcy5icmVhZGNydW1iU2VydmljZS5icmVhZGNydW1icyQpLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoW3RpdGxlLCBicmVhZGNydW1ic10pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aXRsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aXRsZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJyZWFkY3J1bWJzW2JyZWFkY3J1bWJzLmxlbmd0aCAtIDFdLmxhYmVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgdGFwKHRpdGxlID0+IHRoaXMuc2V0VGl0bGUodGl0bGUpKSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoY2hhbmdlcy50aXRsZSkge1xyXG4gICAgICAgICAgICB0aGlzLnRpdGxlQ2hhbmdlJC5uZXh0KGNoYW5nZXMudGl0bGUuY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiPGRpdiBjbGFzcz1cInBhZ2UtdGl0bGVcIj5cclxuICAgIDxoMT57eyAodGl0bGUkIHwgYXN5bmMpID8/ICcnIHwgdHJhbnNsYXRlIH19PC9oMT5cclxuICAgIDxkaXYgY2xhc3M9XCJ0aXRsZS1hY3Rpb25zXCI+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvZGl2PlxyXG48L2Rpdj5cclxuIl19