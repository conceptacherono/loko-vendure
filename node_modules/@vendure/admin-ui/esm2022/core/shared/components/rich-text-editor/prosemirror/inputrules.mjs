import { ellipsis, emDash, inputRules, smartQuotes, textblockTypeInputRule, wrappingInputRule, } from 'prosemirror-inputrules';
// : (NodeType) → InputRule
// Given a blockquote node type, returns an input rule that turns `"> "`
// at the start of a textblock into a blockquote.
export function blockQuoteRule(nodeType) {
    return wrappingInputRule(/^\s*>\s$/, nodeType);
}
// : (NodeType) → InputRule
// Given a list node type, returns an input rule that turns a number
// followed by a dot at the start of a textblock into an ordered list.
export function orderedListRule(nodeType) {
    return wrappingInputRule(/^(\d+)\.\s$/, nodeType, match => ({ order: +match[1] }), (match, node) => node.childCount + node.attrs.order === +match[1]);
}
// : (NodeType) → InputRule
// Given a list node type, returns an input rule that turns a bullet
// (dash, plush, or asterisk) at the start of a textblock into a
// bullet list.
export function bulletListRule(nodeType) {
    return wrappingInputRule(/^\s*([-+*])\s$/, nodeType);
}
// : (NodeType) → InputRule
// Given a code block node type, returns an input rule that turns a
// textblock starting with three backticks into a code block.
export function codeBlockRule(nodeType) {
    return textblockTypeInputRule(/^```$/, nodeType);
}
// : (NodeType, number) → InputRule
// Given a node type and a maximum level, creates an input rule that
// turns up to that number of `#` characters followed by a space at
// the start of a textblock into a heading whose level corresponds to
// the number of `#` signs.
export function headingRule(nodeType, maxLevel) {
    return textblockTypeInputRule(new RegExp('^(#{1,' + maxLevel + '})\\s$'), nodeType, match => ({
        level: match[1].length,
    }));
}
// : (Schema) → Plugin
// A set of input rules for creating the basic block quotes, lists,
// code blocks, and heading.
export function buildInputRules(schema) {
    const rules = smartQuotes.concat(ellipsis, emDash);
    let type;
    /* eslint-disable no-cond-assign */
    if ((type = schema.nodes.blockquote)) {
        rules.push(blockQuoteRule(type));
    }
    if ((type = schema.nodes.ordered_list)) {
        rules.push(orderedListRule(type));
    }
    if ((type = schema.nodes.bullet_list)) {
        rules.push(bulletListRule(type));
    }
    if ((type = schema.nodes.code_block)) {
        rules.push(codeBlockRule(type));
    }
    if ((type = schema.nodes.heading)) {
        rules.push(headingRule(type, 6));
    }
    return inputRules({ rules });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRydWxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL2NvbXBvbmVudHMvcmljaC10ZXh0LWVkaXRvci9wcm9zZW1pcnJvci9pbnB1dHJ1bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsc0JBQXNCLEVBQ3RCLGlCQUFpQixHQUNwQixNQUFNLHdCQUF3QixDQUFDO0FBSWhDLDJCQUEyQjtBQUMzQix3RUFBd0U7QUFDeEUsaURBQWlEO0FBQ2pELE1BQU0sVUFBVSxjQUFjLENBQUMsUUFBUTtJQUNuQyxPQUFPLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQsMkJBQTJCO0FBQzNCLG9FQUFvRTtBQUNwRSxzRUFBc0U7QUFDdEUsTUFBTSxVQUFVLGVBQWUsQ0FBQyxRQUFRO0lBQ3BDLE9BQU8saUJBQWlCLENBQ3BCLGFBQWEsRUFDYixRQUFRLEVBQ1IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDL0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUNwRSxDQUFDO0FBQ04sQ0FBQztBQUVELDJCQUEyQjtBQUMzQixvRUFBb0U7QUFDcEUsZ0VBQWdFO0FBQ2hFLGVBQWU7QUFDZixNQUFNLFVBQVUsY0FBYyxDQUFDLFFBQVE7SUFDbkMsT0FBTyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRUQsMkJBQTJCO0FBQzNCLG1FQUFtRTtBQUNuRSw2REFBNkQ7QUFDN0QsTUFBTSxVQUFVLGFBQWEsQ0FBQyxRQUFRO0lBQ2xDLE9BQU8sc0JBQXNCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFFRCxtQ0FBbUM7QUFDbkMsb0VBQW9FO0FBQ3BFLG1FQUFtRTtBQUNuRSxxRUFBcUU7QUFDckUsMkJBQTJCO0FBQzNCLE1BQU0sVUFBVSxXQUFXLENBQUMsUUFBUSxFQUFFLFFBQVE7SUFDMUMsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUYsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNO0tBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQ0FBQztBQUVELHNCQUFzQjtBQUN0QixtRUFBbUU7QUFDbkUsNEJBQTRCO0FBQzVCLE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBYztJQUMxQyxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRCxJQUFJLElBQWMsQ0FBQztJQUNuQixtQ0FBbUM7SUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDbkMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7UUFDckMsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7UUFDcEMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDbkMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDaEMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNELE9BQU8sVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUNqQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIGVsbGlwc2lzLFxyXG4gICAgZW1EYXNoLFxyXG4gICAgaW5wdXRSdWxlcyxcclxuICAgIHNtYXJ0UXVvdGVzLFxyXG4gICAgdGV4dGJsb2NrVHlwZUlucHV0UnVsZSxcclxuICAgIHdyYXBwaW5nSW5wdXRSdWxlLFxyXG59IGZyb20gJ3Byb3NlbWlycm9yLWlucHV0cnVsZXMnO1xyXG5pbXBvcnQgeyBOb2RlVHlwZSwgU2NoZW1hIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xyXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XHJcblxyXG4vLyA6IChOb2RlVHlwZSkg4oaSIElucHV0UnVsZVxyXG4vLyBHaXZlbiBhIGJsb2NrcXVvdGUgbm9kZSB0eXBlLCByZXR1cm5zIGFuIGlucHV0IHJ1bGUgdGhhdCB0dXJucyBgXCI+IFwiYFxyXG4vLyBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2sgaW50byBhIGJsb2NrcXVvdGUuXHJcbmV4cG9ydCBmdW5jdGlvbiBibG9ja1F1b3RlUnVsZShub2RlVHlwZSkge1xyXG4gICAgcmV0dXJuIHdyYXBwaW5nSW5wdXRSdWxlKC9eXFxzKj5cXHMkLywgbm9kZVR5cGUpO1xyXG59XHJcblxyXG4vLyA6IChOb2RlVHlwZSkg4oaSIElucHV0UnVsZVxyXG4vLyBHaXZlbiBhIGxpc3Qgbm9kZSB0eXBlLCByZXR1cm5zIGFuIGlucHV0IHJ1bGUgdGhhdCB0dXJucyBhIG51bWJlclxyXG4vLyBmb2xsb3dlZCBieSBhIGRvdCBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2sgaW50byBhbiBvcmRlcmVkIGxpc3QuXHJcbmV4cG9ydCBmdW5jdGlvbiBvcmRlcmVkTGlzdFJ1bGUobm9kZVR5cGUpIHtcclxuICAgIHJldHVybiB3cmFwcGluZ0lucHV0UnVsZShcclxuICAgICAgICAvXihcXGQrKVxcLlxccyQvLFxyXG4gICAgICAgIG5vZGVUeXBlLFxyXG4gICAgICAgIG1hdGNoID0+ICh7IG9yZGVyOiArbWF0Y2hbMV0gfSksXHJcbiAgICAgICAgKG1hdGNoLCBub2RlKSA9PiBub2RlLmNoaWxkQ291bnQgKyBub2RlLmF0dHJzLm9yZGVyID09PSArbWF0Y2hbMV0sXHJcbiAgICApO1xyXG59XHJcblxyXG4vLyA6IChOb2RlVHlwZSkg4oaSIElucHV0UnVsZVxyXG4vLyBHaXZlbiBhIGxpc3Qgbm9kZSB0eXBlLCByZXR1cm5zIGFuIGlucHV0IHJ1bGUgdGhhdCB0dXJucyBhIGJ1bGxldFxyXG4vLyAoZGFzaCwgcGx1c2gsIG9yIGFzdGVyaXNrKSBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2sgaW50byBhXHJcbi8vIGJ1bGxldCBsaXN0LlxyXG5leHBvcnQgZnVuY3Rpb24gYnVsbGV0TGlzdFJ1bGUobm9kZVR5cGUpIHtcclxuICAgIHJldHVybiB3cmFwcGluZ0lucHV0UnVsZSgvXlxccyooWy0rKl0pXFxzJC8sIG5vZGVUeXBlKTtcclxufVxyXG5cclxuLy8gOiAoTm9kZVR5cGUpIOKGkiBJbnB1dFJ1bGVcclxuLy8gR2l2ZW4gYSBjb2RlIGJsb2NrIG5vZGUgdHlwZSwgcmV0dXJucyBhbiBpbnB1dCBydWxlIHRoYXQgdHVybnMgYVxyXG4vLyB0ZXh0YmxvY2sgc3RhcnRpbmcgd2l0aCB0aHJlZSBiYWNrdGlja3MgaW50byBhIGNvZGUgYmxvY2suXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2RlQmxvY2tSdWxlKG5vZGVUeXBlKSB7XHJcbiAgICByZXR1cm4gdGV4dGJsb2NrVHlwZUlucHV0UnVsZSgvXmBgYCQvLCBub2RlVHlwZSk7XHJcbn1cclxuXHJcbi8vIDogKE5vZGVUeXBlLCBudW1iZXIpIOKGkiBJbnB1dFJ1bGVcclxuLy8gR2l2ZW4gYSBub2RlIHR5cGUgYW5kIGEgbWF4aW11bSBsZXZlbCwgY3JlYXRlcyBhbiBpbnB1dCBydWxlIHRoYXRcclxuLy8gdHVybnMgdXAgdG8gdGhhdCBudW1iZXIgb2YgYCNgIGNoYXJhY3RlcnMgZm9sbG93ZWQgYnkgYSBzcGFjZSBhdFxyXG4vLyB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2sgaW50byBhIGhlYWRpbmcgd2hvc2UgbGV2ZWwgY29ycmVzcG9uZHMgdG9cclxuLy8gdGhlIG51bWJlciBvZiBgI2Agc2lnbnMuXHJcbmV4cG9ydCBmdW5jdGlvbiBoZWFkaW5nUnVsZShub2RlVHlwZSwgbWF4TGV2ZWwpIHtcclxuICAgIHJldHVybiB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlKG5ldyBSZWdFeHAoJ14oI3sxLCcgKyBtYXhMZXZlbCArICd9KVxcXFxzJCcpLCBub2RlVHlwZSwgbWF0Y2ggPT4gKHtcclxuICAgICAgICBsZXZlbDogbWF0Y2hbMV0ubGVuZ3RoLFxyXG4gICAgfSkpO1xyXG59XHJcblxyXG4vLyA6IChTY2hlbWEpIOKGkiBQbHVnaW5cclxuLy8gQSBzZXQgb2YgaW5wdXQgcnVsZXMgZm9yIGNyZWF0aW5nIHRoZSBiYXNpYyBibG9jayBxdW90ZXMsIGxpc3RzLFxyXG4vLyBjb2RlIGJsb2NrcywgYW5kIGhlYWRpbmcuXHJcbmV4cG9ydCBmdW5jdGlvbiBidWlsZElucHV0UnVsZXMoc2NoZW1hOiBTY2hlbWEpOiBQbHVnaW4ge1xyXG4gICAgY29uc3QgcnVsZXMgPSBzbWFydFF1b3Rlcy5jb25jYXQoZWxsaXBzaXMsIGVtRGFzaCk7XHJcbiAgICBsZXQgdHlwZTogTm9kZVR5cGU7XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xyXG4gICAgaWYgKCh0eXBlID0gc2NoZW1hLm5vZGVzLmJsb2NrcXVvdGUpKSB7XHJcbiAgICAgICAgcnVsZXMucHVzaChibG9ja1F1b3RlUnVsZSh0eXBlKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHR5cGUgPSBzY2hlbWEubm9kZXMub3JkZXJlZF9saXN0KSkge1xyXG4gICAgICAgIHJ1bGVzLnB1c2gob3JkZXJlZExpc3RSdWxlKHR5cGUpKTtcclxuICAgIH1cclxuICAgIGlmICgodHlwZSA9IHNjaGVtYS5ub2Rlcy5idWxsZXRfbGlzdCkpIHtcclxuICAgICAgICBydWxlcy5wdXNoKGJ1bGxldExpc3RSdWxlKHR5cGUpKTtcclxuICAgIH1cclxuICAgIGlmICgodHlwZSA9IHNjaGVtYS5ub2Rlcy5jb2RlX2Jsb2NrKSkge1xyXG4gICAgICAgIHJ1bGVzLnB1c2goY29kZUJsb2NrUnVsZSh0eXBlKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHR5cGUgPSBzY2hlbWEubm9kZXMuaGVhZGluZykpIHtcclxuICAgICAgICBydWxlcy5wdXNoKGhlYWRpbmdSdWxlKHR5cGUsIDYpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbnB1dFJ1bGVzKHsgcnVsZXMgfSk7XHJcbn1cclxuIl19