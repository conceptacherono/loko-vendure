/**
 * Retrieve the start and end position of a mark
 * "Borrowed" from [tiptap](https://github.com/scrumpy/tiptap)
 */
export const getMarkRange = (pmPosition = null, type = null) => {
    if (!pmPosition || !type) {
        return false;
    }
    const start = pmPosition.parent.childAfter(pmPosition.parentOffset);
    if (!start.node) {
        return false;
    }
    const mark = start.node.marks.find(({ type: markType }) => markType === type);
    if (!mark) {
        return false;
    }
    let startIndex = pmPosition.index();
    let startPos = pmPosition.start() + start.offset;
    while (startIndex > 0 && mark.isInSet(pmPosition.parent.child(startIndex - 1).marks)) {
        startIndex -= 1;
        startPos -= pmPosition.parent.child(startIndex).nodeSize;
    }
    const endPos = startPos + start.node.nodeSize;
    return { from: startPos, to: endPos };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3JpY2gtdGV4dC1lZGl0b3IvcHJvc2VtaXJyb3IvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQ3hCLGFBQWlDLElBQUksRUFDckMsT0FBb0MsSUFBSSxFQUNKLEVBQUU7SUFDdEMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFcEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQzlFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNSLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDcEMsSUFBSSxRQUFRLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDakQsT0FBTyxVQUFVLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbkYsVUFBVSxJQUFJLENBQUMsQ0FBQztRQUNoQixRQUFRLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQzdELENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFFOUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQzFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmtUeXBlLCBSZXNvbHZlZFBvcyB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZSB0aGUgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbiBvZiBhIG1hcmtcclxuICogXCJCb3Jyb3dlZFwiIGZyb20gW3RpcHRhcF0oaHR0cHM6Ly9naXRodWIuY29tL3NjcnVtcHkvdGlwdGFwKVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldE1hcmtSYW5nZSA9IChcclxuICAgIHBtUG9zaXRpb246IFJlc29sdmVkUG9zIHwgbnVsbCA9IG51bGwsXHJcbiAgICB0eXBlOiBNYXJrVHlwZSB8IG51bGwgfCB1bmRlZmluZWQgPSBudWxsLFxyXG4pOiB7IGZyb206IG51bWJlcjsgdG86IG51bWJlciB9IHwgZmFsc2UgPT4ge1xyXG4gICAgaWYgKCFwbVBvc2l0aW9uIHx8ICF0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN0YXJ0ID0gcG1Qb3NpdGlvbi5wYXJlbnQuY2hpbGRBZnRlcihwbVBvc2l0aW9uLnBhcmVudE9mZnNldCk7XHJcblxyXG4gICAgaWYgKCFzdGFydC5ub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1hcmsgPSBzdGFydC5ub2RlLm1hcmtzLmZpbmQoKHsgdHlwZTogbWFya1R5cGUgfSkgPT4gbWFya1R5cGUgPT09IHR5cGUpO1xyXG4gICAgaWYgKCFtYXJrKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzdGFydEluZGV4ID0gcG1Qb3NpdGlvbi5pbmRleCgpO1xyXG4gICAgbGV0IHN0YXJ0UG9zID0gcG1Qb3NpdGlvbi5zdGFydCgpICsgc3RhcnQub2Zmc2V0O1xyXG4gICAgd2hpbGUgKHN0YXJ0SW5kZXggPiAwICYmIG1hcmsuaXNJblNldChwbVBvc2l0aW9uLnBhcmVudC5jaGlsZChzdGFydEluZGV4IC0gMSkubWFya3MpKSB7XHJcbiAgICAgICAgc3RhcnRJbmRleCAtPSAxO1xyXG4gICAgICAgIHN0YXJ0UG9zIC09IHBtUG9zaXRpb24ucGFyZW50LmNoaWxkKHN0YXJ0SW5kZXgpLm5vZGVTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVuZFBvcyA9IHN0YXJ0UG9zICsgc3RhcnQubm9kZS5ub2RlU2l6ZTtcclxuXHJcbiAgICByZXR1cm4geyBmcm9tOiBzdGFydFBvcywgdG86IGVuZFBvcyB9O1xyXG59O1xyXG4iXX0=