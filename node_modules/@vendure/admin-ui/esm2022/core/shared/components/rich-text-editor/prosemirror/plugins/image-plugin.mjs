import { MenuItem } from 'prosemirror-menu';
import { NodeSelection, Plugin } from 'prosemirror-state';
import { ExternalImageDialogComponent, } from '../../external-image-dialog/external-image-dialog.component';
import { canInsert, renderClarityIcon } from '../menu/menu-common';
export const imageNode = {
    inline: true,
    attrs: {
        src: {},
        alt: { default: null },
        title: { default: null },
        width: { default: null },
        height: { default: null },
        dataExternal: { default: true },
    },
    group: 'inline',
    draggable: true,
    parseDOM: [
        {
            tag: 'img[src]',
            getAttrs(dom) {
                return {
                    src: dom.getAttribute('src'),
                    title: dom.getAttribute('title'),
                    alt: dom.getAttribute('alt'),
                    width: dom.getAttribute('width'),
                    height: dom.getAttribute('height'),
                    dataExternal: dom.hasAttribute('data-external'),
                };
            },
        },
    ],
    toDOM(node) {
        const { src, alt, title, width, height, dataExternal } = node.attrs;
        return ['img', { src, alt, title, width, height, 'data-external': dataExternal }];
    },
};
export function insertImageItem(nodeType, modalService) {
    return new MenuItem({
        title: 'Insert image',
        label: 'Image',
        render: renderClarityIcon({ shape: 'image', label: 'Image' }),
        class: '',
        css: '',
        enable(state) {
            return canInsert(state, nodeType);
        },
        run(state, _, view) {
            let attrs;
            if (state.selection instanceof NodeSelection && state.selection.node.type === nodeType) {
                attrs = state.selection.node.attrs;
            }
            modalService
                .fromComponent(ExternalImageDialogComponent, {
                closable: true,
                locals: {
                    existing: attrs,
                },
            })
                .subscribe(result => {
                if (result) {
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    view.dispatch(view.state.tr.replaceSelectionWith(nodeType.createAndFill(result)));
                }
                view.focus();
            });
        },
    });
}
export const imageContextMenuPlugin = (contextMenuService, modalService) => new Plugin({
    view: () => ({
        update: view => {
            if (!view.hasFocus()) {
                return;
            }
            const { doc, selection } = view.state;
            let imageNode;
            let imageNodePos = 0;
            doc.nodesBetween(selection.from, selection.to, (n, pos, parent) => {
                if (n.type.name === 'image') {
                    imageNode = n;
                    imageNodePos = pos;
                    return false;
                }
            });
            if (imageNode) {
                const node = view.nodeDOM(imageNodePos);
                if (node instanceof HTMLImageElement) {
                    contextMenuService.setContextMenu({
                        ref: selection,
                        title: 'Image',
                        iconShape: 'image',
                        element: node,
                        coords: view.coordsAtPos(imageNodePos),
                        items: [
                            {
                                enabled: true,
                                iconShape: 'image',
                                label: 'Image properties',
                                onClick: () => {
                                    contextMenuService.clearContextMenu();
                                    modalService
                                        .fromComponent(ExternalImageDialogComponent, {
                                        closable: true,
                                        locals: {
                                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                            existing: imageNode.attrs,
                                        },
                                    })
                                        .subscribe(result => {
                                        if (result) {
                                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                            view.dispatch(view.state.tr.replaceSelectionWith(
                                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                            imageNode.type.createAndFill(result)));
                                        }
                                        view.focus();
                                    });
                                },
                            },
                        ],
                    });
                }
            }
            else {
                contextMenuService.clearContextMenu();
            }
        },
    }),
});
//# sourceMappingURL=data:application/json;base64,