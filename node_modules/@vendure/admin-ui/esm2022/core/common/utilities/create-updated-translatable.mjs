import { findTranslation } from './find-translation';
import { getDefaultValue } from './custom-field-default-value';
/**
 * When updating an entity which has translations, the value from the form will pertain to the current
 * languageCode. This function ensures that the "translations" array is correctly set based on the
 * existing languages and the updated values in the specified language.
 */
export function createUpdatedTranslatable(options) {
    const { translatable, updatedFields, languageCode, customFieldConfig, defaultTranslation } = options;
    const currentTranslation = findTranslation(translatable, languageCode) || defaultTranslation || {};
    const index = translatable.translations?.indexOf(currentTranslation);
    const newTranslation = patchObject(currentTranslation, updatedFields);
    const newCustomFields = {};
    const newTranslatedCustomFields = {};
    if (customFieldConfig && updatedFields.hasOwnProperty('customFields')) {
        for (const field of customFieldConfig) {
            const value = updatedFields.customFields[field.name];
            if (field.type === 'localeString' || field.type === 'localeText') {
                newTranslatedCustomFields[field.name] = value;
            }
            else {
                newCustomFields[field.name] =
                    value === ''
                        ? getDefaultValue(field.type, field.nullable ?? true)
                        : value;
            }
        }
        newTranslation.customFields = newTranslatedCustomFields;
    }
    const newTranslatable = {
        ...patchObject(translatable, updatedFields),
        ...{ translations: translatable.translations?.slice() ?? [] },
    };
    if (customFieldConfig) {
        newTranslatable.customFields = newCustomFields;
    }
    if (index !== -1) {
        newTranslatable.translations.splice(index, 1, newTranslation);
    }
    else {
        newTranslatable.translations.push(newTranslation);
    }
    return newTranslatable;
}
/**
 * Returns a shallow clone of `obj` with any properties contained in `patch` overwriting
 * those of `obj`.
 */
function patchObject(obj, patch) {
    const clone = Object.assign({}, obj);
    Object.keys(clone).forEach(key => {
        if (patch.hasOwnProperty(key)) {
            clone[key] = patch[key];
        }
    });
    return clone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXVwZGF0ZWQtdHJhbnNsYXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9jb21tb24vdXRpbGl0aWVzL2NyZWF0ZS11cGRhdGVkLXRyYW5zbGF0YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBYy9EOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUseUJBQXlCLENBQ3JDLE9BQXFDO0lBRXJDLE1BQU0sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUNyRyxNQUFNLGtCQUFrQixHQUNwQixlQUFlLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxJQUFJLGtCQUFrQixJQUFLLEVBQVUsQ0FBQztJQUNyRixNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN0RSxNQUFNLGVBQWUsR0FBdUIsRUFBRSxDQUFDO0lBQy9DLE1BQU0seUJBQXlCLEdBQXVCLEVBQUUsQ0FBQztJQUN6RCxJQUFJLGlCQUFpQixJQUFJLGFBQWEsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztRQUNwRSxLQUFLLE1BQU0sS0FBSyxJQUFJLGlCQUFpQixFQUFFLENBQUM7WUFDcEMsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckQsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGNBQWMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFlBQVksRUFBRSxDQUFDO2dCQUMvRCx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ2xELENBQUM7aUJBQU0sQ0FBQztnQkFDSixlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDdkIsS0FBSyxLQUFLLEVBQUU7d0JBQ1IsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBdUIsRUFBRSxLQUFLLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQzt3QkFDeEUsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNwQixDQUFDO1FBQ0wsQ0FBQztRQUNELGNBQWMsQ0FBQyxZQUFZLEdBQUcseUJBQXlCLENBQUM7SUFDNUQsQ0FBQztJQUNELE1BQU0sZUFBZSxHQUFHO1FBQ3BCLEdBQUksV0FBVyxDQUFDLFlBQVksRUFBRSxhQUFhLENBQVM7UUFDcEQsR0FBRyxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtLQUNoRSxDQUFDO0lBQ0YsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1FBQ3BCLGVBQWUsQ0FBQyxZQUFZLEdBQUcsZUFBZSxDQUFDO0lBQ25ELENBQUM7SUFDRCxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2YsZUFBZSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNsRSxDQUFDO1NBQU0sQ0FBQztRQUNKLGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFDRCxPQUFPLGVBQWUsQ0FBQztBQUMzQixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxXQUFXLENBQW1DLEdBQU0sRUFBRSxLQUE2QjtJQUN4RixNQUFNLEtBQUssR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM3QixJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUM1QixLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdXN0b21GaWVsZHNPYmplY3QsIEN1c3RvbUZpZWxkVHlwZSB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2hhcmVkLXR5cGVzJztcclxuXHJcbmltcG9ydCB7IEN1c3RvbUZpZWxkQ29uZmlnLCBMYW5ndWFnZUNvZGUgfSBmcm9tICcuLi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5cclxuaW1wb3J0IHsgZmluZFRyYW5zbGF0aW9uIH0gZnJvbSAnLi9maW5kLXRyYW5zbGF0aW9uJztcclxuaW1wb3J0IHsgZ2V0RGVmYXVsdFZhbHVlIH0gZnJvbSAnLi9jdXN0b20tZmllbGQtZGVmYXVsdC12YWx1ZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zbGF0YWJsZVVwZGF0ZU9wdGlvbnM8VCBleHRlbmRzIHsgdHJhbnNsYXRpb25zOiBhbnlbXSB9ICYgTWF5SGF2ZUN1c3RvbUZpZWxkcz4ge1xyXG4gICAgdHJhbnNsYXRhYmxlOiBUO1xyXG4gICAgdXBkYXRlZEZpZWxkczogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxuICAgIGxhbmd1YWdlQ29kZTogTGFuZ3VhZ2VDb2RlO1xyXG4gICAgY3VzdG9tRmllbGRDb25maWc/OiBDdXN0b21GaWVsZENvbmZpZ1tdO1xyXG4gICAgZGVmYXVsdFRyYW5zbGF0aW9uPzogUGFydGlhbDxUWyd0cmFuc2xhdGlvbnMnXVtudW1iZXJdPjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTWF5SGF2ZUN1c3RvbUZpZWxkcyA9IHtcclxuICAgIGN1c3RvbUZpZWxkcz86IHsgW2tleTogc3RyaW5nXTogYW55IH07XHJcbn07XHJcblxyXG4vKipcclxuICogV2hlbiB1cGRhdGluZyBhbiBlbnRpdHkgd2hpY2ggaGFzIHRyYW5zbGF0aW9ucywgdGhlIHZhbHVlIGZyb20gdGhlIGZvcm0gd2lsbCBwZXJ0YWluIHRvIHRoZSBjdXJyZW50XHJcbiAqIGxhbmd1YWdlQ29kZS4gVGhpcyBmdW5jdGlvbiBlbnN1cmVzIHRoYXQgdGhlIFwidHJhbnNsYXRpb25zXCIgYXJyYXkgaXMgY29ycmVjdGx5IHNldCBiYXNlZCBvbiB0aGVcclxuICogZXhpc3RpbmcgbGFuZ3VhZ2VzIGFuZCB0aGUgdXBkYXRlZCB2YWx1ZXMgaW4gdGhlIHNwZWNpZmllZCBsYW5ndWFnZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVcGRhdGVkVHJhbnNsYXRhYmxlPFQgZXh0ZW5kcyB7IHRyYW5zbGF0aW9uczogYW55W10gfSAmIE1heUhhdmVDdXN0b21GaWVsZHM+KFxyXG4gICAgb3B0aW9uczogVHJhbnNsYXRhYmxlVXBkYXRlT3B0aW9uczxUPixcclxuKTogVCB7XHJcbiAgICBjb25zdCB7IHRyYW5zbGF0YWJsZSwgdXBkYXRlZEZpZWxkcywgbGFuZ3VhZ2VDb2RlLCBjdXN0b21GaWVsZENvbmZpZywgZGVmYXVsdFRyYW5zbGF0aW9uIH0gPSBvcHRpb25zO1xyXG4gICAgY29uc3QgY3VycmVudFRyYW5zbGF0aW9uID1cclxuICAgICAgICBmaW5kVHJhbnNsYXRpb24odHJhbnNsYXRhYmxlLCBsYW5ndWFnZUNvZGUpIHx8IGRlZmF1bHRUcmFuc2xhdGlvbiB8fCAoe30gYXMgYW55KTtcclxuICAgIGNvbnN0IGluZGV4ID0gdHJhbnNsYXRhYmxlLnRyYW5zbGF0aW9ucz8uaW5kZXhPZihjdXJyZW50VHJhbnNsYXRpb24pO1xyXG4gICAgY29uc3QgbmV3VHJhbnNsYXRpb24gPSBwYXRjaE9iamVjdChjdXJyZW50VHJhbnNsYXRpb24sIHVwZGF0ZWRGaWVsZHMpO1xyXG4gICAgY29uc3QgbmV3Q3VzdG9tRmllbGRzOiBDdXN0b21GaWVsZHNPYmplY3QgPSB7fTtcclxuICAgIGNvbnN0IG5ld1RyYW5zbGF0ZWRDdXN0b21GaWVsZHM6IEN1c3RvbUZpZWxkc09iamVjdCA9IHt9O1xyXG4gICAgaWYgKGN1c3RvbUZpZWxkQ29uZmlnICYmIHVwZGF0ZWRGaWVsZHMuaGFzT3duUHJvcGVydHkoJ2N1c3RvbUZpZWxkcycpKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBjdXN0b21GaWVsZENvbmZpZykge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHVwZGF0ZWRGaWVsZHMuY3VzdG9tRmllbGRzW2ZpZWxkLm5hbWVdO1xyXG4gICAgICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ2xvY2FsZVN0cmluZycgfHwgZmllbGQudHlwZSA9PT0gJ2xvY2FsZVRleHQnKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdUcmFuc2xhdGVkQ3VzdG9tRmllbGRzW2ZpZWxkLm5hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdDdXN0b21GaWVsZHNbZmllbGQubmFtZV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID09PSAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGdldERlZmF1bHRWYWx1ZShmaWVsZC50eXBlIGFzIEN1c3RvbUZpZWxkVHlwZSwgZmllbGQubnVsbGFibGUgPz8gdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBuZXdUcmFuc2xhdGlvbi5jdXN0b21GaWVsZHMgPSBuZXdUcmFuc2xhdGVkQ3VzdG9tRmllbGRzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV3VHJhbnNsYXRhYmxlID0ge1xyXG4gICAgICAgIC4uLihwYXRjaE9iamVjdCh0cmFuc2xhdGFibGUsIHVwZGF0ZWRGaWVsZHMpIGFzIGFueSksXHJcbiAgICAgICAgLi4ueyB0cmFuc2xhdGlvbnM6IHRyYW5zbGF0YWJsZS50cmFuc2xhdGlvbnM/LnNsaWNlKCkgPz8gW10gfSxcclxuICAgIH07XHJcbiAgICBpZiAoY3VzdG9tRmllbGRDb25maWcpIHtcclxuICAgICAgICBuZXdUcmFuc2xhdGFibGUuY3VzdG9tRmllbGRzID0gbmV3Q3VzdG9tRmllbGRzO1xyXG4gICAgfVxyXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgIG5ld1RyYW5zbGF0YWJsZS50cmFuc2xhdGlvbnMuc3BsaWNlKGluZGV4LCAxLCBuZXdUcmFuc2xhdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5ld1RyYW5zbGF0YWJsZS50cmFuc2xhdGlvbnMucHVzaChuZXdUcmFuc2xhdGlvbik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3VHJhbnNsYXRhYmxlO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHNoYWxsb3cgY2xvbmUgb2YgYG9iamAgd2l0aCBhbnkgcHJvcGVydGllcyBjb250YWluZWQgaW4gYHBhdGNoYCBvdmVyd3JpdGluZ1xyXG4gKiB0aG9zZSBvZiBgb2JqYC5cclxuICovXHJcbmZ1bmN0aW9uIHBhdGNoT2JqZWN0PFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IGFueSB9PihvYmo6IFQsIHBhdGNoOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogVCB7XHJcbiAgICBjb25zdCBjbG9uZTogYW55ID0gT2JqZWN0LmFzc2lnbih7fSwgb2JqKTtcclxuICAgIE9iamVjdC5rZXlzKGNsb25lKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgaWYgKHBhdGNoLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgY2xvbmVba2V5XSA9IHBhdGNoW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY2xvbmU7XHJcbn1cclxuIl19