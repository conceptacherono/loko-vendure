import { map } from 'rxjs/operators';
/**
 * Creates an observable of breadcrumb links for use in the route config of a detail route.
 */
export function detailBreadcrumb(options) {
    return options.entity.pipe(map(entity => {
        let label = '';
        if (options.id === 'create') {
            label = 'common.create';
        }
        else {
            label = `${options.getName(entity)}`;
        }
        return [
            {
                label: options.breadcrumbKey,
                link: ['../', options.route],
            },
            {
                label,
                link: [options.route, options.id],
            },
        ];
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlsLWJyZWFkY3J1bWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2NvbW1vbi9kZXRhaWwtYnJlYWRjcnVtYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsR0FBRyxFQUFRLE1BQU0sZ0JBQWdCLENBQUM7QUFJM0M7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUksT0FNbkM7SUFDRyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDVCxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLE9BQU8sQ0FBQyxFQUFFLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDMUIsS0FBSyxHQUFHLGVBQWUsQ0FBQztRQUM1QixDQUFDO2FBQU0sQ0FBQztZQUNKLEtBQUssR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUN6QyxDQUFDO1FBQ0QsT0FBTztZQUNIO2dCQUNJLEtBQUssRUFBRSxPQUFPLENBQUMsYUFBYTtnQkFDNUIsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUM7YUFDL0I7WUFDRDtnQkFDSSxLQUFLO2dCQUNMLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQzthQUNwQztTQUNKLENBQUM7SUFDTixDQUFDLENBQUMsQ0FDTCxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcmtlciBhcyBfIH0gZnJvbSAnQGJpZXNiamVyZy9uZ3gtdHJhbnNsYXRlLWV4dHJhY3QtbWFya2VyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBCcmVhZGNydW1iVmFsdWUgfSBmcm9tICcuLi9wcm92aWRlcnMvYnJlYWRjcnVtYi9icmVhZGNydW1iLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JzZXJ2YWJsZSBvZiBicmVhZGNydW1iIGxpbmtzIGZvciB1c2UgaW4gdGhlIHJvdXRlIGNvbmZpZyBvZiBhIGRldGFpbCByb3V0ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZXRhaWxCcmVhZGNydW1iPFQ+KG9wdGlvbnM6IHtcclxuICAgIGVudGl0eTogT2JzZXJ2YWJsZTxUPjtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBicmVhZGNydW1iS2V5OiBzdHJpbmc7XHJcbiAgICBnZXROYW1lOiAoZW50aXR5OiBUKSA9PiBzdHJpbmc7XHJcbiAgICByb3V0ZTogc3RyaW5nO1xyXG59KTogT2JzZXJ2YWJsZTxCcmVhZGNydW1iVmFsdWU+IHtcclxuICAgIHJldHVybiBvcHRpb25zLmVudGl0eS5waXBlKFxyXG4gICAgICAgIG1hcChlbnRpdHkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbGFiZWwgPSAnJztcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWQgPT09ICdjcmVhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbCA9ICdjb21tb24uY3JlYXRlJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsID0gYCR7b3B0aW9ucy5nZXROYW1lKGVudGl0eSl9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb25zLmJyZWFkY3J1bWJLZXksXHJcbiAgICAgICAgICAgICAgICAgICAgbGluazogWycuLi8nLCBvcHRpb25zLnJvdXRlXSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgbGluazogW29wdGlvbnMucm91dGUsIG9wdGlvbnMuaWRdLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9KSxcclxuICAgICk7XHJcbn1cclxuIl19