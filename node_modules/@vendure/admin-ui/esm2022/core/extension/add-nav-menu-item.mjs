import { APP_INITIALIZER } from '@angular/core';
import { NavBuilderService } from '../providers/nav-builder/nav-builder.service';
/**
 * @description
 * Add a section to the main nav menu. Providing the `before` argument will
 * move the section before any existing section with the specified id. If
 * omitted (or if the id is not found) the section will be appended to the
 * existing set of sections.
 * This should be used in the NgModule `providers` array of your ui extension module.
 *
 * @example
 * ```ts title="providers.ts"
 * import { addNavMenuSection } from '\@vendure/admin-ui/core';
 *
 * export default [
 *     addNavMenuSection({
 *         id: 'reports',
 *         label: 'Reports',
 *         items: [{
 *             // ...
 *         }],
 *     },
 *     'settings'),
 * ];
 * ```
 * @docsCategory nav-menu
 */
export function addNavMenuSection(config, before) {
    return {
        provide: APP_INITIALIZER,
        multi: true,
        useFactory: (navBuilderService) => () => {
            navBuilderService.addNavMenuSection(config, before);
        },
        deps: [NavBuilderService],
    };
}
/**
 * @description
 * Add a menu item to an existing section specified by `sectionId`. The id of the section
 * can be found by inspecting the DOM and finding the `data-section-id` attribute.
 * Providing the `before` argument will move the item before any existing item with the specified id.
 * If omitted (or if the name is not found) the item will be appended to the
 * end of the section.
 *
 * This should be used in the NgModule `providers` array of your ui extension module.
 *
 * @example
 * ```ts title="providers.ts"
 * import { addNavMenuItem } from '\@vendure/admin-ui/core';
 *
 * export default [
 *     addNavMenuItem({
 *         id: 'reviews',
 *         label: 'Product Reviews',
 *         routerLink: ['/extensions/reviews'],
 *         icon: 'star',
 *     },
 *     'marketing'),
 * ];
 * ```
 *
 * @docsCategory nav-menu
 */
export function addNavMenuItem(config, sectionId, before) {
    return {
        provide: APP_INITIALIZER,
        multi: true,
        useFactory: (navBuilderService) => () => {
            navBuilderService.addNavMenuItem(config, sectionId, before);
        },
        deps: [NavBuilderService],
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLW5hdi1tZW51LWl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2V4dGVuc2lvbi9hZGQtbmF2LW1lbnUtaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBRTFELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBRWpGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsTUFBc0IsRUFBRSxNQUFlO0lBQ3JFLE9BQU87UUFDSCxPQUFPLEVBQUUsZUFBZTtRQUN4QixLQUFLLEVBQUUsSUFBSTtRQUNYLFVBQVUsRUFBRSxDQUFDLGlCQUFvQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUU7WUFDdkQsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3hELENBQUM7UUFDRCxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztLQUM1QixDQUFDO0FBQ04sQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBCRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQUMsTUFBbUIsRUFBRSxTQUFpQixFQUFFLE1BQWU7SUFDbEYsT0FBTztRQUNILE9BQU8sRUFBRSxlQUFlO1FBQ3hCLEtBQUssRUFBRSxJQUFJO1FBQ1gsVUFBVSxFQUFFLENBQUMsaUJBQW9DLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRTtZQUN2RCxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNoRSxDQUFDO1FBQ0QsSUFBSSxFQUFFLENBQUMsaUJBQWlCLENBQUM7S0FDNUIsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUFBfSU5JVElBTElaRVIsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5hdk1lbnVJdGVtLCBOYXZNZW51U2VjdGlvbiB9IGZyb20gJy4uL3Byb3ZpZGVycy9uYXYtYnVpbGRlci9uYXYtYnVpbGRlci10eXBlcyc7XHJcbmltcG9ydCB7IE5hdkJ1aWxkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vcHJvdmlkZXJzL25hdi1idWlsZGVyL25hdi1idWlsZGVyLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBZGQgYSBzZWN0aW9uIHRvIHRoZSBtYWluIG5hdiBtZW51LiBQcm92aWRpbmcgdGhlIGBiZWZvcmVgIGFyZ3VtZW50IHdpbGxcclxuICogbW92ZSB0aGUgc2VjdGlvbiBiZWZvcmUgYW55IGV4aXN0aW5nIHNlY3Rpb24gd2l0aCB0aGUgc3BlY2lmaWVkIGlkLiBJZlxyXG4gKiBvbWl0dGVkIChvciBpZiB0aGUgaWQgaXMgbm90IGZvdW5kKSB0aGUgc2VjdGlvbiB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZVxyXG4gKiBleGlzdGluZyBzZXQgb2Ygc2VjdGlvbnMuXHJcbiAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgaW4gdGhlIE5nTW9kdWxlIGBwcm92aWRlcnNgIGFycmF5IG9mIHlvdXIgdWkgZXh0ZW5zaW9uIG1vZHVsZS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgdHMgdGl0bGU9XCJwcm92aWRlcnMudHNcIlxyXG4gKiBpbXBvcnQgeyBhZGROYXZNZW51U2VjdGlvbiB9IGZyb20gJ1xcQHZlbmR1cmUvYWRtaW4tdWkvY29yZSc7XHJcbiAqXHJcbiAqIGV4cG9ydCBkZWZhdWx0IFtcclxuICogICAgIGFkZE5hdk1lbnVTZWN0aW9uKHtcclxuICogICAgICAgICBpZDogJ3JlcG9ydHMnLFxyXG4gKiAgICAgICAgIGxhYmVsOiAnUmVwb3J0cycsXHJcbiAqICAgICAgICAgaXRlbXM6IFt7XHJcbiAqICAgICAgICAgICAgIC8vIC4uLlxyXG4gKiAgICAgICAgIH1dLFxyXG4gKiAgICAgfSxcclxuICogICAgICdzZXR0aW5ncycpLFxyXG4gKiBdO1xyXG4gKiBgYGBcclxuICogQGRvY3NDYXRlZ29yeSBuYXYtbWVudVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZE5hdk1lbnVTZWN0aW9uKGNvbmZpZzogTmF2TWVudVNlY3Rpb24sIGJlZm9yZT86IHN0cmluZyk6IFByb3ZpZGVyIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgICAgIG11bHRpOiB0cnVlLFxyXG4gICAgICAgIHVzZUZhY3Rvcnk6IChuYXZCdWlsZGVyU2VydmljZTogTmF2QnVpbGRlclNlcnZpY2UpID0+ICgpID0+IHtcclxuICAgICAgICAgICAgbmF2QnVpbGRlclNlcnZpY2UuYWRkTmF2TWVudVNlY3Rpb24oY29uZmlnLCBiZWZvcmUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVwczogW05hdkJ1aWxkZXJTZXJ2aWNlXSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQWRkIGEgbWVudSBpdGVtIHRvIGFuIGV4aXN0aW5nIHNlY3Rpb24gc3BlY2lmaWVkIGJ5IGBzZWN0aW9uSWRgLiBUaGUgaWQgb2YgdGhlIHNlY3Rpb25cclxuICogY2FuIGJlIGZvdW5kIGJ5IGluc3BlY3RpbmcgdGhlIERPTSBhbmQgZmluZGluZyB0aGUgYGRhdGEtc2VjdGlvbi1pZGAgYXR0cmlidXRlLlxyXG4gKiBQcm92aWRpbmcgdGhlIGBiZWZvcmVgIGFyZ3VtZW50IHdpbGwgbW92ZSB0aGUgaXRlbSBiZWZvcmUgYW55IGV4aXN0aW5nIGl0ZW0gd2l0aCB0aGUgc3BlY2lmaWVkIGlkLlxyXG4gKiBJZiBvbWl0dGVkIChvciBpZiB0aGUgbmFtZSBpcyBub3QgZm91bmQpIHRoZSBpdGVtIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlXHJcbiAqIGVuZCBvZiB0aGUgc2VjdGlvbi5cclxuICpcclxuICogVGhpcyBzaG91bGQgYmUgdXNlZCBpbiB0aGUgTmdNb2R1bGUgYHByb3ZpZGVyc2AgYXJyYXkgb2YgeW91ciB1aSBleHRlbnNpb24gbW9kdWxlLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGB0cyB0aXRsZT1cInByb3ZpZGVycy50c1wiXHJcbiAqIGltcG9ydCB7IGFkZE5hdk1lbnVJdGVtIH0gZnJvbSAnXFxAdmVuZHVyZS9hZG1pbi11aS9jb3JlJztcclxuICpcclxuICogZXhwb3J0IGRlZmF1bHQgW1xyXG4gKiAgICAgYWRkTmF2TWVudUl0ZW0oe1xyXG4gKiAgICAgICAgIGlkOiAncmV2aWV3cycsXHJcbiAqICAgICAgICAgbGFiZWw6ICdQcm9kdWN0IFJldmlld3MnLFxyXG4gKiAgICAgICAgIHJvdXRlckxpbms6IFsnL2V4dGVuc2lvbnMvcmV2aWV3cyddLFxyXG4gKiAgICAgICAgIGljb246ICdzdGFyJyxcclxuICogICAgIH0sXHJcbiAqICAgICAnbWFya2V0aW5nJyksXHJcbiAqIF07XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZG9jc0NhdGVnb3J5IG5hdi1tZW51XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkTmF2TWVudUl0ZW0oY29uZmlnOiBOYXZNZW51SXRlbSwgc2VjdGlvbklkOiBzdHJpbmcsIGJlZm9yZT86IHN0cmluZyk6IFByb3ZpZGVyIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgICAgIG11bHRpOiB0cnVlLFxyXG4gICAgICAgIHVzZUZhY3Rvcnk6IChuYXZCdWlsZGVyU2VydmljZTogTmF2QnVpbGRlclNlcnZpY2UpID0+ICgpID0+IHtcclxuICAgICAgICAgICAgbmF2QnVpbGRlclNlcnZpY2UuYWRkTmF2TWVudUl0ZW0oY29uZmlnLCBzZWN0aW9uSWQsIGJlZm9yZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXBzOiBbTmF2QnVpbGRlclNlcnZpY2VdLFxyXG4gICAgfTtcclxufVxyXG4iXX0=