import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { createBaseDetailResolveFn } from '../common/base-detail.component';
import { AngularRouteComponent } from './components/angular-route.component';
import { ROUTE_COMPONENT_OPTIONS } from './components/route.component';
/**
 * @description
 * Registers an Angular standalone component to be rendered in a route.
 *
 * @example
 * ```ts title="routes.ts"
 * import { registerRouteComponent } from '\@vendure/admin-ui/core';
 * import { registerReactRouteComponent } from '\@vendure/admin-ui/react';
 *
 * import { ProductReviewDetailComponent } from './components/product-review-detail/product-review-detail.component';
 * import { AllProductReviewsList } from './components/all-product-reviews-list/all-product-reviews-list.component';
 * import { GetReviewDetailDocument } from './generated-types';
 *
 * export default [
 *     registerRouteComponent({
 *         path: '',
 *         component: AllProductReviewsList,
 *         breadcrumb: 'Product reviews',
 *     }),
 *     registerRouteComponent({
 *         path: ':id',
 *         component: ProductReviewDetailComponent,
 *         query: GetReviewDetailDocument,
 *         entityKey: 'productReview',
 *         getBreadcrumbs: entity => [
 *             {
 *                 label: 'Product reviews',
 *                 link: ['/extensions', 'product-reviews'],
 *             },
 *             {
 *                 label: `#${entity?.id} (${entity?.product.name})`,
 *                 link: [],
 *             },
 *         ],
 *     }),
 * ];
 * ```
 *
 * @docsCategory routes
 */
export function registerRouteComponent(options) {
    const { query, entityKey, variables, getBreadcrumbs, locationId, description } = options;
    const breadcrumbSubject$ = new BehaviorSubject(options.breadcrumb ?? '');
    const titleSubject$ = new BehaviorSubject(options.title);
    if (getBreadcrumbs != null && (query == null || entityKey == null)) {
        console.error([
            `[${options.path ?? 'custom'} route] When using the "getBreadcrumbs" option, the "query" and "entityKey" options must also be provided.`,
            ``,
            `Alternatively, use the "breadcrumb" option instead, or use the "PageMetadataService" inside your Angular component`,
            `or the "usePageMetadata" React hook to set the breadcrumb.`,
        ].join('\n'));
    }
    const resolveFn = query && entityKey
        ? createBaseDetailResolveFn({
            query,
            entityKey,
            variables,
        })
        : undefined;
    return {
        path: options.path ?? '',
        providers: [
            {
                provide: ROUTE_COMPONENT_OPTIONS,
                useValue: {
                    component: options.component,
                    title$: titleSubject$,
                    breadcrumb$: breadcrumbSubject$,
                },
            },
            ...(options.routeConfig?.providers ?? []),
        ],
        ...(options.routeConfig ?? {}),
        resolve: { ...(resolveFn ? { detail: resolveFn } : {}), ...(options.routeConfig?.resolve ?? {}) },
        data: {
            locationId,
            description,
            breadcrumb: breadcrumbSubject$,
            ...(options.routeConfig?.data ?? {}),
            ...(getBreadcrumbs && query && entityKey
                ? {
                    breadcrumb: data => data.detail.entity.pipe(map((entity) => getBreadcrumbs(entity))),
                }
                : {}),
            ...(options.routeConfig?.data ?? {}),
        },
        component: AngularRouteComponent,
    };
}
//# sourceMappingURL=data:application/json;base64,