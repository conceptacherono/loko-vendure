import { Component, inject, InjectionToken, Input } from '@angular/core';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { combineLatest, Observable, of, switchMap } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { SharedModule } from '../../shared/shared.module';
import { PageMetadataService } from '../providers/page-metadata.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../providers/page/page.service";
import * as i3 from "@angular/common";
import * as i4 from "../../shared/components/page-header/page-header.component";
import * as i5 from "../../shared/components/page-title/page-title.component";
import * as i6 from "../../shared/components/page-header-description/page-header-description.component";
import * as i7 from "../../shared/components/page-header-tabs/page-header-tabs.component";
import * as i8 from "../../shared/components/page-body/page-body.component";
export const ROUTE_COMPONENT_OPTIONS = new InjectionToken('ROUTE_COMPONENT_OPTIONS');
export class RouteComponent {
    constructor(route, pageService) {
        this.route = route;
        this.pageService = pageService;
        this.headerTabs = [];
        const breadcrumbLabel$ = this.route.data.pipe(switchMap(data => {
            if (data.breadcrumb instanceof Observable) {
                return data.breadcrumb;
            }
            if (typeof data.breadcrumb === 'function') {
                return data.breadcrumb(data);
            }
            return of(undefined);
        }), filter(notNullOrUndefined), map(breadcrumb => {
            if (typeof breadcrumb === 'string') {
                return breadcrumb;
            }
            if (Array.isArray(breadcrumb)) {
                return breadcrumb[breadcrumb.length - 1].label;
            }
            return breadcrumb.label;
        }));
        this.title$ = combineLatest([inject(ROUTE_COMPONENT_OPTIONS).title$, breadcrumbLabel$]).pipe(map(([title, breadcrumbLabel]) => title ?? breadcrumbLabel));
        this.locationId = this.route.snapshot.data.locationId;
        this.description = this.route.snapshot.data.description;
        this.headerTabs = this.pageService.getPageTabs(this.locationId).map(tab => ({
            id: tab.tab,
            label: tab.tab,
            icon: tab.tabIcon,
            route: tab.route ? [tab.route] : ['./'],
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: RouteComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.PageService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: RouteComponent, isStandalone: true, selector: "vdr-route-component", inputs: { locationId: "locationId", description: "description" }, providers: [PageMetadataService], ngImport: i0, template: `
        <vdr-page-header>
            <vdr-page-title *ngIf="title$ | async as title" [title]="title"></vdr-page-title>
            <vdr-page-header-description *ngIf="description">{{ description }}</vdr-page-header-description>
            <vdr-page-header-tabs *ngIf="headerTabs.length > 1" [tabs]="headerTabs"></vdr-page-header-tabs>
        </vdr-page-header>
        <vdr-page-body><ng-content /></vdr-page-body>
    `, isInline: true, dependencies: [{ kind: "ngmodule", type: SharedModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.PageHeaderComponent, selector: "vdr-page-header" }, { kind: "component", type: i5.PageTitleComponent, selector: "vdr-page-title", inputs: ["title"] }, { kind: "component", type: i6.PageHeaderDescriptionComponent, selector: "vdr-page-header-description" }, { kind: "component", type: i7.PageHeaderTabsComponent, selector: "vdr-page-header-tabs", inputs: ["tabs"] }, { kind: "component", type: i8.PageBodyComponent, selector: "vdr-page-body" }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: RouteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'vdr-route-component',
                    template: `
        <vdr-page-header>
            <vdr-page-title *ngIf="title$ | async as title" [title]="title"></vdr-page-title>
            <vdr-page-header-description *ngIf="description">{{ description }}</vdr-page-header-description>
            <vdr-page-header-tabs *ngIf="headerTabs.length > 1" [tabs]="headerTabs"></vdr-page-header-tabs>
        </vdr-page-header>
        <vdr-page-body><ng-content /></vdr-page-body>
    `,
                    standalone: true,
                    imports: [SharedModule],
                    providers: [PageMetadataService],
                }]
        }], ctorParameters: () => [{ type: i1.ActivatedRoute }, { type: i2.PageService }], propDecorators: { locationId: [{
                type: Input
            }], description: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9leHRlbnNpb24vY29tcG9uZW50cy9yb3V0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7Ozs7Ozs7O0FBTXpFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLElBQUksY0FBYyxDQUNyRCx5QkFBeUIsQ0FDNUIsQ0FBQztBQWdCRixNQUFNLE9BQU8sY0FBYztJQU12QixZQUNZLEtBQXFCLEVBQ3JCLFdBQXdCO1FBRHhCLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBSnBDLGVBQVUsR0FBZ0IsRUFBRSxDQUFDO1FBTXpCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUN6QyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDYixJQUFJLElBQUksQ0FBQyxVQUFVLFlBQVksVUFBVSxFQUFFLENBQUM7Z0JBQ3hDLE9BQU8sSUFBSSxDQUFDLFVBQXlDLENBQUM7WUFDMUQsQ0FBQztZQUNELElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFVBQVUsRUFBRSxDQUFDO2dCQUN4QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFnQyxDQUFDO1lBQ2hFLENBQUM7WUFDRCxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsRUFDRixNQUFNLENBQUMsa0JBQWtCLENBQUMsRUFDMUIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2IsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUUsQ0FBQztnQkFDakMsT0FBTyxVQUFVLENBQUM7WUFDdEIsQ0FBQztZQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO2dCQUM1QixPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNuRCxDQUFDO1lBQ0QsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUNMLENBQUM7UUFFRixJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN4RixHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLGVBQWUsQ0FBQyxDQUM5RCxDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3RELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN4RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hFLEVBQUUsRUFBRSxHQUFHLENBQUMsR0FBRztZQUNYLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRztZQUNkLElBQUksRUFBRSxHQUFHLENBQUMsT0FBTztZQUNqQixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs4R0E1Q1EsY0FBYztrR0FBZCxjQUFjLG9JQUZaLENBQUMsbUJBQW1CLENBQUMsMEJBVnRCOzs7Ozs7O0tBT1QsMkRBRVMsWUFBWTs7MkZBR2IsY0FBYztrQkFkMUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixRQUFRLEVBQUU7Ozs7Ozs7S0FPVDtvQkFDRCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO29CQUN2QixTQUFTLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztpQkFDbkM7NkdBR3NCLFVBQVU7c0JBQTVCLEtBQUs7Z0JBQ2EsV0FBVztzQkFBN0IsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgaW5qZWN0LCBJbmplY3Rpb25Ub2tlbiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBub3ROdWxsT3JVbmRlZmluZWQgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3NoYXJlZC11dGlscyc7XHJcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIG9mLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEJyZWFkY3J1bWJWYWx1ZSB9IGZyb20gJy4uLy4uL3Byb3ZpZGVycy9icmVhZGNydW1iL2JyZWFkY3J1bWIuc2VydmljZSc7XHJcbmltcG9ydCB7IFNoYXJlZE1vZHVsZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9zaGFyZWQubW9kdWxlJztcclxuaW1wb3J0IHsgUGFnZU1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4uL3Byb3ZpZGVycy9wYWdlLW1ldGFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBbmd1bGFyUm91dGVDb21wb25lbnRPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgeyBIZWFkZXJUYWIgfSBmcm9tICcuLi8uLi9zaGFyZWQvY29tcG9uZW50cy9wYWdlLWhlYWRlci10YWJzL3BhZ2UtaGVhZGVyLXRhYnMuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUGFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9wcm92aWRlcnMvcGFnZS9wYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQYWdlTG9jYXRpb25JZCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb21wb25lbnQtcmVnaXN0cnktdHlwZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJPVVRFX0NPTVBPTkVOVF9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPEFuZ3VsYXJSb3V0ZUNvbXBvbmVudE9wdGlvbnM+KFxyXG4gICAgJ1JPVVRFX0NPTVBPTkVOVF9PUFRJT05TJyxcclxuKTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd2ZHItcm91dGUtY29tcG9uZW50JyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPHZkci1wYWdlLWhlYWRlcj5cclxuICAgICAgICAgICAgPHZkci1wYWdlLXRpdGxlICpuZ0lmPVwidGl0bGUkIHwgYXN5bmMgYXMgdGl0bGVcIiBbdGl0bGVdPVwidGl0bGVcIj48L3Zkci1wYWdlLXRpdGxlPlxyXG4gICAgICAgICAgICA8dmRyLXBhZ2UtaGVhZGVyLWRlc2NyaXB0aW9uICpuZ0lmPVwiZGVzY3JpcHRpb25cIj57eyBkZXNjcmlwdGlvbiB9fTwvdmRyLXBhZ2UtaGVhZGVyLWRlc2NyaXB0aW9uPlxyXG4gICAgICAgICAgICA8dmRyLXBhZ2UtaGVhZGVyLXRhYnMgKm5nSWY9XCJoZWFkZXJUYWJzLmxlbmd0aCA+IDFcIiBbdGFic109XCJoZWFkZXJUYWJzXCI+PC92ZHItcGFnZS1oZWFkZXItdGFicz5cclxuICAgICAgICA8L3Zkci1wYWdlLWhlYWRlcj5cclxuICAgICAgICA8dmRyLXBhZ2UtYm9keT48bmctY29udGVudCAvPjwvdmRyLXBhZ2UtYm9keT5cclxuICAgIGAsXHJcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gICAgaW1wb3J0czogW1NoYXJlZE1vZHVsZV0sXHJcbiAgICBwcm92aWRlcnM6IFtQYWdlTWV0YWRhdGFTZXJ2aWNlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFJvdXRlQ29tcG9uZW50IHtcclxuICAgIHByb3RlY3RlZCB0aXRsZSQ6IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPjtcclxuICAgIEBJbnB1dCgpIHByb3RlY3RlZCBsb2NhdGlvbklkOiBQYWdlTG9jYXRpb25JZDtcclxuICAgIEBJbnB1dCgpIHByb3RlY3RlZCBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gICAgaGVhZGVyVGFiczogSGVhZGVyVGFiW10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgICAgICBwcml2YXRlIHBhZ2VTZXJ2aWNlOiBQYWdlU2VydmljZSxcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IGJyZWFkY3J1bWJMYWJlbCQgPSB0aGlzLnJvdXRlLmRhdGEucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuYnJlYWRjcnVtYiBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5icmVhZGNydW1iIGFzIE9ic2VydmFibGU8QnJlYWRjcnVtYlZhbHVlPjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5icmVhZGNydW1iID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuYnJlYWRjcnVtYihkYXRhKSBhcyBPYnNlcnZhYmxlPEJyZWFkY3J1bWJWYWx1ZT47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGZpbHRlcihub3ROdWxsT3JVbmRlZmluZWQpLFxyXG4gICAgICAgICAgICBtYXAoYnJlYWRjcnVtYiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJyZWFkY3J1bWIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJyZWFkY3J1bWI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShicmVhZGNydW1iKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBicmVhZGNydW1iW2JyZWFkY3J1bWIubGVuZ3RoIC0gMV0ubGFiZWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYnJlYWRjcnVtYi5sYWJlbDtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy50aXRsZSQgPSBjb21iaW5lTGF0ZXN0KFtpbmplY3QoUk9VVEVfQ09NUE9ORU5UX09QVElPTlMpLnRpdGxlJCwgYnJlYWRjcnVtYkxhYmVsJF0pLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoW3RpdGxlLCBicmVhZGNydW1iTGFiZWxdKSA9PiB0aXRsZSA/PyBicmVhZGNydW1iTGFiZWwpLFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMubG9jYXRpb25JZCA9IHRoaXMucm91dGUuc25hcHNob3QuZGF0YS5sb2NhdGlvbklkO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSB0aGlzLnJvdXRlLnNuYXBzaG90LmRhdGEuZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5oZWFkZXJUYWJzID0gdGhpcy5wYWdlU2VydmljZS5nZXRQYWdlVGFicyh0aGlzLmxvY2F0aW9uSWQpLm1hcCh0YWIgPT4gKHtcclxuICAgICAgICAgICAgaWQ6IHRhYi50YWIsXHJcbiAgICAgICAgICAgIGxhYmVsOiB0YWIudGFiLFxyXG4gICAgICAgICAgICBpY29uOiB0YWIudGFiSWNvbixcclxuICAgICAgICAgICAgcm91dGU6IHRhYi5yb3V0ZSA/IFt0YWIucm91dGVdIDogWycuLyddLFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG4iXX0=