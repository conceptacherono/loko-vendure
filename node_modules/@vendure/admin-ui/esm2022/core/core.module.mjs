import { PlatformLocation } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { BrowserModule, Title } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { TranslateCompiler, TranslateLoader, TranslateModule } from '@ngx-translate/core';
import { interval } from 'rxjs';
import { getAppConfig } from './app.config';
import { getDefaultUiLanguage, getDefaultUiLocale } from './common/utilities/get-default-ui-language';
import { AlertsComponent } from './components/alerts/alerts.component';
import { AppShellComponent } from './components/app-shell/app-shell.component';
import { BaseNavComponent } from './components/base-nav/base-nav.component';
import { BreadcrumbComponent } from './components/breadcrumb/breadcrumb.component';
import { ChannelSwitcherComponent } from './components/channel-switcher/channel-switcher.component';
import { MainNavComponent } from './components/main-nav/main-nav.component';
import { NotificationComponent } from './components/notification/notification.component';
import { OverlayHostComponent } from './components/overlay-host/overlay-host.component';
import { SettingsNavComponent } from './components/settings-nav/settings-nav.component';
import { ThemeSwitcherComponent } from './components/theme-switcher/theme-switcher.component';
import { UiLanguageSwitcherDialogComponent } from './components/ui-language-switcher-dialog/ui-language-switcher-dialog.component';
import { UserMenuComponent } from './components/user-menu/user-menu.component';
import { DataModule } from './data/data.module';
import { CustomHttpTranslationLoader } from './providers/i18n/custom-http-loader';
import { InjectableTranslateMessageFormatCompiler } from './providers/i18n/custom-message-format-compiler';
import { Permission } from './public_api';
import { registerDefaultFormInputs } from './shared/dynamic-form-inputs/default-form-inputs';
import { SharedModule } from './shared/shared.module';
import * as i0 from "@angular/core";
import * as i1 from "./providers/i18n/i18n.service";
import * as i2 from "./providers/local-storage/local-storage.service";
import * as i3 from "@angular/platform-browser";
import * as i4 from "./providers/alerts/alerts.service";
import * as i5 from "@ngx-translate/core";
export class CoreModule {
    constructor(i18nService, localStorageService, titleService, alertsService) {
        this.i18nService = i18nService;
        this.localStorageService = localStorageService;
        this.titleService = titleService;
        this.alertsService = alertsService;
        this.initUiLanguagesAndLocales();
        this.initUiTitle();
        this.initAlerts();
    }
    initUiLanguagesAndLocales() {
        const defaultLanguage = getDefaultUiLanguage();
        const defaultLocale = getDefaultUiLocale();
        const lastLanguage = this.localStorageService.get('uiLanguageCode');
        const availableLanguages = getAppConfig().availableLanguages;
        const availableLocales = getAppConfig().availableLocales ?? [defaultLocale];
        if (!!defaultLanguage && !availableLanguages.includes(defaultLanguage)) {
            throw new Error(`The defaultLanguage "${defaultLanguage}" must be one of the availableLanguages [${availableLanguages
                .map(l => `"${l}"`)
                .join(', ')}]`);
        }
        if (!!defaultLocale && !availableLocales.includes(defaultLocale)) {
            throw new Error(`The defaultLocale "${defaultLocale}" must be one of the availableLocales [${availableLocales
                .map(l => `"${l}"`)
                .join(', ')}]`);
        }
        const uiLanguage = lastLanguage && availableLanguages.includes(lastLanguage) ? lastLanguage : defaultLanguage;
        this.localStorageService.set('uiLanguageCode', uiLanguage);
        this.i18nService.setLanguage(uiLanguage);
        this.i18nService.setDefaultLanguage(defaultLanguage);
        this.i18nService.setAvailableLanguages(availableLanguages || [defaultLanguage]);
        this.i18nService.setAvailableLocales(availableLocales || [defaultLocale]);
    }
    initUiTitle() {
        const title = getAppConfig().brand || 'Vendure';
        this.titleService.setTitle(title);
    }
    initAlerts() {
        const pendingUpdatesId = 'pending-search-index-updates';
        this.alertsService.configureAlert({
            id: pendingUpdatesId,
            requiredPermissions: [Permission.ReadCatalog, Permission.ReadProduct],
            check: context => context.dataService.product
                .getPendingSearchIndexUpdates()
                .mapSingle(({ pendingSearchIndexUpdates }) => pendingSearchIndexUpdates),
            recheck: () => interval(1000 * 30),
            isAlert: data => 0 < data,
            action: (data, context) => {
                context.dataService.product.runPendingSearchIndexUpdates().subscribe(() => {
                    context.notificationService.info(_('catalog.running-search-index-updates'), {
                        count: data,
                    });
                });
            },
            label: data => ({
                text: _('catalog.run-pending-search-index-updates'),
                translationVars: { count: data },
            }),
        });
        this.alertsService.refresh(pendingUpdatesId);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CoreModule, deps: [{ token: i1.I18nService }, { token: i2.LocalStorageService }, { token: i3.Title }, { token: i4.AlertsService }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: CoreModule, declarations: [AppShellComponent,
            UserMenuComponent,
            BaseNavComponent,
            MainNavComponent,
            SettingsNavComponent,
            BreadcrumbComponent,
            OverlayHostComponent,
            NotificationComponent,
            UiLanguageSwitcherDialogComponent,
            ChannelSwitcherComponent,
            ThemeSwitcherComponent,
            AlertsComponent], imports: [BrowserModule,
            DataModule,
            SharedModule,
            BrowserAnimationsModule, i5.TranslateModule], exports: [SharedModule, OverlayHostComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CoreModule, providers: [registerDefaultFormInputs(), Title], imports: [BrowserModule,
            DataModule,
            SharedModule,
            BrowserAnimationsModule,
            TranslateModule.forRoot({
                loader: {
                    provide: TranslateLoader,
                    useFactory: HttpLoaderFactory,
                    deps: [HttpClient, PlatformLocation],
                },
                compiler: { provide: TranslateCompiler, useClass: InjectableTranslateMessageFormatCompiler },
            }), SharedModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CoreModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        BrowserModule,
                        DataModule,
                        SharedModule,
                        BrowserAnimationsModule,
                        TranslateModule.forRoot({
                            loader: {
                                provide: TranslateLoader,
                                useFactory: HttpLoaderFactory,
                                deps: [HttpClient, PlatformLocation],
                            },
                            compiler: { provide: TranslateCompiler, useClass: InjectableTranslateMessageFormatCompiler },
                        }),
                    ],
                    providers: [registerDefaultFormInputs(), Title],
                    exports: [SharedModule, OverlayHostComponent],
                    declarations: [
                        AppShellComponent,
                        UserMenuComponent,
                        BaseNavComponent,
                        MainNavComponent,
                        SettingsNavComponent,
                        BreadcrumbComponent,
                        OverlayHostComponent,
                        NotificationComponent,
                        UiLanguageSwitcherDialogComponent,
                        ChannelSwitcherComponent,
                        ThemeSwitcherComponent,
                        AlertsComponent,
                    ],
                }]
        }], ctorParameters: () => [{ type: i1.I18nService }, { type: i2.LocalStorageService }, { type: i3.Title }, { type: i4.AlertsService }] });
export function HttpLoaderFactory(http, location) {
    // Dynamically get the baseHref, which is configured in the angular.json file
    const baseHref = location.getBaseHrefFromDOM();
    return new CustomHttpTranslationLoader(http, baseHref + 'i18n-messages/');
}
//# sourceMappingURL=data:application/json;base64,