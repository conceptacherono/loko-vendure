import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Subject, finalize, take, takeUntil } from 'rxjs';
import { CurrencyCode } from '../../common/generated-types';
import * as i0 from "@angular/core";
import * as i1 from "../../data/providers/data.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@ng-select/ng-select";
import * as i5 from "../../shared/components/form-field/form-field.component";
import * as i6 from "../../shared/components/form-field/form-field-control.directive";
import * as i7 from "../../shared/components/modal-dialog/dialog-buttons.directive";
import * as i8 from "../../shared/components/modal-dialog/dialog-title.directive";
import * as i9 from "../../shared/components/labeled-data/labeled-data.component";
import * as i10 from "@ngx-translate/core";
import * as i11 from "../../shared/pipes/locale-currency-name.pipe";
import * as i12 from "../../shared/pipes/sort.pipe";
import * as i13 from "../../shared/pipes/locale-date.pipe";
import * as i14 from "../../shared/pipes/locale-currency.pipe";
import * as i15 from "../../shared/pipes/locale-language-name.pipe";
import * as i16 from "../../shared/pipes/locale-region-name.pipe";
export class UiLanguageSwitcherDialogComponent {
    constructor(dataService, changeDetector) {
        this.dataService = dataService;
        this.changeDetector = changeDetector;
        this.isLoading = true;
        this.destroy$ = new Subject();
        this.availableLanguages = [];
        this.availableLocales = [];
        this.availableCurrencyCodes = Object.values(CurrencyCode);
        this.now = new Date().toISOString();
        const browserLanguage = navigator.language.split('-');
        this.browserDefaultLocale = browserLanguage.length === 1 ? undefined : browserLanguage[1];
    }
    ngOnInit() {
        this.updatePreviewLocale();
        this.dataService.settings
            .getActiveChannel()
            .mapStream(data => data.activeChannel.defaultCurrencyCode)
            .pipe(take(1), takeUntil(this.destroy$), finalize(() => {
            this.isLoading = false;
            this.changeDetector.markForCheck();
        }))
            .subscribe(x => {
            this.selectedCurrencyCode = x;
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    updatePreviewLocale() {
        if (!this.currentLocale || this.currentLocale.length === 0 || this.currentLocale.length === 2) {
            this.previewLocale = this.createLocaleString(this.currentLanguage, this.currentLocale);
        }
    }
    setLanguage() {
        this.resolveWith([this.currentLanguage, this.currentLocale?.toUpperCase()]);
    }
    cancel() {
        this.resolveWith();
    }
    createLocaleString(languageCode, region) {
        if (!region) {
            return languageCode;
        }
        return [languageCode, region.toUpperCase()].join('-');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: UiLanguageSwitcherDialogComponent, deps: [{ token: i1.DataService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: UiLanguageSwitcherDialogComponent, selector: "vdr-ui-language-switcher", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'common.select-display-language' | translate }}</ng-template>\r\n\r\n<ng-container *ngIf=\"isLoading\">\r\n    <div class=\"progress loop\"></div>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"!isLoading\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"flex pl-2 mb-2\">\r\n            <vdr-form-field [label]=\"'common.language' | translate\" class=\"mr-2\">\r\n                <select name=\"options\" [(ngModel)]=\"currentLanguage\" (ngModelChange)=\"updatePreviewLocale()\">\r\n                    <option *ngFor=\"let code of availableLanguages | sort\" [value]=\"code\">\r\n                        {{ code | uppercase }} ({{ code | localeLanguageName }})\r\n                    </option>\r\n                </select>\r\n            </vdr-form-field>\r\n            <vdr-form-field [label]=\"'common.locale' | translate\">\r\n                <ng-select appendTo=\"body\" [items]=\"availableLocales\" [(ngModel)]=\"currentLocale\"\r\n                    (ngModelChange)=\"updatePreviewLocale()\" [placeholder]=\"'common.browser-default' | translate\">\r\n                    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                        {{ item }} ({{ item | localeRegionName }})\r\n                    </ng-template>\r\n                    <ng-template ng-option-tmp let-item=\"item\">\r\n                        {{ item }} ({{ item | localeRegionName }})\r\n                    </ng-template>\r\n                </ng-select>\r\n            </vdr-form-field>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"card-header\">\r\n            <span class=\"pr-1\">{{ 'common.sample-formatting' | translate }}:</span><strong>{{ previewLocale |\r\n                localeLanguageName : previewLocale }}</strong>\r\n        </div>\r\n        <div class=\"card-block\">\r\n            <div class=\"clr-row\">\r\n                <div class=\"clr-col-sm-4\">\r\n                    <vdr-labeled-data [label]=\"'common.medium-date' | translate\">\r\n                        {{ now | localeDate : 'medium' : previewLocale }}\r\n                    </vdr-labeled-data>\r\n                    <vdr-labeled-data [label]=\"'common.short-date' | translate\">\r\n                        {{ now | localeDate : 'short' : previewLocale }}\r\n                    </vdr-labeled-data>\r\n                </div>\r\n                <div class=\"clr-col-sm-4\">\r\n                    <select name=\"currency\" class=\"currency\" [(ngModel)]=\"selectedCurrencyCode\">\r\n                        <option *ngFor=\"let code of availableCurrencyCodes | sort\" [value]=\"code\">\r\n                            {{ code | uppercase }} ({{ code | localeCurrencyName : 'full' : previewLocale }})\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"clr-col-sm-4\">\r\n                    <vdr-labeled-data [label]=\"'common.price' | translate\">\r\n                        {{ 12345 | localeCurrency : selectedCurrencyCode : previewLocale }}\r\n                    </vdr-labeled-data>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"setLanguage()\" class=\"btn btn-primary\">\r\n        {{ 'common.set-language' | translate }}\r\n    </button>\r\n</ng-template>", styles: ["select.currency{max-width:200px}input.locale{text-transform:uppercase}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i4.NgOptionTemplateDirective, selector: "[ng-option-tmp]" }, { kind: "directive", type: i4.NgLabelTemplateDirective, selector: "[ng-label-tmp]" }, { kind: "component", type: i5.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"], outputs: ["readOnlyToggleChange"] }, { kind: "directive", type: i6.FormFieldControlDirective, selector: "input, textarea, select, vdr-currency-input" }, { kind: "directive", type: i7.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i8.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i9.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "pipe", type: i2.UpperCasePipe, name: "uppercase" }, { kind: "pipe", type: i10.TranslatePipe, name: "translate" }, { kind: "pipe", type: i11.LocaleCurrencyNamePipe, name: "localeCurrencyName" }, { kind: "pipe", type: i12.SortPipe, name: "sort" }, { kind: "pipe", type: i13.LocaleDatePipe, name: "localeDate" }, { kind: "pipe", type: i14.LocaleCurrencyPipe, name: "localeCurrency" }, { kind: "pipe", type: i15.LocaleLanguageNamePipe, name: "localeLanguageName" }, { kind: "pipe", type: i16.LocaleRegionNamePipe, name: "localeRegionName" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: UiLanguageSwitcherDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-ui-language-switcher', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'common.select-display-language' | translate }}</ng-template>\r\n\r\n<ng-container *ngIf=\"isLoading\">\r\n    <div class=\"progress loop\"></div>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"!isLoading\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"flex pl-2 mb-2\">\r\n            <vdr-form-field [label]=\"'common.language' | translate\" class=\"mr-2\">\r\n                <select name=\"options\" [(ngModel)]=\"currentLanguage\" (ngModelChange)=\"updatePreviewLocale()\">\r\n                    <option *ngFor=\"let code of availableLanguages | sort\" [value]=\"code\">\r\n                        {{ code | uppercase }} ({{ code | localeLanguageName }})\r\n                    </option>\r\n                </select>\r\n            </vdr-form-field>\r\n            <vdr-form-field [label]=\"'common.locale' | translate\">\r\n                <ng-select appendTo=\"body\" [items]=\"availableLocales\" [(ngModel)]=\"currentLocale\"\r\n                    (ngModelChange)=\"updatePreviewLocale()\" [placeholder]=\"'common.browser-default' | translate\">\r\n                    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                        {{ item }} ({{ item | localeRegionName }})\r\n                    </ng-template>\r\n                    <ng-template ng-option-tmp let-item=\"item\">\r\n                        {{ item }} ({{ item | localeRegionName }})\r\n                    </ng-template>\r\n                </ng-select>\r\n            </vdr-form-field>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"card-header\">\r\n            <span class=\"pr-1\">{{ 'common.sample-formatting' | translate }}:</span><strong>{{ previewLocale |\r\n                localeLanguageName : previewLocale }}</strong>\r\n        </div>\r\n        <div class=\"card-block\">\r\n            <div class=\"clr-row\">\r\n                <div class=\"clr-col-sm-4\">\r\n                    <vdr-labeled-data [label]=\"'common.medium-date' | translate\">\r\n                        {{ now | localeDate : 'medium' : previewLocale }}\r\n                    </vdr-labeled-data>\r\n                    <vdr-labeled-data [label]=\"'common.short-date' | translate\">\r\n                        {{ now | localeDate : 'short' : previewLocale }}\r\n                    </vdr-labeled-data>\r\n                </div>\r\n                <div class=\"clr-col-sm-4\">\r\n                    <select name=\"currency\" class=\"currency\" [(ngModel)]=\"selectedCurrencyCode\">\r\n                        <option *ngFor=\"let code of availableCurrencyCodes | sort\" [value]=\"code\">\r\n                            {{ code | uppercase }} ({{ code | localeCurrencyName : 'full' : previewLocale }})\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"clr-col-sm-4\">\r\n                    <vdr-labeled-data [label]=\"'common.price' | translate\">\r\n                        {{ 12345 | localeCurrency : selectedCurrencyCode : previewLocale }}\r\n                    </vdr-labeled-data>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"setLanguage()\" class=\"btn btn-primary\">\r\n        {{ 'common.set-language' | translate }}\r\n    </button>\r\n</ng-template>", styles: ["select.currency{max-width:200px}input.locale{text-transform:uppercase}\n"] }]
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i0.ChangeDetectorRef }] });
//# sourceMappingURL=data:application/json;base64,