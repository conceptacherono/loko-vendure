import { getGraphQlInputName } from '@vendure/common/lib/shared-utils';
/**
 * Transforms any custom field "relation" type inputs into the corresponding `<name>Id` format,
 * as expected by the server.
 */
export function transformRelationCustomFieldInputs(variables, customFieldConfig) {
    if (variables.input) {
        if (Array.isArray(variables.input)) {
            for (const item of variables.input) {
                transformRelations(item, customFieldConfig);
            }
        }
        else {
            transformRelations(variables.input, customFieldConfig);
        }
    }
    return transformRelations(variables, customFieldConfig);
}
/**
 * @description
 * When persisting custom fields, we need to send just the IDs of the relations,
 * rather than the objects themselves.
 */
function transformRelations(input, customFieldConfig) {
    for (const field of customFieldConfig) {
        if (field.type === 'relation') {
            if (hasCustomFields(input)) {
                const entityValue = input.customFields[field.name];
                if (input.customFields.hasOwnProperty(field.name)) {
                    delete input.customFields[field.name];
                    input.customFields[getGraphQlInputName(field)] =
                        field.list && Array.isArray(entityValue)
                            ? entityValue.map(v => (typeof v === 'string' ? v : v?.id))
                            : entityValue === null
                                ? null
                                : entityValue?.id;
                }
            }
        }
    }
    return input;
}
function hasCustomFields(input) {
    return input != null && input.hasOwnProperty('customFields') && typeof input.customFields === 'object';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtLXJlbGF0aW9uLWN1c3RvbS1maWVsZC1pbnB1dHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvdXRpbHMvdHJhbnNmb3JtLXJlbGF0aW9uLWN1c3RvbS1maWVsZC1pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFLdkU7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGtDQUFrQyxDQUVoRCxTQUFZLEVBQUUsaUJBQXNDO0lBQ2xELElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2xCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNqQyxLQUFLLE1BQU0sSUFBSSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDakMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDaEQsQ0FBQztRQUNMLENBQUM7YUFBTSxDQUFDO1lBQ0osa0JBQWtCLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzNELENBQUM7SUFDTCxDQUFDO0lBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsa0JBQWtCLENBQUksS0FBUSxFQUFFLGlCQUFzQztJQUMzRSxLQUFLLE1BQU0sS0FBSyxJQUFJLGlCQUFpQixFQUFFLENBQUM7UUFDcEMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQzVCLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ3pCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuRCxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO29CQUNoRCxPQUFPLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN0QyxLQUFLLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDOzRCQUNwQyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzs0QkFDM0QsQ0FBQyxDQUFDLFdBQVcsS0FBSyxJQUFJO2dDQUN0QixDQUFDLENBQUMsSUFBSTtnQ0FDTixDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztnQkFDOUIsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxLQUFVO0lBQy9CLE9BQU8sS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLFlBQVksS0FBSyxRQUFRLENBQUM7QUFDM0csQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEdyYXBoUWxJbnB1dE5hbWUgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3NoYXJlZC11dGlscyc7XHJcbmltcG9ydCB7IHNpbXBsZURlZXBDbG9uZSB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2ltcGxlLWRlZXAtY2xvbmUnO1xyXG5cclxuaW1wb3J0IHsgQ3VzdG9tRmllbGRDb25maWcgfSBmcm9tICcuLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcclxuXHJcbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIGFueSBjdXN0b20gZmllbGQgXCJyZWxhdGlvblwiIHR5cGUgaW5wdXRzIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgYDxuYW1lPklkYCBmb3JtYXQsXHJcbiAqIGFzIGV4cGVjdGVkIGJ5IHRoZSBzZXJ2ZXIuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUmVsYXRpb25DdXN0b21GaWVsZElucHV0czxcclxuICAgIFQgZXh0ZW5kcyB7IGlucHV0PzogUmVjb3JkPHN0cmluZywgYW55PiB8IEFycmF5PFJlY29yZDxzdHJpbmcsIGFueT4+IH0gJiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gYW55LFxyXG4+KHZhcmlhYmxlczogVCwgY3VzdG9tRmllbGRDb25maWc6IEN1c3RvbUZpZWxkQ29uZmlnW10pOiBUIHtcclxuICAgIGlmICh2YXJpYWJsZXMuaW5wdXQpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YXJpYWJsZXMuaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YXJpYWJsZXMuaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybVJlbGF0aW9ucyhpdGVtLCBjdXN0b21GaWVsZENvbmZpZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm1SZWxhdGlvbnModmFyaWFibGVzLmlucHV0LCBjdXN0b21GaWVsZENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyYW5zZm9ybVJlbGF0aW9ucyh2YXJpYWJsZXMsIGN1c3RvbUZpZWxkQ29uZmlnKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBXaGVuIHBlcnNpc3RpbmcgY3VzdG9tIGZpZWxkcywgd2UgbmVlZCB0byBzZW5kIGp1c3QgdGhlIElEcyBvZiB0aGUgcmVsYXRpb25zLFxyXG4gKiByYXRoZXIgdGhhbiB0aGUgb2JqZWN0cyB0aGVtc2VsdmVzLlxyXG4gKi9cclxuZnVuY3Rpb24gdHJhbnNmb3JtUmVsYXRpb25zPFQ+KGlucHV0OiBULCBjdXN0b21GaWVsZENvbmZpZzogQ3VzdG9tRmllbGRDb25maWdbXSkge1xyXG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBjdXN0b21GaWVsZENvbmZpZykge1xyXG4gICAgICAgIGlmIChmaWVsZC50eXBlID09PSAncmVsYXRpb24nKSB7XHJcbiAgICAgICAgICAgIGlmIChoYXNDdXN0b21GaWVsZHMoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRpdHlWYWx1ZSA9IGlucHV0LmN1c3RvbUZpZWxkc1tmaWVsZC5uYW1lXTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jdXN0b21GaWVsZHMuaGFzT3duUHJvcGVydHkoZmllbGQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5wdXQuY3VzdG9tRmllbGRzW2ZpZWxkLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmN1c3RvbUZpZWxkc1tnZXRHcmFwaFFsSW5wdXROYW1lKGZpZWxkKV0gPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5saXN0ICYmIEFycmF5LmlzQXJyYXkoZW50aXR5VmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVudGl0eVZhbHVlLm1hcCh2ID0+ICh0eXBlb2YgdiA9PT0gJ3N0cmluZycgPyB2IDogdj8uaWQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlbnRpdHlWYWx1ZSA9PT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGVudGl0eVZhbHVlPy5pZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpbnB1dDtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzQ3VzdG9tRmllbGRzKGlucHV0OiBhbnkpOiBpbnB1dCBpcyB7IGN1c3RvbUZpZWxkczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB9IHtcclxuICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIGlucHV0Lmhhc093blByb3BlcnR5KCdjdXN0b21GaWVsZHMnKSAmJiB0eXBlb2YgaW5wdXQuY3VzdG9tRmllbGRzID09PSAnb2JqZWN0JztcclxufVxyXG4iXX0=