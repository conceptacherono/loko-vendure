/**
 * Removes any `readonly` custom fields from an entity (including its translations).
 * To be used before submitting the entity for a create or update request.
 */
export function removeReadonlyCustomFields(variables, customFieldConfig) {
    if (Array.isArray(variables)) {
        return variables.map(variable => removeReadonlyCustomFields(variable, customFieldConfig));
    }
    if ('input' in variables && variables.input) {
        if (Array.isArray(variables.input)) {
            variables.input = variables.input.map(variable => removeReadonly(variable, customFieldConfig));
        }
        else {
            variables.input = removeReadonly(variables.input, customFieldConfig);
        }
        return variables;
    }
    return removeReadonly(variables, customFieldConfig);
}
function removeReadonly(input, customFieldConfig) {
    const readonlyConfigs = customFieldConfig.filter(({ readonly }) => readonly);
    readonlyConfigs.forEach(({ name }) => {
        input.translations?.forEach(translation => {
            delete translation.customFields?.[name];
        });
        delete input.customFields?.[name];
    });
    return input;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlLXJlYWRvbmx5LWN1c3RvbS1maWVsZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvdXRpbHMvcmVtb3ZlLXJlYWRvbmx5LWN1c3RvbS1maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0JBOzs7R0FHRztBQUNILE1BQU0sVUFBVSwwQkFBMEIsQ0FDdEMsU0FBeUQsRUFDekQsaUJBQXNDO0lBRXRDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQzNCLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVELElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ2pDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUNuRyxDQUFDO2FBQU0sQ0FBQztZQUNKLFNBQVMsQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUN6RSxDQUFDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVELE9BQU8sY0FBYyxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxLQUFrQixFQUFFLGlCQUFzQztJQUM5RSxNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU3RSxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1FBQ2pDLEtBQUssQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3VzdG9tRmllbGRDb25maWcgfSBmcm9tICcuLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcclxuXHJcbnR5cGUgSW5wdXRXaXRoT3B0aW9uYWxDdXN0b21GaWVsZHMgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+ICYge1xyXG4gICAgY3VzdG9tRmllbGRzPzogUmVjb3JkPHN0cmluZywgYW55PjtcclxufTtcclxuXHJcbnR5cGUgRW50aXR5SW5wdXQgPSBJbnB1dFdpdGhPcHRpb25hbEN1c3RvbUZpZWxkcyAmIHtcclxuICAgIHRyYW5zbGF0aW9ucz86IElucHV0V2l0aE9wdGlvbmFsQ3VzdG9tRmllbGRzW107XHJcbn07XHJcblxyXG50eXBlIFZhcmlhYmxlID0gRW50aXR5SW5wdXQgfCBFbnRpdHlJbnB1dFtdO1xyXG5cclxudHlwZSBXcmFwcGVkVmFyaWFibGUgPSB7XHJcbiAgICBpbnB1dDogVmFyaWFibGU7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlcyBhbnkgYHJlYWRvbmx5YCBjdXN0b20gZmllbGRzIGZyb20gYW4gZW50aXR5IChpbmNsdWRpbmcgaXRzIHRyYW5zbGF0aW9ucykuXHJcbiAqIFRvIGJlIHVzZWQgYmVmb3JlIHN1Ym1pdHRpbmcgdGhlIGVudGl0eSBmb3IgYSBjcmVhdGUgb3IgdXBkYXRlIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUmVhZG9ubHlDdXN0b21GaWVsZHMoXHJcbiAgICB2YXJpYWJsZXM6IFZhcmlhYmxlIHwgV3JhcHBlZFZhcmlhYmxlIHwgV3JhcHBlZFZhcmlhYmxlW10sXHJcbiAgICBjdXN0b21GaWVsZENvbmZpZzogQ3VzdG9tRmllbGRDb25maWdbXSxcclxuKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YXJpYWJsZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlcy5tYXAodmFyaWFibGUgPT4gcmVtb3ZlUmVhZG9ubHlDdXN0b21GaWVsZHModmFyaWFibGUsIGN1c3RvbUZpZWxkQ29uZmlnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCdpbnB1dCcgaW4gdmFyaWFibGVzICYmIHZhcmlhYmxlcy5pbnB1dCkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhcmlhYmxlcy5pbnB1dCkpIHtcclxuICAgICAgICAgICAgdmFyaWFibGVzLmlucHV0ID0gdmFyaWFibGVzLmlucHV0Lm1hcCh2YXJpYWJsZSA9PiByZW1vdmVSZWFkb25seSh2YXJpYWJsZSwgY3VzdG9tRmllbGRDb25maWcpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXJpYWJsZXMuaW5wdXQgPSByZW1vdmVSZWFkb25seSh2YXJpYWJsZXMuaW5wdXQsIGN1c3RvbUZpZWxkQ29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlcztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVtb3ZlUmVhZG9ubHkodmFyaWFibGVzLCBjdXN0b21GaWVsZENvbmZpZyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVJlYWRvbmx5KGlucHV0OiBFbnRpdHlJbnB1dCwgY3VzdG9tRmllbGRDb25maWc6IEN1c3RvbUZpZWxkQ29uZmlnW10pIHtcclxuICAgIGNvbnN0IHJlYWRvbmx5Q29uZmlncyA9IGN1c3RvbUZpZWxkQ29uZmlnLmZpbHRlcigoeyByZWFkb25seSB9KSA9PiByZWFkb25seSk7XHJcblxyXG4gICAgcmVhZG9ubHlDb25maWdzLmZvckVhY2goKHsgbmFtZSB9KSA9PiB7XHJcbiAgICAgICAgaW5wdXQudHJhbnNsYXRpb25zPy5mb3JFYWNoKHRyYW5zbGF0aW9uID0+IHtcclxuICAgICAgICAgICAgZGVsZXRlIHRyYW5zbGF0aW9uLmN1c3RvbUZpZWxkcz8uW25hbWVdO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBkZWxldGUgaW5wdXQuY3VzdG9tRmllbGRzPy5bbmFtZV07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gaW5wdXQ7XHJcbn1cclxuIl19