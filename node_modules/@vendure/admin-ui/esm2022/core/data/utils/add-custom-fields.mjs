import { Kind, } from 'graphql';
/**
 * Given a GraphQL AST (DocumentNode), this function looks for fragment definitions and adds and configured
 * custom fields to those fragments.
 */
export function addCustomFields(documentNode, customFields, includeCustomFields) {
    const clone = JSON.parse(JSON.stringify(documentNode));
    const fragmentDefs = clone.definitions.filter(isFragmentDefinition);
    for (const fragmentDef of fragmentDefs) {
        let entityType = fragmentDef.typeCondition.name.value;
        if (entityType === 'OrderAddress') {
            // OrderAddress is a special case of the Address entity, and shares its custom fields
            // so we treat it as an alias
            entityType = 'Address';
        }
        if (entityType === 'Country') {
            // Country is an alias of Region
            entityType = 'Region';
        }
        const customFieldsForType = customFields.get(entityType);
        if (customFieldsForType && customFieldsForType.length) {
            // Check if there is already a customFields field in the fragment
            // to avoid duplication
            const existingCustomFieldsField = fragmentDef.selectionSet.selections.find(selection => isFieldNode(selection) && selection.name.value === 'customFields');
            const selectionNodes = customFieldsForType
                .filter(field => !includeCustomFields || includeCustomFields.includes(field.name))
                .map(customField => ({
                kind: Kind.FIELD,
                name: {
                    kind: Kind.NAME,
                    value: customField.name,
                },
                // For "relation" custom fields, we need to also select
                // all the scalar fields of the related type
                ...(customField.type === 'relation'
                    ? {
                        selectionSet: {
                            kind: Kind.SELECTION_SET,
                            selections: customField.scalarFields.map(f => ({
                                kind: Kind.FIELD,
                                name: { kind: Kind.NAME, value: f },
                            })),
                        },
                    }
                    : {}),
                ...(customField.type === 'struct'
                    ? {
                        selectionSet: {
                            kind: Kind.SELECTION_SET,
                            selections: customField.fields.map(f => ({
                                kind: Kind.FIELD,
                                name: { kind: Kind.NAME, value: f.name },
                            })),
                        },
                    }
                    : {}),
            }));
            if (!existingCustomFieldsField) {
                // If no customFields field exists, add one
                fragmentDef.selectionSet.selections.push({
                    kind: Kind.FIELD,
                    name: {
                        kind: Kind.NAME,
                        value: 'customFields',
                    },
                    selectionSet: {
                        kind: Kind.SELECTION_SET,
                        selections: selectionNodes,
                    },
                });
            }
            else {
                // If a customFields field already exists, add the custom fields
                // to the existing selection set
                existingCustomFieldsField.selectionSet = {
                    kind: Kind.SELECTION_SET,
                    selections: selectionNodes,
                };
            }
            const localizedFields = customFieldsForType.filter(field => field.type === 'localeString' || field.type === 'localeText');
            const translationsField = fragmentDef.selectionSet.selections
                .filter(isFieldNode)
                .find(field => field.name.value === 'translations');
            if (localizedFields.length && translationsField && translationsField.selectionSet) {
                translationsField.selectionSet.selections.push({
                    name: {
                        kind: Kind.NAME,
                        value: 'customFields',
                    },
                    kind: Kind.FIELD,
                    selectionSet: {
                        kind: Kind.SELECTION_SET,
                        selections: localizedFields.map(customField => ({
                            kind: Kind.FIELD,
                            name: {
                                kind: Kind.NAME,
                                value: customField.name,
                            },
                        })),
                    },
                });
            }
        }
    }
    return clone;
}
function isFragmentDefinition(value) {
    return value.kind === Kind.FRAGMENT_DEFINITION;
}
function isFieldNode(value) {
    return value.kind === Kind.FIELD;
}
//# sourceMappingURL=data:application/json;base64,