import { getOperationAST } from 'graphql';
const CREATE_ENTITY_REGEX = /Create([A-Za-z]+)Input/;
const UPDATE_ENTITY_REGEX = /Update([A-Za-z]+)Input/;
/**
 * Checks the current documentNode for an operation with a variable named "Create<Entity>Input" or "Update<Entity>Input"
 * and if a match is found, returns the <Entity> name.
 */
export function isEntityCreateOrUpdateMutation(documentNode) {
    const operationDef = getOperationAST(documentNode, null);
    if (operationDef && operationDef.variableDefinitions) {
        for (const variableDef of operationDef.variableDefinitions) {
            const namedType = extractInputType(variableDef.type);
            const inputTypeName = namedType.name.value;
            // special cases which don't follow the usual pattern
            if (inputTypeName === 'UpdateActiveAdministratorInput') {
                return 'Administrator';
            }
            if (inputTypeName === 'ModifyOrderInput') {
                return 'Order';
            }
            if (inputTypeName === 'AddItemToDraftOrderInput' ||
                inputTypeName === 'AdjustDraftOrderLineInput') {
                return 'OrderLine';
            }
            const createMatch = inputTypeName.match(CREATE_ENTITY_REGEX);
            if (createMatch) {
                return createMatch[1];
            }
            const updateMatch = inputTypeName.match(UPDATE_ENTITY_REGEX);
            if (updateMatch) {
                return updateMatch[1];
            }
        }
    }
}
function extractInputType(type) {
    if (type.kind === 'NonNullType') {
        return extractInputType(type.type);
    }
    if (type.kind === 'ListType') {
        return extractInputType(type.type);
    }
    return type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtZW50aXR5LWNyZWF0ZS1vci11cGRhdGUtbXV0YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvdXRpbHMvaXMtZW50aXR5LWNyZWF0ZS1vci11cGRhdGUtbXV0YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixlQUFlLEVBQTJCLE1BQU0sU0FBUyxDQUFDO0FBRWpGLE1BQU0sbUJBQW1CLEdBQUcsd0JBQXdCLENBQUM7QUFDckQsTUFBTSxtQkFBbUIsR0FBRyx3QkFBd0IsQ0FBQztBQUVyRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsOEJBQThCLENBQUMsWUFBMEI7SUFDckUsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUNuRCxLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBQ3pELE1BQU0sU0FBUyxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyRCxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUUzQyxxREFBcUQ7WUFDckQsSUFBSSxhQUFhLEtBQUssZ0NBQWdDLEVBQUUsQ0FBQztnQkFDckQsT0FBTyxlQUFlLENBQUM7WUFDM0IsQ0FBQztZQUNELElBQUksYUFBYSxLQUFLLGtCQUFrQixFQUFFLENBQUM7Z0JBQ3ZDLE9BQU8sT0FBTyxDQUFDO1lBQ25CLENBQUM7WUFDRCxJQUNJLGFBQWEsS0FBSywwQkFBMEI7Z0JBQzVDLGFBQWEsS0FBSywyQkFBMkIsRUFDL0MsQ0FBQztnQkFDQyxPQUFPLFdBQVcsQ0FBQztZQUN2QixDQUFDO1lBRUQsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxFQUFFLENBQUM7Z0JBQ2QsT0FBTyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsQ0FBQztZQUNELE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUM3RCxJQUFJLFdBQVcsRUFBRSxDQUFDO2dCQUNkLE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLElBQWM7SUFDcEMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGFBQWEsRUFBRSxDQUFDO1FBQzlCLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFLENBQUM7UUFDM0IsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb2N1bWVudE5vZGUsIGdldE9wZXJhdGlvbkFTVCwgTmFtZWRUeXBlTm9kZSwgVHlwZU5vZGUgfSBmcm9tICdncmFwaHFsJztcclxuXHJcbmNvbnN0IENSRUFURV9FTlRJVFlfUkVHRVggPSAvQ3JlYXRlKFtBLVphLXpdKylJbnB1dC87XHJcbmNvbnN0IFVQREFURV9FTlRJVFlfUkVHRVggPSAvVXBkYXRlKFtBLVphLXpdKylJbnB1dC87XHJcblxyXG4vKipcclxuICogQ2hlY2tzIHRoZSBjdXJyZW50IGRvY3VtZW50Tm9kZSBmb3IgYW4gb3BlcmF0aW9uIHdpdGggYSB2YXJpYWJsZSBuYW1lZCBcIkNyZWF0ZTxFbnRpdHk+SW5wdXRcIiBvciBcIlVwZGF0ZTxFbnRpdHk+SW5wdXRcIlxyXG4gKiBhbmQgaWYgYSBtYXRjaCBpcyBmb3VuZCwgcmV0dXJucyB0aGUgPEVudGl0eT4gbmFtZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0VudGl0eUNyZWF0ZU9yVXBkYXRlTXV0YXRpb24oZG9jdW1lbnROb2RlOiBEb2N1bWVudE5vZGUpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3Qgb3BlcmF0aW9uRGVmID0gZ2V0T3BlcmF0aW9uQVNUKGRvY3VtZW50Tm9kZSwgbnVsbCk7XHJcbiAgICBpZiAob3BlcmF0aW9uRGVmICYmIG9wZXJhdGlvbkRlZi52YXJpYWJsZURlZmluaXRpb25zKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCB2YXJpYWJsZURlZiBvZiBvcGVyYXRpb25EZWYudmFyaWFibGVEZWZpbml0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lZFR5cGUgPSBleHRyYWN0SW5wdXRUeXBlKHZhcmlhYmxlRGVmLnR5cGUpO1xyXG4gICAgICAgICAgICBjb25zdCBpbnB1dFR5cGVOYW1lID0gbmFtZWRUeXBlLm5hbWUudmFsdWU7XHJcblxyXG4gICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2VzIHdoaWNoIGRvbid0IGZvbGxvdyB0aGUgdXN1YWwgcGF0dGVyblxyXG4gICAgICAgICAgICBpZiAoaW5wdXRUeXBlTmFtZSA9PT0gJ1VwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3JJbnB1dCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnQWRtaW5pc3RyYXRvcic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlucHV0VHlwZU5hbWUgPT09ICdNb2RpZnlPcmRlcklucHV0Jykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdPcmRlcic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgaW5wdXRUeXBlTmFtZSA9PT0gJ0FkZEl0ZW1Ub0RyYWZ0T3JkZXJJbnB1dCcgfHxcclxuICAgICAgICAgICAgICAgIGlucHV0VHlwZU5hbWUgPT09ICdBZGp1c3REcmFmdE9yZGVyTGluZUlucHV0J1xyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnT3JkZXJMaW5lJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgY3JlYXRlTWF0Y2ggPSBpbnB1dFR5cGVOYW1lLm1hdGNoKENSRUFURV9FTlRJVFlfUkVHRVgpO1xyXG4gICAgICAgICAgICBpZiAoY3JlYXRlTWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVNYXRjaFsxXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVNYXRjaCA9IGlucHV0VHlwZU5hbWUubWF0Y2goVVBEQVRFX0VOVElUWV9SRUdFWCk7XHJcbiAgICAgICAgICAgIGlmICh1cGRhdGVNYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZU1hdGNoWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBleHRyYWN0SW5wdXRUeXBlKHR5cGU6IFR5cGVOb2RlKTogTmFtZWRUeXBlTm9kZSB7XHJcbiAgICBpZiAodHlwZS5raW5kID09PSAnTm9uTnVsbFR5cGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RJbnB1dFR5cGUodHlwZS50eXBlKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlLmtpbmQgPT09ICdMaXN0VHlwZScpIHtcclxuICAgICAgICByZXR1cm4gZXh0cmFjdElucHV0VHlwZSh0eXBlLnR5cGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHR5cGU7XHJcbn1cclxuIl19