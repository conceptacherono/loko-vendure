import { gql } from 'apollo-angular';
import { ERROR_RESULT_FRAGMENT } from './shared-definitions';
export const DISCOUNT_FRAGMENT = gql `
    fragment Discount on Discount {
        adjustmentSource
        amount
        amountWithTax
        description
        type
    }
`;
export const PAYMENT_FRAGMENT = gql `
    fragment Payment on Payment {
        id
        transactionId
        amount
        method
        state
        metadata
    }
`;
export const REFUND_FRAGMENT = gql `
    fragment Refund on Refund {
        id
        state
        items
        shipping
        adjustment
        transactionId
        paymentId
    }
`;
export const ORDER_ADDRESS_FRAGMENT = gql `
    fragment OrderAddress on OrderAddress {
        fullName
        company
        streetLine1
        streetLine2
        city
        province
        postalCode
        country
        countryCode
        phoneNumber
    }
`;
export const ORDER_FRAGMENT = gql `
    fragment Order on Order {
        id
        createdAt
        updatedAt
        type
        orderPlacedAt
        code
        state
        nextStates
        total
        totalWithTax
        currencyCode
        customer {
            id
            firstName
            lastName
        }
        shippingLines {
            shippingMethod {
                name
            }
        }
    }
`;
export const FULFILLMENT_FRAGMENT = gql `
    fragment Fulfillment on Fulfillment {
        id
        state
        nextStates
        createdAt
        updatedAt
        method
        lines {
            orderLineId
            quantity
        }
        trackingCode
    }
`;
export const PAYMENT_WITH_REFUNDS_FRAGMENT = gql `
    fragment PaymentWithRefunds on Payment {
        id
        createdAt
        transactionId
        amount
        method
        state
        nextStates
        errorMessage
        metadata
        refunds {
            id
            createdAt
            state
            items
            adjustment
            total
            paymentId
            reason
            transactionId
            method
            metadata
            lines {
                orderLineId
                quantity
            }
        }
    }
`;
export const ORDER_LINE_FRAGMENT = gql `
    fragment OrderLine on OrderLine {
        id
        createdAt
        updatedAt
        featuredAsset {
            preview
        }
        productVariant {
            id
            name
            sku
            trackInventory
            stockOnHand
        }
        discounts {
            ...Discount
        }
        fulfillmentLines {
            fulfillmentId
            quantity
        }
        unitPrice
        unitPriceWithTax
        proratedUnitPrice
        proratedUnitPriceWithTax
        quantity
        orderPlacedQuantity
        linePrice
        lineTax
        linePriceWithTax
        discountedLinePrice
        discountedLinePriceWithTax
    }
`;
export const ORDER_DETAIL_FRAGMENT = gql `
    fragment OrderDetail on Order {
        id
        createdAt
        updatedAt
        type
        aggregateOrder {
            id
            code
        }
        sellerOrders {
            id
            code
            channels {
                id
                code
            }
        }
        code
        state
        nextStates
        active
        couponCodes
        customer {
            id
            firstName
            lastName
        }
        lines {
            ...OrderLine
        }
        surcharges {
            id
            sku
            description
            price
            priceWithTax
            taxRate
        }
        discounts {
            ...Discount
        }
        promotions {
            id
            couponCode
        }
        subTotal
        subTotalWithTax
        total
        totalWithTax
        currencyCode
        shipping
        shippingWithTax
        shippingLines {
            id
            discountedPriceWithTax
            shippingMethod {
                id
                code
                name
                fulfillmentHandlerCode
                description
            }
        }
        taxSummary {
            description
            taxBase
            taxRate
            taxTotal
        }
        shippingAddress {
            ...OrderAddress
        }
        billingAddress {
            ...OrderAddress
        }
        payments {
            ...PaymentWithRefunds
        }
        fulfillments {
            ...Fulfillment
        }
        modifications {
            id
            createdAt
            isSettled
            priceChange
            note
            payment {
                id
                amount
            }
            lines {
                orderLineId
                quantity
            }
            refund {
                id
                paymentId
                total
            }
            surcharges {
                id
            }
        }
    }
    ${DISCOUNT_FRAGMENT}
    ${ORDER_ADDRESS_FRAGMENT}
    ${FULFILLMENT_FRAGMENT}
    ${ORDER_LINE_FRAGMENT}
    ${PAYMENT_WITH_REFUNDS_FRAGMENT}
`;
export const GET_ORDERS_LIST = gql `
    query GetOrderList($options: OrderListOptions) {
        orders(options: $options) {
            items {
                ...Order
            }
            totalItems
        }
    }
    ${ORDER_FRAGMENT}
`;
export const GET_ORDER = gql `
    query GetOrder($id: ID!) {
        order(id: $id) {
            ...OrderDetail
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
`;
export const SETTLE_PAYMENT = gql `
    mutation SettlePayment($id: ID!) {
        settlePayment(id: $id) {
            ...Payment
            ...ErrorResult
            ... on SettlePaymentError {
                paymentErrorMessage
            }
            ... on PaymentStateTransitionError {
                transitionError
            }
            ... on OrderStateTransitionError {
                transitionError
            }
        }
    }
    ${ERROR_RESULT_FRAGMENT}
    ${PAYMENT_FRAGMENT}
`;
export const CANCEL_PAYMENT = gql `
    mutation CancelPayment($id: ID!) {
        cancelPayment(id: $id) {
            ...Payment
            ...ErrorResult
            ... on CancelPaymentError {
                paymentErrorMessage
            }
            ... on PaymentStateTransitionError {
                transitionError
            }
        }
    }
    ${ERROR_RESULT_FRAGMENT}
    ${PAYMENT_FRAGMENT}
`;
export const TRANSITION_PAYMENT_TO_STATE = gql `
    mutation TransitionPaymentToState($id: ID!, $state: String!) {
        transitionPaymentToState(id: $id, state: $state) {
            ...Payment
            ...ErrorResult
            ... on PaymentStateTransitionError {
                transitionError
            }
        }
    }
    ${PAYMENT_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const CREATE_FULFILLMENT = gql `
    mutation CreateFulfillment($input: FulfillOrderInput!) {
        addFulfillmentToOrder(input: $input) {
            ...Fulfillment
            ... on CreateFulfillmentError {
                errorCode
                message
                fulfillmentHandlerError
            }
            ... on FulfillmentStateTransitionError {
                errorCode
                message
                transitionError
            }
            ...ErrorResult
        }
    }
    ${FULFILLMENT_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const CANCEL_ORDER = gql `
    mutation CancelOrder($input: CancelOrderInput!) {
        cancelOrder(input: $input) {
            ...OrderDetail
            ...ErrorResult
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const REFUND_ORDER = gql `
    mutation RefundOrder($input: RefundOrderInput!) {
        refundOrder(input: $input) {
            ...Refund
            ...ErrorResult
        }
    }
    ${REFUND_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const SETTLE_REFUND = gql `
    mutation SettleRefund($input: SettleRefundInput!) {
        settleRefund(input: $input) {
            ...Refund
            ...ErrorResult
        }
    }
    ${REFUND_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const GET_ORDER_HISTORY = gql `
    query GetOrderHistory($id: ID!, $options: HistoryEntryListOptions) {
        order(id: $id) {
            id
            history(options: $options) {
                totalItems
                items {
                    id
                    type
                    createdAt
                    isPublic
                    administrator {
                        id
                        firstName
                        lastName
                    }
                    data
                }
            }
        }
    }
`;
export const ADD_NOTE_TO_ORDER = gql `
    mutation AddNoteToOrder($input: AddNoteToOrderInput!) {
        addNoteToOrder(input: $input) {
            id
        }
    }
`;
export const UPDATE_ORDER_NOTE = gql `
    mutation UpdateOrderNote($input: UpdateOrderNoteInput!) {
        updateOrderNote(input: $input) {
            id
            data
            isPublic
        }
    }
`;
export const DELETE_ORDER_NOTE = gql `
    mutation DeleteOrderNote($id: ID!) {
        deleteOrderNote(id: $id) {
            result
            message
        }
    }
`;
export const TRANSITION_ORDER_TO_STATE = gql `
    mutation TransitionOrderToState($id: ID!, $state: String!) {
        transitionOrderToState(id: $id, state: $state) {
            ...Order
            ...ErrorResult
            ... on OrderStateTransitionError {
                transitionError
            }
        }
    }
    ${ORDER_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const UPDATE_ORDER_CUSTOM_FIELDS = gql `
    mutation UpdateOrderCustomFields($input: UpdateOrderInput!) {
        setOrderCustomFields(input: $input) {
            ...Order
        }
    }
    ${ORDER_FRAGMENT}
`;
export const TRANSITION_FULFILLMENT_TO_STATE = gql `
    mutation TransitionFulfillmentToState($id: ID!, $state: String!) {
        transitionFulfillmentToState(id: $id, state: $state) {
            ...Fulfillment
            ...ErrorResult
            ... on FulfillmentStateTransitionError {
                transitionError
            }
        }
    }
    ${FULFILLMENT_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const MODIFY_ORDER = gql `
    mutation ModifyOrder($input: ModifyOrderInput!) {
        modifyOrder(input: $input) {
            ...OrderDetail
            ...ErrorResult
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const ADD_MANUAL_PAYMENT_TO_ORDER = gql `
    mutation AddManualPayment($input: ManualPaymentInput!) {
        addManualPaymentToOrder(input: $input) {
            ...OrderDetail
            ...ErrorResult
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const CREATE_DRAFT_ORDER = gql `
    mutation CreateDraftOrder {
        createDraftOrder {
            ...OrderDetail
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
`;
export const DELETE_DRAFT_ORDER = gql `
    mutation DeleteDraftOrder($orderId: ID!) {
        deleteDraftOrder(orderId: $orderId) {
            result
            message
        }
    }
`;
export const ADD_ITEM_TO_DRAFT_ORDER = gql `
    mutation AddItemToDraftOrder($orderId: ID!, $input: AddItemToDraftOrderInput!) {
        addItemToDraftOrder(orderId: $orderId, input: $input) {
            ...OrderDetail
            ...ErrorResult
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const ADJUST_DRAFT_ORDER_LINE = gql `
    mutation AdjustDraftOrderLine($orderId: ID!, $input: AdjustDraftOrderLineInput!) {
        adjustDraftOrderLine(orderId: $orderId, input: $input) {
            ...OrderDetail
            ...ErrorResult
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const REMOVE_DRAFT_ORDER_LINE = gql `
    mutation RemoveDraftOrderLine($orderId: ID!, $orderLineId: ID!) {
        removeDraftOrderLine(orderId: $orderId, orderLineId: $orderLineId) {
            ...OrderDetail
            ...ErrorResult
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const SET_CUSTOMER_FOR_DRAFT_ORDER = gql `
    mutation SetCustomerForDraftOrder($orderId: ID!, $customerId: ID, $input: CreateCustomerInput) {
        setCustomerForDraftOrder(orderId: $orderId, customerId: $customerId, input: $input) {
            ...OrderDetail
            ...ErrorResult
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const SET_SHIPPING_ADDRESS_FOR_DRAFT_ORDER = gql `
    mutation SetDraftOrderShippingAddress($orderId: ID!, $input: CreateAddressInput!) {
        setDraftOrderShippingAddress(orderId: $orderId, input: $input) {
            ...OrderDetail
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
`;
export const SET_BILLING_ADDRESS_FOR_DRAFT_ORDER = gql `
    mutation SetDraftOrderBillingAddress($orderId: ID!, $input: CreateAddressInput!) {
        setDraftOrderBillingAddress(orderId: $orderId, input: $input) {
            ...OrderDetail
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
`;
export const UNSET_SHIPPING_ADDRESS_FOR_DRAFT_ORDER = gql `
    mutation UnsetDraftOrderShippingAddress($orderId: ID!) {
        unsetDraftOrderShippingAddress(orderId: $orderId) {
            ...OrderDetail
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
`;
export const UNSET_BILLING_ADDRESS_FOR_DRAFT_ORDER = gql `
    mutation UnsetDraftOrderBillingAddress($orderId: ID!) {
        unsetDraftOrderBillingAddress(orderId: $orderId) {
            ...OrderDetail
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
`;
export const APPLY_COUPON_CODE_TO_DRAFT_ORDER = gql `
    mutation ApplyCouponCodeToDraftOrder($orderId: ID!, $couponCode: String!) {
        applyCouponCodeToDraftOrder(orderId: $orderId, couponCode: $couponCode) {
            ...OrderDetail
            ...ErrorResult
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const REMOVE_COUPON_CODE_FROM_DRAFT_ORDER = gql `
    mutation RemoveCouponCodeFromDraftOrder($orderId: ID!, $couponCode: String!) {
        removeCouponCodeFromDraftOrder(orderId: $orderId, couponCode: $couponCode) {
            ...OrderDetail
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
`;
export const DRAFT_ORDER_ELIGIBLE_SHIPPING_METHODS = gql `
    query DraftOrderEligibleShippingMethods($orderId: ID!) {
        eligibleShippingMethodsForDraftOrder(orderId: $orderId) {
            id
            name
            code
            description
            price
            priceWithTax
            metadata
        }
    }
`;
export const SET_DRAFT_ORDER_SHIPPING_METHOD = gql `
    mutation SetDraftOrderShippingMethod($orderId: ID!, $shippingMethodId: ID!) {
        setDraftOrderShippingMethod(orderId: $orderId, shippingMethodId: $shippingMethodId) {
            ...OrderDetail
            ...ErrorResult
        }
    }
    ${ORDER_DETAIL_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItZGVmaW5pdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvZGVmaW5pdGlvbnMvb3JkZXItZGVmaW5pdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTdELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Q0FRbkMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7O0NBU2xDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7O0NBVWpDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Ozs7Ozs7Q0FheEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXdCaEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Q0FjdEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E2Qi9DLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrQ3JDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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Ozs7Ozs7TUFPcEMscUJBQXFCO01BQ3JCLHFCQUFxQjtDQUMxQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O01BT3BDLHFCQUFxQjtNQUNyQixxQkFBcUI7Q0FDMUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLEdBQUcsQ0FBQTs7Ozs7OztNQU96QyxxQkFBcUI7TUFDckIscUJBQXFCO0NBQzFCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQ0FBb0MsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU1qRCxxQkFBcUI7Q0FDMUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUFHLEdBQUcsQ0FBQTs7Ozs7O01BTWhELHFCQUFxQjtDQUMxQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0NBQXNDLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNbkQscUJBQXFCO0NBQzFCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQ0FBcUMsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU1sRCxxQkFBcUI7Q0FDMUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUFHLEdBQUcsQ0FBQTs7Ozs7OztNQU83QyxxQkFBcUI7TUFDckIscUJBQXFCO0NBQzFCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU1oRCxxQkFBcUI7Q0FDMUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFDQUFxQyxHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7O0NBWXZELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7TUFPNUMscUJBQXFCO01BQ3JCLHFCQUFxQjtDQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ3FsIH0gZnJvbSAnYXBvbGxvLWFuZ3VsYXInO1xyXG5cclxuaW1wb3J0IHsgRVJST1JfUkVTVUxUX0ZSQUdNRU5UIH0gZnJvbSAnLi9zaGFyZWQtZGVmaW5pdGlvbnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IERJU0NPVU5UX0ZSQUdNRU5UID0gZ3FsYFxyXG4gICAgZnJhZ21lbnQgRGlzY291bnQgb24gRGlzY291bnQge1xyXG4gICAgICAgIGFkanVzdG1lbnRTb3VyY2VcclxuICAgICAgICBhbW91bnRcclxuICAgICAgICBhbW91bnRXaXRoVGF4XHJcbiAgICAgICAgZGVzY3JpcHRpb25cclxuICAgICAgICB0eXBlXHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgUEFZTUVOVF9GUkFHTUVOVCA9IGdxbGBcclxuICAgIGZyYWdtZW50IFBheW1lbnQgb24gUGF5bWVudCB7XHJcbiAgICAgICAgaWRcclxuICAgICAgICB0cmFuc2FjdGlvbklkXHJcbiAgICAgICAgYW1vdW50XHJcbiAgICAgICAgbWV0aG9kXHJcbiAgICAgICAgc3RhdGVcclxuICAgICAgICBtZXRhZGF0YVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJFRlVORF9GUkFHTUVOVCA9IGdxbGBcclxuICAgIGZyYWdtZW50IFJlZnVuZCBvbiBSZWZ1bmQge1xyXG4gICAgICAgIGlkXHJcbiAgICAgICAgc3RhdGVcclxuICAgICAgICBpdGVtc1xyXG4gICAgICAgIHNoaXBwaW5nXHJcbiAgICAgICAgYWRqdXN0bWVudFxyXG4gICAgICAgIHRyYW5zYWN0aW9uSWRcclxuICAgICAgICBwYXltZW50SWRcclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBPUkRFUl9BRERSRVNTX0ZSQUdNRU5UID0gZ3FsYFxyXG4gICAgZnJhZ21lbnQgT3JkZXJBZGRyZXNzIG9uIE9yZGVyQWRkcmVzcyB7XHJcbiAgICAgICAgZnVsbE5hbWVcclxuICAgICAgICBjb21wYW55XHJcbiAgICAgICAgc3RyZWV0TGluZTFcclxuICAgICAgICBzdHJlZXRMaW5lMlxyXG4gICAgICAgIGNpdHlcclxuICAgICAgICBwcm92aW5jZVxyXG4gICAgICAgIHBvc3RhbENvZGVcclxuICAgICAgICBjb3VudHJ5XHJcbiAgICAgICAgY291bnRyeUNvZGVcclxuICAgICAgICBwaG9uZU51bWJlclxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IE9SREVSX0ZSQUdNRU5UID0gZ3FsYFxyXG4gICAgZnJhZ21lbnQgT3JkZXIgb24gT3JkZXIge1xyXG4gICAgICAgIGlkXHJcbiAgICAgICAgY3JlYXRlZEF0XHJcbiAgICAgICAgdXBkYXRlZEF0XHJcbiAgICAgICAgdHlwZVxyXG4gICAgICAgIG9yZGVyUGxhY2VkQXRcclxuICAgICAgICBjb2RlXHJcbiAgICAgICAgc3RhdGVcclxuICAgICAgICBuZXh0U3RhdGVzXHJcbiAgICAgICAgdG90YWxcclxuICAgICAgICB0b3RhbFdpdGhUYXhcclxuICAgICAgICBjdXJyZW5jeUNvZGVcclxuICAgICAgICBjdXN0b21lciB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGZpcnN0TmFtZVxyXG4gICAgICAgICAgICBsYXN0TmFtZVxyXG4gICAgICAgIH1cclxuICAgICAgICBzaGlwcGluZ0xpbmVzIHtcclxuICAgICAgICAgICAgc2hpcHBpbmdNZXRob2Qge1xyXG4gICAgICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEZVTEZJTExNRU5UX0ZSQUdNRU5UID0gZ3FsYFxyXG4gICAgZnJhZ21lbnQgRnVsZmlsbG1lbnQgb24gRnVsZmlsbG1lbnQge1xyXG4gICAgICAgIGlkXHJcbiAgICAgICAgc3RhdGVcclxuICAgICAgICBuZXh0U3RhdGVzXHJcbiAgICAgICAgY3JlYXRlZEF0XHJcbiAgICAgICAgdXBkYXRlZEF0XHJcbiAgICAgICAgbWV0aG9kXHJcbiAgICAgICAgbGluZXMge1xyXG4gICAgICAgICAgICBvcmRlckxpbmVJZFxyXG4gICAgICAgICAgICBxdWFudGl0eVxyXG4gICAgICAgIH1cclxuICAgICAgICB0cmFja2luZ0NvZGVcclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBQQVlNRU5UX1dJVEhfUkVGVU5EU19GUkFHTUVOVCA9IGdxbGBcclxuICAgIGZyYWdtZW50IFBheW1lbnRXaXRoUmVmdW5kcyBvbiBQYXltZW50IHtcclxuICAgICAgICBpZFxyXG4gICAgICAgIGNyZWF0ZWRBdFxyXG4gICAgICAgIHRyYW5zYWN0aW9uSWRcclxuICAgICAgICBhbW91bnRcclxuICAgICAgICBtZXRob2RcclxuICAgICAgICBzdGF0ZVxyXG4gICAgICAgIG5leHRTdGF0ZXNcclxuICAgICAgICBlcnJvck1lc3NhZ2VcclxuICAgICAgICBtZXRhZGF0YVxyXG4gICAgICAgIHJlZnVuZHMge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBjcmVhdGVkQXRcclxuICAgICAgICAgICAgc3RhdGVcclxuICAgICAgICAgICAgaXRlbXNcclxuICAgICAgICAgICAgYWRqdXN0bWVudFxyXG4gICAgICAgICAgICB0b3RhbFxyXG4gICAgICAgICAgICBwYXltZW50SWRcclxuICAgICAgICAgICAgcmVhc29uXHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSWRcclxuICAgICAgICAgICAgbWV0aG9kXHJcbiAgICAgICAgICAgIG1ldGFkYXRhXHJcbiAgICAgICAgICAgIGxpbmVzIHtcclxuICAgICAgICAgICAgICAgIG9yZGVyTGluZUlkXHJcbiAgICAgICAgICAgICAgICBxdWFudGl0eVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IE9SREVSX0xJTkVfRlJBR01FTlQgPSBncWxgXHJcbiAgICBmcmFnbWVudCBPcmRlckxpbmUgb24gT3JkZXJMaW5lIHtcclxuICAgICAgICBpZFxyXG4gICAgICAgIGNyZWF0ZWRBdFxyXG4gICAgICAgIHVwZGF0ZWRBdFxyXG4gICAgICAgIGZlYXR1cmVkQXNzZXQge1xyXG4gICAgICAgICAgICBwcmV2aWV3XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb2R1Y3RWYXJpYW50IHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgICAgICBza3VcclxuICAgICAgICAgICAgdHJhY2tJbnZlbnRvcnlcclxuICAgICAgICAgICAgc3RvY2tPbkhhbmRcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlzY291bnRzIHtcclxuICAgICAgICAgICAgLi4uRGlzY291bnRcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVsZmlsbG1lbnRMaW5lcyB7XHJcbiAgICAgICAgICAgIGZ1bGZpbGxtZW50SWRcclxuICAgICAgICAgICAgcXVhbnRpdHlcclxuICAgICAgICB9XHJcbiAgICAgICAgdW5pdFByaWNlXHJcbiAgICAgICAgdW5pdFByaWNlV2l0aFRheFxyXG4gICAgICAgIHByb3JhdGVkVW5pdFByaWNlXHJcbiAgICAgICAgcHJvcmF0ZWRVbml0UHJpY2VXaXRoVGF4XHJcbiAgICAgICAgcXVhbnRpdHlcclxuICAgICAgICBvcmRlclBsYWNlZFF1YW50aXR5XHJcbiAgICAgICAgbGluZVByaWNlXHJcbiAgICAgICAgbGluZVRheFxyXG4gICAgICAgIGxpbmVQcmljZVdpdGhUYXhcclxuICAgICAgICBkaXNjb3VudGVkTGluZVByaWNlXHJcbiAgICAgICAgZGlzY291bnRlZExpbmVQcmljZVdpdGhUYXhcclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBPUkRFUl9ERVRBSUxfRlJBR01FTlQgPSBncWxgXHJcbiAgICBmcmFnbWVudCBPcmRlckRldGFpbCBvbiBPcmRlciB7XHJcbiAgICAgICAgaWRcclxuICAgICAgICBjcmVhdGVkQXRcclxuICAgICAgICB1cGRhdGVkQXRcclxuICAgICAgICB0eXBlXHJcbiAgICAgICAgYWdncmVnYXRlT3JkZXIge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBjb2RlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbGxlck9yZGVycyB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGNvZGVcclxuICAgICAgICAgICAgY2hhbm5lbHMge1xyXG4gICAgICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgICAgIGNvZGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb2RlXHJcbiAgICAgICAgc3RhdGVcclxuICAgICAgICBuZXh0U3RhdGVzXHJcbiAgICAgICAgYWN0aXZlXHJcbiAgICAgICAgY291cG9uQ29kZXNcclxuICAgICAgICBjdXN0b21lciB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGZpcnN0TmFtZVxyXG4gICAgICAgICAgICBsYXN0TmFtZVxyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lcyB7XHJcbiAgICAgICAgICAgIC4uLk9yZGVyTGluZVxyXG4gICAgICAgIH1cclxuICAgICAgICBzdXJjaGFyZ2VzIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgc2t1XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgIHByaWNlXHJcbiAgICAgICAgICAgIHByaWNlV2l0aFRheFxyXG4gICAgICAgICAgICB0YXhSYXRlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpc2NvdW50cyB7XHJcbiAgICAgICAgICAgIC4uLkRpc2NvdW50XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb21vdGlvbnMge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBjb3Vwb25Db2RlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1YlRvdGFsXHJcbiAgICAgICAgc3ViVG90YWxXaXRoVGF4XHJcbiAgICAgICAgdG90YWxcclxuICAgICAgICB0b3RhbFdpdGhUYXhcclxuICAgICAgICBjdXJyZW5jeUNvZGVcclxuICAgICAgICBzaGlwcGluZ1xyXG4gICAgICAgIHNoaXBwaW5nV2l0aFRheFxyXG4gICAgICAgIHNoaXBwaW5nTGluZXMge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBkaXNjb3VudGVkUHJpY2VXaXRoVGF4XHJcbiAgICAgICAgICAgIHNoaXBwaW5nTWV0aG9kIHtcclxuICAgICAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgICAgICBjb2RlXHJcbiAgICAgICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgICAgICAgICBmdWxmaWxsbWVudEhhbmRsZXJDb2RlXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRheFN1bW1hcnkge1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICB0YXhCYXNlXHJcbiAgICAgICAgICAgIHRheFJhdGVcclxuICAgICAgICAgICAgdGF4VG90YWxcclxuICAgICAgICB9XHJcbiAgICAgICAgc2hpcHBpbmdBZGRyZXNzIHtcclxuICAgICAgICAgICAgLi4uT3JkZXJBZGRyZXNzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzIHtcclxuICAgICAgICAgICAgLi4uT3JkZXJBZGRyZXNzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBheW1lbnRzIHtcclxuICAgICAgICAgICAgLi4uUGF5bWVudFdpdGhSZWZ1bmRzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bGZpbGxtZW50cyB7XHJcbiAgICAgICAgICAgIC4uLkZ1bGZpbGxtZW50XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vZGlmaWNhdGlvbnMge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBjcmVhdGVkQXRcclxuICAgICAgICAgICAgaXNTZXR0bGVkXHJcbiAgICAgICAgICAgIHByaWNlQ2hhbmdlXHJcbiAgICAgICAgICAgIG5vdGVcclxuICAgICAgICAgICAgcGF5bWVudCB7XHJcbiAgICAgICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICAgICAgYW1vdW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGluZXMge1xyXG4gICAgICAgICAgICAgICAgb3JkZXJMaW5lSWRcclxuICAgICAgICAgICAgICAgIHF1YW50aXR5XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVmdW5kIHtcclxuICAgICAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgICAgICBwYXltZW50SWRcclxuICAgICAgICAgICAgICAgIHRvdGFsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3VyY2hhcmdlcyB7XHJcbiAgICAgICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtESVNDT1VOVF9GUkFHTUVOVH1cclxuICAgICR7T1JERVJfQUREUkVTU19GUkFHTUVOVH1cclxuICAgICR7RlVMRklMTE1FTlRfRlJBR01FTlR9XHJcbiAgICAke09SREVSX0xJTkVfRlJBR01FTlR9XHJcbiAgICAke1BBWU1FTlRfV0lUSF9SRUZVTkRTX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9PUkRFUlNfTElTVCA9IGdxbGBcclxuICAgIHF1ZXJ5IEdldE9yZGVyTGlzdCgkb3B0aW9uczogT3JkZXJMaXN0T3B0aW9ucykge1xyXG4gICAgICAgIG9yZGVycyhvcHRpb25zOiAkb3B0aW9ucykge1xyXG4gICAgICAgICAgICBpdGVtcyB7XHJcbiAgICAgICAgICAgICAgICAuLi5PcmRlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvdGFsSXRlbXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke09SREVSX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9PUkRFUiA9IGdxbGBcclxuICAgIHF1ZXJ5IEdldE9yZGVyKCRpZDogSUQhKSB7XHJcbiAgICAgICAgb3JkZXIoaWQ6ICRpZCkge1xyXG4gICAgICAgICAgICAuLi5PcmRlckRldGFpbFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7T1JERVJfREVUQUlMX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVFRMRV9QQVlNRU5UID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gU2V0dGxlUGF5bWVudCgkaWQ6IElEISkge1xyXG4gICAgICAgIHNldHRsZVBheW1lbnQoaWQ6ICRpZCkge1xyXG4gICAgICAgICAgICAuLi5QYXltZW50XHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgICAgIC4uLiBvbiBTZXR0bGVQYXltZW50RXJyb3Ige1xyXG4gICAgICAgICAgICAgICAgcGF5bWVudEVycm9yTWVzc2FnZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC4uLiBvbiBQYXltZW50U3RhdGVUcmFuc2l0aW9uRXJyb3Ige1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVycm9yXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLi4uIG9uIE9yZGVyU3RhdGVUcmFuc2l0aW9uRXJyb3Ige1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVycm9yXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0VSUk9SX1JFU1VMVF9GUkFHTUVOVH1cclxuICAgICR7UEFZTUVOVF9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBDQU5DRUxfUEFZTUVOVCA9IGdxbGBcclxuICAgIG11dGF0aW9uIENhbmNlbFBheW1lbnQoJGlkOiBJRCEpIHtcclxuICAgICAgICBjYW5jZWxQYXltZW50KGlkOiAkaWQpIHtcclxuICAgICAgICAgICAgLi4uUGF5bWVudFxyXG4gICAgICAgICAgICAuLi5FcnJvclJlc3VsdFxyXG4gICAgICAgICAgICAuLi4gb24gQ2FuY2VsUGF5bWVudEVycm9yIHtcclxuICAgICAgICAgICAgICAgIHBheW1lbnRFcnJvck1lc3NhZ2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAuLi4gb24gUGF5bWVudFN0YXRlVHJhbnNpdGlvbkVycm9yIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25FcnJvclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtFUlJPUl9SRVNVTFRfRlJBR01FTlR9XHJcbiAgICAke1BBWU1FTlRfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVFJBTlNJVElPTl9QQVlNRU5UX1RPX1NUQVRFID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gVHJhbnNpdGlvblBheW1lbnRUb1N0YXRlKCRpZDogSUQhLCAkc3RhdGU6IFN0cmluZyEpIHtcclxuICAgICAgICB0cmFuc2l0aW9uUGF5bWVudFRvU3RhdGUoaWQ6ICRpZCwgc3RhdGU6ICRzdGF0ZSkge1xyXG4gICAgICAgICAgICAuLi5QYXltZW50XHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgICAgIC4uLiBvbiBQYXltZW50U3RhdGVUcmFuc2l0aW9uRXJyb3Ige1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVycm9yXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke1BBWU1FTlRfRlJBR01FTlR9XHJcbiAgICAke0VSUk9SX1JFU1VMVF9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBDUkVBVEVfRlVMRklMTE1FTlQgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBDcmVhdGVGdWxmaWxsbWVudCgkaW5wdXQ6IEZ1bGZpbGxPcmRlcklucHV0ISkge1xyXG4gICAgICAgIGFkZEZ1bGZpbGxtZW50VG9PcmRlcihpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLkZ1bGZpbGxtZW50XHJcbiAgICAgICAgICAgIC4uLiBvbiBDcmVhdGVGdWxmaWxsbWVudEVycm9yIHtcclxuICAgICAgICAgICAgICAgIGVycm9yQ29kZVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgZnVsZmlsbG1lbnRIYW5kbGVyRXJyb3JcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAuLi4gb24gRnVsZmlsbG1lbnRTdGF0ZVRyYW5zaXRpb25FcnJvciB7XHJcbiAgICAgICAgICAgICAgICBlcnJvckNvZGVcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25FcnJvclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtGVUxGSUxMTUVOVF9GUkFHTUVOVH1cclxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IENBTkNFTF9PUkRFUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIENhbmNlbE9yZGVyKCRpbnB1dDogQ2FuY2VsT3JkZXJJbnB1dCEpIHtcclxuICAgICAgICBjYW5jZWxPcmRlcihpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLk9yZGVyRGV0YWlsXHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtPUkRFUl9ERVRBSUxfRlJBR01FTlR9XHJcbiAgICAke0VSUk9SX1JFU1VMVF9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBSRUZVTkRfT1JERVIgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBSZWZ1bmRPcmRlcigkaW5wdXQ6IFJlZnVuZE9yZGVySW5wdXQhKSB7XHJcbiAgICAgICAgcmVmdW5kT3JkZXIoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICAuLi5SZWZ1bmRcclxuICAgICAgICAgICAgLi4uRXJyb3JSZXN1bHRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke1JFRlVORF9GUkFHTUVOVH1cclxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVFRMRV9SRUZVTkQgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBTZXR0bGVSZWZ1bmQoJGlucHV0OiBTZXR0bGVSZWZ1bmRJbnB1dCEpIHtcclxuICAgICAgICBzZXR0bGVSZWZ1bmQoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICAuLi5SZWZ1bmRcclxuICAgICAgICAgICAgLi4uRXJyb3JSZXN1bHRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke1JFRlVORF9GUkFHTUVOVH1cclxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9PUkRFUl9ISVNUT1JZID0gZ3FsYFxyXG4gICAgcXVlcnkgR2V0T3JkZXJIaXN0b3J5KCRpZDogSUQhLCAkb3B0aW9uczogSGlzdG9yeUVudHJ5TGlzdE9wdGlvbnMpIHtcclxuICAgICAgICBvcmRlcihpZDogJGlkKSB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGhpc3Rvcnkob3B0aW9uczogJG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsSXRlbXNcclxuICAgICAgICAgICAgICAgIGl0ZW1zIHtcclxuICAgICAgICAgICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkQXRcclxuICAgICAgICAgICAgICAgICAgICBpc1B1YmxpY1xyXG4gICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0b3Ige1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFERF9OT1RFX1RPX09SREVSID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gQWRkTm90ZVRvT3JkZXIoJGlucHV0OiBBZGROb3RlVG9PcmRlcklucHV0ISkge1xyXG4gICAgICAgIGFkZE5vdGVUb09yZGVyKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVVBEQVRFX09SREVSX05PVEUgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBVcGRhdGVPcmRlck5vdGUoJGlucHV0OiBVcGRhdGVPcmRlck5vdGVJbnB1dCEpIHtcclxuICAgICAgICB1cGRhdGVPcmRlck5vdGUoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgIGlzUHVibGljXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFTEVURV9PUkRFUl9OT1RFID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gRGVsZXRlT3JkZXJOb3RlKCRpZDogSUQhKSB7XHJcbiAgICAgICAgZGVsZXRlT3JkZXJOb3RlKGlkOiAkaWQpIHtcclxuICAgICAgICAgICAgcmVzdWx0XHJcbiAgICAgICAgICAgIG1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVFJBTlNJVElPTl9PUkRFUl9UT19TVEFURSA9IGdxbGBcclxuICAgIG11dGF0aW9uIFRyYW5zaXRpb25PcmRlclRvU3RhdGUoJGlkOiBJRCEsICRzdGF0ZTogU3RyaW5nISkge1xyXG4gICAgICAgIHRyYW5zaXRpb25PcmRlclRvU3RhdGUoaWQ6ICRpZCwgc3RhdGU6ICRzdGF0ZSkge1xyXG4gICAgICAgICAgICAuLi5PcmRlclxyXG4gICAgICAgICAgICAuLi5FcnJvclJlc3VsdFxyXG4gICAgICAgICAgICAuLi4gb24gT3JkZXJTdGF0ZVRyYW5zaXRpb25FcnJvciB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRXJyb3JcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7T1JERVJfRlJBR01FTlR9XHJcbiAgICAke0VSUk9SX1JFU1VMVF9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBVUERBVEVfT1JERVJfQ1VTVE9NX0ZJRUxEUyA9IGdxbGBcclxuICAgIG11dGF0aW9uIFVwZGF0ZU9yZGVyQ3VzdG9tRmllbGRzKCRpbnB1dDogVXBkYXRlT3JkZXJJbnB1dCEpIHtcclxuICAgICAgICBzZXRPcmRlckN1c3RvbUZpZWxkcyhpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLk9yZGVyXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtPUkRFUl9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBUUkFOU0lUSU9OX0ZVTEZJTExNRU5UX1RPX1NUQVRFID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gVHJhbnNpdGlvbkZ1bGZpbGxtZW50VG9TdGF0ZSgkaWQ6IElEISwgJHN0YXRlOiBTdHJpbmchKSB7XHJcbiAgICAgICAgdHJhbnNpdGlvbkZ1bGZpbGxtZW50VG9TdGF0ZShpZDogJGlkLCBzdGF0ZTogJHN0YXRlKSB7XHJcbiAgICAgICAgICAgIC4uLkZ1bGZpbGxtZW50XHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgICAgIC4uLiBvbiBGdWxmaWxsbWVudFN0YXRlVHJhbnNpdGlvbkVycm9yIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25FcnJvclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtGVUxGSUxMTUVOVF9GUkFHTUVOVH1cclxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1PRElGWV9PUkRFUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIE1vZGlmeU9yZGVyKCRpbnB1dDogTW9kaWZ5T3JkZXJJbnB1dCEpIHtcclxuICAgICAgICBtb2RpZnlPcmRlcihpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLk9yZGVyRGV0YWlsXHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtPUkRFUl9ERVRBSUxfRlJBR01FTlR9XHJcbiAgICAke0VSUk9SX1JFU1VMVF9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBBRERfTUFOVUFMX1BBWU1FTlRfVE9fT1JERVIgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBBZGRNYW51YWxQYXltZW50KCRpbnB1dDogTWFudWFsUGF5bWVudElucHV0ISkge1xyXG4gICAgICAgIGFkZE1hbnVhbFBheW1lbnRUb09yZGVyKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgLi4uT3JkZXJEZXRhaWxcclxuICAgICAgICAgICAgLi4uRXJyb3JSZXN1bHRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke09SREVSX0RFVEFJTF9GUkFHTUVOVH1cclxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IENSRUFURV9EUkFGVF9PUkRFUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIENyZWF0ZURyYWZ0T3JkZXIge1xyXG4gICAgICAgIGNyZWF0ZURyYWZ0T3JkZXIge1xyXG4gICAgICAgICAgICAuLi5PcmRlckRldGFpbFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7T1JERVJfREVUQUlMX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFTEVURV9EUkFGVF9PUkRFUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIERlbGV0ZURyYWZ0T3JkZXIoJG9yZGVySWQ6IElEISkge1xyXG4gICAgICAgIGRlbGV0ZURyYWZ0T3JkZXIob3JkZXJJZDogJG9yZGVySWQpIHtcclxuICAgICAgICAgICAgcmVzdWx0XHJcbiAgICAgICAgICAgIG1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQUREX0lURU1fVE9fRFJBRlRfT1JERVIgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBBZGRJdGVtVG9EcmFmdE9yZGVyKCRvcmRlcklkOiBJRCEsICRpbnB1dDogQWRkSXRlbVRvRHJhZnRPcmRlcklucHV0ISkge1xyXG4gICAgICAgIGFkZEl0ZW1Ub0RyYWZ0T3JkZXIob3JkZXJJZDogJG9yZGVySWQsIGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgLi4uT3JkZXJEZXRhaWxcclxuICAgICAgICAgICAgLi4uRXJyb3JSZXN1bHRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke09SREVSX0RFVEFJTF9GUkFHTUVOVH1cclxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFESlVTVF9EUkFGVF9PUkRFUl9MSU5FID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gQWRqdXN0RHJhZnRPcmRlckxpbmUoJG9yZGVySWQ6IElEISwgJGlucHV0OiBBZGp1c3REcmFmdE9yZGVyTGluZUlucHV0ISkge1xyXG4gICAgICAgIGFkanVzdERyYWZ0T3JkZXJMaW5lKG9yZGVySWQ6ICRvcmRlcklkLCBpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLk9yZGVyRGV0YWlsXHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtPUkRFUl9ERVRBSUxfRlJBR01FTlR9XHJcbiAgICAke0VSUk9SX1JFU1VMVF9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBSRU1PVkVfRFJBRlRfT1JERVJfTElORSA9IGdxbGBcclxuICAgIG11dGF0aW9uIFJlbW92ZURyYWZ0T3JkZXJMaW5lKCRvcmRlcklkOiBJRCEsICRvcmRlckxpbmVJZDogSUQhKSB7XHJcbiAgICAgICAgcmVtb3ZlRHJhZnRPcmRlckxpbmUob3JkZXJJZDogJG9yZGVySWQsIG9yZGVyTGluZUlkOiAkb3JkZXJMaW5lSWQpIHtcclxuICAgICAgICAgICAgLi4uT3JkZXJEZXRhaWxcclxuICAgICAgICAgICAgLi4uRXJyb3JSZXN1bHRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke09SREVSX0RFVEFJTF9GUkFHTUVOVH1cclxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVF9DVVNUT01FUl9GT1JfRFJBRlRfT1JERVIgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBTZXRDdXN0b21lckZvckRyYWZ0T3JkZXIoJG9yZGVySWQ6IElEISwgJGN1c3RvbWVySWQ6IElELCAkaW5wdXQ6IENyZWF0ZUN1c3RvbWVySW5wdXQpIHtcclxuICAgICAgICBzZXRDdXN0b21lckZvckRyYWZ0T3JkZXIob3JkZXJJZDogJG9yZGVySWQsIGN1c3RvbWVySWQ6ICRjdXN0b21lcklkLCBpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLk9yZGVyRGV0YWlsXHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtPUkRFUl9ERVRBSUxfRlJBR01FTlR9XHJcbiAgICAke0VSUk9SX1JFU1VMVF9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTRVRfU0hJUFBJTkdfQUREUkVTU19GT1JfRFJBRlRfT1JERVIgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBTZXREcmFmdE9yZGVyU2hpcHBpbmdBZGRyZXNzKCRvcmRlcklkOiBJRCEsICRpbnB1dDogQ3JlYXRlQWRkcmVzc0lucHV0ISkge1xyXG4gICAgICAgIHNldERyYWZ0T3JkZXJTaGlwcGluZ0FkZHJlc3Mob3JkZXJJZDogJG9yZGVySWQsIGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgLi4uT3JkZXJEZXRhaWxcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke09SREVSX0RFVEFJTF9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTRVRfQklMTElOR19BRERSRVNTX0ZPUl9EUkFGVF9PUkRFUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIFNldERyYWZ0T3JkZXJCaWxsaW5nQWRkcmVzcygkb3JkZXJJZDogSUQhLCAkaW5wdXQ6IENyZWF0ZUFkZHJlc3NJbnB1dCEpIHtcclxuICAgICAgICBzZXREcmFmdE9yZGVyQmlsbGluZ0FkZHJlc3Mob3JkZXJJZDogJG9yZGVySWQsIGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgLi4uT3JkZXJEZXRhaWxcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke09SREVSX0RFVEFJTF9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBVTlNFVF9TSElQUElOR19BRERSRVNTX0ZPUl9EUkFGVF9PUkRFUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIFVuc2V0RHJhZnRPcmRlclNoaXBwaW5nQWRkcmVzcygkb3JkZXJJZDogSUQhKSB7XHJcbiAgICAgICAgdW5zZXREcmFmdE9yZGVyU2hpcHBpbmdBZGRyZXNzKG9yZGVySWQ6ICRvcmRlcklkKSB7XHJcbiAgICAgICAgICAgIC4uLk9yZGVyRGV0YWlsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtPUkRFUl9ERVRBSUxfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVU5TRVRfQklMTElOR19BRERSRVNTX0ZPUl9EUkFGVF9PUkRFUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIFVuc2V0RHJhZnRPcmRlckJpbGxpbmdBZGRyZXNzKCRvcmRlcklkOiBJRCEpIHtcclxuICAgICAgICB1bnNldERyYWZ0T3JkZXJCaWxsaW5nQWRkcmVzcyhvcmRlcklkOiAkb3JkZXJJZCkge1xyXG4gICAgICAgICAgICAuLi5PcmRlckRldGFpbFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7T1JERVJfREVUQUlMX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFQUExZX0NPVVBPTl9DT0RFX1RPX0RSQUZUX09SREVSID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gQXBwbHlDb3Vwb25Db2RlVG9EcmFmdE9yZGVyKCRvcmRlcklkOiBJRCEsICRjb3Vwb25Db2RlOiBTdHJpbmchKSB7XHJcbiAgICAgICAgYXBwbHlDb3Vwb25Db2RlVG9EcmFmdE9yZGVyKG9yZGVySWQ6ICRvcmRlcklkLCBjb3Vwb25Db2RlOiAkY291cG9uQ29kZSkge1xyXG4gICAgICAgICAgICAuLi5PcmRlckRldGFpbFxyXG4gICAgICAgICAgICAuLi5FcnJvclJlc3VsdFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7T1JERVJfREVUQUlMX0ZSQUdNRU5UfVxyXG4gICAgJHtFUlJPUl9SRVNVTFRfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgUkVNT1ZFX0NPVVBPTl9DT0RFX0ZST01fRFJBRlRfT1JERVIgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBSZW1vdmVDb3Vwb25Db2RlRnJvbURyYWZ0T3JkZXIoJG9yZGVySWQ6IElEISwgJGNvdXBvbkNvZGU6IFN0cmluZyEpIHtcclxuICAgICAgICByZW1vdmVDb3Vwb25Db2RlRnJvbURyYWZ0T3JkZXIob3JkZXJJZDogJG9yZGVySWQsIGNvdXBvbkNvZGU6ICRjb3Vwb25Db2RlKSB7XHJcbiAgICAgICAgICAgIC4uLk9yZGVyRGV0YWlsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtPUkRFUl9ERVRBSUxfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgRFJBRlRfT1JERVJfRUxJR0lCTEVfU0hJUFBJTkdfTUVUSE9EUyA9IGdxbGBcclxuICAgIHF1ZXJ5IERyYWZ0T3JkZXJFbGlnaWJsZVNoaXBwaW5nTWV0aG9kcygkb3JkZXJJZDogSUQhKSB7XHJcbiAgICAgICAgZWxpZ2libGVTaGlwcGluZ01ldGhvZHNGb3JEcmFmdE9yZGVyKG9yZGVySWQ6ICRvcmRlcklkKSB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIG5hbWVcclxuICAgICAgICAgICAgY29kZVxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICBwcmljZVxyXG4gICAgICAgICAgICBwcmljZVdpdGhUYXhcclxuICAgICAgICAgICAgbWV0YWRhdGFcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgU0VUX0RSQUZUX09SREVSX1NISVBQSU5HX01FVEhPRCA9IGdxbGBcclxuICAgIG11dGF0aW9uIFNldERyYWZ0T3JkZXJTaGlwcGluZ01ldGhvZCgkb3JkZXJJZDogSUQhLCAkc2hpcHBpbmdNZXRob2RJZDogSUQhKSB7XHJcbiAgICAgICAgc2V0RHJhZnRPcmRlclNoaXBwaW5nTWV0aG9kKG9yZGVySWQ6ICRvcmRlcklkLCBzaGlwcGluZ01ldGhvZElkOiAkc2hpcHBpbmdNZXRob2RJZCkge1xyXG4gICAgICAgICAgICAuLi5PcmRlckRldGFpbFxyXG4gICAgICAgICAgICAuLi5FcnJvclJlc3VsdFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7T1JERVJfREVUQUlMX0ZSQUdNRU5UfVxyXG4gICAgJHtFUlJPUl9SRVNVTFRfRlJBR01FTlR9XHJcbmA7XHJcbiJdfQ==