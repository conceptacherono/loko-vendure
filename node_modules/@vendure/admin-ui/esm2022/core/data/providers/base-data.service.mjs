import { Injectable } from '@angular/core';
import { simpleDeepClone } from '@vendure/common/lib/simple-deep-clone';
import { map } from 'rxjs/operators';
import { QueryResult } from '../query-result';
import { addCustomFields } from '../utils/add-custom-fields';
import { isEntityCreateOrUpdateMutation } from '../utils/is-entity-create-or-update-mutation';
import { removeReadonlyCustomFields } from '../utils/remove-readonly-custom-fields';
import { transformRelationCustomFieldInputs } from '../utils/transform-relation-custom-field-inputs';
import * as i0 from "@angular/core";
import * as i1 from "apollo-angular";
import * as i2 from "../server-config";
export class BaseDataService {
    constructor(apollo, serverConfigService) {
        this.apollo = apollo;
        this.serverConfigService = serverConfigService;
    }
    get customFields() {
        return this.serverConfigService.customFieldsMap;
    }
    /**
     * Performs a GraphQL watch query
     */
    query(query, variables, fetchPolicy = 'cache-and-network', options = {}) {
        const queryRef = this.apollo.watchQuery({
            query: addCustomFields(query, this.customFields, options.includeCustomFields),
            variables,
            fetchPolicy,
        });
        const queryResult = new QueryResult(queryRef, this.apollo, this.customFields);
        return queryResult;
    }
    /**
     * Performs a GraphQL mutation
     */
    mutate(mutation, variables, update, options = {}) {
        const withCustomFields = addCustomFields(mutation, this.customFields, options.includeCustomFields);
        const withoutReadonlyFields = this.prepareCustomFields(mutation, variables);
        return this.apollo
            .mutate({
            mutation: withCustomFields,
            variables: withoutReadonlyFields,
            update,
        })
            .pipe(map(result => result.data));
    }
    prepareCustomFields(mutation, variables) {
        const entity = isEntityCreateOrUpdateMutation(mutation);
        if (entity) {
            const customFieldConfig = this.customFields.get(entity);
            if (variables && customFieldConfig) {
                let variablesClone = simpleDeepClone(variables);
                variablesClone = removeReadonlyCustomFields(variablesClone, customFieldConfig);
                variablesClone = transformRelationCustomFieldInputs(variablesClone, customFieldConfig);
                return variablesClone;
            }
        }
        return variables;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: BaseDataService, deps: [{ token: i1.Apollo }, { token: i2.ServerConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: BaseDataService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: BaseDataService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.Apollo }, { type: i2.ServerConfigService }] });
//# sourceMappingURL=data:application/json;base64,