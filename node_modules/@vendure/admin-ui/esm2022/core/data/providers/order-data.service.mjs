import { ADD_ITEM_TO_DRAFT_ORDER, ADD_MANUAL_PAYMENT_TO_ORDER, ADD_NOTE_TO_ORDER, ADJUST_DRAFT_ORDER_LINE, APPLY_COUPON_CODE_TO_DRAFT_ORDER, CANCEL_ORDER, CANCEL_PAYMENT, CREATE_DRAFT_ORDER, CREATE_FULFILLMENT, DELETE_DRAFT_ORDER, DELETE_ORDER_NOTE, DRAFT_ORDER_ELIGIBLE_SHIPPING_METHODS, GET_ORDER, GET_ORDER_HISTORY, GET_ORDERS_LIST, MODIFY_ORDER, REFUND_ORDER, REMOVE_COUPON_CODE_FROM_DRAFT_ORDER, REMOVE_DRAFT_ORDER_LINE, SET_BILLING_ADDRESS_FOR_DRAFT_ORDER, SET_CUSTOMER_FOR_DRAFT_ORDER, SET_DRAFT_ORDER_SHIPPING_METHOD, SET_SHIPPING_ADDRESS_FOR_DRAFT_ORDER, SETTLE_PAYMENT, SETTLE_REFUND, TRANSITION_FULFILLMENT_TO_STATE, TRANSITION_ORDER_TO_STATE, TRANSITION_PAYMENT_TO_STATE, UNSET_BILLING_ADDRESS_FOR_DRAFT_ORDER, UNSET_SHIPPING_ADDRESS_FOR_DRAFT_ORDER, UPDATE_ORDER_CUSTOM_FIELDS, UPDATE_ORDER_NOTE, } from '../definitions/order-definitions';
export class OrderDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getOrders(options = { take: 10 }) {
        return this.baseDataService.query(GET_ORDERS_LIST, {
            options,
        });
    }
    getOrder(id) {
        return this.baseDataService.query(GET_ORDER, {
            id,
        });
    }
    getOrderHistory(id, options) {
        return this.baseDataService.query(GET_ORDER_HISTORY, {
            id,
            options,
        });
    }
    settlePayment(id) {
        return this.baseDataService.mutate(SETTLE_PAYMENT, {
            id,
        });
    }
    cancelPayment(id) {
        return this.baseDataService.mutate(CANCEL_PAYMENT, {
            id,
        });
    }
    transitionPaymentToState(id, state) {
        return this.baseDataService.mutate(TRANSITION_PAYMENT_TO_STATE, {
            id,
            state,
        });
    }
    createFulfillment(input) {
        return this.baseDataService.mutate(CREATE_FULFILLMENT, {
            input,
        });
    }
    transitionFulfillmentToState(id, state) {
        return this.baseDataService.mutate(TRANSITION_FULFILLMENT_TO_STATE, {
            id,
            state,
        });
    }
    cancelOrder(input) {
        return this.baseDataService.mutate(CANCEL_ORDER, {
            input,
        });
    }
    refundOrder(input) {
        return this.baseDataService.mutate(REFUND_ORDER, {
            input,
        });
    }
    settleRefund(input, orderId) {
        return this.baseDataService.mutate(SETTLE_REFUND, {
            input,
        });
    }
    addNoteToOrder(input) {
        return this.baseDataService.mutate(ADD_NOTE_TO_ORDER, {
            input,
        });
    }
    updateOrderNote(input) {
        return this.baseDataService.mutate(UPDATE_ORDER_NOTE, {
            input,
        });
    }
    deleteOrderNote(id) {
        return this.baseDataService.mutate(DELETE_ORDER_NOTE, {
            id,
        });
    }
    transitionToState(id, state) {
        return this.baseDataService.mutate(TRANSITION_ORDER_TO_STATE, {
            id,
            state,
        });
    }
    updateOrderCustomFields(input) {
        return this.baseDataService.mutate(UPDATE_ORDER_CUSTOM_FIELDS, {
            input,
        });
    }
    modifyOrder(input) {
        return this.baseDataService.mutate(MODIFY_ORDER, {
            input,
        });
    }
    addManualPaymentToOrder(input) {
        return this.baseDataService.mutate(ADD_MANUAL_PAYMENT_TO_ORDER, { input });
    }
    createDraftOrder() {
        return this.baseDataService.mutate(CREATE_DRAFT_ORDER);
    }
    deleteDraftOrder(orderId) {
        return this.baseDataService.mutate(DELETE_DRAFT_ORDER, { orderId });
    }
    addItemToDraftOrder(orderId, input) {
        return this.baseDataService.mutate(ADD_ITEM_TO_DRAFT_ORDER, { orderId, input });
    }
    adjustDraftOrderLine(orderId, input) {
        return this.baseDataService.mutate(ADJUST_DRAFT_ORDER_LINE, { orderId, input });
    }
    removeDraftOrderLine(orderId, orderLineId) {
        return this.baseDataService.mutate(REMOVE_DRAFT_ORDER_LINE, { orderId, orderLineId });
    }
    setCustomerForDraftOrder(orderId, { customerId, input }) {
        return this.baseDataService.mutate(SET_CUSTOMER_FOR_DRAFT_ORDER, { orderId, customerId, input });
    }
    setDraftOrderShippingAddress(orderId, input) {
        return this.baseDataService.mutate(SET_SHIPPING_ADDRESS_FOR_DRAFT_ORDER, { orderId, input });
    }
    setDraftOrderBillingAddress(orderId, input) {
        return this.baseDataService.mutate(SET_BILLING_ADDRESS_FOR_DRAFT_ORDER, { orderId, input });
    }
    unsetDraftOrderShippingAddress(orderId) {
        return this.baseDataService.mutate(UNSET_SHIPPING_ADDRESS_FOR_DRAFT_ORDER, { orderId });
    }
    unsetDraftOrderBillingAddress(orderId) {
        return this.baseDataService.mutate(UNSET_BILLING_ADDRESS_FOR_DRAFT_ORDER, { orderId });
    }
    applyCouponCodeToDraftOrder(orderId, couponCode) {
        return this.baseDataService.mutate(APPLY_COUPON_CODE_TO_DRAFT_ORDER, { orderId, couponCode });
    }
    removeCouponCodeFromDraftOrder(orderId, couponCode) {
        return this.baseDataService.mutate(REMOVE_COUPON_CODE_FROM_DRAFT_ORDER, { orderId, couponCode });
    }
    getDraftOrderEligibleShippingMethods(orderId) {
        return this.baseDataService.query(DRAFT_ORDER_ELIGIBLE_SHIPPING_METHODS, { orderId });
    }
    setDraftOrderShippingMethod(orderId, shippingMethodId) {
        return this.baseDataService.mutate(SET_DRAFT_ORDER_SHIPPING_METHOD, { orderId, shippingMethodId });
    }
}
//# sourceMappingURL=data:application/json;base64,