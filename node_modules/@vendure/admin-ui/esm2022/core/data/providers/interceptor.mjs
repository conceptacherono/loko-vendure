import { HttpErrorResponse, HttpResponse, } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { DEFAULT_AUTH_TOKEN_HEADER_KEY } from '@vendure/common/lib/shared-constants';
import { switchMap, tap } from 'rxjs/operators';
import { getAppConfig } from '../../app.config';
import { NotificationService } from '../../providers/notification/notification.service';
import * as i0 from "@angular/core";
import * as i1 from "./data.service";
import * as i2 from "../../providers/auth/auth.service";
import * as i3 from "@angular/router";
import * as i4 from "../../providers/local-storage/local-storage.service";
export const AUTH_REDIRECT_PARAM = 'redirectTo';
/**
 * The default interceptor examines all HTTP requests & responses and automatically updates the requesting state
 * and shows error notifications.
 */
export class DefaultInterceptor {
    constructor(dataService, injector, authService, router, localStorageService) {
        this.dataService = dataService;
        this.injector = injector;
        this.authService = authService;
        this.router = router;
        this.localStorageService = localStorageService;
        this.tokenMethod = 'cookie';
        this.tokenMethod = getAppConfig().tokenMethod;
        this.authTokenHeaderKey = getAppConfig().authTokenHeaderKey || DEFAULT_AUTH_TOKEN_HEADER_KEY;
    }
    intercept(req, next) {
        this.dataService.client.startRequest().subscribe();
        return this.dataService.client.uiState().single$.pipe(switchMap(({ uiState }) => {
            const request = req.clone({
                setParams: {
                    languageCode: uiState?.contentLanguage ?? '',
                },
            });
            return next.handle(request);
        }), tap(event => {
            if (event instanceof HttpResponse) {
                this.checkForAuthToken(event);
                this.notifyOnError(event);
                this.dataService.client.completeRequest().subscribe();
            }
        }, err => {
            if (err instanceof HttpErrorResponse) {
                this.notifyOnError(err);
                this.dataService.client.completeRequest().subscribe();
            }
            else {
                this.displayErrorNotification(err.message);
            }
        }));
    }
    notifyOnError(response) {
        if (response instanceof HttpErrorResponse) {
            if (response.status === 0) {
                const { apiHost, apiPort } = getAppConfig();
                this.displayErrorNotification(_(`error.could-not-connect-to-server`), {
                    url: `${apiHost}:${apiPort}`,
                });
            }
            else if (response.status === 503 && response.url?.endsWith('/health')) {
                this.displayErrorNotification(_(`error.health-check-failed`));
            }
            else {
                this.displayErrorNotification(this.extractErrorFromHttpResponse(response));
            }
        }
        else {
            // GraphQL errors still return 200 OK responses, but have the actual error message
            // inside the body of the response.
            const graphQLErrors = response.body.errors;
            if (graphQLErrors && Array.isArray(graphQLErrors)) {
                const firstCode = graphQLErrors[0]?.extensions?.code;
                if (firstCode === 'FORBIDDEN') {
                    this.authService.logOut().subscribe(() => {
                        const { loginUrl } = getAppConfig();
                        // If there is a `loginUrl` which is external to the AdminUI, redirect to it (with no query parameters)
                        if (loginUrl && !this.areUrlsOnSameOrigin(loginUrl, window.location.origin)) {
                            window.location.href = loginUrl;
                            return;
                        }
                        // Else, we build the login path from the login url if one is provided or fallback to `/login`
                        const loginPath = loginUrl ? this.getPathFromLoginUrl(loginUrl) : '/login';
                        if (!window.location.pathname.includes(loginPath)) {
                            const path = graphQLErrors[0].path.join(' > ');
                            this.displayErrorNotification(_(`error.403-forbidden`), { path });
                        }
                        // Navigate to the `loginPath` route by ensuring the query param in charge of the redirection is provided
                        this.router.navigate([loginPath], {
                            queryParams: {
                                [AUTH_REDIRECT_PARAM]: btoa(this.router.url),
                            },
                        });
                    });
                }
                else if (firstCode === 'CHANNEL_NOT_FOUND') {
                    const message = graphQLErrors.map(err => err.message).join('\n');
                    this.displayErrorNotification(message);
                    this.localStorageService.remove('activeChannelToken');
                }
                else {
                    const message = graphQLErrors.map(err => err.message).join('\n');
                    this.displayErrorNotification(message);
                }
            }
        }
    }
    extractErrorFromHttpResponse(response) {
        const errors = response.error.errors;
        if (Array.isArray(errors)) {
            return errors.map(e => e.message).join('\n');
        }
        else {
            return response.message;
        }
    }
    /**
     * We need to lazily inject the NotificationService since it depends on the I18nService which
     * eventually depends on the HttpClient (used to load messages from json files). If we were to
     * directly inject NotificationService into the constructor, we get a cyclic dependency.
     */
    displayErrorNotification(message, vars) {
        const notificationService = this.injector.get(NotificationService);
        notificationService.error(message, vars);
    }
    /**
     * If the server is configured to use the "bearer" tokenMethod, each response should be checked
     * for the existence of an auth token.
     */
    checkForAuthToken(response) {
        if (this.tokenMethod === 'bearer') {
            const authToken = response.headers.get(this.authTokenHeaderKey);
            if (authToken) {
                this.localStorageService.set('authToken', authToken);
            }
        }
    }
    /**
     * Determine if two urls are on the same origin.
     */
    areUrlsOnSameOrigin(urlA, urlB) {
        return new URL(urlA).origin === new URL(urlB).origin;
    }
    /**
     * If the provided `loginUrl` is on the same origin than the AdminUI, return the path
     * after the `/admin`.
     * Else, return the whole login url.
     */
    getPathFromLoginUrl(loginUrl) {
        if (!this.areUrlsOnSameOrigin(loginUrl, window.location.origin)) {
            return loginUrl;
        }
        return loginUrl.split('/admin')[1];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DefaultInterceptor, deps: [{ token: i1.DataService }, { token: i0.Injector }, { token: i2.AuthService }, { token: i3.Router }, { token: i4.LocalStorageService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DefaultInterceptor }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: DefaultInterceptor, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.DataService }, { type: i0.Injector }, { type: i2.AuthService }, { type: i3.Router }, { type: i4.LocalStorageService }] });
//# sourceMappingURL=data:application/json;base64,