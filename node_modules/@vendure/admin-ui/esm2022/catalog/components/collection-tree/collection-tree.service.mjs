import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Facilitates communication between the CollectionTreeComponent and child CollectionTreeNodeComponents
 * without introducing a cyclic dependency.
 */
export class CollectionTreeService {
    constructor() {
        this.allMoveListItems = [];
        this._rearrange$ = new Subject();
        this._delete$ = new Subject();
        this.rearrange$ = this._rearrange$.asObservable();
        this.delete$ = this._delete$.asObservable();
    }
    ngOnDestroy() {
        this._rearrange$.complete();
        this._delete$.complete();
    }
    setCollectionTree(tree) {
        this.collectionTree = tree;
    }
    resetMoveList() {
        this.allMoveListItems = [];
    }
    getMoveListItems(collection) {
        if (this.allMoveListItems.length === 0) {
            this.allMoveListItems = this.calculateAllMoveListItems();
        }
        return this.allMoveListItems.filter(item => item.id !== collection.id &&
            !item.ancestorIdPath.has(collection.id) &&
            item.id !== collection.parent?.id);
    }
    onDrop(event) {
        const item = event.item.data;
        const newParent = event.container.data;
        const newParentId = newParent.id;
        if (newParentId == null) {
            throw new Error(`Could not determine the ID of the root Collection`);
        }
        this._rearrange$.next({
            collectionId: item.id,
            parentId: newParentId,
            index: event.currentIndex,
        });
    }
    onMove(event) {
        this._rearrange$.next(event);
    }
    onDelete(id) {
        this._delete$.next(id);
    }
    calculateAllMoveListItems() {
        const visit = (node, parentPath, ancestorIdPath, output) => {
            const path = parentPath.concat(node.name);
            output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id, ancestorIdPath });
            node.children.forEach(child => visit(child, path, new Set([...ancestorIdPath, node.id]), output));
            return output;
        };
        return visit(this.collectionTree, [], new Set(), []);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CollectionTreeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CollectionTreeService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CollectionTreeService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi10cmVlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NhdGFsb2cvc3JjL2NvbXBvbmVudHMvY29sbGVjdGlvbi10cmVlL2NvbGxlY3Rpb24tdHJlZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFLM0M7OztHQUdHO0FBRUgsTUFBTSxPQUFPLHFCQUFxQjtJQVM5QjtRQVJRLHFCQUFnQixHQUFxRSxFQUFFLENBQUM7UUFFeEYsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBa0IsQ0FBQztRQUM1QyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVUsQ0FBQztRQU1yQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxJQUFpQztRQUMvQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztJQUMvQixDQUFDO0lBRUQsYUFBYTtRQUNULElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELGdCQUFnQixDQUFDLFVBQTZCO1FBQzFDLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNyQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7UUFDN0QsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FDL0IsSUFBSSxDQUFDLEVBQUUsQ0FDSCxJQUFJLENBQUMsRUFBRSxLQUFLLFVBQVUsQ0FBQyxFQUFFO1lBQ3pCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUN2QyxJQUFJLENBQUMsRUFBRSxLQUFLLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUN4QyxDQUFDO0lBQ04sQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFtRTtRQUN0RSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQXlCLENBQUM7UUFDbEQsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDdkMsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUNqQyxJQUFJLFdBQVcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7UUFDekUsQ0FBQztRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1lBQ2xCLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNyQixRQUFRLEVBQUUsV0FBVztZQUNyQixLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDNUIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFxQjtRQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsUUFBUSxDQUFDLEVBQVU7UUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRU8seUJBQXlCO1FBQzdCLE1BQU0sS0FBSyxHQUFHLENBQ1YsSUFBbUIsRUFDbkIsVUFBb0IsRUFDcEIsY0FBMkIsRUFDM0IsTUFBd0UsRUFDMUUsRUFBRTtZQUNBLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7WUFDeEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDMUIsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLENBQVMsQ0FBQyxHQUFHLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FDNUUsQ0FBQztZQUNGLE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxFQUFFLElBQUksR0FBRyxFQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQzs4R0E1RVEscUJBQXFCO2tIQUFyQixxQkFBcUI7OzJGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtEcmFnRHJvcCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9kcmFnLWRyb3AnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgUm9vdE5vZGUsIFRyZWVOb2RlIH0gZnJvbSAnLi9hcnJheS10by10cmVlJztcclxuaW1wb3J0IHsgQ29sbGVjdGlvblBhcnRpYWwsIFJlYXJyYW5nZUV2ZW50IH0gZnJvbSAnLi9jb2xsZWN0aW9uLXRyZWUudHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIEZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgQ29sbGVjdGlvblRyZWVDb21wb25lbnQgYW5kIGNoaWxkIENvbGxlY3Rpb25UcmVlTm9kZUNvbXBvbmVudHNcclxuICogd2l0aG91dCBpbnRyb2R1Y2luZyBhIGN5Y2xpYyBkZXBlbmRlbmN5LlxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvblRyZWVTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgYWxsTW92ZUxpc3RJdGVtczogQXJyYXk8eyBwYXRoOiBzdHJpbmc7IGlkOiBzdHJpbmc7IGFuY2VzdG9ySWRQYXRoOiBTZXQ8c3RyaW5nPiB9PiA9IFtdO1xyXG4gICAgcHJpdmF0ZSBjb2xsZWN0aW9uVHJlZTogUm9vdE5vZGU8Q29sbGVjdGlvblBhcnRpYWw+O1xyXG4gICAgcHJpdmF0ZSBfcmVhcnJhbmdlJCA9IG5ldyBTdWJqZWN0PFJlYXJyYW5nZUV2ZW50PigpO1xyXG4gICAgcHJpdmF0ZSBfZGVsZXRlJCA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcclxuXHJcbiAgICBwdWJsaWMgcmVhcnJhbmdlJDogT2JzZXJ2YWJsZTxSZWFycmFuZ2VFdmVudD47XHJcbiAgICBwdWJsaWMgZGVsZXRlJDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucmVhcnJhbmdlJCA9IHRoaXMuX3JlYXJyYW5nZSQuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICAgICAgdGhpcy5kZWxldGUkID0gdGhpcy5fZGVsZXRlJC5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLl9yZWFycmFuZ2UkLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgdGhpcy5fZGVsZXRlJC5jb21wbGV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbGxlY3Rpb25UcmVlKHRyZWU6IFJvb3ROb2RlPENvbGxlY3Rpb25QYXJ0aWFsPikge1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvblRyZWUgPSB0cmVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0TW92ZUxpc3QoKSB7XHJcbiAgICAgICAgdGhpcy5hbGxNb3ZlTGlzdEl0ZW1zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TW92ZUxpc3RJdGVtcyhjb2xsZWN0aW9uOiBDb2xsZWN0aW9uUGFydGlhbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmFsbE1vdmVMaXN0SXRlbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsTW92ZUxpc3RJdGVtcyA9IHRoaXMuY2FsY3VsYXRlQWxsTW92ZUxpc3RJdGVtcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5hbGxNb3ZlTGlzdEl0ZW1zLmZpbHRlcihcclxuICAgICAgICAgICAgaXRlbSA9PlxyXG4gICAgICAgICAgICAgICAgaXRlbS5pZCAhPT0gY29sbGVjdGlvbi5pZCAmJlxyXG4gICAgICAgICAgICAgICAgIWl0ZW0uYW5jZXN0b3JJZFBhdGguaGFzKGNvbGxlY3Rpb24uaWQpICYmXHJcbiAgICAgICAgICAgICAgICBpdGVtLmlkICE9PSBjb2xsZWN0aW9uLnBhcmVudD8uaWQsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkRyb3AoZXZlbnQ6IENka0RyYWdEcm9wPENvbGxlY3Rpb25QYXJ0aWFsIHwgUm9vdE5vZGU8Q29sbGVjdGlvblBhcnRpYWw+Pikge1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBldmVudC5pdGVtLmRhdGEgYXMgQ29sbGVjdGlvblBhcnRpYWw7XHJcbiAgICAgICAgY29uc3QgbmV3UGFyZW50ID0gZXZlbnQuY29udGFpbmVyLmRhdGE7XHJcbiAgICAgICAgY29uc3QgbmV3UGFyZW50SWQgPSBuZXdQYXJlbnQuaWQ7XHJcbiAgICAgICAgaWYgKG5ld1BhcmVudElkID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZGV0ZXJtaW5lIHRoZSBJRCBvZiB0aGUgcm9vdCBDb2xsZWN0aW9uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3JlYXJyYW5nZSQubmV4dCh7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogaXRlbS5pZCxcclxuICAgICAgICAgICAgcGFyZW50SWQ6IG5ld1BhcmVudElkLFxyXG4gICAgICAgICAgICBpbmRleDogZXZlbnQuY3VycmVudEluZGV4LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW92ZShldmVudDogUmVhcnJhbmdlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLl9yZWFycmFuZ2UkLm5leHQoZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGVsZXRlKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9kZWxldGUkLm5leHQoaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlQWxsTW92ZUxpc3RJdGVtcygpIHtcclxuICAgICAgICBjb25zdCB2aXNpdCA9IChcclxuICAgICAgICAgICAgbm9kZTogVHJlZU5vZGU8YW55PixcclxuICAgICAgICAgICAgcGFyZW50UGF0aDogc3RyaW5nW10sXHJcbiAgICAgICAgICAgIGFuY2VzdG9ySWRQYXRoOiBTZXQ8c3RyaW5nPixcclxuICAgICAgICAgICAgb3V0cHV0OiBBcnJheTx7IHBhdGg6IHN0cmluZzsgaWQ6IHN0cmluZzsgYW5jZXN0b3JJZFBhdGg6IFNldDxzdHJpbmc+IH0+LFxyXG4gICAgICAgICkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gcGFyZW50UGF0aC5jb25jYXQobm9kZS5uYW1lKTtcclxuICAgICAgICAgICAgb3V0cHV0LnB1c2goeyBwYXRoOiBwYXRoLnNsaWNlKDEpLmpvaW4oJyAvICcpIHx8ICdyb290JywgaWQ6IG5vZGUuaWQsIGFuY2VzdG9ySWRQYXRoIH0pO1xyXG4gICAgICAgICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT5cclxuICAgICAgICAgICAgICAgIHZpc2l0KGNoaWxkLCBwYXRoLCBuZXcgU2V0PHN0cmluZz4oWy4uLmFuY2VzdG9ySWRQYXRoLCBub2RlLmlkXSksIG91dHB1dCksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdmlzaXQodGhpcy5jb2xsZWN0aW9uVHJlZSwgW10sIG5ldyBTZXQ8c3RyaW5nPigpLCBbXSk7XHJcbiAgICB9XHJcbn1cclxuIl19