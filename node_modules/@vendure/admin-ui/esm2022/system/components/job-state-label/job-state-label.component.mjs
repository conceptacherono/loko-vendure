import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { JobState } from '@vendure/admin-ui/core';
import * as i0 from "@angular/core";
import * as i1 from "@clr/angular";
import * as i2 from "@angular/common";
import * as i3 from "@vendure/admin-ui/core";
export class JobStateLabelComponent {
    get iconShape() {
        switch (this.job.state) {
            case JobState.COMPLETED:
                return 'check-circle';
            case JobState.FAILED:
                return 'exclamation-circle';
            case JobState.CANCELLED:
                return 'ban';
            case JobState.PENDING:
            case JobState.RETRYING:
                return 'hourglass';
            case JobState.RUNNING:
                return 'sync';
        }
    }
    get colorType() {
        switch (this.job.state) {
            case JobState.COMPLETED:
                return 'success';
            case JobState.FAILED:
            case JobState.CANCELLED:
                return 'error';
            case JobState.PENDING:
            case JobState.RETRYING:
                return '';
            case JobState.RUNNING:
                return 'warning';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: JobStateLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: JobStateLabelComponent, selector: "vdr-job-state-label", inputs: { job: "job" }, ngImport: i0, template: "<vdr-chip [colorType]=\"colorType\">\r\n    <clr-icon [attr.shape]=\"iconShape\" class=\"mr1\"></clr-icon>\r\n    {{ job.state | titlecase }}\r\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\r\n        {{ (job.progress / 100) | percent }}\r\n    </span>\r\n</vdr-chip>\r\n", styles: [".progress{margin-inline-start:3px}clr-icon{min-width:12px}\n"], dependencies: [{ kind: "directive", type: i1.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "pipe", type: i2.PercentPipe, name: "percent" }, { kind: "pipe", type: i2.TitleCasePipe, name: "titlecase" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: JobStateLabelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-job-state-label', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-chip [colorType]=\"colorType\">\r\n    <clr-icon [attr.shape]=\"iconShape\" class=\"mr1\"></clr-icon>\r\n    {{ job.state | titlecase }}\r\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\r\n        {{ (job.progress / 100) | percent }}\r\n    </span>\r\n</vdr-chip>\r\n", styles: [".progress{margin-inline-start:3px}clr-icon{min-width:12px}\n"] }]
        }], propDecorators: { job: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9iLXN0YXRlLWxhYmVsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc3lzdGVtL3NyYy9jb21wb25lbnRzL2pvYi1zdGF0ZS1sYWJlbC9qb2Itc3RhdGUtbGFiZWwuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zeXN0ZW0vc3JjL2NvbXBvbmVudHMvam9iLXN0YXRlLWxhYmVsL2pvYi1zdGF0ZS1sYWJlbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQW1CLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7OztBQVFuRSxNQUFNLE9BQU8sc0JBQXNCO0lBSS9CLElBQUksU0FBUztRQUNULFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNyQixLQUFLLFFBQVEsQ0FBQyxTQUFTO2dCQUNuQixPQUFPLGNBQWMsQ0FBQztZQUMxQixLQUFLLFFBQVEsQ0FBQyxNQUFNO2dCQUNoQixPQUFPLG9CQUFvQixDQUFDO1lBQ2hDLEtBQUssUUFBUSxDQUFDLFNBQVM7Z0JBQ25CLE9BQU8sS0FBSyxDQUFDO1lBQ2pCLEtBQUssUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUN0QixLQUFLLFFBQVEsQ0FBQyxRQUFRO2dCQUNsQixPQUFPLFdBQVcsQ0FBQztZQUN2QixLQUFLLFFBQVEsQ0FBQyxPQUFPO2dCQUNqQixPQUFPLE1BQU0sQ0FBQztRQUN0QixDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUksU0FBUztRQUNULFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNyQixLQUFLLFFBQVEsQ0FBQyxTQUFTO2dCQUNuQixPQUFPLFNBQVMsQ0FBQztZQUNyQixLQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDckIsS0FBSyxRQUFRLENBQUMsU0FBUztnQkFDbkIsT0FBTyxPQUFPLENBQUM7WUFDbkIsS0FBSyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQ3RCLEtBQUssUUFBUSxDQUFDLFFBQVE7Z0JBQ2xCLE9BQU8sRUFBRSxDQUFDO1lBQ2QsS0FBSyxRQUFRLENBQUMsT0FBTztnQkFDakIsT0FBTyxTQUFTLENBQUM7UUFDekIsQ0FBQztJQUNMLENBQUM7OEdBakNRLHNCQUFzQjtrR0FBdEIsc0JBQXNCLG1GQ1RuQyxvU0FPQTs7MkZERWEsc0JBQXNCO2tCQU5sQyxTQUFTOytCQUNJLHFCQUFxQixtQkFHZCx1QkFBdUIsQ0FBQyxNQUFNOzhCQUkvQyxHQUFHO3NCQURGLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBKb2JJbmZvRnJhZ21lbnQsIEpvYlN0YXRlIH0gZnJvbSAnQHZlbmR1cmUvYWRtaW4tdWkvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLWpvYi1zdGF0ZS1sYWJlbCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vam9iLXN0YXRlLWxhYmVsLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2pvYi1zdGF0ZS1sYWJlbC5jb21wb25lbnQuc2NzcyddLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBKb2JTdGF0ZUxhYmVsQ29tcG9uZW50IHtcclxuICAgIEBJbnB1dCgpXHJcbiAgICBqb2I6IEpvYkluZm9GcmFnbWVudDtcclxuXHJcbiAgICBnZXQgaWNvblNoYXBlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmpvYi5zdGF0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIEpvYlN0YXRlLkNPTVBMRVRFRDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnY2hlY2stY2lyY2xlJztcclxuICAgICAgICAgICAgY2FzZSBKb2JTdGF0ZS5GQUlMRUQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2V4Y2xhbWF0aW9uLWNpcmNsZSc7XHJcbiAgICAgICAgICAgIGNhc2UgSm9iU3RhdGUuQ0FOQ0VMTEVEOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdiYW4nO1xyXG4gICAgICAgICAgICBjYXNlIEpvYlN0YXRlLlBFTkRJTkc6XHJcbiAgICAgICAgICAgIGNhc2UgSm9iU3RhdGUuUkVUUllJTkc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hvdXJnbGFzcyc7XHJcbiAgICAgICAgICAgIGNhc2UgSm9iU3RhdGUuUlVOTklORzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnc3luYyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjb2xvclR5cGUoKTogc3RyaW5nIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuam9iLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSm9iU3RhdGUuQ09NUExFVEVEOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdzdWNjZXNzJztcclxuICAgICAgICAgICAgY2FzZSBKb2JTdGF0ZS5GQUlMRUQ6XHJcbiAgICAgICAgICAgIGNhc2UgSm9iU3RhdGUuQ0FOQ0VMTEVEOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdlcnJvcic7XHJcbiAgICAgICAgICAgIGNhc2UgSm9iU3RhdGUuUEVORElORzpcclxuICAgICAgICAgICAgY2FzZSBKb2JTdGF0ZS5SRVRSWUlORzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgY2FzZSBKb2JTdGF0ZS5SVU5OSU5HOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICd3YXJuaW5nJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiPHZkci1jaGlwIFtjb2xvclR5cGVdPVwiY29sb3JUeXBlXCI+XHJcbiAgICA8Y2xyLWljb24gW2F0dHIuc2hhcGVdPVwiaWNvblNoYXBlXCIgY2xhc3M9XCJtcjFcIj48L2Nsci1pY29uPlxyXG4gICAge3sgam9iLnN0YXRlIHwgdGl0bGVjYXNlIH19XHJcbiAgICA8c3BhbiAqbmdJZj1cImpvYi5zdGF0ZSA9PT0gJ1JVTk5JTkcnXCIgY2xhc3M9XCJwcm9ncmVzc1wiPlxyXG4gICAgICAgIHt7IChqb2IucHJvZ3Jlc3MgLyAxMDApIHwgcGVyY2VudCB9fVxyXG4gICAgPC9zcGFuPlxyXG48L3Zkci1jaGlwPlxyXG4iXX0=