import { OnInit } from '@angular/core';
import { CancelOrderInput, Dialog, I18nService, OrderDetailFragment, RefundOrderInput } from '@vendure/admin-ui/core';
import { RefundablePayment } from '../../common/get-refundable-payments';
import * as i0 from "@angular/core";
type SelectionLine = {
    quantity: number;
    cancel: boolean;
};
export declare class RefundOrderDialogComponent implements OnInit, Dialog<{
    cancel: CancelOrderInput;
    refunds: RefundOrderInput[];
}> {
    private i18nService;
    order: OrderDetailFragment;
    resolveWith: (result?: {
        cancel: CancelOrderInput;
        refunds: RefundOrderInput[];
    }) => void;
    reason: string;
    lineQuantities: {
        [lineId: string]: SelectionLine;
    };
    refundablePayments: RefundablePayment[];
    refundShippingLineIds: string[];
    reasons: string[];
    manuallySetRefundTotal: boolean;
    refundTotal: number;
    constructor(i18nService: I18nService);
    get totalRefundableAmount(): number;
    get amountToRefundTotal(): number;
    lineCanBeRefundedOrCancelled(line: OrderDetailFragment['lines'][number]): boolean;
    ngOnInit(): void;
    updateRefundTotal(): void;
    toggleShippingRefund(lineId: string): void;
    onRefundQuantityChange(orderLineId: string, quantity: number): void;
    onPaymentSelected(payment: RefundablePayment, selected: boolean): void;
    isRefunding(): boolean;
    isCancelling(): boolean;
    canSubmit(): boolean;
    select(): void;
    cancel(): void;
    private getOrderLineInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<RefundOrderDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RefundOrderDialogComponent, "vdr-refund-order-dialog", never, {}, {}, never, never, false, never>;
}
export {};
