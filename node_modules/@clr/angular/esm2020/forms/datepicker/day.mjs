/*
 * Copyright (c) 2016-2025 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./providers/date-navigation.service";
import * as i2 from "../../utils/i18n/common-strings.service";
export class ClrDay {
    constructor(_dateNavigationService, commonStrings) {
        this._dateNavigationService = _dateNavigationService;
        this.commonStrings = commonStrings;
        this.onSelectDay = new EventEmitter();
    }
    /**
     * DayViewModel input which is used to build the Day View.
     */
    get dayView() {
        return this._dayView;
    }
    set dayView(day) {
        this._dayView = day;
    }
    get dayString() {
        return this.dayView.isSelected
            ? this.commonStrings.parse(this.commonStrings.keys.datepickerSelectedLabel, {
                FULL_DATE: this._dayView.dayModel.toDateString(),
            })
            : this._dayView.dayModel.toDateString();
    }
    get isRangeStartDay() {
        return (this._dateNavigationService.isRangePicker &&
            this.dayView?.dayModel?.toComparisonString() === this._dateNavigationService.selectedDay?.toComparisonString());
    }
    get isRangeEndDay() {
        return (this._dateNavigationService.isRangePicker &&
            this.dayView?.dayModel?.toComparisonString() === this._dateNavigationService.selectedEndDay?.toComparisonString());
    }
    /**
     * Calls the DateNavigationService to update the hovered day value of the calendar
     */
    hoverListener() {
        if (!this.dayView.isDisabled) {
            this._dateNavigationService.hoveredDay = this.dayView.dayModel;
        }
    }
    /**
     * Updates the focusedDay in the DateNavigationService when the ClrDay is focused.
     */
    onDayViewFocus() {
        this._dateNavigationService.focusedDay = this.dayView.dayModel;
    }
    /**
     * Updates the selectedDay when the ClrDay is selected and closes the datepicker popover.
     */
    selectDay() {
        if (this.dayView.isDisabled) {
            return;
        }
        const day = this.dayView.dayModel;
        this.onSelectDay.emit(day);
    }
    /**
     * Applicable only to date range picker
     * Compares whether the day is in between the start and end date range
     */
    isInRange() {
        if (!this._dateNavigationService.isRangePicker) {
            return false;
        }
        if (this._dateNavigationService.selectedDay && this._dateNavigationService.selectedEndDay) {
            return (this._dayView.dayModel?.isAfter(this._dateNavigationService.selectedDay) &&
                this._dayView.dayModel?.isBefore(this._dateNavigationService.selectedEndDay));
        }
        else if (this._dateNavigationService.selectedDay && !this._dateNavigationService.selectedEndDay) {
            return (this._dayView.dayModel?.isAfter(this._dateNavigationService.selectedDay) &&
                this._dayView.dayModel?.isBefore(this._dateNavigationService.hoveredDay));
        }
        else {
            return false;
        }
    }
}
ClrDay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrDay, deps: [{ token: i1.DateNavigationService }, { token: i2.ClrCommonStringsService }], target: i0.ɵɵFactoryTarget.Component });
ClrDay.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: ClrDay, selector: "clr-day", inputs: { dayView: ["clrDayView", "dayView"] }, outputs: { onSelectDay: "selectDay" }, host: { listeners: { "mouseenter": "hoverListener()" }, properties: { "class.day": "true" } }, ngImport: i0, template: `
    <button
      class="day-btn"
      type="button"
      [class.is-today]="dayView.isTodaysDate"
      [class.is-excluded]="dayView.isExcluded"
      [class.is-disabled]="dayView.isDisabled"
      [class.is-selected]="dayView.isSelected"
      [class.in-range]="isInRange()"
      [class.is-start-range]="isRangeStartDay"
      [class.is-end-range]="isRangeEndDay"
      [attr.tabindex]="dayView.tabIndex"
      (click)="selectDay()"
      (focus)="onDayViewFocus()"
      [attr.aria-current]="dayView.isTodaysDate ? 'date' : 'false'"
      [attr.aria-label]="dayString"
      [attr.aria-selected]="dayView.isSelected"
    >
      {{ dayView.dayModel.date }}
    </button>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrDay, decorators: [{
            type: Component,
            args: [{
                    selector: 'clr-day',
                    template: `
    <button
      class="day-btn"
      type="button"
      [class.is-today]="dayView.isTodaysDate"
      [class.is-excluded]="dayView.isExcluded"
      [class.is-disabled]="dayView.isDisabled"
      [class.is-selected]="dayView.isSelected"
      [class.in-range]="isInRange()"
      [class.is-start-range]="isRangeStartDay"
      [class.is-end-range]="isRangeEndDay"
      [attr.tabindex]="dayView.tabIndex"
      (click)="selectDay()"
      (focus)="onDayViewFocus()"
      [attr.aria-current]="dayView.isTodaysDate ? 'date' : 'false'"
      [attr.aria-label]="dayString"
      [attr.aria-selected]="dayView.isSelected"
    >
      {{ dayView.dayModel.date }}
    </button>
  `,
                    host: { '[class.day]': 'true' },
                }]
        }], ctorParameters: function () { return [{ type: i1.DateNavigationService }, { type: i2.ClrCommonStringsService }]; }, propDecorators: { onSelectDay: [{
                type: Output,
                args: ['selectDay']
            }], dayView: [{
                type: Input,
                args: ['clrDayView']
            }], hoverListener: [{
                type: HostListener,
                args: ['mouseenter']
            }] } });
//# sourceMappingURL=data:application/json;base64,