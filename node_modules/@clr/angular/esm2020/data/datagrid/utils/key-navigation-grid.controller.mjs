/*
 * Copyright (c) 2016-2025 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { Keys } from '../../../utils/enums/keys.enum';
import * as i0 from "@angular/core";
export function getTabableItems(el) {
    const tabableSelector = [
        'a[href]',
        'area[href]',
        'input:not([disabled])',
        'button:not([disabled])',
        'select:not([disabled])',
        'textarea:not([disabled])',
        'iframe',
        'object',
        'embed',
        '*[tabindex]:not([disabled])',
        '*[contenteditable=true]',
        '[role=button]:not([disabled])',
    ].join(',');
    return Array.from(el.querySelectorAll(tabableSelector));
}
export class KeyNavigationGridController {
    constructor(zone) {
        this.zone = zone;
        this.skipItemFocus = false;
        this.listenersAdded = false;
        this.destroy$ = new Subject();
        this._activeCell = null;
        this.config = {
            keyGridRows: '[role=row]:not(.datagrid-placeholder)',
            keyGridCells: '[role=gridcell]:not(.datagrid-hidden-column):not(.datagrid-placeholder-content), [role=columnheader]:not(.datagrid-hidden-column):not(.datagrid-placeholder-content), .datagrid-detail-caret',
            keyGrid: '[role=grid]',
        };
    }
    get grid() {
        return this.host?.querySelector(this.config.keyGrid);
    }
    get rows() {
        return this.host?.querySelectorAll(this.config.keyGridRows);
    }
    get cells() {
        return this.host?.querySelectorAll(this.config.keyGridCells);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    addListeners() {
        if (this.listenersAdded) {
            return;
        }
        this.zone.runOutsideAngular(() => {
            fromEvent(this.grid, 'mousedown')
                .pipe(takeUntil(this.destroy$))
                .subscribe((e) => {
                // preserve right click for context menus & keyboard mouse control https://apple.stackexchange.com/questions/32715/how-do-i-open-the-context-menu-from-a-mac-keyboard
                if (e.buttons === 1 && !e.ctrlKey) {
                    const activeCell = this.cells
                        ? Array.from(this.cells).find(c => c === e.target || c === e.target.closest(this.config.keyGridCells))
                        : null;
                    if (activeCell) {
                        this.setActiveCell(activeCell);
                    }
                }
            });
            fromEvent(this.grid, 'wheel')
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                this.removeActiveCell();
            });
            fromEvent(this.grid, 'focusout')
                .pipe(debounceTime(0), takeUntil(this.destroy$))
                .subscribe(() => {
                if (this.grid.contains(document.activeElement)) {
                    return;
                }
                this.removeActiveCell();
            });
            fromEvent(this.grid, 'keydown')
                .pipe(takeUntil(this.destroy$))
                .subscribe((e) => {
                // Skip column resize events
                if (e.target.classList.contains('drag-handle') &&
                    (e.key === Keys.ArrowLeft || e.key === Keys.ArrowRight)) {
                    return;
                }
                if (e.key === Keys.ArrowUp ||
                    e.key === Keys.ArrowDown ||
                    e.key === Keys.ArrowLeft ||
                    e.key === Keys.ArrowRight ||
                    e.key === Keys.End ||
                    e.key === Keys.Home ||
                    e.key === Keys.PageUp ||
                    e.key === Keys.PageDown) {
                    const { x, y } = this.getNextItemCoordinate(e);
                    const activeItem = this.rows
                        ? Array.from(this.rows[y].querySelectorAll(this.config.keyGridCells))[x]
                        : null;
                    if (activeItem) {
                        this.setActiveCell(activeItem);
                    }
                    e.preventDefault();
                }
            });
        });
        this.listenersAdded = true;
    }
    initializeKeyGrid(host) {
        this.host = host;
        this.addListeners();
        this.resetKeyGrid();
    }
    resetKeyGrid() {
        this.cells?.forEach((i) => i.setAttribute('tabindex', '-1'));
        const firstCell = this.cells ? this.cells[0] : null;
        firstCell?.setAttribute('tabindex', '0');
    }
    removeActiveCell() {
        this._activeCell = null;
    }
    getActiveCell() {
        return this._activeCell;
    }
    setActiveCell(activeCell) {
        const prior = this.cells ? Array.from(this.cells).find(c => c.getAttribute('tabindex') === '0') : null;
        if (prior) {
            prior.setAttribute('tabindex', '-1');
        }
        activeCell.setAttribute('tabindex', '0');
        this._activeCell = activeCell;
        const items = getTabableItems(activeCell);
        const item = activeCell.getAttribute('role') !== 'columnheader' && items[0] ? items[0] : activeCell;
        if (!this.skipItemFocus) {
            item.focus();
        }
    }
    getNextItemCoordinate(e) {
        let currentCell = this.cells ? Array.from(this.cells).find(i => i.getAttribute('tabindex') === '0') : null;
        if (e.key === Keys.Tab) {
            currentCell = document.activeElement;
        }
        const currentRow = this.rows && currentCell ? Array.from(this.rows).find(r => r.contains(currentCell)) : null;
        const numOfRows = this.rows ? this.rows.length - 1 : 0;
        const numOfColumns = this.cells ? Math.floor(this.cells.length / this.rows.length - 1) : 0;
        let x = currentRow && currentCell
            ? Array.from(currentRow.querySelectorAll(this.config.keyGridCells)).indexOf(currentCell)
            : 0;
        let y = currentRow && currentCell && this.rows ? Array.from(this.rows).indexOf(currentRow) : 0;
        const dir = this.host.dir;
        const inlineStart = dir === 'rtl' ? Keys.ArrowRight : Keys.ArrowLeft;
        const inlineEnd = dir === 'rtl' ? Keys.ArrowLeft : Keys.ArrowRight;
        const itemsPerPage = Math.floor(this.host?.querySelector('.datagrid').clientHeight / this.rows[0].clientHeight) - 1 || 0;
        if (e.key === Keys.ArrowUp && y !== 0) {
            y = y - 1;
        }
        else if (e.key === Keys.ArrowDown && y < numOfRows) {
            y = y + 1;
        }
        else if (e.key === inlineStart && x !== 0) {
            x = x - 1;
        }
        else if (e.key === inlineEnd && x < numOfColumns) {
            x = x + 1;
        }
        else if (e.key === Keys.End) {
            x = numOfColumns;
            if (e.ctrlKey) {
                y = numOfRows;
            }
        }
        else if (e.key === Keys.Home) {
            x = 0;
            if (e.ctrlKey) {
                y = 0;
            }
        }
        else if (e.key === Keys.PageUp) {
            y = y - itemsPerPage > 0 ? y - itemsPerPage + 1 : 1;
        }
        else if (e.key === Keys.PageDown) {
            y = y + itemsPerPage < numOfRows ? y + itemsPerPage : numOfRows;
        }
        return { x, y };
    }
}
KeyNavigationGridController.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: KeyNavigationGridController, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
KeyNavigationGridController.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: KeyNavigationGridController });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: KeyNavigationGridController, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,